<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>9.1 TCP 네트워크 프로그램 </title>
<meta name="generator" content="Namo WebEditor v5.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<P>&nbsp;<P>
<IMG SRC="file:///C|/지빠귀/FYXIV325.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.1   TCP </FONT><FONT FACE="바탕">네트워크</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP 통신은 가장 많이 이용하는 통신 방식으로 &quot;양방향의 스트림 통신을 제공하는, 신뢰성 있는 연결 지향형 통신방식&quot;을 말하며, 양방향은 &quot;클라이언트와 서버가 동시에 존재해야만 통신이 이루어짐&quot;을 의미하고, 신뢰성은 &quot;양단에서 데이터를 주고받을 때 데이터의 손실없이 정확히 주고받을 수 있음&quot;을 의미한다. 연결 지향형은 &quot;클라이언트와 서버가 상호 연결되야 비로소 통신이 이루어짐&quot;을 나타내는 말이다. 
</FONT><P><FONT FACE="바탕">TCP 통신을 이해하기 위한 예로, 전화연결이 있다. 누군가에게 전화를 걸려면 상대가 있어야 하고(양방향이 존재), 상대방이 전화를 받아야 말을 한다(연결이 되면 정보교환이 이루어짐). 그리고 상대방의 말을 잘 못 들었을 때, 다시 말하라고 요청하여 정확한 내용을 다시 듣고자 한다. 이런 면에서 TCP 통신은 전화통신과 매우 유사하다.</FONT>
<P><FONT FACE="바탕">TCP/IP 소켓 연결은 java.net 패키지의 클래스를 사용하여 구현한다.</FONT>
<P><FONT FACE="바탕">다음 그림은 서버와 클라이언트에서 어떤 일이 일어나는 지를 보여주는 예이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV326.GIF" BORDER=0 WIDTH=503 HEIGHT=177 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 그림에서 서버는 java.net 패키지의 ServerSocket클래스를 이용하여 포트 번호를 할당한다. 클라이언트가 소켓객체를 생성하여 연결을 요청하면 서버는 accept() 메소드를 사용하여 소켓을 열어주고, 클라이언트는 서버주소의 포트번호로 연결한다.</FONT>
<P><FONT FACE="바탕">서버와 클라이언트의 프로세스가 정보를 교환할 때 스트림모델을 사용하는데, 이 때 소켓에는 두 개의 스트림 즉, 입력스트림(InputStream)과 출력스트림(OutputStream)이 들어 있다. 임의의 프로세스가 다른 프로세스에게 데이터를 보내려면 소켓과 연관된 출력스트림에 기록하면 된다. 상대측 프로세서가 데이터를 읽을 때도 소켓과 연관된 입력 스트림을 읽기만하면 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.1.1 TCP </FONT><FONT FACE="바탕">서버</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP/IP 서버 응용 프로그램은 ServerSocket과 Socket 네트워크 클래스를 이용한다. ServerSocket클래스는 서버를 설정하는 일을 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 통신에 필요한 서버의 역할을 작성한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SimpleServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class SimpleServer {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<B><FONT FACE="Courier New">ServerSocket serverSocket = null</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">serverSocket = new ServerSocket(5432)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SimpleServer.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">while (true) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">클라이언트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대기중</FONT><FONT FACE="Courier New">...&quot;);</FONT>
<P>				<B><FONT FACE="Courier New">Socket newSocket = serverSocket.accept()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">클라이언트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>				<FONT FACE="Courier New">OutputStream os = </FONT><B><FONT FACE="Courier New">newSocket.getOutputStream()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<FONT FACE="Courier New">DataOutputStream dos = 					new DataOutputStream(os);</FONT>
<P>				<FONT FACE="Courier New">dos.</FONT><B><FONT FACE="Courier New">writeUTF</FONT></B><FONT FACE="Courier New">(&quot;Hello Net World!&quot;);</FONT>
<P>				<B><FONT FACE="Courier New">dos.close()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<B><FONT FACE="Courier New">newSocket.close()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : 소켓을 선언한다(ServerSocket). 앞에서 언급했듯이 자바에서 통신을 하려면 소켓을 만들어야 하는데 이런 통식 방식을 소켓통신이라고 한다. 
</FONT><P><FONT FACE="바탕">13 : 소켓을 선언했는데 선언한 소켓의 이름이 다르다. 이렇게 서버에서 다른 두개의 소켓을 선언한 이유를 알아보기 위해 다음 그림을 참고로 설명하기로 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV327.GIF" BORDER=0 WIDTH=488 HEIGHT=172 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">서버는 동시에 여러 클라이언트를 수용할 수 있어야 한다. 따라서 앞의 그림처럼 여러 클라이언트가 서버에 접속하고 이를 처리할 있도록 ServerSocket를 둔다. 이것은 일종의 Listener역할을 한다.(접수창구정도로 이해하면 된다.) 
</FONT><BR>
<P>  <FONT FACE="바탕">① 부분 : ServerSocket은 클라이언트의 접속을 기다리고 있고 클라이언트는 ServerSocket으로 접속을 시도한다. 
</FONT><P>  <FONT FACE="바탕">② 부분 : ServerSocket과 클라이언트 Socket의 접속이 이루어지면, ServerSocket은 새로운 Socket을 생성해서 클라이언트의 요청을 그쪽으로 돌린다. 그리고 나서 ServerSocket은 다른 클라이언트의 요청을 기다린다. 
</FONT><BR>
<P><FONT FACE="바탕">이러한 방식을 이용하기 때문에 서버에서는 여러 클라이언트의 요청을 처리할 수 있는 것이다. 15번째 줄에서 ServerSocket을 만들고, ServerSocket생성자의 인자는 포트번호를 준다. 즉, &quot;서버가 5432번 포트를 열고 클라이언트의 접속을 기다린다.&quot;</FONT>
<BR>
<P><FONT FACE="바탕">11 : while 문이 무한 반복을 하는데, 이는 서버 프로그램을 계속 수행시키겠다는 의미이고, 
</FONT><P><FONT FACE="바탕">13 : serverSocket.accept()를 호출했는데, 클라이언트가 접속할 때까지 프로그램을 멈추겠다는 의도이다. 이렇게 프로그램을 잠시 멈추는 것을 block 혹은 blocking이라한다. 이때 서버는 클라이언트의 접속을 실제로 기다린다. 클라이언트가 접속하게 되면, 앞의 그림에서 설명한 것처럼 새로운 소켓이 생성되어 newSocket이라는 reference 변수에 저장된다. 
</FONT><P><FONT FACE="바탕">14 : 화면에 누군가가 접속했다는 내용을 출력하고, 
</FONT><P><FONT FACE="바탕">15 : 소켓의 OutputStream을 얻어낸다. 
</FONT><P><FONT FACE="바탕">16 : 필터스트림인 DataOutputStream을 생성하고, 
</FONT><P><FONT FACE="바탕">17 : DataOutpuStream의 writeUTF() 메소드를 호출해 &quot;Hello Net world!&quot;라는 문자열을 저장한다. 
</FONT><BR>
<P><FONT FACE="바탕">이렇게 저장한 문자열은 다음그림의 경로를 따라 클라이언트로 전송된다. 
</FONT><P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV328.GIF" BORDER=0 WIDTH=607 HEIGHT=234 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">18 : 서버는 클라이언트가 접속한 소켓을 일방적으로 끊는다.</FONT>
<P> 
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.1.2 TCP </FONT><FONT FACE="바탕">클라이언트</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클라이언트 프로그램은 위의 서버처럼 복잡하지 않다. 그리고 서버에 접속하면 문자열이 전송된다는 사실을 기억하고 프로그래밍 해야 한다. (이를 프로토콜이라고 하며 일종의 서버와 클라이언트간의 통신규약 즉, 약속을 말한다.)</FONT>
<P><FONT FACE="바탕">다음 프로그램은 통신에 필요한 클라이언트의 역할을 작성한 예이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SimpleClient.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class SimpleClient {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">Socket newSocket = new Socket(&quot;127.0.0.1&quot;, 5432);</FONT></B>
<P>			<FONT FACE="Courier New">InputStream is = </FONT><B><FONT FACE="Courier New">newSocket.getInputStream()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>			<FONT FACE="Courier New">DataInputStream dis = new DataInputStream(is);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(</FONT><B><FONT FACE="Courier New">dis.readUTF()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>			<FONT FACE="Courier New">dis.close();</FONT>
<P>			<B><FONT FACE="Courier New">newSocket.close();</FONT></B>
<P>		<FONT FACE="Courier New">} catch (ConnectException connExc) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">서버연결</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실패</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6 : 클라이언트도 소켓을 생성해야하므로 Socket객체를 만들었다. 이때 생성자의 인자로 서버의 IP 주소와 포트번호를 주고있다. 127.0.0.1은 loopback 주소를 말하는데 자기 컴퓨터의 IP 주소를 가리킬 때 사용한다(이렇게 지정한 이유는 자기 컴퓨터에서 수행되기 때문이다.). 포트번호 5432를 기술한 이유는 서버에서 그 포트를 열어놓았기 때문이다. 만약 다른 포트로 접속하면 접속되지 않는다. 이 부분이 실행되면 바로 서버에 접속된다. 서버에 접속했기 때문에 접속과 동시에 서버는 &quot;Hello Net World&quot; 문자열을 클라이언트 소켓으로 보낸다. 즉, 접속하는 순간 서버는 문자열을 보내고 클라이언트는 이 문자열을 소켓에서 읽기만 하면 된다. 
</FONT><P><FONT FACE="바탕">7 : 소켓에서 InputStream을 얻고, DataInputStream을 통해 문자열을 읽는다.</FONT>
<P><FONT FACE="바탕">9 : readUTF() 메소드를 통해 문자열을 읽어들여 화면에 출력한다.</FONT>
<BR>
<P><FONT FACE="바탕">앞의 예제 프로그램을 실행시키려면 도스상태로 나가서 서버용 프로그램을 실행시킨 다음 도스창을 열어 클라이언트를 실행하면 결과를 볼 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> SimpleServer</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> SimpleClient</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV329.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.2   UDP </FONT><FONT FACE="바탕">네트워크</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP/IP가 연결 중심의 프로토콜이라면 UDP(User Datagram Protocol) 통신방식은 &quot;비 신뢰적, 비 연결지향형 통신&quot;이라고 할 수 있다. TCP 통신과는 달리 우편 엽서와 유사하다. TCP에서는 전화를 사용하는 것처럼 메시지를 순서대로 보내고 받을 수 있지만 UDP는 보낸 순서와 받는 순서가 다를 수 있다. 또 상대방의 주소가 잘못되면 데이터가 잘못 전달되거나 아예 데이터를 읽지 못할 수도 있다.</FONT>
<P><FONT FACE="바탕">UDP는 DatagramSocket과 DatagramPacket이라는 두 개의 클래스를 지원한다. 패킷은 송신자의 정보와 메시지길이, 메시지 등으로 구성되는 독립적인 메시지 단위이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.2.1 DatagramPacket</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">DatagramPacket에는 다음 네 가지의 생성자가 있는데, 2개는 데이터를 수신하는데 사용하고 나머지 2개는 데이터를 보내는데 사용된다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> </FONT></SPAN></FONT><FONT FACE="바탕">DatagramPacket(byte[] buf, int length)</FONT>
<P>   <FONT FACE="바탕">DatagramPacket(byte[] buf, int offset, int length) 
</FONT><P><FONT FACE="바탕">- UDP 패킷을 수신할 수 있도록 바이트 배열을 설정한다. 생성자로 사용되는 바이트 배열은 비워두고, 읽을 바이트의 크기를 설정한다. 이때 배열의 크기보다 작게 지정한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> </FONT></SPAN></FONT><FONT FACE="바탕">DatagramPacket(byte[] buf, int length, InetAddress address, int port) 
</FONT><P>   <FONT FACE="바탕">DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port)</FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 전송할 수 있도록 UDP 패킷을 설정하는 데 사용된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.2.2 DatagramSocket</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">DatagramSocket은 UDP 패킷을 읽고 쓰는데 사용된다. 이 클래스에는 연결할 포트와 인터넷 주소를 지정하는데 사용하는 세 개의 생성자를 가지고있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> DatagramSocket() 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 로컬 호스트에서 이용할 수 있는 포트로 연결한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> DatagramSocket(int port) 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 로컬 호스트에서 지정된 포트로 연결한다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> DatagramSocket(int port, InetAddress laddr) 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 지정된 주소의 지정된 포트 번호로 연결한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 UDP방식을 이용하여 메신저 프로그램을 만든 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=872>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Messenger.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*; </FONT>
<P><FONT FACE="Courier New">import java.awt.event.*; </FONT>
<P><FONT FACE="Courier New">import java.io.*; </FONT>
<P><FONT FACE="Courier New">import java.net.*; 
</FONT><BR>
<P><FONT FACE="Courier New">public class Messenger implements Runnable, ActionListener { 
</FONT><BR>
<P>	<FONT FACE="Courier New">private Frame f; </FONT>
<P>	<FONT FACE="Courier New">private TextArea outputArea;</FONT>
<P>	<FONT FACE="Courier New">private TextField addressField, inputField;</FONT>
<BR>
<P>	<FONT FACE="Courier New">private DatagramSocket server, client; </FONT>
<P>	<FONT FACE="Courier New">private DatagramPacket sinData, soutData; 
</FONT><BR>
<P>	<FONT FACE="Courier New">private byte[] data = new byte[500]; 
</FONT><BR>
<P>	<FONT FACE="Courier New">public Messenger() { </FONT>
<P>		<FONT FACE="Courier New">try { </FONT>
<P>			<FONT FACE="Courier New">server = new DatagramSocket(8000); </FONT>
<P>			<FONT FACE="Courier New">client = new DatagramSocket(7000, InetAddress.getLocalHost());</FONT>
<P>		<FONT FACE="Courier New">}catch(IOException e) { </FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace(); </FONT>
<P>		<FONT FACE="Courier New">} </FONT>
<P>	<FONT FACE="Courier New">} //end of constructor</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) { </FONT>
<P>		<FONT FACE="Courier New">Messenger m = new Messenger(); </FONT>
<P>		<FONT FACE="Courier New">m.go(); </FONT>
<P>		<FONT FACE="Courier New">Thread t = new Thread(m); </FONT>
<P>		<FONT FACE="Courier New">t.start(); </FONT>
<P>	<FONT FACE="Courier New">} //end of main</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void go() { </FONT>
<P>		<FONT FACE="Courier New">try { </FONT>
<P>			<FONT FACE="Courier New">f = new Frame(InetAddress.getLocalHost().getHostAddress()); </FONT>
<P>		<FONT FACE="Courier New">}catch(UnknownHostException e) { </FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1005>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">Messenger.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.addWindowListener(new WindowAdapter() { </FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) { </FONT>
<P>				<FONT FACE="Courier New">System.exit(0); </FONT>
<P>			<FONT FACE="Courier New">} </FONT>
<P>		<FONT FACE="Courier New">}); 
</FONT><BR>
<P>		<FONT FACE="Courier New">outputArea = new TextArea(); </FONT>
<P>		<FONT FACE="Courier New">outputArea.setEditable(false);</FONT>
<BR>
<P>		<FONT FACE="Courier New">addressField = new TextField();</FONT>
<P>		<FONT FACE="Courier New">inputField = new TextField();</FONT>
<BR>
<P>		<FONT FACE="Courier New">inputField.addActionListener(this); 
</FONT><BR>
<P>		<FONT FACE="Courier New">Panel p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">p1.add(new Label(&quot;Address&quot;), BorderLayout.WEST);</FONT>
<P>		<FONT FACE="Courier New">p1.add(addressField, BorderLayout.CENTER);</FONT>
<BR>
<BR>
<BR>
<P>		<FONT FACE="Courier New">Panel p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">p2.add(new Label(&quot;Message&quot;), BorderLayout.WEST);</FONT>
<P>		<FONT FACE="Courier New">p2.add(inputField, BorderLayout.CENTER);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(p1, BorderLayout.NORTH);</FONT>
<P>		<FONT FACE="Courier New">f.add(outputArea, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">f.add(p2, BorderLayout.SOUTH);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300,200); </FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true); </FONT>
<P>	<FONT FACE="Courier New">} //end of go</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) { </FONT>
<P>		<FONT FACE="Courier New">String mssg = inputField.getText(); </FONT>
<P>		<FONT FACE="Courier New">String ip = addressField.getText();</FONT>
<BR>
<P>		<FONT FACE="Courier New">outputArea.append(&quot;&gt;&gt; &quot; + mssg+&quot;\n&quot;); 
</FONT><BR>
<P>		<FONT FACE="Courier New">InetAddress inet = null; </FONT>
<P>		<FONT FACE="Courier New">soutData = null; 
</FONT><BR>
<P>		<FONT FACE="Courier New">try { </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=916>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">Messenger.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<BR>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT>
<P><FONT FACE="Courier New">100:</FONT>
<P><FONT FACE="Courier New">101:</FONT>
<P><FONT FACE="Courier New">102:</FONT>
<P><FONT FACE="Courier New">103:</FONT>
<P><FONT FACE="Courier New">104:</FONT>
<P><FONT FACE="Courier New">105:</FONT>
<P><FONT FACE="Courier New">106:</FONT>
<P><FONT FACE="Courier New">107:</FONT>
<P><FONT FACE="Courier New">108:</FONT>
<P><FONT FACE="Courier New">109:</FONT>
<P><FONT FACE="Courier New">110:</FONT>
<P><FONT FACE="Courier New">111:</FONT>
<P><FONT FACE="Courier New">112:</FONT>
<P><FONT FACE="Courier New">113:</FONT>
<P><FONT FACE="Courier New">114:</FONT>
<P><FONT FACE="Courier New">115:</FONT>
<P><FONT FACE="Courier New">116:</FONT>
<P><FONT FACE="Courier New">117:</FONT>
<P><FONT FACE="Courier New">118:</FONT>
<P><FONT FACE="Courier New">119:</FONT>
<P><FONT FACE="Courier New">120:</FONT>
<P><FONT FACE="Courier New">121:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">inet = InetAddress.getByName(ip);</FONT>
<BR>
<P>			<FONT FACE="Courier New">soutData = new DatagramPacket(mssg.getBytes(), mssg.getBytes().length, inet, 8000); 
</FONT><BR>
<P>			<FONT FACE="Courier New">client.send(soutData); </FONT>
<P>		<FONT FACE="Courier New">} catch(Exception ex) { </FONT>
<P>			<FONT FACE="Courier New">ex.printStackTrace(); </FONT>
<P>		<FONT FACE="Courier New">} 
</FONT><BR>
<P>		<FONT FACE="Courier New">inputField.setText(&quot;&quot;); 
</FONT><BR>
<P>		<FONT FACE="Courier New">if(ip==null) { </FONT>
<P>			<FONT FACE="Courier New">try { </FONT>
<P>				<FONT FACE="Courier New">ip = InetAddress.getLocalHost().getHostName(); </FONT>
<P>			<FONT FACE="Courier New">}catch(UnknownHostException ex) { </FONT>
<P>				<FONT FACE="Courier New">ex.printStackTrace(); </FONT>
<P>			<FONT FACE="Courier New">} </FONT>
<P>		<FONT FACE="Courier New">} </FONT>
<P>	<FONT FACE="Courier New">} //end of actionPerformed</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void run() { </FONT>
<P>		<FONT FACE="Courier New">while(true) { </FONT>
<P>			<FONT FACE="Courier New">sinData = new DatagramPacket(data, data.length); 
</FONT><BR>
<P>			<FONT FACE="Courier New">try { </FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;8000</FONT><FONT FACE="바탕">번</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">포트로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대기중</FONT><FONT FACE="Courier New">...&quot;); </FONT>
<P>				<FONT FACE="Courier New">server.receive(sinData); </FONT>
<P>			<FONT FACE="Courier New">}catch(IOException e) { </FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace(); </FONT>
<P>			<FONT FACE="Courier New">} 
</FONT><BR>
<P>			<FONT FACE="Courier New">String addr = sinData.getAddress().getHostName(); </FONT>
<P>			<FONT FACE="Courier New">String rsvData = new String(sinData.getData(), 0, sinData.getLength()); 
</FONT><BR>
<P>			<FONT FACE="Courier New">outputArea.append(&quot;[&quot; + addr + &quot;]&quot; + rsvData + &quot;\n&quot;); </FONT>
<P>		<FONT FACE="Courier New">} //end of while</FONT>
<P>	<FONT FACE="Courier New">} //end of run</FONT>
<BR>
<P><FONT FACE="Courier New">} //end of class</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV330.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.3   TCP </FONT><FONT FACE="바탕">채팅</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">Ⅰ</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP를 이용하여 채팅 프로그램을 만들어 보자. 먼저 채팅 프로그램의 원리를 이해하기 위해 다음의 그림을 설명하기로 한다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV331.GIF" BORDER=0 WIDTH=609 HEIGHT=310 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">약간 복잡한 그림으로 이 내용을 프로그램으로 옮겨도 상당히 복잡하기 때문에 그림을 충분히 이해를 한 후 프로그램을 이해하기 바란다. 
</FONT><BR>
<P><FONT FACE="바탕">Ⱑ부분인 ChatServer는 대화방(chatting room)을 관리할 수 있는 구조다. (물론 이 예제에서는 단순하게 대기실 한군데서 chatting을 하게 했다. 이 코드를 더 발전시키면 방을 만들 수 있다.) RoomManager라는 클래스가 방을 관리하는데 이를 위해 Vector 클래스를 사용하였다. 그 다음 Room이라는 클래스는 대화방에 속해 있는 대화자를 관리하는데, 역시 Vector 클래스를 통해 관리한다.</FONT>
<BR>
<P><FONT FACE="바탕">Ⱓ 부분의 Chatter 클래스는 대화자가 접속하면 인스턴스가 서버에 자동으로 생성되며 접속된 대화자의 모든 정보를 관리한다. Chatter 클래스에는 소켓을 가지고 있는데, 실제 ChatterClient(Ⱒ 부분)의 소켓과 연결되어 있다. ChatterClient가 메시지를 보내면, Chatter 클래스의 소켓에 전달되고, 이를 기다리던 쓰레드(① 부분)는 데이터를 읽어서 대화방에 있는 다른 대화자에게 메시지를 전달하게 되는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">Ⱒ 부분의 ChatClient는 2개의 쓰레드가 있는데, 먼저 ②부분의 쓰레드는 대화자로부터 메시지를 입력받는다. 그런데 키보드에서 입력받고 있는 동안 다른 대화자가 메시지를 보내면 쓰레드를 이용해서 해결해야 한다. 따라서 입력하는 동안 출력을 담당하는 쓰레드(③ 부분)가 소켓을 감시하면 해결할 수 있다. 소켓에 메시지가 도착하면 이를 화면에 출력하는데 이처럼 쓰레드를 이용하지 않으면 글을 쓰면서 글을 읽는 동시작업을 할 수 없다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.3.1 ChatServer.java</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">어려운 코드는 아니지만, 그렇게 쉬운 부분도 아니다. 먼저 ChatServer부터 프로그램을 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import  java.io.*;</FONT>
<P><FONT FACE="Courier New">import  java.net.*;</FONT>
<P><FONT FACE="Courier New">import  java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatServer {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String [] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">if (args.length &lt; 1 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java ChatServer </FONT><I><FONT FACE="Courier New">port#</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		
<P>		<FONT FACE="Courier New">System.out.println(&quot;Chatting Server Starting.&quot;);</FONT>
<P>		<FONT FACE="Courier New">int portNo = Integer.parseInt(args[0]);</FONT>
<BR>
<P>		<FONT FACE="Courier New">ChatManager cm= new ChatManager(portNo);</FONT>
<BR>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 ChatServer프로그램이 전부는 아니고, 이 부분은 서버를 실행시키기 위해 포트번호를 입력받고, 서버의 모든 대화를 담당할 ChatManager 객체를 만든다. 그리고 CharManager의 인자로 서버의 포트번호를 명령행 인자로 받아 넘겨준다.</FONT>
<P><FONT FACE="바탕">이 프로그램은 다음에 있는 부분을 모두 작성해야 실행이 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 채팅서버에 접속하는 사용자용 클래스이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=225>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Chatter {</FONT>
<P>	<FONT FACE="Courier New">private Socket clientSocket;</FONT>
<P>	<FONT FACE="Courier New">private BufferedReader br;</FONT>
<P>	<FONT FACE="Courier New">private PrintWriter pw;</FONT>
<P>	<FONT FACE="Courier New">private ChatRoom chatRoom;</FONT>
<P>	<FONT FACE="Courier New">private String chatterID;</FONT>
<BR>
<P>	<FONT FACE="Courier New">Chatter(ChatRoom chatRoom, </FONT>
<P>		<FONT FACE="Courier New">Socket clientSocket, String chatterID ) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Chatter </FONT><FONT FACE="바탕">생성</FONT><FONT FACE="Courier New"> : &quot; +</FONT>	 <FONT FACE="Courier New">chatterID);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=711>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<BR>
<P><FONT FACE="Courier New">36:</FONT>
<BR>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">this.chatRoom = chatRoom;</FONT>
<P>			<FONT FACE="Courier New">this.clientSocket = clientSocket;</FONT>
<P>			<FONT FACE="Courier New">this.chatterID = chatterID;</FONT>
<P>			<FONT FACE="Courier New">br = new BufferedReader(new</FONT>
<P><FONT FACE="Courier New">InputStreamReader(clientSocket.getInputStream()));</FONT>
<P>			<FONT FACE="Courier New">pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream())));</FONT>
<P>			<FONT FACE="Courier New">(new readSocketThread()).start();</FONT>
<P>		<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void sendMessage(String message) {</FONT>
<P>		<FONT FACE="Courier New">pw.println(message);</FONT>
<P>		<FONT FACE="Courier New">pw.flush();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">class readSocketThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">String inputString = null;</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">while (true) {</FONT>
<P>					<FONT FACE="Courier New">inputString = br.readLine();</FONT>
<P>					<FONT FACE="Courier New">chatRoom.chatEveryChatter(inputString);</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch ( Exception e ) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">21 : Chatter 클래스는 실제 접속한 대화자의 정보를 가지고 있다. 
</FONT><P><FONT FACE="바탕">47 : 쓰레드를 통해 대화자가 서버로 전달하는 메시지를 감시한다. 앞에서 설명한 그림의 ① 부분에 해당된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 대화방에 해당하는 클래스이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatRoom {</FONT>
<P>	<FONT FACE="Courier New">private String roomName;</FONT>
<P>	<FONT FACE="Courier New">private Vector joinChatters = new Vector();</FONT>
<P>	<FONT FACE="Courier New">private Chatter roomMaker;</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=557>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">ChatRoom(String roomName) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">채팅방</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">개설</FONT><FONT FACE="Courier New"> : &quot; + roomName);</FONT>
<P>		<FONT FACE="Courier New">this.roomName = roomName;</FONT>
<P>		<FONT FACE="Courier New">this.roomMaker = null;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public synchronized void joinChatter(Chatter chatter){</FONT>
<P>		<FONT FACE="Courier New">joinChatters.add(chatter);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public synchronized String getName() {</FONT>
<P>		<FONT FACE="Courier New">return roomName;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public synchronized void chatEveryChatter(String message) {</FONT>
<P>		<FONT FACE="Courier New">for ( int i=0 ; i &lt; joinChatters.size() ; i++) {</FONT>
<P>			<FONT FACE="Courier New">((Chatter)joinChatters.get(i)).sendMessage(message);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public int size() {</FONT>
<P>		<FONT FACE="Courier New">return joinChatters.size();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">61 : ChattRoom 클래스는 실제로 하나의 대화방이다. 
</FONT><P><FONT FACE="바탕">80 : chatEveryChatter() 메소드는 방안에 있는 모든 대화자에게 메시지를 보낼 때 사용된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 대화방을 관리하는 클래스이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=313>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT>
<P><FONT FACE="Courier New">100:</FONT>
<P><FONT FACE="Courier New">101:</FONT>
<P><FONT FACE="Courier New">102:</FONT>
<P><FONT FACE="Courier New">103:</FONT>
<P><FONT FACE="Courier New">104:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatRoomManager {</FONT>
<P>	<FONT FACE="Courier New">private Vector chatRooms = new Vector();</FONT>
<P>	
<P>	<FONT FACE="Courier New">ChatRoomManager() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;ChatRoomManager Starting.&quot;);</FONT>
<P>		<FONT FACE="Courier New">chatRooms.add(new ChatRoom(&quot;</FONT><FONT FACE="바탕">대기실</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void makeRoom(String roomName) { }</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void deleteRoom(String roomName) { }</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void enterRoom(String roomName, Socket clientSocket){</FONT>
<P>   <FONT FACE="Courier New">Chatter chatter = null;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=358>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">105:</FONT>
<P><FONT FACE="Courier New">106:</FONT>
<P><FONT FACE="Courier New">107:</FONT>
<P><FONT FACE="Courier New">108:</FONT>
<P><FONT FACE="Courier New">109:</FONT>
<P><FONT FACE="Courier New">110:</FONT>
<P><FONT FACE="Courier New">111:</FONT>
<P><FONT FACE="Courier New">112:</FONT>
<P><FONT FACE="Courier New">113:</FONT>
<P><FONT FACE="Courier New">114:</FONT>
<P><FONT FACE="Courier New">115:</FONT>
<P><FONT FACE="Courier New">116:</FONT>
<P><FONT FACE="Courier New">117:</FONT>
<P><FONT FACE="Courier New">118:</FONT>
<P><FONT FACE="Courier New">119:</FONT>
<P><FONT FACE="Courier New">120:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">ChatRoom tempRoom = null;</FONT>
<P>		<FONT FACE="Courier New">boolean exitFor = false;</FONT>
<P>		<FONT FACE="Courier New">int i;</FONT>
<P>		<FONT FACE="Courier New">for(i=0; (exitFor == false)&amp;&amp;(i &lt; chatRooms.size()); i++ ) {</FONT>
<P>			<FONT FACE="Courier New">tempRoom = (ChatRoom)chatRooms.get(i);</FONT>
<P>			<FONT FACE="Courier New">if (tempRoom.getName().equals(roomName)) {</FONT>
<P>				<FONT FACE="Courier New">chatter = new Chatter(tempRoom, clientSocket, String.valueOf(tempRoom.size() + 1));</FONT>
<P>				<FONT FACE="Courier New">tempRoom.joinChatter(chatter);</FONT>
<P>				<FONT FACE="Courier New">exitFor = true;</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void exitRoom(Chatter chatter) { }</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">91 : ChatRoomManager 클래스는 생성과 동시에 &quot;대기실&quot;을 만든다. 
</FONT><P><FONT FACE="바탕">103 : enterRoom() 메소드를 통해, 현재 존재하는 모든 대화방을 찾아서 해당 대화방을 찾고 그곳에 Chatter를 생성한다. 즉, 이 클래스는 대화방을 관리한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 채팅 서버를 전체적으로 관리하는 클래스이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=446>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">121:</FONT>
<P><FONT FACE="Courier New">122:</FONT>
<P><FONT FACE="Courier New">123:</FONT>
<P><FONT FACE="Courier New">124:</FONT>
<P><FONT FACE="Courier New">125:</FONT>
<P><FONT FACE="Courier New">126:</FONT>
<P><FONT FACE="Courier New">127:</FONT>
<P><FONT FACE="Courier New">128:</FONT>
<P><FONT FACE="Courier New">129:</FONT>
<P><FONT FACE="Courier New">130:</FONT>
<P><FONT FACE="Courier New">131:</FONT>
<P><FONT FACE="Courier New">132:</FONT>
<P><FONT FACE="Courier New">133:</FONT>
<P><FONT FACE="Courier New">134:</FONT>
<P><FONT FACE="Courier New">135:</FONT>
<P><FONT FACE="Courier New">136:</FONT>
<P><FONT FACE="Courier New">137:</FONT>
<P><FONT FACE="Courier New">138:</FONT>
<P><FONT FACE="Courier New">139:</FONT>
<P><FONT FACE="Courier New">140:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatManager {</FONT>
<P>	<FONT FACE="Courier New">private int serverPort;</FONT>
<P>	<FONT FACE="Courier New">private ServerSocket serverSocket;</FONT>
<P>	<FONT FACE="Courier New">private ChatRoomManager chatRoomManager;</FONT>
<P>	
<P>	<FONT FACE="Courier New">ChatManager(int serverPort ) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Chatting Manager Starting&quot;);</FONT>
<P>		
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">this.serverPort = serverPort;</FONT>
<P>			<FONT FACE="Courier New">chatRoomManager = new ChatRoomManager();</FONT>
<P>			<FONT FACE="Courier New">serverSocket = new ServerSocket(serverPort);</FONT>			
<P>			<FONT FACE="Courier New">new listenerThread().start();</FONT>
<P>		<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(e.toString());</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">class listenerThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">private boolean stopListener = false;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=358>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">141:</FONT>
<P><FONT FACE="Courier New">142:</FONT>
<P><FONT FACE="Courier New">143:</FONT>
<P><FONT FACE="Courier New">144:</FONT>
<P><FONT FACE="Courier New">145:</FONT>
<P><FONT FACE="Courier New">146:</FONT>
<P><FONT FACE="Courier New">147:</FONT>
<P><FONT FACE="Courier New">148:</FONT>
<BR>
<P><FONT FACE="Courier New">149:</FONT>
<P><FONT FACE="Courier New">150:</FONT>
<P><FONT FACE="Courier New">151:</FONT>
<P><FONT FACE="Courier New">152:</FONT>
<P><FONT FACE="Courier New">153:</FONT>
<P><FONT FACE="Courier New">154:</FONT>
<P><FONT FACE="Courier New">155:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Socket clientSocket = null;</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">while ( !stopListener ) {</FONT>
<P>					<FONT FACE="Courier New">System.out.println(&quot;Watting Client...&quot;);</FONT>
<P>					<FONT FACE="Courier New">clientSocket = serverSocket.accept();</FONT>
<P>			<FONT FACE="Courier New">chatRoomManager.enterRoom(&quot;</FONT><FONT FACE="바탕">대기실</FONT><FONT FACE="Courier New">&quot;,clientSocket);</FONT>
<P>					<FONT FACE="Courier New">System.out.println(&quot;Connection Established form:&quot; + clientSocket.getInetAddress().getHostAddress());</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch (Exception e ) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">121 : ChatManager 클래스는 131번째 줄에서 ServerSocket 객체를 만든다. 그리고 133번째 줄은 139번째 줄에서 선언된 ListenerThread라는 내부 클래스의 객체를 생성한다. 이 내부 클래스가 쓰레드이다. 따라서 start() 메소드를 통해 이 클래스의 142번째 줄에 있는 run() 메소드를 호출한다. run() 메소드는 루프를 돌면서 클라이언트의 접속을 기다리다 접속이 이루어지면 일반 소켓을 만든 후, &quot;대기실&quot;에 Chatter 클래스의 객체를 생성시키기 위해 ChatRoomManager의 enterRoom() 메소드를 호출한다. 그리고 계속 루프를 돌면서 다른 클라이언트의 접속을 기다리게 된다. 
</FONT><BR>
<P><FONT FACE="바탕">복잡한 내용을 간단하게 설명했는데 이를 근거로 프로그램을 자세히 살펴보면서 직접 이해하기 바란다. 물론 이 프로그램에는 불필요한 부분도 있는데 GUI 버전으로 작성하기 위해 추가된 부분이 있기 때문이다. 따라서 이 코드를 응용해서 GUI 버젼을 만들 수도 있을 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">이 채팅 서버프로그램을 실행하는 방법은 다음과 같다. (여기서 5432는 포트 번호이다.)</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=48>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt;</FONT><B><FONT FACE="Courier New"> java </FONT></B><FONT FACE="Courier New">ChatServer 5432</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.3.2 ChatClient.java</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 채팅에 필요한 ChatClient의 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=459>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatClient {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String [] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">if (args.length &lt; 2 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java ChatClient IP port#&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">String addr = args[0];</FONT>
<P>		<FONT FACE="Courier New">int portNo = Integer.parseInt(args[1]);</FONT>
<BR>
<P>		<FONT FACE="Courier New">ChatterManager cm = new ChatterManager(addr, portNo);</FONT>
<BR>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">클라이언트 프로그램은 비교적 짧은데 6번째 줄의 main() 메소드에서 ChatterManager의 객체를 생성한다.</FONT>
<P><FONT FACE="바탕">이 프로그램 역시 아래 이어지는 프로그램을 모두 작성해야 실행이 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 ChatterManager클래스로 이 클래스가 대부분의 클라이언트 채팅을 담당한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=409>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<BR>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatterManager {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private String serverIP;</FONT>
<P>	<FONT FACE="Courier New">private int serverPort;</FONT>
<P>	<FONT FACE="Courier New">private Socket clientSocket;</FONT>
<P>	<FONT FACE="Courier New">private BufferedReader br;</FONT>
<P>	<FONT FACE="Courier New">private PrintWriter pw;</FONT>
<P>	<FONT FACE="Courier New">private BufferedReader keyboard;</FONT>
<BR>
<P>	<FONT FACE="Courier New">ChatterManager(String serverIP, int serverPort) {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<BR>
<P>			<FONT FACE="Courier New">this.serverIP = serverIP;</FONT>
<P>			<FONT FACE="Courier New">this.serverPort = serverPort;</FONT>
<P>			<FONT FACE="Courier New">clientSocket = new Socket(serverIP, serverPort);</FONT>
<BR>
<P>			<FONT FACE="Courier New">br = new BufferedReader( new InputStreamReader( </FONT>
<P> <FONT FACE="Courier New">clientSocket.getInputStream()));</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=303>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">39:</FONT>
<BR>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<BR>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">pw = new PrintWriter(new BufferedWriter( new OutputStreamWriter(clientSocket.getOutputStream())));</FONT>
<BR>
<P>			<FONT FACE="Courier New">keyboard = new BufferedReader(new InputStreamReader(System.in, &quot;KSC5601&quot;));</FONT>
<BR>
<P>			<FONT FACE="Courier New">(new readSocketThread()).start();</FONT>
<P>			<FONT FACE="Courier New">(new writeSocketThread()).start();</FONT>
<BR>
<P>		<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">30 : 생성자를 보면, 첫 번째 인자에 서버의 IP 주소가 넘어오고, 두 번째 인자에 서버의 포트번호가 넘어온다. 
</FONT><P><FONT FACE="바탕">34 : 30번째 줄의 내용을 근거로 서버에 접속을 시도한다.</FONT>
<P><FONT FACE="바탕">서버와의 접속이 이루어지면 42번째 줄과 44번째 줄에서는 51과 63번째 줄에 있는 내부 클래스의 객체를 쓰레드로 생성한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=558>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">class readSocketThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">while(true) {</FONT>
<P>					<FONT FACE="Courier New">System.out.println(br.readLine());</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">class writeSocketThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">String inputString = null;</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try{</FONT>
<P>				<FONT FACE="Courier New">while ((inputString = keyboard.readLine()) != null){</FONT>
<P>					<FONT FACE="Courier New">pw.println(inputString);</FONT>
<P>					<FONT FACE="Courier New">pw.flush();</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch (Exception e ) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">51 : 쓰레드는 대화자가 키보드에 입력하는 문자열을 받아들인다. 
</FONT><P><FONT FACE="바탕">63 : 쓰레드는 대화자가 키보드를 통해 입력하는 동안이라도 소켓에 메시지가 도착하면 이를 화면에 출력하는 역할을 한다.</FONT>
<BR>
<P><FONT FACE="바탕">이상의 클라이언트 프로그램을 실행시키는 방법은 다음과 같다. (여기서 서버의 IP를 127.0.0.1로 준 이유는 서버를 자신의 컴퓨터에서 수행한 경우이다.)</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=48>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> ChatClient 127.0.0.1 5432</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV332.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.4   TCP </FONT><FONT FACE="바탕">채팅</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">Ⅱ</FONT><FONT FACE="Bookman Old Style"> 
</FONT></B></SPAN></FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 데이터를 이용한 채팅 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=587>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<P><FONT FACE="Courier New">public class ChatServer {</FONT>
<P>	<FONT FACE="Courier New">Vector buffer;</FONT>
<P>	<FONT FACE="Courier New">ServerSocket serverSocket;</FONT>
<P>	<FONT FACE="Courier New">Socket socket;</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ObjectOutputStream oos;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void service() {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">준비중</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">serverSocket = new ServerSocket(5555);</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">서비스도중</FONT><FONT FACE="Courier New"> IOException 	</FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">while(true) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">socket = serverSocket.accept();</FONT>
<P>				<FONT FACE="Courier New">System.out.println(socket.getInetAddress()+&quot;</FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>				<FONT FACE="Courier New">ois = new ObjectInputStream(socket.getInputStream());</FONT>
<P>				<FONT FACE="Courier New">oos = new ObjectOutputStream(socket.getOutputStream());</FONT>
<P>				<FONT FACE="Courier New">Thread t = new Thread(new ChatServerThread(buffer,ois,oos));</FONT>
<P>				<FONT FACE="Courier New">t.start();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServer.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;IOException </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Start Server Service...&quot;);</FONT>
<P>		<FONT FACE="Courier New">ChatServer cs = new ChatServer();</FONT>
<P>		<FONT FACE="Courier New">cs.buffer = new Vector(5,1);</FONT>
<P>		<FONT FACE="Courier New">cs.service();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 클라이언트 하나에 하나씩 만들어질 쓰레드이다. 클라이언트가 데이터객체를 보내면 Vector에 저장된 ObjectOutputStream을 이용해서 알리게 된다. 클라이언트가 종료되면 함께 종료된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=563>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServerThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<BR>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatServerThread implements Runnable{</FONT>
<P>	<FONT FACE="Courier New">Vector buffer;</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ObjectOutputStream oos;</FONT>
<P>	<FONT FACE="Courier New">Data d;</FONT>
<P>	<FONT FACE="Courier New">boolean exit;</FONT>
<P>	<FONT FACE="Courier New">String name;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ChatServerThread(Vector v, ObjectInputStream ois , ObjectOutputStream oos) {</FONT>
<P>		<FONT FACE="Courier New">this.buffer = v;</FONT>
<P>		<FONT FACE="Courier New">this.ois = ois;</FONT>
<P>		<FONT FACE="Courier New">this.oos = oos;</FONT>
<P>		<FONT FACE="Courier New">exit = false;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">while(!exit) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">d = (Data) ois.readObject();</FONT>
<P>			<FONT FACE="Courier New">} catch (ClassNotFoundException e) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1005>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServerThread.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<BR>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>				<FONT FACE="Courier New">System.err.println(&quot;Data class</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">찾을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> 	</FONT><FONT FACE="바탕">없음</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (OptionalDataException e1) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;OptionalDataException </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e3) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;IOExcdetion</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">int state = d.getState();</FONT>
<P>			<FONT FACE="Courier New">if(state == Data.</FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">exit = true;</FONT>
<P>				<FONT FACE="Courier New">d.setMessage(&quot;</FONT><FONT FACE="바탕">님이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료하셨습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">name = d.getName();</FONT>
<P>				<FONT FACE="Courier New">broadCasting();</FONT>
<P>				<FONT FACE="Courier New">for(int i = 0 ; i &lt;buffer.size() ; i++) {</FONT>
<P>					<FONT FACE="Courier New">if( ((Data)buffer.elementAt(i)).getName().equals(name)) {</FONT>
<P>						<FONT FACE="Courier New">buffer.removeElementAt(i);</FONT>
<P>						<FONT FACE="Courier New">break;</FONT>
<P>					<FONT FACE="Courier New">}</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>				<FONT FACE="Courier New">try{ ois.close();</FONT>
<P>					<FONT FACE="Courier New">oos.close();</FONT>
<P>				<FONT FACE="Courier New">}catch(IOException ex){}</FONT>
<BR>
<P>			<FONT FACE="Courier New">} else if(state == Data.</FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">Vector userName = new Vector(5,1);</FONT>
<P>				<FONT FACE="Courier New">d.setOOS(oos);</FONT>
<P>				<FONT FACE="Courier New">buffer.addElement(d);</FONT>
<P>				<FONT FACE="Courier New">for(int i=0 ; i &lt; buffer.size() ; i++) {</FONT>
<P>					<FONT FACE="Courier New">userName.addElement(</FONT>
<P><FONT FACE="Courier New">((Data)buffer.elementAt(i)).getName() );</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>				<FONT FACE="Courier New">d.setUserName(userName);</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;broadCasting </FONT><FONT FACE="바탕">시작</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>				<FONT FACE="Courier New">broadCasting();</FONT>
<P>			<FONT FACE="Courier New">} else {</FONT>
<P>				<FONT FACE="Courier New">broadCasting();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void broadCasting() {</FONT>
<P>		<FONT FACE="Courier New">Vector v = (Vector)buffer.clone();</FONT>
<P>		<FONT FACE="Courier New">for(int i = 0 ; i &lt; v.size() ; i++ ) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">((Data)v.elementAt(i)).getOOS().writeObject(d);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServerThread.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>				<FONT FACE="Courier New">System.out.println(&quot;111&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;broadCasting method</FONT><FONT FACE="바탕">에서</FONT><FONT FACE="Courier New"> IOException</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 서버와 클라이언트 사이에 정보를 주고받기 위한 클래스의 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=673>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Data.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Data implements Serializable{</FONT>
<P>	<FONT FACE="Courier New">private String message;</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int state;</FONT>
<P>	<FONT FACE="Courier New">private transient ObjectOutputStream oos; </FONT>
<P>	<FONT FACE="Courier New">private Vector userName;</FONT>
<P>	<FONT FACE="Courier New">public static final int </FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New"> = 0;</FONT>
<P>	<FONT FACE="Courier New">public static final int </FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New"> = -1;</FONT>
<P>	<FONT FACE="Courier New">public static final int </FONT><FONT FACE="바탕">대화중</FONT><FONT FACE="Courier New"> = 1;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Data (String name, String message, int state, ObjectOutputStream o) {</FONT>
<P>		<FONT FACE="Courier New">this.name = name;</FONT>
<P>		<FONT FACE="Courier New">this.message = message;</FONT>
<P>		<FONT FACE="Courier New">this.state = state;</FONT>
<P>		<FONT FACE="Courier New">this.oos = o;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Data (String name, String message, int state) {</FONT>
<P>		<FONT FACE="Courier New">this(name , message, state, null);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public String getMessage() {</FONT>
<P>		<FONT FACE="Courier New">return message;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setMessage(String s) {</FONT>
<P>		<FONT FACE="Courier New">message = s;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=585>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Data.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public String getName() {</FONT>
<P>		<FONT FACE="Courier New">return name;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setName(String s) {</FONT>
<P>	<FONT FACE="Courier New">name = s;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public int getState() {</FONT>
<P>		<FONT FACE="Courier New">return state;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setState(int i) {</FONT>
<P>		<FONT FACE="Courier New">state = i;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public ObjectOutputStream getOOS() {</FONT>
<P>		<FONT FACE="Courier New">return oos;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setOOS(ObjectOutputStream o) {</FONT>
<P>	<FONT FACE="Courier New">oos = o;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Vector getUserName() {</FONT>
<P>		<FONT FACE="Courier New">return this.userName;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setUserName(Vector v) {</FONT>
<P>		<FONT FACE="Courier New">this.userName = v;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatClient {</FONT>
<P>	<FONT FACE="Courier New">Socket socket;</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ObjectOutputStream oos;</FONT>
<P>	<FONT FACE="Courier New">Thread t;</FONT>
<P>	<FONT FACE="Courier New">Frame first , second;</FONT>
<P>	<FONT FACE="Courier New">Label state , commLabel , userLabel , serverLabel;</FONT>
<P>	<FONT FACE="Courier New">Label IDLabel , userCount;</FONT>
<P>	<FONT FACE="Courier New">TextArea commList;</FONT>
<P>	<FONT FACE="Courier New">List userList;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1005>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<BR>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">Button conn , transmission;</FONT>
<P>	<FONT FACE="Courier New">TextField stateTextField , transTextField;</FONT>
<P>	<FONT FACE="Courier New">TextField serverTextField , IDTextField;</FONT>
<P>	<FONT FACE="Courier New">String name;</FONT>
<P>	<FONT FACE="Courier New">ChatClientThread cct;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void connection(String serverName , int port) throws IOException{</FONT>
<P>		<FONT FACE="Courier New">socket = new Socket(serverName,port);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(serverName + &quot;  </FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>     
<P>		<FONT FACE="Courier New">oos = new ObjectOutputStream(socket.getOutputStream());</FONT>
<P>		<FONT FACE="Courier New">ois = new ObjectInputStream(socket.getInputStream());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;OutputStream</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">열었습니다</FONT><FONT FACE="Courier New">. &quot;);</FONT>
<P>		<FONT FACE="Courier New">Data d = new Data(IDTextField.getText(),&quot;</FONT><FONT FACE="바탕">님이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속하였습니다</FONT><FONT FACE="Courier New">.&quot;, Data.</FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Stream </FONT><FONT FACE="바탕">연결에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">성공하였습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">oos.writeObject(d) ;</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;InputStream</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">열었습니다</FONT><FONT FACE="Courier New">. &quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">cct = new ChatClientThread(ois,this);</FONT>
<P>		<FONT FACE="Courier New">t = new Thread(cct);</FONT>
<P>		<FONT FACE="Courier New">t.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P><FONT FACE="Courier New">/** </FONT><FONT FACE="바탕">처음</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">보여질</FONT><FONT FACE="Courier New"> GUI</FONT><FONT FACE="바탕">화면</FONT><FONT FACE="Courier New"> *************</FONT>
<P>    <FONT FACE="Courier New">Server</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름과</FONT><FONT FACE="Courier New"> User</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> ID</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">받아들여서</FONT><FONT FACE="Courier New">, Connection() </FONT><FONT FACE="바탕">메소드를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">호출한다</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">*/</FONT>
<P>	<FONT FACE="Courier New">public void firstGo() {</FONT>
<P>		<FONT FACE="Courier New">first = new Frame(&quot;Chat Browser&quot;);</FONT>
<P>		<FONT FACE="Courier New">first.addWindowListener( new WindowAdapter() {</FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT>
<P>				<FONT FACE="Courier New">first.setVisible(false);</FONT>
<P>				<FONT FACE="Courier New">first.dispose();</FONT>
<P>				<FONT FACE="Courier New">System.exit(1);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">});</FONT>
<BR>
<P>		<FONT FACE="Courier New">Panel p = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p.setLayout(new GridLayout(2,2));</FONT>
<P>		<FONT FACE="Courier New">serverLabel = new Label(&quot;Server&quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">IDLabel = new Label(&quot; I   D &quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">serverTextField = new TextField(0);</FONT>
<P>		<FONT FACE="Courier New">IDTextField = new TextField(0);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=474>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<BR>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p.add(serverLabel);</FONT>
<P>		<FONT FACE="Courier New">p.add(serverTextField);</FONT>
<P>		<FONT FACE="Courier New">p.add(IDLabel);</FONT>
<P>		<FONT FACE="Courier New">p.add(IDTextField);</FONT>
<P>		<FONT FACE="Courier New">conn = new Button(&quot;</FONT><FONT FACE="바탕">연결</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">conn.addActionListener( new ActionHandler());</FONT>
<P>		<FONT FACE="Courier New">first.add(p,&quot;Center&quot;);</FONT>
<P>		<FONT FACE="Courier New">first.add(conn,&quot;South&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">first.setSize(300,100);</FONT>
<BR>
<P>	<FONT FACE="Courier New">/* </FONT><FONT FACE="바탕">화면의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중앙에</FONT><FONT FACE="Courier New"> GUI</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">보여질</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있도록</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">부분</FONT><FONT FACE="Courier New">. *****</FONT>
<P>		<FONT FACE="바탕">현재의</FONT><FONT FACE="Courier New"> Screen Size</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">얻어온</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">후</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중앙부분에</FONT><FONT FACE="Courier New"> Dispaly </FONT><FONT FACE="바탕">한다</FONT><FONT FACE="Courier New">.*/</FONT>
<P>		<FONT FACE="Courier New">Dimension d = first.getToolkit().getScreenSize();</FONT>
<P>		<FONT FACE="Courier New">first.setLocation(d.width/2 - first.getWidth()/2 , d.height/2 - first.getHeight()/2);</FONT>
<P>		<FONT FACE="Courier New">first.setResizable(false);</FONT>
<P>		<FONT FACE="Courier New">first.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">/**</FONT>
<P><FONT FACE="바탕">두번째로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">보여질</FONT><FONT FACE="Courier New"> GUI Chatting</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">필요한</FONT><FONT FACE="Courier New"> TextField</FONT><FONT FACE="바탕">와</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속되어</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용자의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">,</FONT><FONT FACE="바탕">그리고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대화</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">내용이</FONT><FONT FACE="Courier New"> Display</FONT><FONT FACE="바탕">될</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">화면이다</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">*/</FONT>
<P>	<FONT FACE="Courier New">public void secondGo() {</FONT>
<P>		<FONT FACE="Courier New">second = new Frame(&quot;Chat v1.0 second&quot;);</FONT>
<P>		<FONT FACE="Courier New">second.addWindowListener(new WindowAdapter() {</FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT>
<P>				<FONT FACE="Courier New">frameClose(e);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">});</FONT>
<P>		<FONT FACE="Courier New">state = new Label(&quot;</FONT><FONT FACE="바탕">접속중</FONT><FONT FACE="Courier New">...&quot;);</FONT>
<P>		<FONT FACE="Courier New">state.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">state.setForeground(Color.blue);</FONT>
<P>		<FONT FACE="Courier New">second.add(state,&quot;North&quot;);</FONT>
<P> 
<P>		<FONT FACE="Courier New">Panel p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">commLabel = new Label(&quot;</FONT><FONT FACE="바탕">대화내용</FONT><FONT FACE="Courier New">&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1027>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT>
<P><FONT FACE="Courier New">100:</FONT>
<P><FONT FACE="Courier New">101:</FONT>
<P><FONT FACE="Courier New">102:</FONT>
<P><FONT FACE="Courier New">103:</FONT>
<P><FONT FACE="Courier New">104:</FONT>
<P><FONT FACE="Courier New">105:</FONT>
<P><FONT FACE="Courier New">106:</FONT>
<P><FONT FACE="Courier New">107:</FONT>
<P><FONT FACE="Courier New">108:</FONT>
<P><FONT FACE="Courier New">109:</FONT>
<P><FONT FACE="Courier New">110:</FONT>
<P><FONT FACE="Courier New">111:</FONT>
<P><FONT FACE="Courier New">112:</FONT>
<P><FONT FACE="Courier New">113:</FONT>
<P><FONT FACE="Courier New">114:</FONT>
<P><FONT FACE="Courier New">115:</FONT>
<P><FONT FACE="Courier New">116:</FONT>
<P><FONT FACE="Courier New">117:</FONT>
<P><FONT FACE="Courier New">118:</FONT>
<P><FONT FACE="Courier New">119:</FONT>
<P><FONT FACE="Courier New">120:</FONT>
<P><FONT FACE="Courier New">121:</FONT>
<P><FONT FACE="Courier New">122:</FONT>
<P><FONT FACE="Courier New">123:</FONT>
<P><FONT FACE="Courier New">124:</FONT>
<P><FONT FACE="Courier New">125:</FONT>
<P><FONT FACE="Courier New">126:</FONT>
<P><FONT FACE="Courier New">127:</FONT>
<BR>
<P><FONT FACE="Courier New">128:</FONT>
<P><FONT FACE="Courier New">129:</FONT>
<P><FONT FACE="Courier New">130:</FONT>
<P><FONT FACE="Courier New">141:</FONT>
<P><FONT FACE="Courier New">142:</FONT>
<P><FONT FACE="Courier New">143:</FONT>
<P><FONT FACE="Courier New">144:</FONT>
<P><FONT FACE="Courier New">145:</FONT>
<P><FONT FACE="Courier New">146:</FONT>
<P><FONT FACE="Courier New">147:</FONT>
<P><FONT FACE="Courier New">148:</FONT>
<P><FONT FACE="Courier New">149:</FONT>
<P><FONT FACE="Courier New">150:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">commList = new TextArea();</FONT>
<P>		<FONT FACE="Courier New">commList.setEditable(false);</FONT>
<P>		<FONT FACE="Courier New">p1.add(commLabel,&quot;North&quot;);</FONT>
<P>		<FONT FACE="Courier New">p1.add(commList,&quot;Center&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Panel p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">userLabel = new Label(&quot;</FONT><FONT FACE="바탕">사용자명</FONT><FONT FACE="Courier New">&quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">userList = new List();</FONT>
<P>		<FONT FACE="Courier New">userCount = new Label(&quot;&quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">p2.add(userLabel,&quot;North&quot;);</FONT>
<P>		<FONT FACE="Courier New">p2.add(userList,&quot;Center&quot;);</FONT>
<P>		<FONT FACE="Courier New">p2.add(userCount,&quot;South&quot;);</FONT>
<P>        
<P>		<FONT FACE="Courier New">Panel p3 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">transTextField = new TextField(50);</FONT>
<P>		<FONT FACE="Courier New">//transTextField.requestFocus();  // TextField</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">커서가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">깜박이게</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">한다</FONT><FONT FACE="Courier New">.</FONT>
<P>		<FONT FACE="Courier New">transTextField.addActionListener(new ActionHandler());</FONT>
<P>		<FONT FACE="Courier New">transmission = new Button(&quot;</FONT><FONT FACE="바탕">전송</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">transmission.addActionListener(new ActionHandler());</FONT>
<P>		<FONT FACE="Courier New">p3.add(transTextField);</FONT>
<P>		<FONT FACE="Courier New">p3.add(transmission);</FONT>
<BR>
<P>		<FONT FACE="Courier New">second.add(p3,&quot;South&quot;);</FONT>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">이것을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">먼저</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언해야</FONT><FONT FACE="Courier New"> requestFocus </FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">적용됨</FONT><FONT FACE="Courier New">.</FONT>
<P>		<FONT FACE="Courier New">second.add(p1,&quot;Center&quot;);</FONT>
<P>		<FONT FACE="Courier New">second.add(p2,&quot;West&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">second.setSize(600,500);</FONT>
<P>		<FONT FACE="Courier New">Dimension d = second.getToolkit().getScreenSize();</FONT>
<P>		<FONT FACE="Courier New">second.setLocation(d.width/2 - second.getWidth()/2 , d.height/2 - second.getHeight()/2);</FONT>
<P>		<FONT FACE="Courier New">second.setResizable(false);</FONT>
<BR>
<P>		<FONT FACE="Courier New">second.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void frameClose(WindowEvent e) {</FONT>
<P>		<FONT FACE="Courier New">Frame f = (Frame) e.getSource();</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(false);</FONT>
<P>		<FONT FACE="Courier New">f.dispose();</FONT>
<P>		<FONT FACE="Courier New">cct.exit = true;</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">oos.writeObject(new Data(name,&quot;</FONT><FONT FACE="바탕">님이</FONT><FONT FACE="Courier New"> 	</FONT><FONT FACE="바탕">나가셨습니다</FONT><FONT FACE="Courier New">.&quot;,Data.</FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New">));</FONT>
<P>			<FONT FACE="Courier New">oos.close();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=938>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">151:</FONT>
<P><FONT FACE="Courier New">152:</FONT>
<P><FONT FACE="Courier New">153:</FONT>
<P><FONT FACE="Courier New">154:</FONT>
<P><FONT FACE="Courier New">155:</FONT>
<P><FONT FACE="Courier New">156:</FONT>
<P><FONT FACE="Courier New">157:</FONT>
<P><FONT FACE="Courier New">158:</FONT>
<P><FONT FACE="Courier New">159:</FONT>
<P><FONT FACE="Courier New">160:</FONT>
<P><FONT FACE="Courier New">161:</FONT>
<P><FONT FACE="Courier New">162:</FONT>
<P><FONT FACE="Courier New">163:</FONT>
<P><FONT FACE="Courier New">164:</FONT>
<P><FONT FACE="Courier New">165:</FONT>
<P><FONT FACE="Courier New">166:</FONT>
<P><FONT FACE="Courier New">167:</FONT>
<P><FONT FACE="Courier New">168:</FONT>
<P><FONT FACE="Courier New">169:</FONT>
<P><FONT FACE="Courier New">170:</FONT>
<BR>
<P><FONT FACE="Courier New">171:</FONT>
<P><FONT FACE="Courier New">172:</FONT>
<BR>
<P><FONT FACE="Courier New">173:</FONT>
<BR>
<P><FONT FACE="Courier New">174:</FONT>
<P><FONT FACE="Courier New">175:</FONT>
<BR>
<P><FONT FACE="Courier New">176:</FONT>
<P><FONT FACE="Courier New">177:</FONT>
<P><FONT FACE="Courier New">178:</FONT>
<P><FONT FACE="Courier New">179:</FONT>
<P><FONT FACE="Courier New">180:</FONT>
<P><FONT FACE="Courier New">181:</FONT>
<P><FONT FACE="Courier New">182:</FONT>
<P><FONT FACE="Courier New">183:</FONT>
<P><FONT FACE="Courier New">184:</FONT>
<P><FONT FACE="Courier New">185:</FONT>
<P><FONT FACE="Courier New">186:</FONT>
<P><FONT FACE="Courier New">187:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">} catch (IOException e1) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">종료중</FONT><FONT FACE="Courier New"> IOExcpetion</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.exit(0);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">/*    Acrtion Event</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">처리하는</FONT><FONT FACE="Courier New"> Inner class</FONT>
<P><FONT FACE="Courier New">*/</FONT>
<P>	<FONT FACE="Courier New">public class ActionHandler implements ActionListener{</FONT>
<P>		<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) {</FONT>
<P>			<FONT FACE="Courier New">String actionCommand = e.getActionCommand();</FONT>
<P>				<FONT FACE="Courier New">if(actionCommand.equals(&quot;</FONT><FONT FACE="바탕">연결</FONT><FONT FACE="Courier New">&quot;)) {</FONT>
<P>					<FONT FACE="Courier New">String server = serverTextField.getText();</FONT>
<P>					<FONT FACE="Courier New">name = IDTextField.getText();</FONT>
<P>					<FONT FACE="Courier New">first.setVisible(false);</FONT>
<P>					<FONT FACE="Courier New">first.dispose();</FONT>
<P>					<FONT FACE="Courier New">secondGo();</FONT>
<P>					<FONT FACE="Courier New">try {</FONT>
<P>						<FONT FACE="Courier New">connection(server,5555);</FONT>
<P>					<FONT FACE="Courier New">} catch (IOException e1) {</FONT>
<P>						<FONT FACE="Courier New">System.err.println(&quot;Connection </FONT><FONT FACE="바탕">중</FONT><FONT FACE="Courier New"> Exception</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생하였습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>					<FONT FACE="Courier New">}</FONT>
<P>					<FONT FACE="Courier New">state.setText(&quot;[ &quot; + server +&quot; ]&quot; + &quot; </FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속되었습니다</FONT><FONT FACE="Courier New">. --UserID : &quot; + name);</FONT>
<P>				<FONT FACE="Courier New">} else if ( actionCommand.equals(&quot;</FONT><FONT FACE="바탕">전송</FONT><FONT FACE="Courier New">&quot;) || e.getSource().equals(transTextField)) {</FONT>
<P>					<FONT FACE="Courier New">try {</FONT>
<P>						<FONT FACE="Courier New">oos.writeObject(new Data(name,transTextField.getText(),Data.</FONT><FONT FACE="바탕">대화중</FONT><FONT FACE="Courier New">));</FONT>
<P>					<FONT FACE="Courier New">} catch (IOException e2) {</FONT>
<P>						<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">대화중</FONT><FONT FACE="Courier New"> IOException</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생하였습니다</FONT><FONT FACE="Courier New"> &quot;);</FONT>
<P>					<FONT FACE="Courier New">}</FONT>
<P>					<FONT FACE="Courier New">transTextField.setText(&quot;&quot;);</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">ChatClient cc = new ChatClient();</FONT>
<P>			<FONT FACE="Courier New">cc.firstGo();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=991>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClientThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<BR>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<BR>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<BR>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<P><FONT FACE="Courier New">public class ChatClientThread implements Runnable{</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ChatClient cc;</FONT>
<P>	<FONT FACE="Courier New">Data d;</FONT>
<P>	<FONT FACE="Courier New">boolean exit = false;</FONT>
<P>	<FONT FACE="Courier New">public ChatClientThread(ObjectInputStream ois, ChatClient cc) {</FONT>
<P>		<FONT FACE="Courier New">this.ois = ois;</FONT>
<P>		<FONT FACE="Courier New">this.cc = cc;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">while(!exit) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">d = (Data) ois.readObject();</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;run method IOException&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (ClassNotFoundException e1) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;Data class NotFound&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">int state = d.getState();</FONT>
<P>			<FONT FACE="Courier New">String name = d.getName();</FONT>
<P>			<FONT FACE="Courier New">if(state == Data.</FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">Vector userName = d.getUserName();</FONT>
<P>				<FONT FACE="Courier New">cc.userList.removeAll();</FONT>
<P>				<FONT FACE="Courier New">for(int i = 0 ; i &lt; userName.size() ; i++) {</FONT>
<P>					<FONT FACE="Courier New">cc.userList.add((String) 	userName.elementAt(i));</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>					<FONT FACE="Courier New">cc.userCount.setText(&quot;</FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> &quot; + cc.userList.getItemCount() + </FONT>
<P><FONT FACE="Courier New">&quot;</FONT><FONT FACE="바탕">명</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속중</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">} else if (state == Data.</FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">cc.userList.remove(name);</FONT>
<P>				<FONT FACE="Courier New">cc.userCount.setText(&quot;</FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> &quot; + 	cc.userList.getItemCount() + </FONT>
<P><FONT FACE="Courier New">&quot;</FONT><FONT FACE="바탕">명</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속중</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">cc.commList.append(&quot;[ &quot; + name + &quot; ]&quot; + d.getMessage() + &quot;\n&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">ois.close();</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot; ChatClientThread</FONT><FONT FACE="바탕">에의</FONT><FONT FACE="Courier New"> ObjectOutputStream</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> Close</FONT><FONT FACE="바탕">하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중에</FONT><FONT FACE="Courier New"> IOException </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV333.GIF" BORDER=0 ALIGN=LEFT> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.5  TCP </FONT><FONT FACE="바탕">파일서버</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 간단한 파일서버 프로그램의 예를 보인 것이다. 서버로부터 특정파일을 읽어들여 클라이언트 화면에 서버의 파일내용을 출력한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=863>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<BR>
<P><FONT FACE="Courier New">class FileServer {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ServerSocket s = (ServerSocket) null;</FONT>
<P>		<FONT FACE="Courier New">Socket s1;</FONT>
<P>		<FONT FACE="Courier New">byte[] intbuf = new byte[100];</FONT>
<P>		<FONT FACE="Courier New">String fileName;</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">s = new ServerSocket(4321, 1);</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;\nServer timed out!&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.exit(-1);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">while(true) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">s1 = s.accept();</FONT>
<P>				<FONT FACE="Courier New">fileName = getFileName(s1);</FONT>
<P>				<FONT FACE="Courier New">sendFileToClient(s1, fileName);</FONT>
<P>				<FONT FACE="Courier New">s1.close();</FONT>
<P>			<FONT FACE="Courier New">} catch(IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;Error - &quot; + e.toString());</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static String getFileName(Socket s1) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">InputStream s1in;</FONT>
<P>		<FONT FACE="Courier New">DataInputStream d1In;</FONT>
<P>		<FONT FACE="Courier New">String sfile;</FONT>
<P>		<FONT FACE="Courier New">s1in = s1.getInputStream();</FONT>
<P>		<FONT FACE="Courier New">d1In = new DataInputStream(s1in);</FONT>
<P>		<FONT FACE="Courier New">sfile = d1In.readLine();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;File to open for reading : &quot; + sfile);</FONT>
<P>		<FONT FACE="Courier New">return(sfile);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=850>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">FileServer.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<BR>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<BR>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public static void sendFileToClient (Socket s1, String sfile) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">int c;</FONT>
<P>		<FONT FACE="Courier New">FileInputStream fis;</FONT>
<P>		<FONT FACE="Courier New">OutputStream s1out;</FONT>
<P>		<FONT FACE="Courier New">s1out = s1.getOutputStream();</FONT>
<P>		<FONT FACE="Courier New">File f = new File(sfile);</FONT>
<BR>
<P>		<FONT FACE="Courier New">if(f.exists() != true) {</FONT>
<P>			<FONT FACE="Courier New">String error = new String (&quot;File &quot; + sfile + &quot;</FONT><FONT FACE="바탕">은</FONT><FONT FACE="Courier New">(</FONT><FONT FACE="바탕">는</FONT><FONT FACE="Courier New">) </FONT><FONT FACE="바탕">존재하지</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">않습니다</FONT><FONT FACE="Courier New">....\n&quot;);</FONT>
<P>			<FONT FACE="Courier New">int len = error.length();</FONT>
<P>			<FONT FACE="Courier New">for(int i=0; i&lt;len; i++) {</FONT>
<P>				<FONT FACE="Courier New">s1out.write((int)error.charAt(i));</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">System.out.println(error);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">if(f.canRead()) {</FONT>
<P>			<FONT FACE="Courier New">fis = new FileInputStream(sfile);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Sending : &quot; + sfile);</FONT>
<P>			<FONT FACE="Courier New">while((c=fis.read()) != -1) {</FONT>
<P>				<FONT FACE="Courier New">s1out.write(c);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">fis.close();</FONT>
<P>		<FONT FACE="Courier New">} else {</FONT>
<P>			<FONT FACE="Courier New">String error = new String (&quot;Can't open &quot; + sfile + &quot;for reading...\n&quot;);</FONT>
<P>			<FONT FACE="Courier New">int len = error.length();</FONT>
<P>			<FONT FACE="Courier New">for(int i=0; i&lt;len ; i++) {</FONT>
<P>				<FONT FACE="Courier New">s1out.write((int)error.charAt(i));</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">System.out.println(error);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> FileServer</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=894>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ReadFile.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<BR>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ReadFile {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Socket s;</FONT>
<P>		<FONT FACE="Courier New">int port = 4321;</FONT>
<P>		<FONT FACE="Courier New">if(args.length != 2) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java ReadFile &quot; + &quot;</FONT><I>&lt;<FONT FACE="Courier New">server&gt; &lt;file&gt;</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.exit(-1);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">try</FONT>	<FONT FACE="Courier New">{</FONT>
<P>			<FONT FACE="Courier New">s = new Socket (args[0], port);</FONT>
<P>			<FONT FACE="Courier New">sendFileName (s, args[1]);</FONT>
<P>			<FONT FACE="Courier New">receiveFile (s);</FONT>
<P>			<FONT FACE="Courier New">s.close();</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Connection failed&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void sendFileName (Socket s, String fileName) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">OutputStream  sOut;</FONT>
<P>		<FONT FACE="Courier New">DataOutputStream dOut;</FONT>
<BR>
<P>		<FONT FACE="Courier New">sOut = s.getOutputStream();</FONT>
<P>		<FONT FACE="Courier New">dOut = new DataOutputStream(sOut);</FONT>
<P>		<FONT FACE="Courier New">String sendString = new String(fileName + &quot;\n&quot;);</FONT>
<P>		<FONT FACE="Courier New">dOut.writeBytes(sendString);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void receiveFile(Socket s) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">int c;</FONT>
<P>		<FONT FACE="Courier New">InputStream sIn;</FONT>
<P>		<FONT FACE="Courier New">sIn = s.getInputStream();</FONT>
<P>		<FONT FACE="Courier New">while ((c=sIn.read()) != -1) {</FONT>
<P>			<FONT FACE="Courier New">System.out.print((char)c);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> ReadFile 127.0.0.1 ReadFile.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV334.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV335.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV336.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT>
<IMG SRC="file:///C|/지빠귀/FYXIV337.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[JDBC 프로그래밍]</FONT></SPAN></FONT>
<BR>
<P>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">JDBC(Java Database Connectivity)란 자바 환경에서 데이터베이스를 연결할 수 있는 기능을 의미한다. 데이터베이스를 사용하려면 JVM 환경과 데이터베이스 환경사이에 표준이 있어야 하는데 이러한 표준이 바로 JDBC이기도 하다. 현재 JDK 1.4 에서는 JDBC 3.0 스펙까지 지원하고 있다. 
</FONT></SPAN></FONT><BR>
<BR>
<P>
<BR>
</body>

</html>
