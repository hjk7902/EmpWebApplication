<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">4.3</P></td>
        <td width="518">
        <p class="TitleTitle">메뉴(Menu)</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P>&nbsp;AWT에서 메뉴는 몇 개의 클래스에서 제공하는데, 자바 어플리케이션 또는 애플릿에서 원하는 형태의 메뉴를 구성할 수 있도록 해준다. 윈도우는 몇 개의 메뉴를 갖고 각 메뉴는 다시 하나 이상의 메뉴, 메뉴 아이템, 메뉴 분리자 등을 갖는다.<P>메뉴는 다른 컴포넌트(Button, TextField 등)처럼 흔히 사용하는 컨테이너에 추가할 수 없을 뿐만 아니라 레이아웃 관리자를 사용할 수도 없으며, 메뉴 컨테이너(Menu container)에만 추가할 수 있다. 이때 사용하는 메소드가 setMenuBar()이며, setMenuBar()를 이용하여 메뉴 표시줄을 만들면 메뉴 &quot;트리&quot;가 만들어진다. 다시 메뉴에는 메뉴 항목뿐만 아니라 또 다른 메뉴가 추가될 수 있다.
		<P>다음은 AWT에서 제공되는 메뉴 컴포넌트 클래스의 계층 구조를 나타낸 것이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV219.GIF" BORDER=0 WIDTH=404 HEIGHT=135 HSPACE=3 ALIGN=BOTTOM>
		</ul>
		<P class="TSubmenu">4.3.1 MenuComponent
		<ul>
		<P>맨 위 클래스인 MenuComponent는 메뉴를 제공하기 위한 기본적인 기능을 정의하며 실제 클래스 자체를 사용하지는 않는다. 다른 메뉴 관련 클래스는 이 클래스를 상속받는 하위클래스이다.
		<P>MenuComponent 클래스가 제공하는 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.
		<P>▒ 생성자
		<P>  &middot; MenuComponent() : MenuComponent 객체를 생성한다.
		<P>▒ 메소드
		<P>  &middot; Font getFont() : 메뉴 컴포넌트에 사용된 폰트를 얻는다.
		<P>  &middot; String getName() : 메뉴 컴포넌트의 이름을 얻는다.
		<P>  &middot; MenuContainer getParent() : 메뉴 컴포넌트의 부모 컨테이너를 얻는다.
		<P>  &middot; void setFont(Font f) : 메뉴 컴포넌트가 사용할 폰트를 설정한다.
		<P>  &middot; void setName(String name) : 주어진 문자열로 메뉴 컴포넌트의 이름을 설정한다.
		</ul>
		<P class="TSubmenu">4.3.2 MenuBar
		<ul>
		<P>MenuBar 컴포넌트는 수평 메뉴로서 프레임 객체에만 추가할 수 있으며, 발생하는 모든 이벤트가 정상적인 메뉴 동작의 일부로 처리되기 때문에 리스너(Listener)를 지원하지 않는다. setHelpMenu(Menu) 메소드를 이용하면 [Help]메뉴를 지정할 수 있다. 
		<P>MenuBar 클래스가 제공하는 객체 생성자와  메소드를 살펴보면 다음과 같다.
		<P>▒ 생성자
		<P>  &middot; MenuBar() : 메뉴바를 생성한다.
		<P>▒ 메소드
		<P>  &middot; Menu add(Menu m) : 메뉴바에 주어진 메뉴를 추가한다.
		<P>  &middot; void deleteShortcut(MenuShortcut s) : 주어진 메뉴단축키를 삭제한다.
		<P>  &middot; Menu getHelpMenu() : 메뉴바의 도움말 메뉴를 얻는다.
		<P>  &middot; Menu getMenu(int i) : 주어진 번호의 메뉴를 얻는다.
		<P>  &middot; int getMenuCount() : 메뉴바에 있는 메뉴의 개수를 얻는다.
		<P>  &middot; MenuItem getShortcutMenuItem(MenuShortcut s) : 주어진 메뉴 단축키에 연결된 메뉴 아이템을 얻는다.
		<P>  &middot; void remove(int index) : 주어진 인덱스에 해당하는 메뉴를 제거한다.
		<P>  &middot; void remove(MenuComponent m) : 주어진 메뉴 컴포넌트를 제거한다.
		<P>  &middot; void setHelpMenu(Menu m) : 도움말 메뉴를 설정한다.
		<P>  &middot; Enumeration shortcuts() : 메뉴바에 등록된 메뉴단축키를 얻는다.
		</ul>
		<P class="TSubmenu">4.3.3 Menu
		<ul>
		<P>Menu 컴포넌트는 기본적인 풀다운 메뉴를 만드는데 사용하며, MenuItem클래스의 하위 클래스이기 때문에 메뉴를 다른 메뉴에 추가하면 새로운 메뉴를 생성할 수 있다. 즉, MenuBar에 추가하여 메뉴를 나타내거나, 다른 Menu에 추가하여 서브 메뉴를 구성할 수 있다. 다음 그림은 두 개의 Menu객체를 추가한 예이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV220.GIF" BORDER=0 WIDTH="200" HEIGHT="100" HSPACE=3 ALIGN=BOTTOM>
		<P>다음 프로그램은 앞의 그림과 같이 윈도우의 프레임에 메뉴를 붙이는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>MenuExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">public class MenuExample {
			<P class="CStep2">private Frame f;
			<P class="CStep2">private MenuBar mb;
			<P class="CStep2">private Menu fileMenu, editMenu;
			<P class="CStep2">public MenuExample() {
			<P class="CStep3">f = new Frame(&quot;Menu Example&quot;);
			<P class="CStep3">mb = new MenuBar();
			<P class="CStep3">fileMenu = new Menu(&quot;파일&quot;);
			<P class="CStep3">editMenu = new Menu(&quot;편집&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.setMenuBar(mb);
			<P class="CStep3">mb.add(fileMenu);
			<P class="CStep3">mb.add(editMenu);
			<P class="CStep3">f.setSize(200, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main (String[] args) {
			<P class="CStep3">MenuExample mt = new MenuExample();
			<P class="CStep3">mt.launchFrame();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			<P class="CNumber">10:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">mb = new MenuBar();</TD>
		</tr>
		</TABLE>
		<P>MenuBar 클래스의 인스턴스를 생성한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			<p class="CNumber">11:
			<p class="CNumber">12:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">fileMenu = new Menu(&quot;파일&quot;);
			<P class="CStep1">editMenu = new Menu(&quot;편집&quot;);</TD>
		</tr>
		</TABLE>
		<P>MenuBar에 들어갈 Menu 클래스의 인스턴스를 생성한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			<P class="CNumber">16:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">f.setMenuBar(mb);</TD>
		</tr>
		</TABLE>
		<P>setMenuBar() 메소드를 사용하여 MenuBar를 프레임에 추가한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">17:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">mb.add(fileMenu);</TD>
		</tr>
		</TABLE>
		<P>생성된 Menu를 MenuBar에 추가한다.
		<P>Menu 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.
		<P>▒ 생성자
		<P>  &middot; Menu() : 레이블이 없는 메뉴를 생성한다.
		<P>  &middot; Menu(String label) : 주어진 레이블을 갖는 메뉴를 생성한다.
		<P>  &middot; Menu(String label, boolean tearOff) : 주어진 레이블을 갖고, 메뉴가 tear-off 될 수 있는지 여부를 설정하여 메뉴를 생성한다.
		<P>▒ 메소드
		<P>  &middot; MenuItem add(MenuItem mi) : 메뉴 아이템을 추가한다. 
		<P>  &middot; void add(String label) : 주어진 이름의 메뉴 아이템을 추가한다.
		<P>  &middot; void addSeparator() : 메뉴 분리자를 추가한다.
		<P>  &middot; MenuItem getItem(int index) : 주어진 인덱스에 해당하는 메뉴 아이템을 얻는다.
		<P>  &middot; int getItemCount() : 메뉴에 추가된 메뉴 아이템의 개수를 얻는다.
		<P>  &middot; void insert(MenuItem menuitem, int index) : 주어진 인덱스에 메뉴 아이템을 추가한다.
		<P>  &middot; void insert(String label, int index) : 주어진 인덱스에 주어진 이름의 메뉴 아이템을 추가한다.
		<P>  &middot; void insertSeparator(int index) : 주어진 인덱스에 메뉴 분리자를 추가한다.
		<P>  &middot; boolean isTearOff() : 이 메뉴가 tear-off 메뉴인지를 얻는다.
		<P>  &middot; void remove(int index) : 주어진 인덱스에 해당하는 메뉴 아이템을 제거한다.
		<P>  &middot; void remove(MenuComponent item) : 주어진 메뉴 아이템을 제거한다.
		<P>  &middot; void removeAll() : 등록된 모든 메뉴 아이템을 제거한다.
		</ul>
		<P class="TSubmenu">4.3.4 MenuItem
		<ul>
		<P>MenuItem 클래스는 Menu에 추가된 각 아이템을 만드는 클래스이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV222.GIF" BORDER=0 WIDTH=288 HEIGHT=192 HSPACE=3 ALIGN=BOTTOM>
		<P>다음 프로그램은 앞의 그림과 같은 결과를 얻도록 메뉴에 메뉴항목을 붙이는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>MenuItemExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">public class MenuItemExample {
			<P class="CStep2">private Frame f;
			<P class="CStep2">private MenuBar mb;
			<P class="CStep2">private Menu fileMenu, editMenu;
			<P class="CStep2">public MenuItemExample() {
			<P class="CStep3">f = new Frame(&quot;MenuItem Example&quot;);
			<P class="CStep3">mb = new MenuBar();
			<P class="CStep3">fileMenu = new Menu(&quot;파일&quot;);
			<P class="CStep3">editMenu = new Menu(&quot;편집&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.setMenuBar(mb);
			<P class="CStep3">mb.add(fileMenu);
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;새글&quot;));
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;열기&quot;));
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;저장하기&quot;));
			<P class="CStep3">fileMenu.addSeparator();
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;출력&quot;));
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;종료&quot;));
			<P class="CStep3">mb.add(editMenu);
			<P class="CStep3">f.setSize(300, 200);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main (String[] args) {
			<P class="CStep3">MenuItemExample mt = new MenuItemExample();
			<P class="CStep3">mt.launchFrame();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			<P class="CNumber">18:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">fileMenu.add(new MenuItem(&quot;새글&quot;));</TD>
		</tr>
		</TABLE>
		<P>18 : ∼ 23 : 까지는 Menu에 MenuItem을 포함시키는 부분으로 이 줄에서는 &quot;새글&quot;이라는 명칭의 메뉴항목을 &quot;파일&quot; 메뉴에 추가한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			<P class="CNumber">21:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">fileMenu.addSeparator();</TD>
		</tr>
		</TABLE>
		<P>메뉴 항목을 분리하기 위해 addSeparator() 메소드를 이용하여 메뉴 분리자를 추가한다.
		<P>MenuItem 클래스의 객체 생성자와 주요 메소드는 다음과 같다.
		<P>▒ 생성자
		<P>  &middot; MenuItem() : 레이블이 없고, 메뉴단축키가 없는 메뉴 아이템을 생성한다.
		<P>  &middot; MenuItem(String label) : 주어진 레이블을 갖고, 연결된 메뉴단축키가 없는 아이템을 생성한다.
		<P>  &middot; MenuItem(String label, MenuShortcut s) : 주어진 레이블을 갖고, 주어진 메뉴단축키가 연결된 메뉴 아이템을 생성한다.
		<P>▒ 메소드
		<P>  &middot; void deleteShortcut() : 연결된 메뉴단축키를 제거한다.
		<P>  &middot; String getLabel() : 메뉴 아이템의 레이블을 얻는다.
		<P>  &middot; MenuShortcut getShortcut() : 메뉴 아이템에 연결된 메뉴단축키 객체를 얻는다.
		<P>  &middot; boolean isEnabled() : 아이템이 활성화되어 있는지를 얻는다.
		<P>  &middot; void setEnabled(boolean b) : 메뉴 아이템을 활성화 또는 비활성화 되도록 설정한다.
		<P>  &middot; void setLabel(String label) : 메뉴 아이템의 레이블을 설정한다.
		<P>  &middot; void setShortcut(MenuShortcut s) : 메뉴 아이템의 메뉴단축키 객체를 설정한다.
		</ul>
		<P class="TSubmenu">4.3.5 CheckboxMenuItem
		<ul>
		<P>CheckboxMenuItem는 체크박스를 포함하고 있는 메뉴 아이템을 만드는데 사용하며 선택 항목은 메뉴에 나열된다. CheckboxMenuItem은 ItemListener 인터페이스를 통해 제어가 이루어지기 때문에 상태가 바뀌면 itemStateChanged() 메소드가 호출된다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV223.GIF" BORDER=0 WIDTH=306 HEIGHT=163 HSPACE=3 ALIGN=BOTTOM>
		<P>다음 프로그램은 CheckboxMenuItem을 구현하는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P class="CStep1">CheckboxMenuItemExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">&nbsp;
			<p class="CNumber">25:
			<p class="CNumber">26:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">public class CheckboxMenuItemExample {
			<P class="CStep2">private Frame f;
			<P class="CStep2">private MenuBar mb;
			<P class="CStep2">private Menu fileMenu, viewMenu;
			<P class="CStep2">public CheckboxMenuItemExample() {
			<P class="CStep3">f = new Frame(&quot;CheckboxMenuItem Example&quot;);
			<P class="CStep3">mb = new MenuBar();
			<P class="CStep3">fileMenu = new Menu(&quot;파일&quot;);
			<P class="CStep3">viewMenu = new Menu(&quot;보기&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.setMenuBar(mb);
			<P class="CStep3">mb.add(fileMenu);
			<P class="CStep3">mb.add(viewMenu);
			<P class="CStep3">viewMenu.add(new CheckboxMenuItem(&quot;표준 단추&quot;));
			<P class="CStep3">viewMenu.add(new CheckboxMenuItem(&quot;주소 표시줄&quot;));
			<P class="CStep3">viewMenu.add(new CheckboxMenuItem(&quot;상태 표시줄&quot;));
			<P class="CStep3">f.setSize(300, 160);	
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main (String[] args) {
			<P class="CStep3">CheckboxMenuItemExample ct = 
			<P class="CStep3">new CheckboxMenuItemExample();
			<P class="CStep3">ct.launchFrame();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">21:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">viewMenu.add(new CheckboxMenuItem(&quot;표준 단추&quot;));</TD>
		</tr>
		</TABLE>
		<P>체크박스를 포함한 메뉴항목을 만들고 이를 메뉴(viewMenu)에 추가한다.
		<P>CheckboxMenuItem의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.
		<P>▒ 생성자
		<P>  &middot; CheckboxMenuItem() : 레이블이 없는 체크박스 메뉴 아이템을 생성한다.
		<P>  &middot; CheckboxMenuItem(String label) : 주어진 레이블을 갖는 체크박스 메뉴 아이템을 생성한다.
		<P>  &middot; CheckboxMenuItem(String label, boolean state) : 주어진 레이블과 선택 상태를 갖는 체크박스 메뉴 아이템을 생성한다.
		<P>▒ 메소드
		<P>  &middot; boolean getState() : 체크박스 메뉴 아이템의 선택 상태를 얻는다.
		<P>  &middot; void setState(boolean b) : 체크박스 메뉴 아이템을 주어진 상태로 설정한다.
		</ul>
		<P class="TSubmenu">4.3.6 PopupMenu
		<ul>
		<P>PopupMenu는 독립형 메뉴를 만드는데 사용하며 메뉴(Menu)나 메뉴항목(MenuItem)을 추가할 수 있다.
		<P>이것은 컨테이너에 일반적인 컴포넌트를 넣는 것과는 달리 반드시 상위 컴포넌트에 붙여야 한다. PopupMenu를 화면에 나타나게 하려면 show() 메소드를 호출해야 하고, 팝업메뉴가 나타날 x좌표와, y좌표의 위치를 지정해야 한다. 위치지정은 동작을 시작시키는 컴포넌트를 이용한다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV224.GIF" BORDER=0 WIDTH=255 HEIGHT=163 HSPACE=3 ALIGN=BOTTOM>
		<P>다음 프로그램은 PopupMenu를 만드는 예제이다. 마우스 오른쪽 버튼을 누르면 팝업 메뉴가 나타나고, 이를 위해 이벤트를 적용하였다. 이벤트에 대한 자세한 내용은 뒤에서 설명하기로 한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>PopupMenuExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">38:
			<p class="CNumber">39:
			<p class="CNumber">40:
			<p class="CNumber">41:
			<p class="CNumber">42:
			<p class="CNumber">43:	
			<p class="CNumber">44:
			<p class="CNumber">45:
			<p class="CNumber">46:
			<p class="CNumber">47:
			<p class="CNumber">48:
			<p class="CNumber">49:
			<p class="CNumber">50:
			<p class="CNumber">51:
			<p class="CNumber">52:
			<p class="CNumber">53:
			<p class="CNumber">54:
			<p class="CNumber">55:
			<p class="CNumber">56:
			<p class="CNumber">57:
			<p class="CNumber">58:
			<p class="CNumber">59:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class PopupMenuExample 
			<P class="CStep2">extends MouseAdapter 
			<P class="CStep2">implements ActionListener {
			<P class="CStep2">private Frame f;
			<P class="CStep2"><B>private PopupMenu popupMenu;</B>
			<P class="CStep2">private Menu editMenu;
			<P class="CStep2">private MenuItem cancelItem, redoItem, quitItem;
			<P class="CStep2">private MenuItem copyItem, pasteItem;
			<P class="CStep2">public PopupMenuExample() {
			<P class="CStep3">f = new Frame(&quot;PopupMenu Example&quot;);
			<P class="CStep3"><B>popupMenu = new PopupMenu();</B>
			<P class="CStep3">editMenu = new Menu(&quot;편집&quot;);
			<P class="CStep3">cancelItem = new MenuItem(&quot;실행 취소&quot;);
			<P class="CStep3">redoItem = new MenuItem(&quot;재 실행&quot;);
			<P class="CStep3">copyItem = new MenuItem(&quot;복사하기&quot;);
			<P class="CStep3">pasteItem = new MenuItem(&quot;붙여넣기&quot;);
			<P class="CStep3">quitItem = new MenuItem(&quot;종료&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">popupMenu.add(cancelItem);
			<P class="CStep3">redoItem.setEnabled(false);
			<P class="CStep3">popupMenu.add(redoItem);
			<P class="CStep3">popupMenu.addSeparator();
			<P class="CStep3">editMenu.add(copyItem);
			<P class="CStep3">editMenu.add(pasteItem);
			<P class="CStep3">popupMenu.add(editMenu);
			<P class="CStep3">popupMenu.addSeparator();
			<P class="CStep3">popupMenu.add(quitItem);
			<P class="CStep3"><B>f.add(popupMenu);</B>
			<P class="CStep3">f.setSize(250, 160);
			<P class="CStep3">copyItem.addActionListener(this);
			<P class="CStep3">pasteItem.addActionListener(this);
			<P class="CStep3">f.addMouseListener(this);
			<P class="CStep3">f.addWindowListener( new WindowAdapter() {
			<P class="CStep4">public void windowClosing(WindowEvent e) {
			<P class="CStep5">System.exit(0);
			<P class="CStep4">}
			<P class="CStep3">} );
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">PopupMenuExample pme = new PopupMenuExample();
			<P class="CStep3">pme.launchFrame();
			<P class="CStep2">}
			<P class="CStep2">public void mouseClicked(MouseEvent e) {
			<P class="CStep3">if(e.getModifiers() == MouseEvent.BUTTON3_MASK) {
			<P class="CStep4"><B>popupMenu.show(f, e.getX(), e.getY());</B>
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep2">public void actionPerformed(ActionEvent e) {
			<P class="CStep3">if(e.getSource().equals(copyItem)) {
			<P class="CStep4">System.out.println(&quot;Selected copy item&quot;);
			<P class="CStep3">} else if(e.getSource().equals(pasteItem)) {
			<P class="CStep4">System.out.println(&quot;Selected paste item&quot;);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		Menu 클래스를 상속받아 메뉴를 생성하므로 사용법은 메뉴 컴포넌트에서와 같다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">16:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>popupMenu = new PopupMenu();</B></TD>
		</tr>
		</TABLE>
		<P>PopupMenu객체를 생성한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">40:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>f.add(popupMenu);</B></TD>
		</tr>
		</TABLE>
		<P>프레임에 팝업메뉴를 붙인다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">62:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>popupMenu.show(f, e.getX(), e.getY());</B></TD>
		</tr>
		</TABLE>
		<P>팝업메뉴를 이벤트가 발생한 위치에 나타나게 한다.
		<P>PopupMenu가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.
		<P>▒ 생성자
		<P>  &middot; PopupMenu() : 팝업메뉴를 생성한다.
		<P>  &middot; PopupMenu(String label) : 주어진 이름을 갖는 팝업메뉴를 생성한다.
		<P>▒ 메소드
		<P>  &middot; void show(Component origin, int x, int y) : 팝업 메뉴를 주어진 컴포넌트의 해당 위치에 나타나게 한다.
		</ul>
		<P class="TSubmenu">4.3.7 MenuShortcut
		<ul>
		<P>MenuShortcut 클래스는 메뉴에 단축키 기능을 제공하는 기능을 한다. 단축키를 등록하려면 해당키의 문자를 직접 입력할 수도 있고, 'KeyEvent.VK_'와 키값을 입력하면 되는데 만약, 'A' 키라면 KeyEvent.VK_A라고 기술한다. 이렇게 하면, CTRL 키와 조합되어 메뉴단축키를 생성한다. SHIFT 키와 함께 누르는 단축키로 지정하려면 useShiftModifier 값을 true로 설정한다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV225.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
		<P>다음 프로그램은 MenuShortcut 클래스를 익히기 위한 예제이다. 여기서는 이벤트 처리를 하지 않았으므로 실제 단축키를 눌러도 아무 반응도 나타나지 않는다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>MenuShortcutExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">&nbsp
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">&nbsp;
			<p class="CNumber">23:
			<p class="CNumber">&nbsp;
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class MenuShortcutExample {
			<P class="CStep2">private Frame f;
			<P class="CStep2">private MenuBar mb;
			<P class="CStep2">private Menu fileMenu, editMenu;
			<P class="CStep2">public MenuShortcutExample() {
			<P class="CStep3">f = new Frame(&quot;MenuShortcut Example&quot;);
			<P class="CStep3">mb = new MenuBar();
			<P class="CStep3">fileMenu = new Menu(&quot;파일&quot;);
			<P class="CStep3">editMenu = new Menu(&quot;편집&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.setMenuBar(mb);
			<P class="CStep3">mb.add(fileMenu);			mb.add(editMenu);
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;새글&quot;,
			<P class="CStep3">new MenuShortcut('N')));
			<P class="CStep3">MenuItem openItem = new MenuItem(&quot;열기&quot;);
			<P class="CStep3">openItem.setShortcut(new  MenuShortcut('O'));
			<P class="CStep3">fileMenu.add(openItem);
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;저장하기&quot;, new
			<P class="CStep3">MenuShortcut(KeyEvent.VK_S)));
			<P class="CStep3">MenuShortcut saveAsShortcut = new MenuShortcut
			<P class="CStep3">('A', true);
			<P class="CStep3">MenuItem saveAsItem = new MenuItem(&quot;다른 이름으로 저장&quot;,
			<P class="CStep3">saveAsShortcut);
			<P class="CStep3">fileMenu.add(saveAsItem);
			<P class="CStep3">fileMenu.addSeparator();
			<P class="CStep3">fileMenu.add(new MenuItem(&quot;종료&quot;, new MenuShortcut('X')));
			<P class="CStep3">f.setSize(300, 200);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main (String[] args) {
			<P class="CStep3">MenuShortcutExample mt = new MenuShortcutExample();
			<P class="CStep3">mt.launchFrame();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<p>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">20:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">fileMenu.add(new MenuItem(&quot;새글&quot;, new MenuShortcut('N')));</TD>
		</tr>
		</TABLE>
		<P>Ctrl+N을 단축키로 갖는 메뉴항목(MenuItem)을 생성하여 메뉴에 추가한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">22:
			<P class="CNumber">23:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">MenuItem openItem = new MenuItem(&quot;열기&quot;);
			<P class="CStep1">openItem.setShortcut(new  MenuShortcut('O'));</TD>
		</tr>
		</TABLE>
		<P>MenuItem 객체를 생성하고 setShortcut() 메소드를 이용하여 Ctrl+O를 단축키로 설정한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">26:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">fileMenu.add(new MenuItem(&quot;저장하기&quot;, new MenuShortcut
			<P class="CStep1">04-10-03(KeyEvent.VK_S)));</TD>
		</tr>
		</TABLE>
		<P>java.awt.event.KeyEvent 클래스의 필드(VK_S)를 사용하여 Ctrl+S를 단축키로 지정한다. KeyEvent 클래스의 필드를 사용하려면 java.awt.event 패키지를 import한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">28:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">MenuShortcut saveAsShortcut = new MenuShortcut('A', true);</TD>
		</tr>
		</TABLE>
		<P>단축키로 Shift키와 함께 사용하는 MenuShortcut 객체를 생성한다. 단축키는 Ctrl+Shift+A를 갖게 된다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">29:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">MenuItem saveAsItem = new MenuItem(&quot;다른 이름으로 저장&quot;,
			<P class="CStep1">saveAsShortcut);</TD>
		</tr>
		</TABLE>
		<P>28번째 줄에서 생성된 MenuShortcut객체를 이용하여 MenuItem의 단축키를 지정한다.
		<P>MenuShortcut 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.
		<P>▒ 생성자
		<P>  &middot; MenuShortcut(int key) : 주어진 키에 대한 메뉴단축키 객체를 생성한다.
		<P>  &middot; MenuShortcut(int key, boolean useShiftModifier) : 주어진 키에 대한 메뉴단축키 객체를 생성한다. Shift키를 함께 사용할것인지의 여부를 결정할 수 있다.
		<P>▒ 메소드
		<P>  &middot; int getKey() : 키 코드값을 얻는다.
		<P>  &middot; boolean usesShiftModifier() : 메뉴단축키 객체가 Shift키를 사용할지 여부를 설정한다.
		</ul></td>
    </tr>
	</table>
</body>
</html>