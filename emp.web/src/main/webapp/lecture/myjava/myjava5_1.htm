<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">5.1</P></td>
        <td width="518">
		<p class="TitleTitle">계층형 이벤트 모델 - JDK 1.0   </td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
        <ul>
		<P>상속 이벤트모델 또는 drill-up/drill-down 방식이라고도 하며 JDK 1.02버전 모델로 지금은 권장하지 않는 방법이다. 계층형 이벤트 모델은 포함(containment)이라는 개념에 기초한 것으로 컴포넌트에 이벤트가 발생하면 시스템 안에서 이벤트 객체를 생성시킨 다음 프로그램의 최하위 컨테이너로부터 최상위 컴포넌트까지 이벤트를 전달한다. 이렇게 전달된 이벤트는 컴포넌트에 의해 사용 여부가 결정되고 처리가 되면 true를 반환한다. 만약 false를 반환하면 이벤트가 처리되지 않고 컨테이너에게 전달된다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV235.GIF" BORDER=0 WIDTH=496 HEIGHT=145 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>예를 들어 앞의 그림처럼 프레임에 패널이 포함되어 있고 그 안에 버튼 컴포넌트가 있을 때, 버튼을 누르면 이벤트 제어기는 버튼행위에 대한 이벤트를 처리할 제어기를 찾게된다. 만약 버튼의 실행이벤트가 처리되지 않으면 바로 위의 패널 객체로 전달되어 패널에서 이벤트 제어기를 찾게되고, 여기서도 이벤트가 처리되지 않으면 다시 상위 계층인 프레임으로 이벤트가 전달되는 방식이다. 이러한 작업은 이벤트를 받아 처리할 제어기를 찾거나 맨 위 계층에 이를 때까지 계속되는데, 이런 형태의 이벤트 처리 방식은 순수 객체지향 프로그래밍 방식에 위배될 뿐만 아니라 이벤트 처리와 관계없는 객체까지 체크동작을 함으로써 시스템 자원의 낭비를 초래하는 단점을 안고 있다.
		</ul></td>
    </tr>
</table>
</body>
</html>