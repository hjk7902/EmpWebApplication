<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
	<tr>
		<td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">1.2</P></td>
		<td width="518">
		<p class="TitleTitle">자바의 특징</p>
		</td>
	</tr>
	</table>
	
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
	<tr>
		<td width="600">
		<ul>
		<P>자바는 프로그래밍 언어 중 하나지만 다른 프로그래밍 언어에 비해 많은 특징을 가지고 있다. 다음은 자바의 특징에 대하여 개괄적으로 설명한 것이다.
		<P>플랫폼 독립적(아키텍쳐 중립적)이다.
		<P>플랫폼 독립적인 특징은 자바가 인기 있는 프로그램 언어가 된 가장 큰 이유이다. 자바는 플랫폼 독립적인 프로그래밍 솔루션으로 플랫폼에 무관한 이식이 가능한 언어이다. 즉, 서로 다른 다양한 플랫폼(하드웨어와 운영체제)에서도 실행이 가능하다. 자바는 서로 다른 네트워크 환경으로 배치될 수 있는 프로그램을 지원하도록 설계되었기 때문에, 네트워크를 통해 프로그램을 다운받아 하드웨어에 관계없이 사용하려면 근본적으로 아키텍처에 독립적이고 이식성을 보장하는 구조가 요구된다. 
		<P>일반적으로 네트워크에는 한 개 이상의 운영체제가 있는데, 시스템 엔지니어나 그래픽 개발자는 UNIX 운영체제를 사용할 것이고, 영업부 등에서는 윈도우95/98 또는 윈도우 NT를 사용하고, 매킨토시 시스템은 광고와 마케팅에서 사용할 것이다. 이렇게 다른 운영체제가 같은 부서나 사무실 안에서 사용되는 일이 점점 늘어나고 있는데, 이때 소프트웨어가 플랫폼에 독립적이지 않다면 사용 소프트웨어를 모든 플랫폼에 맞게 제작하거나, 그 사람을 재교육시켜 새로운 운영체제를 다루도록 해야 한다. 이때 자바를 사용하면 어떤 운영체제에서도 가능한 어플리케이션을 개발하여 그들이 어떤 운영체제에서 실행되든 전혀 차이가 없는 동일한 인터페이스를 만들 수 있게 된다. 이러한 다양한 운영체제를 수용하기 위해 자바 컴파일러는 바이트코드(Bytecode)를 생성한다.
		<P>자바 프로그램은 Windows, Solaris, Mac OS와 같이 자바가 지원되는 모든 플랫폼 상에서 자바 컴파일러에 의해 바이트 코드 형태로 컴파일 되고, 인터프리터가 동작하는 자바 가상 기계에 의해 어떤 기종의 시스템에서도 쉽게 실행된다. 
		<P ALIGN="left"> 
		<IMG SRC="images/FYXIV011.GIF" BORDER=0 WIDTH="438" HEIGHT="326" HSPACE=3 VSPACE=3 ALIGN=BOTTOM></P>
		<P><B>객체지향(Object Oriented) 언어이다.</B>
		<P>클래스의 계층 구조, 상속(inheritance), 은닉(encapsulation), 다형성(polymorphism) 등과 같이 유용하고 효율적인 객체 지향 언어의 특징을 모두 제공하며, 자바에서는 분산환경, 클라이언트-서버 기반 시스템의 요구가 객체 기반 소프트웨어의 은닉된 메시지 전달 패러다임과 함께 만나고 있다.
		<P><B>멀티쓰레드(Multi-thread)를 지원한다.</B>
		<P>멀티쓰레드란 한 프로그램 내에 여러 개의 쓰레드가 존재하여 동시에 여러 가지 일을 수행하는 것으로, 하나의 단일 자바 프로그램은 여러 개의 쓰레드 프로그램으로 구성될 수 있으며, 이 쓰레드는 독립적으로 다른 일을 계속해서 할 수 있다. 이는 최종사용자와 높은 수준의 상호작용을 가능하게 해준다. 자바는 언어 자체에서 멀티쓰레드를 지원한다.
		<P><B>분산환경에서 동작한다.</B>
		<P>자바는 네트워크상의 운영을 고려해 설계된 언어이므로 소켓 바인딩 같은 TCP/IP 프로토콜과 URL처리 같은 HTTP 프로토콜을 처리할 수 있다. 자바의 네트워크 관련 패키지에는 이를 위해 미리 패키지로 구현해 놓은 Content Handler, InetAddress, ServerSocket, Socket, SocketImpl, URL, URLConnection, URLStreamHandler 클래스들이 포함되어 있어 네트워크 관련 프로그램 개발을 보다 쉽게 할 수 있다.
		<P><B>인터프리터형 프로그래밍 언어이다.</B>
		<P>자바는 인터프리터형 언어이지만 수행 성능과 보안, 플랫폼 독립성 등의 이유로 인터프리팅에 앞서 컴파일을 거치는 독특한 형태를 지니고 있다. C/C++ 같은 기존 언어와는 달리, 자바 컴파일러는 소스코드를 기종에 무관한 바이트코드로 만들고, 이를 자바런타임 시스템 즉, 자바가상 기계에서 동작하도록 한다. 즉, 자바는 실행시에 코드를 읽어들여 기계어로 번역하면서 수행되는 프로그램을 만드는 언어이다. 그렇다면 C나 C++, 파스칼 등과 같이 미리 기계어로 번역하여 변환된 바이너리를 수행하는 컴파일형 프로그래밍 언어에 비해 수행 속도가 현저하게 떨어지는 인터프리터 방식을 채택한 자바가 어떻게 살아남을 수 있을 것인가의 문제가 대두된다. 자바는 컴파일과 인터프리팅이 같이 존재하는 모델을 채택하고 있다. 컴파일하여 바이트코드로 변환한 다음 그 바이트코드를 번역하면서 수행하는 방식이다. 바이트코드는 플랫폼에 독립적인 형태로서 인터프리팅이 용이하도록 설계된 자바만의 독특한 형식을 가진다. 자바는 이러한 방식을 통해 플랫폼 독립성과 수행 성능의 향상이라는 두 마리 토끼를 잡으려 하고 있다. 하지만 아직은 만족할 만한 수행 성능을 보여주지 못하고 있는 것이 현실이다. 
		<P>▶ 기존의 프로그래밍 모델과 자바의 프로그래밍 모델 비교
		<P>- 기존의 프로그래밍 모델(C) : 컴파일 → 링크 → 실행 파일(바이너리)
		<P>- 자바의 프로그래밍 모델 : 컴파일 → 클래스 파일(바이트코드) → 인터프리팅
		<P ALIGN="center">
		<IMG SRC="images/FYXIV013.GIF" BORDER=0 WIDTH="497" HEIGHT="139" HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P><B>코드가 간단(Simple)하다.</B>
		<P>자바는 다른 객체지향 언어의 복잡성을 제거하여 설계되었다. 수많은 객체지향 특성과, C++의 외양을 그대로 유지하였으며, C++ 언어에 있는 복잡한 요소들을 과감하게 제거하였는데, 자바에서는 C++에서 허용되었던 포인터뿐만 아니라 구조체(struct)와 공용체(union), 그리고 연산자 중복(overloading), 가상함수 등이 제거되었으며, 다중상속을 지원하지 않는다.그러나 자바는 이러한 단순함을 가지면서도 C/C++에서 제공되지 않는 메모리 회수(Garbage Collection), 쓰레드 동기화, 풍부한 클래스 라이브러리 등 추가적인 기능을 제공한다. 즉, 자동적인 메모리 회수 기능은 메모리 관리를 위해 사용자가 일일이 free 선언을 해야하는 불편함을 해소했으며, 쓰레드 동기화는 멀티 쓰레드 프로그램을 더욱 간단히 구성하도록 도와준다. 또한 구문 자체가 단순해진 반면, 사용자 인터페이스, 그래픽, 네트워크 등을 지원하는 풍부한 클래스 라이브러리를 지원함으로써 사용자가 직접 프로그램 해야하는 번거로움을 많이 줄여준다. 또, C언어에는 있지만 자바에서 지원하지 않는 구조체 또는 공용체 등도 구현할 수 있는데 C에 비해 매우 간단하다. 자바의 클래스에서 메소드가 없으면 바로 구조체이다. 특별히 구조체라고 정의한 것은 없으며, 그냥 클래스를 구조체처럼 쓰면 된다. 자세한 내용은 뒤에서 설명하기로 한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD width="424">
				<P>자바가 C/C++과 다른점
		</tr>
		<tr>
			<TD width="424">
				<p class="TStep1">1. 구조체(Struct), 공용체(Union), 포인터(Pointer)를
				<p class="TStep1">&nbsp;&nbsp;&nbsp;지원하지 않는다.
				<P class="TStep1">2. typedef와 #define을 지원하지 않는다.
				<P class="TStep1">3. 연산자 다중정의를 지원하지 않는다.
				<P class="TStep1">4. 클래스 다중상속을 지원하지 않는다.
				<P class="TStep1">5. 문자 배열로서 String이라는 클래스를 지원한다.
				<P class="TStep1">6. Garbage Collection 기능 제공으로 메모리 할당과
				<P class="TStep1">&nbsp;&nbsp;&nbsp;해제 함수를 사용할 필요가 없다.
		</tr>
		</TABLE>
		<P><B>보안성(Secure)이 뛰어나다.</B>
		<P>엄격한 보안은 자바가 완벽한 네트워크 프로그램을 작성할 수 있는 잇점이기도 하다. 자바는 네트워크 환경에서 운영되는 언어이므로 다른 언어보다 안전에 대한 중요성이 요구된다. 다시 말해, 애플릿과 같은 프로그램의 다운로드시에 적절한 제재를 가하지 않으면 보안상 많은 문제를 발생시킬 수 있기 때문이다. 따라서 자바 코드는 바이러스, 파일의 삭제나 수정, 데이터 파괴작업이나 컴퓨터 오류 연산 등을 방지할 수 있는 환경에서 실행되도록 설계되었다. 
		<P>자바의 실행에 있어서 보안은 크게 3번 이루어진다. 컴파일 단계에서 보안성 체크를 하여 위반사항이 있을 경우 컴파일 되지 않는다. 컴파일 된 바이트코드를 실행하기 위해서 메모리로 적재시키는 단계에서 다시 한번 보안위반을 검사한다. 컴파일 단계에서 통과된 프로그램인 경우에도 해커에 의해서 바이트코드가 변경되거나 자바컴파일러를 대체하여 사용할 수 있기 때문이다. 마지막으로 실행할 때 다시 한번 보안검사를 한다. 브라우저를 사용하여 애플릿이 있는 웹 페이지를 방문할 경우 실행이 느린 것은 보안검사를 하는 시간이 많은 부분을 차지하기 때문이다.
		<P><B>고성능 언어이다.</B>
		<P>자바는 인터프리터 언어이므로 CPU 처리를 많이 요하는 프로그램의 경우 20∼30배, 네트워크 프로그램의 경우 5배정도 기존 프로그램보다 처리속도가 느리다. 이러한 단점을 보완하기 위해 선마이크로시스템즈는 JDK 1.1에 &quot;just-in-time&quot; 컴파일러를 도입해 처리속도를 향상 시켰으며 현재 Hot Spot이란 이름으로 버전1.4까지 출시되었다. 또한 자바 프로그램은 시스템 자원에 얽매이지 않는다. 그 예로 윈도우 운영체제에서 객체 지향 테크닉을 사용한 C++로 코딩된 고급 어플리케이션은 보통 8∼10MB의 메모리가 있어야 하지만, 같은 어플리케이션에서 자바는 3∼4MB의 메모리만을 필요로 한다. 
		<P><B>동적이다.</B>
		<P>자바는 컴파일시 엄격하게 정적인 검사를 하지만 런타임시는 시스템이 동적으로 링크를 수행한다. 즉, 자바는 실행시간까지 링크 과정을 연기함으로써 응용 프로그램이 동적으로 패치 될 수 있도록 한다. 이 방식은 상위 클래스가 수정됐을 때 하위 클래스까지도 다시 컴파일 하는 'Superclass Problem'을 해결한다. 
		<P><B>견고하다</B>
		<P>C/C++에서 사용하는 포인터의 개념은 디버깅이 어려운 런타임 오류를 많이 발생시킨다. 그러나 자바에서는 포인터 처리를 없앰으로써 런타임 오류 발생을 감소시켰으며, 메모리 포인터의 사용으로 주소 기억의 필요성을 없앴다.
		<P><B>모듈화(Modularity)가 가능하다.</B>
		<P>자바를 이용해 제사용 가능한 객체를 만들 수 있다. 이 객체는 향후 다른 프로그램 내에서 코드 수정 없이 제사용 가능하다.
		<P><B>무료 개발 환경을 제공한다.</B>
		<P>자바 컴파일러는 선마이크로시스템즈의 자회사인 자바소프트사의 홈페이지에서 Java Software Development Kit(J2SDK)와 API를 다운로드 받아 사용할 수 있으며, 확장 버전 또한 출시와 함께 다운로드 받을 수 있다. 현재의 개발자 툴킷은 대부분의 프로그래머들이 필요로 하는 조건을 충족시켜주는 7가지 강력한 툴을 포함하고 있다. 이러한 툴의 구성을 보면 애플릿을 표시하는 자바 애플릿 뷰어(appletviewer.exe), 자바 바이트코드를 실행하는 자바 인터프리터(java.exe), 자바 프로그램을 바이트코드로 컴파일하는 자바 컴파일러(javac.exe), 자바 소스코드에서 html 문서로 만들어내는 자바 문서생성기(javadoc.exe), 자바 클래스에서 C언어 헤더와 스텁 파일을 만드는 자바 헤더 및 스텁 파일 생성기(javah.exe), 자바 파일을 분해해서 자바 바이트 코드를 표시하도록 하는 자바 클래스 디셈블러(javap.exe), 자바 코드에 문법상의 문제를 찾는 자바 언어 디버거(jdb.exe)로 이루어져 있다. 
		</ul></td>
	</tr>
	</table>
</body>
</html>