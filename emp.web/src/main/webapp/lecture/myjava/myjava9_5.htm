<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">9.5</P></td>
        <td width="518">
        <p class="TitleTitle">TCP 파일서버 프로그램</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P> 다음 프로그램은 간단한 파일서버 프로그램의 예를 보인 것이다. 서버로부터 특정파일을 읽어들여 클라이언트 화면에 서버의 파일내용을 출력한다.<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>FileServer.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">&nbsp;	
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">&nbsp;
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">&nbsp;
			<p class="CNumber">38:
			<p class="CNumber">&nbsp;
			<p class="CNumber">39:
			<p class="CNumber">40:
			<p class="CNumber">41:
			<p class="CNumber">&nbsp;
			<p class="CNumber">42:
			<p class="CNumber">43:
			<p class="CNumber">&nbsp;
			<p class="CNumber">44:
			<p class="CNumber">45:
			<p class="CNumber">46:
			<p class="CNumber">47:
			<p class="CNumber">48:
			<p class="CNumber">49:
			<p class="CNumber">&nbsp;
			<p class="CNumber">50:
			<p class="CNumber">51:
			<p class="CNumber">52:
			<p class="CNumber">53:
			<p class="CNumber">54:
			<p class="CNumber">55:
			<p class="CNumber">56:
			<p class="CNumber">57:
			<p class="CNumber">58:
			<p class="CNumber">&nbsp;
			<p class="CNumber">59:
			<p class="CNumber">60:
			<p class="CNumber">61:
			<p class="CNumber">62:
			<p class="CNumber">63:
			<p class="CNumber">64:
			<p class="CNumber">65:
			<p class="CNumber">66:
</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.net.*;
			<P class="CStep1">import java.io.*;
			<P class="CStep1">class FileServer {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">ServerSocket s = (ServerSocket) null;
			<P class="CStep3">Socket s1;
			<P class="CStep3">byte[] intbuf = new byte[100];
			<P class="CStep3">String fileName;
			<P class="CStep3">try {
			<P class="CStep4">s = new ServerSocket(4321, 1);
			<P class="CStep3">} catch (IOException e) {
			<P class="CStep4">System.out.println(&quot;\nServer timed out!&quot;);
			<P class="CStep4">System.exit(-1);
			<P class="CStep3">}
			<P class="CStep3">while(true) {
			<P class="CStep4">try {
			<P class="CStep5">s1 = s.accept();
			<P class="CStep5">fileName = getFileName(s1);
			<P class="CStep5">sendFileToClient(s1, fileName);
			<P class="CStep5">s1.close();
			<P class="CStep4">} catch(IOException e) {
			<P class="CStep5">System.out.println(&quot;Error - &quot; + e.toString());
			<P class="CStep4">}
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep2">public static String getFileName(Socket s1) throws
			<P class="CStep3">IOException {
			<P class="CStep3">InputStream s1in;
			<P class="CStep3">DataInputStream d1In;
			<P class="CStep3">String sfile;
			<P class="CStep3">s1in = s1.getInputStream();
			<P class="CStep3">d1In = new DataInputStream(s1in);
			<P class="CStep3">sfile = d1In.readLine();
			<P class="CStep3">System.out.println(&quot;File to open for reading :
			<P class="CStep3">&quot; + sfile);
			<P class="CStep3">return(sfile);
			<P class="CStep2">}
			<P class="CStep2">public static void sendFileToClient (Socket s1,
			<P class="CStep2">String sfile) throws
			<P class="CStep3">IOException {
			<P class="CStep3">int c;
			<P class="CStep3">FileInputStream fis;
			<P class="CStep3">OutputStream s1out;
			<P class="CStep3">s1out = s1.getOutputStream();
			<P class="CStep3">File f = new File(sfile);
			<P class="CStep3">if(f.exists() != true) {
			<P class="CStep4">String error = new String (&quot;File &quot; + sfile +
			<P class="CStep4">&quot;은(는) 존재하지 않습니다....\n&quot;);
			<P class="CStep4">int len = error.length();
			<P class="CStep4">for(int i=0; i&lt;len; i++) {
			<P class="CStep5">s1out.write((int)error.charAt(i));
			<P class="CStep4">}
			<P class="CStep4">System.out.println(error);
			<P class="CStep4">return;
			<P class="CStep3">}
			<P class="CStep3">if(f.canRead()) {
			<P class="CStep4">fis = new FileInputStream(sfile);
			<P class="CStep4">System.out.println(&quot;Sending : &quot; + sfile);
			<P class="CStep4">while((c=fis.read()) != -1) {
			<P class="CStep5">s1out.write(c);
			<P class="CStep4">}
			<P class="CStep4">fis.close();
			<P class="CStep3">} else {
			<P class="CStep4">String error = new String (&quot;Can't open &quot; +
			<P class="CStep4">sfile + &quot;for reading...\n&quot;);
			<P class="CStep4">int len = error.length();
			<P class="CStep4">for(int i=0; i&lt;len ; i++) {
			<P class="CStep5">s1out.write((int)error.charAt(i));
			<P class="CStep4">}
			<P class="CStep4">System.out.println(error);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=100%>
			<p class="TStep1"> &gt; <B>java</B> FileServer</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ReadFile.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">&nbsp;
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">&nbsp;
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">&nbsp;
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">35:
			<P class="CNumber">36:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.net.*;
			<P class="CStep1">import java.io.*;
			<P class="CStep1">public class ReadFile {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">Socket s;
			<P class="CStep3">int port = 4321;
			<P class="CStep3">if(args.length != 2) {
			<P class="CStep4">System.out.println(&quot;Usage : java ReadFile &quot; +
			<P class="CStep4">&quot;<I>&lt;server&gt; &lt;file&gt;</I4>&quot;);
			<P class="CStep3">System.exit(-1);
			<P class="CStep3">}
			<P class="CStep4">try	{
			<P class="CStep4">s = new Socket (args[0], port);
			<P class="CStep4">sendFileName (s, args[1]);
			<P class="CStep4">receiveFile (s);
			<P class="CStep4">s.close();
			<P class="CStep3">} catch (IOException e) {
			<P class="CStep4">System.out.println(&quot;Connection failed&quot;);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep2">public static void sendFileName (Socket s,
			<P class="CStep3"> String fileName) throws IOException {
			<P class="CStep3">OutputStream  sOut;
			<P class="CStep3">DataOutputStream dOut;
			<P class="CStep3">sOut = s.getOutputStream();
			<P class="CStep3">dOut = new DataOutputStream(sOut);
			<P class="CStep3">String sendString = new String(fileName + &quot;\n&quot;);
			<P class="CStep3">dOut.writeBytes(sendString);
			<P class="CStep2">}
			<P class="CStep2">public static void receiveFile(Socket s)
			<P class="CStep2">throws IOException {
			<P class="CStep3">int c;
			<P class="CStep3">InputStream sIn;
			<P class="CStep3">sIn = s.getInputStream();
			<P class="CStep3">while ((c=sIn.read()) != -1) {
			<P class="CStep4">System.out.print((char)c);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> &gt; <B>java</B> ReadFile 127.0.0.1 ReadFile.java</TD>
		</tr>
		</TABLE>
		</ul></td>
    </tr>
	</table>
</body>
</html>