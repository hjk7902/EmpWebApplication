<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">6.2</P></td>
        <td width="518">
        <p class="TitleTitle">애플릿의 이해</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P> 애플릿은 웹브라우저에서 수행되므로 실행할 내용을 서버에서 내 컴퓨터로 내려받아 웹브라우저에서 실행된다. 애플릿이 실행되려면 반드시 JVM(Java Virtual Machine) 또는 JRE(Java Runtime Environment)가 필요한데, JVM은 웹브라우저 내에 이미 설치되어 있다. 이 때 JVM의 버전은 Netscape 4.X와, Explorer 5.X는 모두 1.1.X버전까지만 지원하지만 Netscape 6.0의 경우는 Java2(1.3)까지를 내장하고 있으며 Netscape 6.0을 설치할 때 JRE가 같이 설치된다. 이 사실은 매우 중요한데, 최근에 발표된 java 2 즉, JDK 1.2이상에서 추가된 새로운 기능을 애플릿에서 사용해도 현재 사용중인 브라우저가 그 애플릿을 수행 할 수 없다는 점이다. 다시 말해 웹브라우저가 가지고 있는 JDK의 버전이 너무 낮아서 java2를 지원하지 않는다는 것이다. 실제로, 스윙(AWT를 토대로 향상된 GUI 프로그래밍을 도와주는 Java2의 핵심 API 중의 하나)을 이용하여 애플릿을 만들어도 브라우저가 지원하지 않기 때문에 사용할 수가 없다.<P>이에 대한 해결방법은 다음과 같다. 즉, JDK1.2를 설치하면 자동으로 JDK1.2가 웹브라우저에 플러그인 되며, 그때부터 JDK1.2의 기능을 가진 애플릿도 수행할 수 있다. 그러나, JDK1.2의 설치를 강요할 수 없으므로 웹브라우저가 JDK1.2이상의 버전을 가지고 출시되기를 기다리거나, HTML 변환기를 이용하여 &lt;APPLET&gt; 태그를 &lt;OBJECT&gt; 태그 또는 &lt;EMBED&gt; 태그로 변환해서 실행시켜야 한다. HTML 변환기는 다음 사이트에서 얻을 수 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></td>
			<TD WIDTH=97%>
			<P class="TStep1">http://java.sun.com/products/plugin/
			<P class="TStep1">http://java.sun.com/products/plugin/1.3/converter.html</TD>
		</tr>
		</TABLE>
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV251.GIF" BORDER=0 HSPACE=3 VSPACE=4 ALIGN=BOTTOM>
		<P>애플릿은 다른 컴퓨터에서 내려받아 실행되기 때문에 보안을 위해 다음과 같은 작업을 금지하고 있다.
		<P>- 클라이언트 컴퓨터의 어떤 프로그램도 실행할 수 없다.
		<P>- 클라이언트 컴퓨터의 파일을 읽거나 쓸 수 없다.
		<P>- 운영체제의 Native 메소드를 수행할 수 없다.
		<P>- 애플릿은 자신을 보내준 서버와만 통신할 수 있다. 즉, 애플릿은 내려받은 서버를 제외한 다른 컴퓨터와 네트워크연결을 할 수 없다.
		<P>그러나 항상 이상의 작업을 못하는건 아니고 Signed 애플릿을 이용하면 할 수도 있다.
		</ul>
		<P class="TSubmenu">6.2.1 애플릿의 라이프사이클(init(), start(), stop(), destroy())
		<ul>
		<P>어플리케이션 프로그램의 시작부분은 main() 메소드인데 애플릿은 어플리케이션과는 다르기 때문에 다음 내용을 반드시 기억해야 한다. 설명하려는 메소드는 이미 애플릿에 정의되어있는 메소드이므로 재정의 해서 사용해야 한다.
		<P>6.2.1.1 init()
		<P>이 메소드는 애플릿을 실행시킬 때, 브라우저가 가장먼저 실행시키는 메소드이다. 물론 애플릿의 해당 생성자가 있으면 먼저 실행되지만 애플릿에서는 생성자 대신 init() 메소드를 주로 이용한다.
		<P>init() 메소드의 주된 기능은 생성자가 하는 일을 하는데, 멤버변수의 초기화나 기타 애플릿이 본격적으로 수행되기 전의 초기화 작업을 담당하며, 단 한번만 수행된다.  즉, 애플릿이 있는 A 웹페이지를 보고 나서 B 웹페이지로 이동하면 애플릿 수행이 중단되고 새로운 웹페이지가 화면에 나타나는데 다시 A 웹페이지로 이동해도 내려 받기를 한번 더 수행하지 않고 이미 메모리에 저장되어 있던 A의 애플릿이 재 수행된다. 이때 init() 메소드는 수행되지 않는다. init() 메소드는 처음 애플릿을 내려 받았을 때만 수행되며, 웹브라우저를 종료시키면 애플릿은 메모리에서 없어진다.
		<P>6.2.1.2 start()
		<P>start() 메소드는 init() 수행 후 웹브라우저가 수행하는데, 애플릿이 화면에서 재 수행될 때 호출된다. A 웹페이지에서 B 웹페이지로 갔다가 다시 A 웹페이지로 오면 A 웹페이지의 애플릿이 재 수행되는데 이때, init() 메소드부터 실행하지 않고 바로 start() 메소드가 수행된다. 또, 웹브라우저가 아이콘화 되었다가 다시 화면에 나타날 때도 애플릿이 다시 실행되어야 하므로 start() 메소드가 수행된다. 따라서, 이 메소드가 어플리케이션 프로그램의 main() 메소드와 유사함을 알 수 있다.
		<P>6.2.1.3 stop()
		<P>stop() 메소드는 start() 메소드의 반대 기능을 한다. 브라우저가 아이콘화 되거나, 다른 URL로 이동할 때 stop() 메소드를 호출한다.
		<P>6.2.1.4 destroy()
		<P>destroy() 메소드는 애플릿이 확보한 자원을 반납할 때 주로 사용된다. 애플릿은 한번 내려받으면 메모리에 남아있는데, 브라우저가 이를 삭제할 때 이 메소드가 수행된다. 특별한 경우가 아니면 구현할 필요는 없고, 다만 애플릿이 init() 메소드 안에서 여러 쓰레드(Thread)를 수행시켰을 경우에 쓰레드를 종료시키거나 웹브라우저가 종료될 때에 구현해준다.
		<P>6.2.1.5 예제프로그램
		<P>다음 프로그램은 init(), start(), stop() 메소드의 사용 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>AppletExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.applet.*;
			<P class="CStep1">public class AppletExample extends Applet {
			<P class="CStep2">public void <B>init</B>() {
			<P class="CStep3">System.out.println(&quot;init() 메소드 실행됨&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void <B>start</B>() {
			<P class="CStep3">System.out.println(&quot;start() 메소드 실행됨&quot;);
			<P class="CStep3">}
			<P class="CStep2">public void <B>stop</B>() {
			<P class="CStep3">System.out.println(&quot;stop() 메소드 실행됨&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>앞의 프로그램을 컴파일 한 후 실행시키려면 다음과 같은 HTML파일을 만들어야 한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>AppletExample.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber"><B>5:</B>
			<p class="CNumber"><B>6:</B>
			<p class="CNumber">7:
			<p class="CNumber">8:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;head&gt;&lt;title&gt;애플릿 태스트&lt;/title&gt;
			<P class="CStep1">&lt;/head&gt;
			<P class="CStep1">&lt;body&gt;
			<P class="CStep1">&lt;applet code=AppletExample.class width=500 height=500&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/body&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>5 : &lt;applet&gt; 태그의 code 속성에 생성된 클래스파일명을 입력하고, width와 height는 애플릿의 크기를 지정한다. 이렇게 .class 파일과 .html 파일이 만들어지면 브라우저를 통해서 실행시킨다.
		<P>한가지 주의할 사항으로 이 예제는 단지 init(), start(), stop() 메소드가 언제 수행되는지를 나타낸 예제일 뿐이므로 앞의 프로그램을 웹브라우저로 실행시키면 아무것도 나타나지 않는다. 따라서, 웹브라우저에서 결과를 보려면 콘솔창을 띄워야 하는데, 익스플로러의 경우 &quot;도구&quot; 메뉴의 &quot;인터넷 옵션&quot;을 선택한 후 다음과 같은 &quot;인터넷 옵션&quot; 창이 나타나면 고급 탭에서 &quot;Java 콘솔 사용&quot;을 선택한 후 시스템을 재 시작한다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV252.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>시스템이 재 시작된 후 다시 익스플로러를 실행시켜 &quot;보기&quot; 메뉴에서 &quot;Java 콘솔&quot;을 선택하면 다음과 같은 자바 콘솔 창이 나타난다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV253.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>웹 브라우저에서 위와 같은 콘솔 창이 나타난 후 앞의 AppletExample.html파일을 실행시키면 결과를 확인할 수 있다.
		</ul>
		<P class="TSubmenu">6.2.2 애플릿 디스플레이(paint(), repaint(), update())
		<ul>
		<P>애플릿은 그래픽 환경에서 수행되기 때문에 println() 메소드는 사용할 필요가 없다. 애플릿에서는 글을 쓰는 것이 아니라 글을 그리는 것이다.
		<P>6.2.2.1 paint()
		<P>먼저 다음 프로그램을 보면서 설명하기로 한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>HelloWorld.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.applet.*;
			<P class="CStep1">public class HelloWorld extends Applet {
			<P class="CStep2">int paintCount = 0;
			<P class="CStep2">public void <B>paint</B>(Graphics g) {
			<P class="CStep3">g.drawString(&quot;Hello World!&quot;, 25, 25);
			<P class="CStep3">paintCount++;
			<P class="CStep3">System.out.println(paintCount);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>앞의 프로그램을 실행시키기 위해 HTML 파일을 만들고 appletviewer로 실행시키면 아래와 같은 화면이 생성된다. (HTML 파일에서 applet 태그의 width와 height 값은 각각 100으로 주었다고 가정)
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV254.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>화면에 &quot;Hello World&quot;라는 문자가 나타나는데 사용한 메소드는 paint()이다. 이 메소드도 Applet 클래스에 정의되어 있는데, 정확히 말하면 부모 클래스인 Component 클래스에 정의되어 있다.
		<P>paint() 메소드가 수행되는 시점은 start() 메소드와 비슷하여 애플릿이 화면에 다시 그려질 때 호출된다. 예를 들어 다음 그림을 보자.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV255.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>이 그림을 잘 보면, 애플릿의 일부 영역이 탐색기 창에 가려져 있다. 만약 애플릿 창을 마우스로 클릭하면 애플릿 창이 탐색기 창 위로 올라오고 이때 탐색기에 가려졌던 부분이 다시 화면에 그려지게 된다. 이렇게 애플릿이 다시 그려질 필요가 있을 때 paint() 메소드가 브라우저에 의해 자동 호출된다. 물론 이전에 가려졌던 부분만 다시 그려지게 된다. 이처럼 애플릿의 화면 일부가 깨져서 다시 그리는 것을 Exposure라고 한다.
		<P>paint() 메소드의 인자는 Graphics 객체에서 넘어오며, Graphics 객체를 통해서 컴포넌트에 여러 가지 형태를 그릴 수 있다.
		<P>6.2.2.2 repaint()
		<P>repaint() 메소드는 인자가 없으며 다른 메소드와 달리 사용자가 직접 호출하여 사용한다. 만약 주식정보 그래프를 그리는 애플릿을 개발할 때 실시간으로 정보를 갱신해야한다. 이처럼 화면에 무언가를 그릴 때는 paint() 메소드 안에 있거나 관련이 있어야 하는데 브라우저가 paint() 메소드를 자동으로 호출해 주기 때문에 일반적으로 직접 호출하지 못하므로 대신 repaint() 메소드를 사용하게 된다. 이 메소드를 직접 호출하면 자동으로 paint() 메소드를 호출해 준다. 정확히 말하면 repaint() 메소드는 update() 메소드를 호출하고, update() 메소드는 화면을 한번 지운 후 다시 paint() 메소드를 호출한다.
		<P>이 내용을 그림으로 표현하면 다음과 같다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV256.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>여기서 참고할 사항은 update() 메소드가 화면을 한번씩 지우면 화면이 깜박거릴 수 있는데 이를 방지하려면 update() 메소드를 다음과 같이 재정의(overriding)하여 사용한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=9%></td>
			<TD WIDTH=90%>
			<P class="CStep1">public void <B>update</B>(Graphics g) {
			<P class="CStep1"><B>paint</B>(g);
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">6.2.3 &lt;applet&gt; 태그와 &lt;param&gt; 태그
		<ul>
		<P>6.2.3.1 &lt;applet&gt; 태그
		<P>애플릿을 홈페이지에 설치하려면 &lt;applet&gt; 태그의 정확한 이해가 필요하다. 핫자바 1.0 알파 버전이 지원하던 JDK 1.0에서는 HTML 태그가 &lt;applet&gt;이 아니라 &lt;app&gt;였다. &lt;app&gt; 태그는 다음과 같이 하나의 태그 안에 모든 속성을 기술하는 형식을 사용하는데 현재 웹브라우저는 &lt;app&gt; 태그를 지원하지 않기 때문에 관심을 둘 필요는 없다. 
		<P>이와는 달리 &lt;applet&gt; 태그는 HTML 명령의 규격을 준수하여 &lt;applet&gt;으로 시작해서 &lt;/applet&gt;으로 끝나며, 속성은 &lt;param&gt; 태그를 이용하여 값을 주게된다.
		<P>&lt;applet&gt; 태그의 형식은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></td>
			<TD WIDTH=97%>
			<p class="TStep1">&lt;applet [ archive=&quot;압축파일 리스트&quot; ]
			<p class="TStep1">	code=&quot;<I>클래스 이름</I>&quot;
			<p class="TStep1">	width=&quot;<I>픽셀 단위의 애플릿 폭</I>&quot;
			<p class="TStep1">	height=&quot;<I>픽셀 단위의 애플릿 높이</I>&quot; 
			<p class="TStep1">	[ codebase=&quot;<I>애플릿 파일이 존재하는 기반 URL</I>&quot; ]
			<p class="TStep1">	[ alt=&quot;<I>텍스트 전용 브라우저에서 대신 사용하는 텍스트</I>&quot; ]
			<p class="TStep1">	[ name=&quot;<I>별명-같은 문서에서는 이 이름으로 사용할 수 있다</I>&quot; ]
			<p class="TStep1">	[ align=&quot;<I>애플릿 정렬 방식</I>&quot; ]
			<p class="TStep1">	[ vspace=&quot;<I>세로 방향의 여백</I>&quot; ]
			<p class="TStep1">	[ hspace=&quot;<I>가로 방향의 여백</I>&quot; ]
			<p class="TStep1">&gt;
			<p class="TStep1">[ &lt;param name=&quot;<I>속성 이름</I>&quot; value=&quot;<I>속성 값</I>&quot;&gt; ]
			<p class="TStep1">[ &lt;param ...&gt; ]
			<p class="TStep1">[ ... ]
			<p class="TStep1">&lt;/applet&gt;</TD>
		</tr>
		<TR>
			<TD WIDTH=2%></td>
			<TD WIDTH=97%>
			<p class="TStep1"><I>[ ] 안의 부분은 생략이 가능하다.</I></TD>
		</tr>
		</TABLE>
		<P>다음은 &lt;applet&gt; 태그의 속성에 대한 설명이다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>[archive]</B></TD>
			<TD WIDTH=84%>
			<P>애플릿이 여러 클래스와 함께 수행될 때, 필요한 클래스를 jar, zip 형태로 압축해서 내려받을 때 사용한다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>code</B></TD>
			<TD WIDTH=84%>
			<P>실제 수행할 애플릿 클래스이다. class확장자를 붙인다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>width</B></TD>
			<TD WIDTH=84%>
			<P>애플릿의 폭을 픽셀단위로 지정한다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>height</B></TD>
			<TD WIDTH=84%>
			<P>애플릿의 길이(높이)를 픽셀단위로 지정한다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>[codebase]</B></TD>
			<TD WIDTH=84%>
			<P>애플릿 파일이 있는 URL을 지정한다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>[alt]</B></TD>
			<TD WIDTH=84%>
			<P>애플릿을 지원하지 않는 브라우저일 경우 애플릿을 대치할 글을 지정한다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>[name]</B></TD>
			<TD WIDTH=84%>
			<P>HTML 상에서 애플릿 이름을 지정한다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>[align]</B></TD>
			<TD WIDTH=84%>
			<P>애플릿의 정렬방식을 결정한다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>[vspace]</B></TD>
			<TD WIDTH=84%>
			<P>애플릿과 다른 태그나 글 사이의 높이 간격을 나타낸다.</TD>
		</tr>
		<TR>
			<TD WIDTH=15%>
			<P ALIGN=CENTER><B>[hspace]</B></TD>
			<TD WIDTH=84%>
			<P>애플릿과 다른 태그나 글 사이의 넓이 간격을 나타낸다.</TD>
		</tr>
		</TABLE>
		<P>6.2.3.2 &lt;param&gt; 태그
		<P>&lt;param&gt; 태그를 설명하기 전에 어플리케이션 프로그램에 대해 잠깐 설명하기로 한다. 먼저, 다음 예를 보면,
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> <B>&gt;java Test 10 20</B></TD>
		</tr>
		</TABLE>
		<P>Test.class를 수행하는 문장이다. 여기서 10과 20은 인자값으로 main(String[] args) 메소드의 인자로 넘어가는 값이다. 이와 같이 애플릿에서 클래스에 인자값을 전달할 때 &lt;param&gt; 태그를 이용한다.
		<P>다음 HTML 파일이 ParamExample.class 파일을 호출하면서 &lt;param&gt; 태그를 사용하고 있다. 즉 애플릿을 호출하면서 인자를 넘기고 있는데, 이름은 pValue이고 값은 &quot;Hello, Java&quot; 이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ParamExample.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=ParamExample.class width=200 height=200&gt;
			<P class="CStep1"><B>&lt;param name=pValue value=&quot;Hello, Java&quot;&gt;</B>
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ParamExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class ParamExample extends Applet
			<P class="CStep2">public void init(){
			<P class="CStep3">String s = <B>getParameter</B>(&quot;pValue&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep3">g.drawString(s, 50, 50);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>HTML 파일에서 넘겨준 인자값을 읽을 때는 getParameter() 메소드를 이용한다.
		</ul>
		<P class="TSubmenu">6.2.4 그림 그리기
		<ul>
		<P>화면에 그림을 그리는 예를 알아보기로 하자. 
		<P>다음 프로그램은 서버에서 그림을 내려받아 화면에 그려주는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>DrawImageExample.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=DrawImageExample.class width=200 height=150&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>DrawImageExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">&nbsp;
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.applet.Applet;
			<P class="CStep1">public class DrawImageExample extends Applet {
			<P class="CStep2"><B>Image</B> logoImage;
			<P class="CStep2">public void init() {
			<P class="CStep3">logoImage = <B>getImage</B>(<B>getDocumentBase</B>(),
			<P class="CStep3">&quot;images/duke.gif&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep3">g.<B>drawImage</B>(logoImage, 25, 25, this);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>4 : Image 객체를 가리킬 reference를 만들고 있다.
		<P>6 : getImage() 메소드를 이용해 실제 이미지를 지정한다. getImage() 메소드의 첫 번째 인자 값으로 이미지의 정확한 위치를 URL 방식으로 지정한다. 이를 위해 getDocumentBase() 메소드를 이용하는데 이는 클래스 파일을 지정하는 HTML의 URL을 알려주는 메소드이다. 두 번째 인자 값으로는 그림의 이름을 스트링형으로 지정해 준다. 즉, HTML 파일이 있는 곳에 images 디렉토리가 있고, 그 안에 duke.gif 파일을 지정함을 나타낸다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV257.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>9 : 실제 그림을 화면에 나타낸다. 이때 서버에서 내려받게 된다. getImage() 메소드는 그림이 있는 곳을 알려준다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV258.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>다음 프로그램은 &lt;param&gt; 태그를 이용하여 그림파일을 HTML 파일 내에서 지정하게 한 예인데, 앞의 프로그램은 그림 이름을 자바 소스코드 내에 지정했기 때문에 다른 그림을 부르고 싶으면 그때마다 코드를 수정한 후 다시 컴파일을 해야 하는 불편함이 있다. 
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>DrawImageExample.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=DrawImageExample.class width=200 height=200&gt;
			<P class="CStep1"><B>&lt;param name=logo value=&quot;duke.gif&quot;&gt;</B>
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>DrawImageExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.applet.*;
			<P class="CStep1">public class DrawImageExample extends Applet {
			<P class="CStep2">Image logo;
			<P class="CStep2">public void init() {
			<P class="CStep3">String imageName = <B>getParameter</B>(&quot;logo&quot;);
			<P class="CStep3">logo = getImage(getDocumentBase(), imageName);
			<P class="CStep2">}
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep3">g.drawImage(logo, 0, 0, this);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">6.2.5 오디오 클립
		<ul>
		<P>다음 프로그램은 오디오 클립을 사용하는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>PlayAudio.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=PlayAudio.class width=200 height=100&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>PlayAudio.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.Graphics;
			<P class="CStep1">import java.applet.Applet;
			<P class="CStep1">public class PlayAudio extends Applet {
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep3">g.drawString(&quot;야~ 소리가 들린다.&quot;, 25, 25);
			<P class="CStep3"><B>play</B>(<B>getCodeBase</B>(), &quot;etca.mid&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>6 : play()는 소리를 내는 메소드이다. getCodeBase()는 바로 앞 예제의 getDocumentBase() 메소드와 유사하며 HTML 파일이 있는 곳을 나타내지만, getCodeBase()는 class 파일이 있는 곳을 나타낸다. 이 줄의 전체적인 의미는 class 파일의 디렉토리에 있는 anytime.mid 파일을 읽어서 클라이언트에서 연주한다. 지원하는 파일 형식은 .au, .wav, .mid 등 흔히 접할 수 있는 대부분의 형태를 연주할 수 있다. (JDK 1.3 의 기준이다. 그 이전의 JDK에서는 지원하지 않는 형태가 있을 수 있다.) 
		<P>이 예제에서는 소리를 내는 play() 메소드가 paint() 메소드 안에 있기 때문에 paint() 메소드가 호출될 때마다 음악이 연주된다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV259.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>다음 프로그램은 음악을 반복해서 연주하기 위해 loop() 메소드를 이용하는 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>LoopPlayAudio.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=LoopPlayAudio.class width=200 height=100&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>LoopPlayAudio.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.Graphics;
			<P class="CStep1">import java.applet.*;
			<P class="CStep1">public class LoopPlayAudio extends Applet {
			<P class="CStep2">AudioClip sound;
			<P class="CStep2">public void init() {
			<P class="CStep3">sound = <B>getAudioClip</B>(getCodeBase(), &quot;etca.mid&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void <B>paint</B>(Graphics g) {
			<P class="CStep3">g.drawString(&quot;아름다운 소리입니까?&quot;, 25, 25);
			<P class="CStep2">}
			<P class="CStep2">public void start() {
			<P class="CStep3">sound.<B>loop</B>();
			<P class="CStep2">}
			<P class="CStep2">public void stop() {
			<P class="CStep3">sound.<B>stop</B>();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>이 예제는 애플릿이 화면에 나타나면서 계속 연주하게 된다. 
		<P>5 : init() 메소드에서 getAudioClip()를 통해 오디오파일을 지정한다.
		<P>11 : start() 메소드에서 loop() 메소드를 호출한다. 이는 오디오 파일을 반복시키는 기능이다. 그런데, 다른 URL로 이동을 하면 stop() 메소드가 호출되어(15번째 줄) 음악을 멈춘다. 이렇게 지정하지 않으면 브라우저를 닫을 때까지 계속 연주하게 된다. 애플릿을 아이콘화 시켜켜 확인하기 바란다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV260.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		</ul>
		<P class="TSubmenu">6.2.6 애플릿 이벤트 모델
		<ul>
		<P>여기서는 애플릿에서 사용자가 발생시킨 이벤트를 다루는 방법에 대해 설명하기로 한다. 다음과 같은 애플릿을 만들어 애플릿 위에서 마우스를 클릭하면 그 자리에 &quot;클릭&quot;이라는 글자가 출력되게 한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ClickHere.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=ClickHere.class width=200 height=200&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ClickHere.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">&nbsp;
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">&nbsp;
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.Graphics;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">import java.applet.*;
			<P class="CStep1">public class ClickHere extends Applet
			<P class="CStep1"><B>implements MouseListener</B> {
			<P class="CStep2">int mouseX = -1;
			<P class="CStep2">int mouseY = -1;
			<P class="CStep2">public void init() {
			<P class="CStep3">addMouseListener(this);
			<P class="CStep3">// Applet에 MouseListener를 붙임.
			<P class="CStep2">}
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep3">if (mouseX != -1 &amp;&amp; mouseY != -1)
			<P class="CStep3">g.drawString(&quot;클릭&quot;, mouseX, mouseY);
			<P class="CStep2">}
			<P class="CStep2">public void <B>mousePressed</B>(MouseEvent evt) {
			<P class="CStep3">mouseX = evt.getX();
			<P class="CStep3">mouseY = evt.getY();
			<P class="CStep3"><B>repaint</B>();
			<P class="CStep2">}
			<P class="CStep2">public void mouseClicked(MouseEvent e) {}
			<P class="CStep2">public void mouseEntered(MouseEvent e) {}
			<P class="CStep2">public void mouseExited(MouseEvent e) {}
			<P class="CStep2">public void mouseReleased(MouseEvent e) {}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>4 : 애플릿을 상속받으면서 MouseListener까지 implements하고있다. 즉 ClickHere라는 클래스는 애플릿이면서 이벤트 핸들러이다.
		<P>7 : init() 메소드 안에 8번째 줄의 addMouseListener(this);가 있다. 즉 애플릿에 이벤트리스너(EventListener)를 붙였기 때문에 이 애플릿에서 일어나는 마우스와 관련된 이벤트를 처리할 수 있다.
		<P>10 : paint() 메소드에서는 mouseX, mouseY 값을 이용 화면에 &quot;클릭&quot;이라는 문자열을 출력한다. mouseX와 mouseY값은  15번째와 16번째 줄에서 얻는다.
		<P>14 : mousePressed() 메소드는 사용자가 애플릿에서 마우스를 누를 때 호출되며, mouseX, mouseY 변수값을 지정한다. evt.getX(), evt.getY()에서 evt는 이 메소드에 전달된 Event 객체인데, getX()와 gety() 메소드를 호출하여 클릭한 곳의 x,y 좌표를 얻는다.
		<P>17 : repaint() 메소드를 호출한다. repaint()는 update() 메소드를 호출하고, update() 메소드는 화면을 한번 지우고 다시 paint() 메소드를 호출한다. 
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV261.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>앞 예제의 22번째 줄 다음에 아래의 메소드를 추가하여 실행시킨 후 결과를 확인하기 바란다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P class="CStep1">public void <B>update</B>(Graphics g) {
			<P class="CStep1">paint(g);
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV262.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P> 
		<P>다음 프로그램은 앞에서 만든 ClickHere 애플릿을 변형하여 애플릿 위에서 마우스를 드래그(drag)하며 &quot;끌기&quot;라는 문자열을 끌고 다니는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=DragHere.class width=200 height=200&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>  
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">&nbsp;
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.Graphics;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">import java.applet.*;
			<P class="CStep1">public class DragHear extends Applet 
			<P class="CStep2"><B>implements MouseListener, MouseMotionListener </B>{
			<P class="CStep2">int mouseX = -1;
			<P class="CStep2">int mouseY = -1;
			<P class="CStep2">public void init() {
			<P class="CStep3">addMouseListener(this);
			<P class="CStep3">// Applet에 MouseListener를 붙임.
			<P class="CStep3">addMouseMotionListener(this);
			<P class="CStep3">}
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep2">if (mouseX != -1 &amp;&amp; mouseY != -1)
			<P class="CStep3">g.drawString(&quot;끌기&quot;, mouseX, mouseY);
			<P class="CStep3">}
			<P class="CStep2">public void <B>mousePressed</B>(MouseEvent evt) {
			<P class="CStep2">mouseX = evt.getX();
			<P class="CStep3">mouseY = evt.getY();
			<P class="CStep3"><B>repaint</B>();
			<P class="CStep3">}
			<P class="CStep2">public void mouseClicked(MouseEvent e) {}
			<P class="CStep2">public void mouseEntered(MouseEvent e) {}
			<P class="CStep2">public void mouseExited(MouseEvent e) {}
			<P class="CStep2">public void mouseReleased(MouseEvent e) {}
			<P class="CStep2">public void <B>mouseDragged</B>(MouseEvent evt) {
			<P class="CStep3">mouseX = evt.getX();
			<P class="CStep3">mouseY = evt.getY();
			<P class="CStep3"><B>repaint</B>();
			<P class="CStep2">}
			<P class="CStep2">public void mouseMoved(MouseEvent e) {}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>5 : MouseMotionListener를 implements하였다. 
		<P>10 : 애플릿에 이 Listener를 붙인다.
		<P>26 : ∼부터는 mouseDragged() 메소드를 구현하고 있다.
		<P>이 프로그램을 실행하면 다음 결과화면처럼 마우스를 드래그할 때 &quot;끌기&quot;라는 문자열이 따라다닌다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV263.GIF" BORDER=0 ALIGN=BOTTOM>
		</ul>
		<P class="TSubmenu">6.2.7 Dual Purpose Code
		<ul>
		<P>다음 프로그램은 하나의 코드로 애플릿으로도 사용하고 어플리케이션으로도 사용할 수 있는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>DualPurposeExample.html</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">&lt;html&gt;
			<P class="CStep1">&lt;applet code=DualPurposeExample.class width=250 height=100&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/html&gt;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>DualPurposeExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.applet.Applet;
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">import java.util.*;
			<P class="CStep1">public class DualPurposeExample <B>extends Applet</B> {
			<P class="CStep2">Date d;
			<P class="CStep2">public static void <B>main</B>(String[] args) {
			<P class="CStep3">Frame f = new Frame(&quot;Java Application&quot;);
			<P class="CStep3">DualPurposeExample m = new DualPurposeExample(); 
			<P class="CStep3">f.add(m, BorderLayout.CENTER);
			<P class="CStep3">f.setSize (250, 150);
			<P class="CStep3"><B>m.init();</B>
			<P class="CStep3"><B>m.start();</B>
			<P class="CStep3">f.<B>setVisible</B>(true); // paint() 수행
			<P class="CStep2">}
			<P class="CStep2">public void <B>init</B>() {
			<P class="CStep3">d = new Date();
			<P class="CStep2">}
			<P class="CStep2">public void <B>paint</B>(Graphics g) {
			<P class="CStep3">g.drawString(&quot;현재 시간 : &quot;, 25, 25);
			<P class="CStep3">g.drawString(d.toString(), 25, 60);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>먼저 애플릿의 관점에서 설명하면 이 클래스는 분명히 애플릿이며 애플릿은 Panel임을 기억해야 한다. 실행될 때 제일먼저 16번째 줄의 init() 메소드가 처리되는데, 여기서는 현재 시간을 알아내서 저장한다. 그리고 브라우저에 의해 19번째 줄의 paint() 메소드가 수행되면 화면에 시간이 표시된다. 7번째 줄에서 main() 메소드가 있지만, 애플릿에서는 무시된다. 결과화면은 다음 그림과 같다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV264.GIF" BORDER=0 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P> 두 번째로 어플리케이션의 관점에서 보자. 이 어플리케이션 프로그램의 시작점은 당연히 main() 메소드이다. DualPurposeExample 클래스는 패널(Applet은 Panel의 하위 클래스)임으로 독립적으로 화면에 출력되지 않고 프레임같은 컨테이너가 필요하다. 그래서 8번째 줄에서 프레임을 생성하고, 9번째 줄에서 패널을 생성하고, 10번째 줄에서 프레임에 패널을 붙인다. 12번째 줄에서 애플릿이라면 웹브라우저가 init() 메소드를 자동으로 호출하지만, 어플리케이션에서는 직접 호출하여 현재 시간을 저장한다. 그리고 13번째 줄에서 start() 메소드를 호출하는데 어플리케이션에서는 필요없다. 14번째 줄에서 setVisible(true)메소드를 호출하는데, 이때 paint() 메소드가 호출된다. paint() 메소드는 화면에 그림을 그릴 때 자동으로 호출된다. setVisible() 메소드는 프레임과 그 안의 컴포넌트를 나타낼 때 사용되므로 setVisible() 메소드를 호출하는 시점이 paint()가 호출되는 시점이다. 결과화면은 다음과 같다. 
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV265.GIF" BORDER=0  HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		</ul></td>
    </tr>
	</table>
</body>
</html>