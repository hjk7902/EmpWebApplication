<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76"bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">1.3</P></td>
		<td width="518">
        <p class="TitleTitle" align="left">Java2 SDK(Java2 Software Development Kit)</p></td>
    </tr>
	</table>
	
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<P class="TSubmenu"><br>1.3.1 설치 및 환경 설정
		<ul>
        <p>선사에서는 JDK(Java Development Kit, 자바 개발 도구)라는 이름으로 컴파일러, 인터프리터 등의 여러 자바 환경 도구들을 배포해왔는데, 이후 버전1.3으로 업드레이드 되면서 J2SDK(Java 2 Software Development Kit)라고 부르고 있다. 자바는 이론적으로 거의 모든 시스템에 이식 가능하지만 선사의 자바 홈페이지(http://java.sun.com)에서 바로 구할 수 있는 JDK는 솔라리스 버전과 윈도우(윈도우95/98와 윈도우NT)용, 그리고 맥 OS용이다. 여기서는 Microsoft Windows 용을 기준으로 설명하기로 한다.</p>
		<P>선사의 홈페이지에서 프로그램을 다운로드 받은 다음 설치한 후 시작하기로 하자.
		<P>이후는 JDK가 설치된 폴더가 C:\j2sdk로 되어 있는 것을 기준으로 한다.
		<P>path 환경 변수를 설정하는 이유는 JDK 실행 파일(javac.exe, java.exe, javadoc.exe, 등)을 실행할 때 어느 디렉토리에서든지 전체 경로를 지정하지 않고 실행하고자 하기 때문이다. 만일 path 설정을 하지 않았다면 위 JDK 실행 파일을 실행할 때 항상 다음과 같이 전체 경로를 일일이 기술해야 한다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
            <TD WIDTH=97%>
            <p class="TStep1">C:\j2sdk\bin\javac MyClass.java
		</TABLE>
        <p>윈도우에서 자바를 설치한 디렉토리가 C:\j2sdk인 경우 다음과 같이 클래스 경로를 autoexec.bat 파일에 함께 지정한다.
		<p>
        <TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
            <TD WIDTH=97%>
            <p class="TStep1">set PATH=%PATH%;C:\j2sdk\bin;
		</TABLE>
		<p>윈도우 NT에서의 환경 설정은 제어판에서 시스템을 선택한 후 환경변수에서 Path 부분에 C:\j2sdk\bin 경로를 세미콜론(;)으로 구분하여 추가한다.</p>
		<P>솔라리스에서는 설치한 디렉토리가 /usr/java인 경우 다음과 같이 클래스 경로를 지정한다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
			<TD WIDTH=100%>
			<p class="TStep1">sh이나 ksh을 사용하는 경우
        <TR>
			<TD WIDTH="476">
			<p class="TStep1">PATH=$PATH:/usr/java/bin
			<p class="TStep1">export PATH
		</tr>	
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
			<TD WIDTH=100%>
			<p class="TStep1">csh을 사용하는 경우
        <TR>
            <TD>
            <p class="TStep1">set path=( $path /usr/java/bin )
		</tr>
		</TABLE>
		JDK 설치가 끝나면 필수적인 자바 프로그래밍 환경은 갖추게 된다.
		</ul>
		<P class="TSubmenu">1.3.2 자바 환경 도구
		<ul>
		<P>자바 환경 도구란 /j2sdk/bin 디렉토리에 있는 여러 가지 실행 프로그램을 말한다. 자바는 컴파일과 인터프리팅을 모두 수행해야 하는 언어이므로 컴파일러, 인터프리터를 포함한 몇 가지 환경 도구를 제공한다. 윈도우에서 환경 도구를 실행하려면 도스 창 프롬프트에서 실행한다.
		<P>▶ javac : 자바 컴파일러이다. 텍스트 소스 파일인 *.java 파일을 기계 독립적인 바이트 코드, *.class로 컴파일 해준다. 인자는 자바 소스 파일 이름이다. 일반적으로 다음 예와 같이 사용한다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">javac HelloApp.java
		</TABLE>
		<P>필요에 따라 다음 선택사항을 지정해야 하는 경우가 있다.
		<P>  (1) -classpath '경로' : javac가 클래스를 검색할 경로를 지정한다. 이 값을 지정하면 이미 지정된 CLASSPATH 환경 변수 값은 오버라이드된다. 디렉토리 구분은 세미콜론(;)으로 한다.
		<P>      사용 예 : javac -classpath .;C:\lib\classes.zip HelloApp.java
		<P>  (2) -d '디렉토리' : 클래스 계층 구조의 루트 디렉토리를 지정한다. 즉, 컴파일 된 .class 바이트 코드 파일을 다른 곳에 넣고자할 때 사용한다.
		<P>      사용 예 : javac -d C:\classes HelloApp.java
		<P>  (3) -g : 디버깅 테이블을 생성해준다. 디버깅 테이블은 줄 번호와 지역 변수 정보(자바 디버깅 도구에 의해 사용되는 정보)를 포함하고 있다. 최적화(-O) 선택사항이 함께 주어지지 않으면 단지 줄 번호만 생성된다.
		<P>  (4) -nowarn : 경고 메시지를 출력하지 않는다.
		<P>  (5) -O : static, final and private 도구에 인라인 기법을 사용하여 최적화 한다. 이렇게 되면 클래스 파일은 크기가 커진다. (C++의 inline 예약어와 같은 방법이다. 이 방법은 함수 점프의 오버헤드를 막기 위해 컴파일 시에 실제 코드를 각 함수 대신에 직접 삽입하는 방법을 쓰는 것이다.)
		<P>  (6) -verbose : 컴파일러와 링커에게 현재 컴파일 되고있는 소스 파일과 적재되는 클래스 파일의 이름을 출력하게 한다.
		<P>▶ java : 자바 인터프리터를 나타내며, 클래스 파일을 실행한다. 클래스 이름을 인자로 받는다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">java HelloApp
		</TABLE>
		<P>▶ javaw : 같은 자바 인터프리터이지만 콘솔(윈도우 도스 창)에서 독립된 윈도우를 만들어낸다. 콘솔로의 출력은 행하지 않는다. 예를 들어 애플릿뷰어를 다음과 같은 방법으로 실행해서 두 결과를 비교해 보라. javaw로 실행한 경우에는 콘솔로 출력을 하지 않는다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">java sun.applet.AppletViewer example1.html
			<p class="TStep1">javaw sun.applet.AppletViewer example1.html
		</TABLE>
		<P>  &nbsp;▶ javadoc : class 파일의 패키지, 계층 구조, 도구 등을 HTML 문서로 만들어준다. 클래스 이름을 인자로 받는다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">javadoc HelloApp.java
		</TABLE>
		<p>▶ javah : 해당 애플러케이션의 C 스텁 헤더 파일을 생성해준다. 인자로 클래스 이름을 받는다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">javah HelloApp
		</TABLE>
		<p>▶ javap : 자바 역 컴파일러이다. 클래스 파일을 원시 코드로 역 컴파일 해준다. 완전한 소스 파일을 구할 수는 없다. 인자로 클래스 이름을 받으며 역 컴파일 한 결과를 표준 출력(콘솔) 장치로 내보낸다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">javap -c HelloApp &gt; HelloApp.txt
		</TABLE>
		<P>▶ jdb : 자바 디버거. 유닉스 디버거인 dbx와 유사한 기능을 갖고 있으며 인자로 클래스 이름을 받는다. 디버거 프롬프트에서 help를 입력하면 사용 가능한 명령어를 알 수 있다. 디버거를 제대로 사용하려면 클래스 파일을 컴파일 할 때 dbx의 경우와 같이 -g 옵션으로 컴파일 해야 한다.(예 : javac -g HelloApp.java)
		<P>▶ appletviewer : HTML 문서에 포함되어 있는 애플릿을 실행시켜준다. 일종의 웹 브라우저로서 &lt;applet&gt; 태그만 찾아서 애플릿을 보여준다. 인자로 URL이나 HTML 문서 파일 이름을 받는다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">appletviewer example1.html
		</TABLE>
		<P>이외에도 여러 가지 환경 도구가 JDK에 함께 제공되므로 좀더 자세히 알고 싶으면 선사의 자바 홈페이지(http://java.sun.com) 사이트를 참고하면 된다.
		</ul>
		<P class="TSubmenu">1.3.3 컴파일
		<ul>
		<P>컴파일은 원시 파일(*.java)을 입력으로 바이트 코드를 생성한다. 생성되는 바이트 코드는 클래스(*.class)파일이라고도 한다. 소스 파일명에는 반드시 확장자(.java)가 포함되어야 하며 대문자와 소문자를 구분한다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">소스파일이 있는 디렉토리&gt;javac <I>소스파일명.java</I>
		</TABLE>
		</ul>
		<P class="TSubmenu">1.3.4 실행
		<ul>
		<P>실행은 컴파일 한 후 생성된 바이트 코드를 이용하여 사용자가 실제 원하는 값을 얻기 위한 것으로 어플리케이션의 실행과 애플릿의 실행이 있다. 실행할 때에는 파일명 뒤의 확장자(.class)가 붙지 않는다.
		<P>어플리케이션의 실행은 자바 인터프리터를 사용하여 실행하는데, 자바 인터프리터는 C:\j2sdk\bin 디렉토리의 java.exe파일이다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
			<TD WIDTH=100%>
			<p class="TStep1">어플리케이션의 실행
		<TR>
			<TD WIDTH="476">
			<p class="TStep1">클래스파일이 있는 디렉토리&gt;java <I>클래스파일명</I>
		</tr>
		</TABLE>
		<p>애플릿의 실행은 애플릿 태그를 사용하여 html 문서에 등록한 후 웹 브라우저를 사용하거나 appletviewer 프로그램을 사용하여 실행한다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
			<TD WIDTH="99%">
			<p class="TStep1">애플릿 태그 삽입
		<TR>
			<TD WIDTH="476">
			<p class="TStep1">&lt;applet code=&quot;<I>클래스파일명</I>&quot; width=<I>넓이</I> height=<I>높이</I>&gt;
			<p class="TStep1">&lt;/applet&gt;
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
			<TD WIDTH="99%">
			<p class="TStep1">appletviewer 사용법(애플릿의 실행)
		<TR>
			<TD WIDTH="476">
			<p class="TStep1">HTML파일이 있는 디렉토리&gt;appletviewer <I>HTML파일명</I>
		</tr>
		</TABLE>
		</ul></td>
    </tr>
	</table>
</body>
</html>