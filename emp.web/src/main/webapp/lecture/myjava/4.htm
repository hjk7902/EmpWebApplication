<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>4.1 AWT 컴포넌트 </title>
<meta name="generator" content="Namo WebEditor v5.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<P>

<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV153.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.1  AWT </FONT><FONT FACE="바탕">컴포넌트</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT(Abstract Window Toolkit)는 GUI와 관련된 클래스의 묶음인데, GUI와 관련된 모든 클래스를 말하지는 않지만 최근 많이 사용하는 스윙(SWING)도 여기에 포함된다. 즉, AWT는 기본적인 GUI와 관련된 클래스의 묶음을 말한다. 자바 AWT의 기본 구성요소는 컴포넌트와 컨테이너이다. 컴포넌트는 일반적으로 GUI에서 버튼(Button)이나 레이블(Label), 또는 텍스트 필드(TextField)와 같이 보여지도록 나타나는 부분이며, 컴포넌트는 컨테이너에 포함되어 화면에 출력된다. 일반적으로 컨테이너에는 하나 이상의 컴포넌트를 포함할 수 있으며, 컴포넌트뿐만 아니라 다른 컨테이너도 포함 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음의 예를 보며 이해하기로 한다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SampleWindow.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class SampleWindow {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public SampleWindow() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>	
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">SampleWindow sw = new SampleWindow();</FONT>
<P>		<FONT FACE="Courier New">sw.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">AWT와 관련된 클래스를 사용하기 위해 java.awt 패키지를 import.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Frame f;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Frame클래스의 객체변수를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public SampleWindow() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우&quot;</FONT><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성자를 만들고 그 안에 Frame클래스의 객체를 생성한다. 여기서 윈도우를 만들면서 Window클래스를 사용하지 않고 Frame클래스를 사용한 것은 Window클래스는 경계선과 타이틀 바를 갖지 않는 네모난 창에 불과하지만, Frame클래스는 Window클래스의 하위 클래스로서 프레임과 타이틀 바를 갖는 윈도우를 생성하기 때문이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>	</TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">객체 생성과 관련된 부분은 생성자를 이용하고 이 메소드에서는 그 이외의 부분을 기술하였다. 
</FONT><P><FONT FACE="바탕">12 : setSize() 메소드는 컴포넌트 객체의 크기를 픽셀단위로 지정한다. 여기서는 프레임의 크기를 가로 300픽셀, 세로 200픽셀로 설정하였다. 
</FONT><P><FONT FACE="바탕">13 : setVisible() 메소드는 주어진 논리형 변수 값이 false면 화면에 나타나지 않고, true면 나타난다. 만약 이 줄이 없으면 실행은 되지만 화면에는 아무것도 나타나지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">SampleWindow sw = new SampleWindow();</FONT>
<P>		<FONT FACE="Courier New">sw.launchFrame();</FONT>
<P> 	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">main() 메소드의 선언부로 개체생성 후 launchFrame() 메소드를 호출하여 화면에 윈도우를 출력시킨다.</FONT>
<P><FONT FACE="바탕">여기서 launchFrame() 메소드 안의 내용이 생성자 안에 기술돼도 실행에는 지장이 없지만, 생성자 안에서 객체 생성 이외의 작업을 진행하도록 프로그래밍 하는 방법은 권장할만한 기법은 아니다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 프로그램을 실행시켰을 때 나타나는 화면이다. 물론 이벤트를 다루지 않았기 때문에 윈도우의 종료버튼을 눌러도 프로그램이 종료되지 않는다.(강제로 프로그램을 종료시키기 위해서는 Ctrl+C를 누른다.)</FONT>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV154.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음은 자바 컴포넌트 계층 구조를 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV155.GIF" BORDER=0 WIDTH=567 HEIGHT=337 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">이상의 모든 컴포넌트는 컴포넌트클래스에서 상속받는다. 특성에 따라 컴포넌트를 분류하면 다음과 같이 3가지로 분류할 수 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 기본 컴포넌트 : Button, Label, Checkbox, Choice, List, Scrollbar, Canvas</FONT></SPAN></FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 텍스트 컴포넌트 :  TextField, TextArea</FONT></SPAN></FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 컨테이너 컴포넌트 : Panel, Applet, Window, Frame, Dialog, FileDialog</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">컴포넌트 클래스가 제공하는 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ Rectangle getBounds() : 컴포넌트의 테두리(바운드) 정보를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Rectangle getBounds(Rectangle r) : 컴포넌트의 바운드 정보를 주어진 Rectangle 객체 r에 저장하고 이 객체를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getX() : 컴포넌트의 x 축 시작좌표 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getY() : 컴포넌트의 y축 시작좌표 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Point getLocation() : 컴포넌트의 현재 위치 좌표를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Point getLocation(Point p) : 컴포넌트의 현재 위치 좌표를 주어진 Point객체 p에 저장하고 이 객체를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ Point getLocationOnScreen() : 컴포넌트의 화면상에서의 현재 좌표위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getWidth() : 컴포너트의 가로(폭)값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHeight() : 컴포넌트의 세로(높이)값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getSize() : 컴포넌트의 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getSize(Dimension d) : 컴포넌트의 크기를 얻어 Dimension객체 d에 저장하고 이 객체를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setLocation(int x, int y) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P>  <FONT FACE="돋움">∘ void setLocation(Point p) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSize(Dimension d) : 컴포넌트의 폭과 높이를 각각 d.width와 d.height로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSize(int width, int height) : 컴포넌트의 폭과 높이를 각각 width와 height로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setBounds(int x, int y, int width, int height) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setBounds(Rectangle r) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setName(String name) : 컴포넌트의 이름을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getMaximumSize() : 컴포넌트의 최대 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getMinimumSize() : 컴포넌트의 최소 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getPreferredSize() : 컴포넌트의 적당한 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Component getComponentAt(int x, int y) : 주어진 좌표를 포함하고 있는 컴포넌트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Component getComponentAt(Point p) : 주어진 좌표를 포함하고 있는 컴포넌트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean contains(int x, int y) : 주어진 위치 좌표를 포함하고 있는 컴포넌트가 있는지의 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean contains(Point p) : 주어진 위치 좌표를 포함하고 있는 컴포넌트가 있는지의 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isDisplayable() : 이 컴포넌트가 디스플레이 가능한 지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isShowing() : 이 컴포넌트가 보여지고 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isValid() : 이 컴포넌트가 유효한지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isVisible() : 컴포넌트가 보여질 수 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVisible(boolean b) : 컴포넌트를 보이거나 보이지 않게 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void invalidate() : 컴포넌트를 무효화한다.</FONT>
<P>  <FONT FACE="돋움">∘ void validate() : 이 컴포넌트가 유효한 레이아웃을 갖도록 만든다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.1.1 </FONT><FONT FACE="바탕">기본</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">컴포넌트</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=433 HEIGHT=212>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 기능</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Button</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">버튼 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Label</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">고정된 문자열 표시</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Checkbox</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">체크박스나 라디오 박스 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Choice</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">드롭다운 메뉴 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">List</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">리스트 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Scrollbar</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">스크롤바 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Canvas</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">그래픽객체를 그릴 때 사용</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.1 Button</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Button 컴포넌트 클래스는 사용자가 버튼을 누를 때 취해야할 동작할  생성하는 간단한 제어다. 버튼컴포넌트도 클래스객체를 생성한 후에 반드시 add() 메소드를 사용하여 컨테이너에 추가해야 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV156.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 예제는 앞의 설명을 실행하는 Button컴포넌트 프로그램이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=361>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ButtonExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ButtonExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ButtonExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Button Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 2&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">b1.setBackground(Color.yellow);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ButtonExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b1.setForeground(Color.blue);</FONT>
<P>		<FONT FACE="Courier New">b2.setEnabled(false);</FONT>
<P>		<FONT FACE="Courier New">f.add(b1);</FONT>
<P>		<FONT FACE="Courier New">f.add(b2);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ButtonExample be = new ButtonExample();</FONT>
<P>		<FONT FACE="Courier New">be.launchFrame();</FONT>
<P>   <FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Button b1, b2;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼객체를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 2&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성자 내에서 레이블을 가진 버튼과 그렇지 않은 버튼 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이아웃 관리자를 FlowLayout으로 지정한 것이다. 레이아웃 관리자는 컴포넌트의 배치를 다루는 것으로 자세한 내용은 다음 장에서 설명하기로 한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b2.setEnabled(false);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setEnabled() 인자값을 false로 지정하면 입력에 반응하지 않는 비 활성 상태가 된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myButton);</FONT>
<P>		<FONT FACE="Courier New">f.add(yourButton);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">두 개의 버튼객체를 add() 메소드를 사용하여 컨테이너에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">Button 클래스가 제공하는 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P>  <FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ public Button() : 레이블 없는 버튼을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ public Button(String label) : 주어진 레이블의 버튼을 생성한다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ public String getLabel() : 버튼의 레이블을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ public void setLabel(String label) : 버튼의 레이블을 주어진 문자열로 설정한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.2 Label</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Label 컴포넌트 클래스는 원하는 문장을 입력하는데 사용한다. 사용법은 레이블 객체를 생성한 후 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV157.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 예는 Label컴포넌트를 이용하는 방법을 기술한 프로그램이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=565>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">LabelExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class LabelExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Label myLabel;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public LabelExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Label Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myLabel = new Label(&quot;Hello World!&quot;, Label.RIGHT);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">myLabel.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">myLabel.setForeground(Color.blue);</FONT>
<P>		<FONT FACE="Courier New">f.add(myLabel, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">LabelExample le = new LabelExample();</FONT>
<P>		<FONT FACE="Courier New">le.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Label myLabel;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이블 객체를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myLabel = new Label(&quot;Hello World!&quot;, Label.RIGHT);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">&quot;Hello World!&quot; 문자열을 오른쪽 정렬방식을 가진 레이블 객체로 생성.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myLabel.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">myLabel.setForeground(Color.blue);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이블의 색상을 지정하는 부분으로 setBackground() 메소드는 배경색(여기서는 레이블의 배경색)을, setForeground() 메소드는 전경색(여기서는 글자의 색)을 설정할 수 있다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myLabel, BorderLayout.SOUTH);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">객체 myLabel을 add() 메소드를 이용하여 컨테이너 아래쪽에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">Label 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 속성</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int CENTER : 가운데 정렬</FONT>
<P>  <FONT FACE="돋움">∘ static int LEFT : 왼쪽 정렬</FONT>
<P>  <FONT FACE="돋움">∘ static int RIGHT : 오른쪽 정렬</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Label() : 레이블을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Label(String text) : 주어진 이름의 레이블을 생성하고, 기본적으로 왼쪽 정렬 상태를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ Label(String text, int alignment) : 주어진 이름의 레이블을 생성하고, 주어진 정렬방식으로 정렬한다. 정렬값은 Label.LEFT, Label.CENTER, Label.RIGHT가 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getAlignment() : 현재 정렬 방식을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setAlignment(int alignment) : 정렬 방식을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getText() : 레이블의 텍스트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setText(String text) : 레이블의 텍스트를 주어진 텍스트로 설정한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.3 Checkbox</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Checkbox는 다양한 옵션을 선택하는데 사용된다. &quot;on&quot; 또는 &quot;off&quot; 두가지 중 한가지 상태를 나타낸다. 체크박스를 누르면 설정상태가 변하며 처리할 동작이 일어난다. 이와 비슷하게 항목을 선택할 수 있는 컴포넌트에는 Choice, List, Menu 컴포넌트 등이 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV158.GIF" BORDER=0 WIDTH=357 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 그램에서 처럼 체크박스에는 두 종류가 있는데 먼저, 위 줄에 있는 세 개의 체크박스는 서로 독립적으로 선택될 수 있어, 동시에 모두 선택할 수도 있고, 하나도 선택하지 않을 수도 있다. 
</FONT><P><FONT FACE="바탕">아래 세 개의 체크박스는 그룹으로 관리되므로 그룹에 속한 체크박스 중 하나만 선택된다. 
</FONT><P><FONT FACE="바탕">이들 두 그룹의 체크박스는 외형상으로도 차이가 있는데, 위 줄의 체크박스는 일반적인 체크박스 형태인 반면 아래 줄의 체크박스들은 라디오 버튼의 형태를 갖고있다.</FONT>
<P><FONT FACE="바탕">여러 개의 체크박스 중 하나만 선택하려면 체크박스그룹(CheckboxGroup) 객체에 추가해준다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 예제는 앞에서 설명한 두 가지 형태의 체크박스에 대한 프로그램이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CheckboxExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CheckboxExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Checkbox check1, check2, check3;</FONT>
<P>	<FONT FACE="Courier New">private Checkbox radio1, radio2, radio3;</FONT>
<P>	<FONT FACE="Courier New">private CheckboxGroup group1;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CheckboxExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Checkbox Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">check1 = new Checkbox(&quot;Checkbox 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">check2 = new Checkbox(&quot;Checkbox 2&quot;, true);</FONT>
<P>		<FONT FACE="Courier New">check3 = new Checkbox(&quot;Checkbox 3&quot;);</FONT>
<P>		<FONT FACE="Courier New">group1 = new CheckboxGroup();</FONT>
<P>		<FONT FACE="Courier New">radio1 = new Checkbox(&quot;Checkbox 4&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio2 = new Checkbox(&quot;Checkbox 5&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio3 = new Checkbox(&quot;Checkbox 6&quot;, group1, true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CheckboxExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">check3.setState(true);</FONT>
<P>		<FONT FACE="Courier New">f.add(check1);  f.add(check2);  f.add(check3);</FONT>
<P>		<FONT FACE="Courier New">f.add(radio1);  f.add(radio2);  f.add(radio3);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(350, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CheckboxExample ce = new CheckboxExample();</FONT>
<P>		<FONT FACE="Courier New">ce.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Checkbox check1, check2, check3;</FONT>
<P>	<FONT FACE="Courier New">private Checkbox radio1, radio2, radio3;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Checkbox 클래스로부터 객체 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private CheckboxGroup group1</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">라디오버튼을 만들기 위해 체크박스 그룹객체를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">check1 = new Checkbox(&quot;Checkbox 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">check2 = new Checkbox(&quot;Checkbox 2&quot;, true);</FONT>
<P>		<FONT FACE="Courier New">check3 = new Checkbox(&quot;Checkbox 3&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">11 : 체크박스에 이름 부여. 
</FONT><P><FONT FACE="바탕">12 : 체크박스 이름을 부여하면서 초기 선택값으로 true를 주어 미리 선택이 되도록 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">group1 = new CheckboxGroup();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">라디오버튼을 만들기 위해 7번째 줄에서 선언된 체크박스 그룹객체를 생성.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">radio1 = new Checkbox(&quot;Checkbox 4&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio2 = new Checkbox(&quot;Checkbox 5&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio3 = new Checkbox(&quot;Checkbox 6&quot;, group1, true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">라디오버튼을 만들기 위해 체크박스를 그룹화하여 객체를 생성.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">check3.setState(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setState() 메소드에 인자값으로 true를 주어 체크박스를 선택상태로 설정. 선택 해제를 하려면 인자값으로 false를 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(check1);  f.add(check2);  f.add(check3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">체크박스 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(radio1);  f.add(radio2);  f.add(radio3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">체크박스 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">Checkbox 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Checkbox() : 레이블이 없는 체크박스를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label) : 주어진 레이블의 체크박스를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label, boolean state) : 주어진 레이블의 체크박스를 생성하며, 체크박스의 초기 선택 여부를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label, boolean state, CheckboxGroup group) : 주어진 레이블의 체크박스를 생성하며, 체크박스의 초기 선택 여부를 설정하고, 체크박스 그룹을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label, CheckboxGroup group, boolean state) : 주어진 레이블의 체크박스를 생성하며, 체크박스의 초기 선택 여부를 설정하고, 체크박스 그룹을 설정한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>   <FONT FACE="돋움">∘ String getLabel() : 체크박스의 레이블을 구한다.</FONT>
<P>   <FONT FACE="돋움">∘ void setLabel(String label) : 체크박스의 레이블을 설정한다.</FONT>
<P>   <FONT FACE="돋움">∘ boolean getState() : 체크박스의 상태가 &quot;on&quot; 또는 &quot;off&quot; 상태인지를 얻는다.</FONT>
<P>   <FONT FACE="돋움">∘ void setState(boolean state) : 체크박스의 상태를 설정한다.(true이면 &quot;on&quot;)</FONT>
<P>   <FONT FACE="돋움">∘ CheckboxGroup getCheckboxGroup() : 설정된 체크박스 그룹을 얻는다.</FONT>
<P>   <FONT FACE="돋움">∘ void setCheckboxGroup(CheckboxGroup g) : 체크박스 그룹을 설정한다.</FONT>
<BR>
<P><FONT FACE="바탕">CheckboxGroup 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ CheckboxGroup() : 체크박스 그룹 객체를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Checkbox getSelectedCheckbox() : 체크박스 그룹 중에서 현재 선택된 체크박스를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setCurrent(Checkbox box) : setSelectedCheckbox(Checkbox)으로 바뀌었다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSelectedCheckbox(Checkbox box) : 현재 주어진 체크박스가 선택되도록 설정한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.4 Choice</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Choice 컴포넌트 클래스는 다음 그림과 같이 드롭다운(drop-down) 리스트를 제공해주는 컴포넌트이다. 이 컴포넌트는 제한된 공간에 많은 내용을 나타낼 때 유용하다. 
</FONT><P ALIGN=CENTER>  
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV159.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<IMG SRC="file:///C|/지빠귀/FYXIV160.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Choice 컴포넌트를 사용하는 예를 보인 것이다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChoiceExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChoiceExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Choice myChoice;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ChoiceExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Choice Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice = new Choice();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows 95/98&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows NT&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows 2000&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Solaris&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChoiceExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;OS/2&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Mac&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.add(myChoice);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ChoiceExample ce = new ChoiceExample();</FONT>
<P>		<FONT FACE="Courier New">ce.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=26>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myChoice = new Choice();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6번째 줄에서 선언된 Choice 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=26>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows 95/98&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">15번째 줄에서 20번째 줄까지는 메뉴 항목을 Choice 컴포넌트에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=26>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myChoice);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 레이블 객체를 add() 메소드를 이용하여 컨테이너에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">Choice 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Choice() : 선택 메뉴를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void add(String item) : 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void addItem(String item) : 아이템을 추가한다. JDK1.2버전에서 자주 보던 것이다. Choice클래스에서는 사용되지만 대부분의 클래스에서는 사용하지 않고 있다.</FONT>
<P>  <FONT FACE="돋움">∘ int getItemCount() : 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getItem(int index) : 주어진 인덱스에 해당하는 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectedIndex() : 선택된 아이템의 인덱스를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getSelectedItem() : 선택된 아이템의 이름을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(String item, int index) : 주어진 이름의 아이템을 주어진 인덱스에 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int position) : 주어진 위치의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(String item) : 주어진 이름의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeAll() : 선택 메뉴에 있는 모든 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(int pos) : 주어진 위치의 아이템이 선택되도록 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(String str) : 주어진 이름의 아이템이 선택되도록 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.5 List</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.List 컴포넌트 클래스는 다수의 선택항목이 리스트에 나타나고 사용자가 이를 선택하고자 할 때 사용한다. 원하는 아이템을 클릭하여 선택하고 더블 클릭하거나 리턴하여 액션 이벤트를 발생시킬 수 있다. List 컴포넌트는 동시에 여러 개를 선택할 수도 있고 하나의 아이템만 선택할 수도 있다.</FONT>
<P ALIGN=CENTER>  
<IMG SRC="file:///C|/지빠귀/FYXIV161.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 예에서 왼쪽리스트는 동시에 여러 개의 아이템을 선택할 수 있고, 오른쪽리스트는 하나의 아이템만 선택할 수 있는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 List컴포넌트를 사용하는 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private List myList, yourList;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;List Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList = new List(3, true);</FONT>
<P>		<FONT FACE="Courier New">yourList = new List();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows 95/98&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows NT&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows 2000&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Solaris&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;OS/2&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=519>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myList.add(&quot;Machintosh&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;MS-DOS&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Windows 95/98&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Windows NT&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Windows 2000&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Solaris&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;OS/2&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Machintosh&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;MS-DOS&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(myList);</FONT>
<P>		<FONT FACE="Courier New">f.add(yourList);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListExample le = new ListExample();</FONT>
<P>		<FONT FACE="Courier New">le.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myList = new List(3, true);</FONT>
<P>		<FONT FACE="Courier New">yourList = new List();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">9 : 리스트 아이템이 3줄씩 보이게 하면서 여러 개의 아이템을 동시에 선택 가능(true)하게 하는 객체를 지정한다.</FONT>
<BR>
<P><FONT FACE="바탕">10 : 스크롤 가능한 리스트 컴포넌트를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows 95/98&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">15번째 줄에서 29번째 줄까지는 주어진 이름의 아이템을 각각 해당 리스트에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myList);</FONT>
<P>		<FONT FACE="Courier New">f.add(yourList);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 레이블 객체를 add() 메소드를 사용하여 컨테이너에 추가한다.</FONT>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">List 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ List() : 스크롤 가능한 리스트 컴포넌트를 생성한다. 기본값으로 4개 줄이 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ List(int rows) : 주어진 개수만큼의 줄을 보이는 스크롤 가능한 리스트 컴포넌트를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ List(int rows, boolean multipleMode) : 주어진 개수만큼의 줄을 보이게 하는 스크롤 가능한 리스트 컴포넌트를 생성하면서, 다수의 아이템을 동시에 선택가능하게 할것인지의 여부를 설정한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void add(String item) : 주어진 이름의 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void add(String item, int index) : 주어진 이름의 아이템을 해당 인덱스에 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void deselect(int index) : 주어진 인덱스의 아이템을 선택 해제한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getItem(int index) : 주어진 인덱스의 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getItemCount() : 리스트 내의 아이템 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String[] getItems() : 리스트 내의 아이템 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getRows() : 리스트에서 보이는 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectedIndex() : 선택된 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int[] getSelectedIndexes() : 선택된 아이템의 인덱스 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getSelectedItem() : 선택된 아이템의 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String[] getSelectedItems() : 선택된 아이템의 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Object[] getSelectedObjects() : 선택된 아이템을 Object 객체 배열로 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVisibleIndex() : makeVisible() 메소드에 의해 마지막으로 보여진 아이템의 인덱스를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isIndexSelected(int index) : 인덱스에 해당하는 아이템이 선택되었는지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isMultipleMode() : 여러 개의 아이템이 선택가능한지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void makeVisible(int index) : 주어진 인덱스에 해당하는 아이템을 보이게 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int position) : 주어진 위치의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(String item) : 주어진 이름의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeAll() : 모든 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void replaceItem(String newValue, int index) : 주어진 인덱스에 해당하는 아이템을 새로운 이름으로 변경한다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(int index) : 인덱스에 해당하는 아이템을 선택한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMultipleMode(boolean b) : 여러 개의 아이템을 선택 가능하도록 설정한다.</FONT>
<P>   
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.6 Scrollbar</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Scrollbar 컴포넌트 클래스는 연속적인 값을 선택하거나, 다른 컴포넌트의 옆에 붙어서 수평, 수직 스크롤바와 같이 실제 보여지는 영역을 지정하는 역할을 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV162.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Scrollbar컴포넌트를 사용하는 예를 보인것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=519>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ScrollbarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ScrollbarExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Scrollbar mySlider;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ScrollbarExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Scrollbar Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mySlider = new Scrollbar(Scrollbar.HORIZONTAL,100,20,0,255);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.add(mySlider);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ScrollbarExample se = new ScrollbarExample();</FONT>
<P>		<FONT FACE="Courier New">se.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">mySlider = new Scrollbar(Scrollbar.HORIZONTAL,100,20,0,255);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">최소값 0, 최대값 255, 초기값 100, 스크롤바 포인터(bubble)의 크기가 20픽셀인 수평 스크롤 바를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(mySlider);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<BR>
<P><FONT FACE="바탕">Scrollbar 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 속성</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int HORIZONTAL : 수평 스크롤바를 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int VERTICAL : 수직 스크롤바를 나타낸다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Scrollbar() : 스크롤바를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Scrollbar(int orientation) : 주어진 값에 따라 수평.수직 스클롤바를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Scrollbar(int orientation, int value, int visible, int minimum, int maximum) : 주어진 스크롤바의 속성값에 해당하는 스크롤바를 생성한다. 각 값은 다음과 같은 의미를 갖는다.</FONT>
<BR>
<P><FONT FACE="바탕">- int orientation : 스크롤바가 수평이면 Scrollbar.HORIZONTAL으로, 스클롤바가 수직이면 Scrollbar.VERTICAL으로 설정해준다.</FONT>
<P><FONT FACE="바탕">- int value : 스크롤바의 초기값을 나타낸다. 일반적인 초기값은 0이다.</FONT>
<P><FONT FACE="바탕">- int visible : 스크롤 가능한 영역의 보이는 부분에 대한 픽셀 단위의 크기를 나타낸다. 
</FONT><P><FONT FACE="바탕">- int minimum : 스크롤바가 가질 수 있는 최소값을 나타낸다. 스크롤 영역을 설정하기 위한 스크롤바의 경우에는 0이 된다.</FONT>
<P><FONT FACE="바탕">- int maximum : 스크롤바가 가질 수 있는 최대값을 나타낸다. 스크롤 영역을 설정하기 위한 스크롤바의 경우 픽셀 단위의 width 또는 height 값이 된다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getBlockIncrement() : 스크롤바의 블록 증가량을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMaximum() : 스크롤바의 최대값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMinimum() : 스크롤바의 최소값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getOrientation() : 스클롤바의 방향성 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getUnitIncrement() : 스크롤바의 단위 증가량을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getValue() : 스크롤바의 현재 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVisibleAmount() : 스크롤바의 보이는 부분의 양을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setBlockIncrement(int v) : 스크롤바의 블록 증가량을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMaximum(int newMaximum) : 스크롤바의 최대값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMinimum(int newMinimum) : 스크롤바의 최소값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setOrientation(int orientation) : 스크롤바의 방향성을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setUnitIncrement(int v) : 스크롤바의 단위 증가량을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setValue(int newValue) : 스크롤바의 현재 값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setValues(int value, int visible, int minimum, int maximum) : 스크롤바의 속성 값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVisibleAmount(int newAmount) : 스크롤바의 보이는 부분의 양을 설정한다.</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.7 Canvas</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Canvas 컴포넌트 클래스는 특정한 모습이 없으며, 그림을 그리는 등 영상처리 작업을 하는데 유용한 컴포넌트이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV163.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Canvas컴포넌트의 사용 예를 보인 것이다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=607>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CanvasExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CanvasExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Canvas myCanvas;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CanvasExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Canvas Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myCanvas = new Canvas();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myCanvas.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">myCanvas.setSize(100, 50);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(myCanvas);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CanvasExample ce = new CanvasExample();</FONT>
<P>		<FONT FACE="Courier New">ce.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myCanvas = new Canvas();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">캔버스 컴포넌트를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myCanvas.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">myCanvas.setSize(100, 50);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">캔버스의 배경을 빨간색으로 지정하고, 크기를 가로 100픽셀, 세로 50픽셀로 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myCanvas);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 레이블 객체를 add() 메소드를 사용하여 컨테이너에 추가한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.1.2 </FONT><FONT FACE="바탕">텍스트</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">컴포넌트</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=380 HEIGHT=79>
<TD VALIGN=MIDDLE WIDTH=40%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=59%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 기능</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=40%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextField</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=59%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">한 줄 문자입력</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=40%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextArea</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=59%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">여러 줄 문자입력</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">TextComponent 클래스가 제공하는 주요 메소드는 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ int getCaretPosition() : 텍스트 삽입 캐럿(I자 형태)의 위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getSelectedText() : 선택 영역의 텍스트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectionEnd() : 선택된 텍스트의 끝 위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectionStart() : 선택된 텍스트의 시작 위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getText() : 현재의 텍스트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isEditable() : 편집 가능한 상태인지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(int selectionStart, int selectionEnd) : 시작 위치부터 끝 위치까지 선택한다.</FONT>
<P>  <FONT FACE="돋움">∘ void selectAll() : 모든 텍스트를 선택한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setCaretPosition(int position) : 삽입 위치(캐럿)를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setEditable(boolean b) : 편집 상태를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSelectionEnd(int selectionEnd) : 선택 영역의 끝 위치를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSelectionStart(int selectionStart) : 선택 영역의 시작 위치를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setText(String t) : 현재 텍스트를 설정한다.</FONT>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.2.1 TextField</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.TextField 컴포넌트 클래스는 한 줄 내에서 사용자의 문자 입력을 받는다. java.awt.TextComponent가 이 클래스의 상위 클래스이며, TextComponent 클래스는 텍스트 입력과 관련된 메소드를 처리해 주는 기능을 가지고 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV164.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">다음 프로그램은 TextField컴포넌트를 사용하는 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TextFieldExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TextFieldExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TextField myTextField;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public TextFieldExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;TextField Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myTextField = new TextField(&quot;Hello!&quot;, 25);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">f.add(myTextField);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TextFieldExample te = new TextFieldExample();</FONT>
<P>		<FONT FACE="Courier New">te.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myTextField = new TextField(&quot;Hello!&quot;, 25);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">TextField 클래스로부터 새로운 텍스트 필드 컴포넌트를 생성한다. 숫자 25는 텍스트 필드의 폭이 25열임을 나타낸다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myTextField);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 객체를 add() 메소드를 사용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">TextField 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ TextField() : 텍스트 필드를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextField(int columns) : 주어진 열의 크기(개수)를 갖는 텍스트 필드를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextField(String text) : 주어진 텍스트를 갖는 텍스트 필드를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextField(String text, int columns) : 주어진 텍스트와 열의 크기(개수)를 갖는 텍스트 필드를 생성한다. 
</FONT><BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ boolean echoCharIsSet() : 에코 문자가 설정되어 있는지 여부를 얻는다. 패스워드를 입력받을 때 이 컴포넌트를 이용한다. 패스워드 대신 화면상에 나타날 문자를 에코 문자라고 한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getColumns() : 열의 크기(개수)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ char getEchoChar() : 에코 문자를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setColumns(int columns) : 텍스트 필드의 크기인 열의 크기(개수)를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setEchoChar(char c) : 에코 문자를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setText(String t) : 텍스트를 설정한다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.2.2 TextArea</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.TextArea 컴포넌트 클래스는 여러줄의 문자입력을 받을 때 사용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV165.GIF" BORDER=0 WIDTH=306 HEIGHT=153 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 TextArea컴포넌트를 사용하는 예를 보인것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TextAreaExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TextAreaExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TextArea myTextArea;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public TextAreaExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;TextArea Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myTextArea = new TextArea(&quot;</FONT><FONT FACE="바탕">안녕하세요</FONT><FONT FACE="Courier New">.\n</FONT><FONT FACE="바탕">반갑습니다</FONT><FONT FACE="Courier New">.&quot;, 5, 25);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">f.add(myTextArea);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TextAreaExample te = new TextAreaExample();</FONT>
<P>		<FONT FACE="Courier New">te.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myTextArea = new TextArea(&quot;</FONT><FONT FACE="바탕">안녕하세요</FONT><FONT FACE="Courier New">.\n</FONT><FONT FACE="바탕">반갑습니다</FONT><FONT FACE="Courier New">.&quot;, 5, 25);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">TextArea 클래스로부터 새로운 텍스트영역 컴포넌트를 생성한다. 숫자 5와 25는 각각 5행 25열을 의미하며, &quot;\n&quot;은 개행기능(return)을 의미한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myTextArea);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">TextArea 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 속성</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_BOTH : 수직.수평 스크롤바를 생성하고 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_HORIZONTAL_ONLY : 수평 스크롤바를 생성하고 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_VERTICAL_ONLY : 수직 스크롤바를 생성하고 보여준다</FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_NONE : 스크롤바를 생성하지 않는다. 
</FONT><P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ TextArea() : 텍스트영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(int rows, int columns) : 주어진 행과 열을 갖는 텍스트 영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(String text) : 주어진 텍스트를 갖는 텍스트 영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(String text, int rows, int columns) : 주어진 행, 열, 텍스트를 갖는 텍스트영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(String text, int rows, int columns, int scrollbars) : 주어진 행, 열, 텍스트, 그리고 스크롤바를 갖는 텍스트 영역을 생성한다.</FONT>
<P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void append(String str) : 문자열을 텍스트 영역에 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getColumns() : 열의 크기(개수)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getRows() : 행의 크기(개수)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(String str, int pos) : 주어진 위치(라인)에 문자열을 삽입한다.</FONT>
<P>  <FONT FACE="돋움">∘ void replaceRange(String str, int start, int end) : 시작 위치부터 끝 위치 사이의 문자열을 주어진 문자열로 대체한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setColumns(int columns) : 열의 크기(개수)를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setRows(int rows) : 행의 크기(개수)를 설정한다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.1.3 </FONT><FONT FACE="바탕">컨테이너</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">컴포넌트</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">컨테이너(Container) 컴포넌트는 자신의 영역 안에 다른 컴포넌트를 포함할 수 있으며, 혼자서는 특별한 동작을 할 수 없고 다른 컴포넌트를 포함할 때만 의미가 있다. 컨테이너 클래스도 컴포넌트 클래스의 하위 클래스이기 때문에 그 자체도 컴포넌트로 취급되며, 다른 컨테이너 내에 포함될 수 있다.</FONT>
<P><FONT FACE="바탕">컴포넌트는 컨테이너에 포함되지 않으면 독자적으로 화면에 나타낼 수가 없다. 컨테이너에 컴포넌트를 포함시키기 위해서는 컨테이너 클래스의 add() 메소드를 이용한다. 
</FONT><BR>
<P><FONT FACE="바탕">컨테이너 컴포넌트의 종류와 기능은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=496 HEIGHT=186>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 기능</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Panel</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 배치</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Applet</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Window</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">윈도우 생성(경계선과 타이틀바가 없음)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Frame</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">경계선과 타이틀바를 갖는 윈도우 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Dialog</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">대화상자 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FileDialog</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">파일 대화상자 생성</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">컨테이너 클래스가 제공하는 주요 메소드는 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ public Component add(Component comp) : 주어진 컴포넌트를 컴포넌트의 끝에 추가한다. 
</FONT><P>  <FONT FACE="돋움">∘ public void setLayout(LayoutManager mgr) : 레이아웃 관리자를 설정한다.</FONT>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.1 Panel</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Panel 컨테이너 클래스는 컨테이너의 하위 클래스로서 독립적인 모양이 없고 독립적인 창으로 사용할 수는 없지만 주요용도를 보면 다른 컴포넌트를 포함하거나 배치시키는데 사용한다. 또, 패널이 포함하고 있는 컴포넌트에 대한 이벤트를 처리할 수 있는 특별한 기능을 가지고 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 서로 다른 Panel객체를 이용하여 버튼 컴포넌트를 배치시키는 예를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=585>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PanelExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class PanelExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Panel p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2, b3, b4, b5, b6;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public PanelExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Panel Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;Button 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;Button 2&quot;);</FONT>
<P>		<FONT FACE="Courier New">b3 = new Button(&quot;Button 3&quot;);</FONT>
<P>		<FONT FACE="Courier New">b4 = new Button(&quot;Button 4&quot;);</FONT>
<P>		<FONT FACE="Courier New">b5 = new Button(&quot;Button 5&quot;);</FONT>
<P>		<FONT FACE="Courier New">b6 = new Button(&quot;Button 6&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b2);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b3);</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=399>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PanelExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p2.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">p2.add(b4));</FONT>
<P>		<FONT FACE="Courier New">p2.add(b5));</FONT>
<P>		<FONT FACE="Courier New">p2.add(b6));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(p1, BorderLayout.EAST);</FONT>
<P>		<FONT FACE="Courier New">f.add(p2, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">PanelExample pe = new PanelExample();</FONT>
<P>		<FONT FACE="Courier New">pe.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Panel p1, p2;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel 클래스로부터 새로운 패널 객체 2개(p1, p2)를 정의한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5번째 줄에서 정의된 패널 객체 p1과 p2를 생성자를 이용하여 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">패널 객체 p1의 바탕색을 노란색으로 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼 객체를 add() 메소드를 이용하여 패널 객체 p1에 부착시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=31>
<TD VALIGN=TOP WIDTH=9%>
<P><FONT FACE="Courier New">31:</FONT></TD>
<TD VALIGN=TOP WIDTH=90%>
<P>		<FONT FACE="Courier New">f.add(p1, BorderLayout.EAST);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">패널객체 p1을 프레임에 추가한다. add() 메소드의 인자값 중에서 BorderLayout.EAST는 BorderLayout클래스에서 객체를 오른쪽에 배치하라는 뜻이다. 레이아웃 관리자에 대해서는 다음 장에서 설명하기로 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 프로그램을 실행한 결과 화면이다. 패널을 이용하면 컴포넌트의 배치를 좀 더 쉽고 다양하게 할 수 있다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV166.GIF" BORDER=0 WIDTH=306 HEIGHT=153 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.2 Applet</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Applet 컨테이너 클래스는 Panel클래스의 하위 클래스로 애플릿 프로그램을 만드는데 사용한다. 애플릿이란 웹 브라우저에서 실행되는 자바 프로그램으로 자세한 내용은 6장에서 설명하기로 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.3 Window</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Window 컨테이너 클래스는 윈도우가 가져야 할 기본적인 기능을 제공하는 클래스로서, Dialog 와 Frame 클래스를 하위 클래스로 갖고, 경계선과 타이틀 바가 없는 윈도우를 생성한다. Window 클래스를 상속받아 하위클래스를 정의하면 독립된 윈도우로 동작할 수 있다. 실제 윈도우를 생성할 때는 Window 클래스을 사용하지 않고 하위  클래스인 Frame 클래스를 이용한다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 Frame을 이용하여 윈도우를 만들고 그 위에 Window객체를 이용하여 윈도우를 나타내는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class WindowExample extends Frame {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Window myWindow;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public WindowExample() {</FONT>
<P>		<FONT FACE="Courier New">myWindow = new Window(this);</FONT>
<P>		<FONT FACE="Courier New">myWindow.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myWindow.add(new Label(&quot;New Window&quot;));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchWindow() {</FONT>	
<P>		<FONT FACE="Courier New">myWindow.setLocation(150,150);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=359>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow.setBackground(Color.cyan);</FONT>
<P>		<FONT FACE="Courier New">myWindow.setSize(250, 150);</FONT>
<P>		<FONT FACE="Courier New">myWindow.show();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">WindowExample we = new WindowExample();</FONT>
<BR>
<P>		<FONT FACE="Courier New">we.setLocation(100,100);</FONT>
<P>		<FONT FACE="Courier New">we.setSize(250, 150);</FONT>
<P>		<FONT FACE="Courier New">we.setVisible(true);</FONT>
<BR>
<P>		<FONT FACE="Courier New">we.launchWindow();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Window myWindow;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Window 클래스로부터 새로운 윈도우 객체를 정의한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow = new Window(this);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">윈도우 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow.setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 윈도우 객체의 레이아웃 관리자를 지정한다. 레이아웃 관리자에 대해서는 다음 장에서 자세하게 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P ALIGN=RIGHT><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow.add(new Label(&quot;New Window&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 윈도우 객체에 &quot;New Window&quot;라는 문자열을 가진 레이블을 생성하여 포함시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 앞의 프로그램을 실행시켰을 때 나타나는 결과화면이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV167.GIF" BORDER=0 WIDTH=281 HEIGHT=180 ALIGN=BOTTOM>
<P><FONT FACE="바탕">Window 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Window(Frame owner) : 주어진 프레임에 속하는 새로운 윈도우를 보이지 않게 한다</FONT>
<P>  <FONT FACE="돋움">∘ Window(Window owner) : 주어진 윈도우에 속하는 새로운 윈도우를 보이게 한다. 
</FONT><BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void dispose() : 윈도우에 속한 컴포넌트가 사용하는 모든 네이티브 스크린 자원의 할당을 해제한다.</FONT>
<P>  <FONT FACE="돋움">∘ Component getFocusOwner() : 윈도우가 활성화되어 있을 때, 현재 포커스를 가지고 있는 윈도우의 자손 컴포넌트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ InputContext getInputContext() : 윈도우의 입력 문장을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Locale getLocale() : 윈도우에 연결되어 있는 로케일 객체(Locale Object)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Window[] getOwnedWindows() : 이 윈도우에 속한 모든 윈도우를 포함하는 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Window getOwner() : 윈도우의 부모윈도우를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Toolkit getToolkit() : 이 프레임의 툴킷을 얻는데 사용한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getWarningString() : 윈도우에 출력될 경고 문자열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isShowing() : 이 윈도우가 스크린 상에 보여지고 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void pack() : 윈도우를 적당한 크기로 조정하고 자신에 속한 컴포넌트를 배치한다.</FONT>
<P>  <FONT FACE="돋움">∘ void show() : 윈도우가 보여지도록 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void toBack() : 윈도우를 뒤로 보낸다.</FONT>
<P>  <FONT FACE="돋움">∘ void toFront() : 윈도우를 앞으로 가져온다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.4 Frame</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Frame 클래스는 Window의 하위 클래스로서 경계선과 타이틀바를 갖는 윈도우를 사용할 수 있게 해준다. 앞에서 예를 든 컴포넌트 프로그램은 모두 Frame 클래스를 상속하여 나타낸 것이다. 이로 미루어 알 수 있는 것은 윈도우를 이용하는 모든 프로그램은 적어도 하나의 프레임을 필요로 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 Frame 클래스를 이용하여 윈도우를 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV168.GIF" BORDER=0 WIDTH=306 HEIGHT=153 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Frame을 이용하여 윈도우를 나타내는 예를 든 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=468>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FrameExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FrameExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FrameExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Frame Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="바탕">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">FrameExample fe = new FrameExample();</FONT>
<P>		<FONT FACE="Courier New">fe.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Frame Example&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">새로운 윈도우 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">11 : 윈도우의 크기를 가로 300픽셀, 세로 150픽셀로 설정. 
</FONT><P><FONT FACE="바탕">12 : 윈도우를 실제로 화면에 나타나게 한다.</FONT>
<BR>
<P><FONT FACE="바탕">프레임 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Frame() : 새로운 프레임을 생성한다. 초기값은 보이지 않게 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Frame(String title) : 주어진 이름을 갖는 새로운 프레임을 생성한다. 초기값은 보이지 않게 설정된다.</FONT>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static Frame[] getFrames() : 생성된 모든 프레임을 포함하는 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Image getIconImage() : 프레임이 최소화 아이콘 상태일 때, 표시될 이미지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setIconImage(Image image) : 프레임이 최소화 아이콘 상태일 때, 표시할 이미지를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuBar getMenuBar() : 프레임 메뉴바를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMenuBar(MenuBar mb) : 주어진 메뉴바로 프레임의 메뉴바를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getState() : 프레임 상태를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setState(int state) : 프레임 상태를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getTitle() : 프레임 제목을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setTitle(String title) : 주어진 문자열로 프레임 제목을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isResizable() : 사용자에 의해 프레임의 크기가 변경가능한지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setResizable(boolean resizable) : 사용자에 의해 프레임의 크기가 변경가능한지를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(MenuComponent m) : 주어진 메뉴바를 프레임에서 제거한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.5 Dialog</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Dialog는 프레임 클래스와 함께 Window의 하위 클래스로서 FileDialog를 하위 클래스로 두고 있으며, AWT프로그램에서 대화상자를 생성한다. 대화상자는 윈도우에 종속되기 때문에 그 윈도우가 닫히면 대화상자도 함께 닫히게 되고, 윈도우가 최소화되면 대화상자는 사라지게 된다. 대화상자는 non-modal 또는 modalless를 기본값으로 갖는데 non-modal(또는 modalless)은 대화상자가 나타나 있을 때도 다른 작업을 할 수 있는 상태를 말하며, 그 반대의 경우 즉, 대화상자가 닫힐 때까지 대화상자 이외의 다른 작업을 할 수 없는 상태를 모달(modal)이라고 한다.</FONT>
<P><FONT FACE="바탕">애플릿은 프레임이나 윈도우 클래스를 상속받지 않고 패널 클래스를 상속받으므로 윈도우를 가질 수 없기 때문에 대화상자를 사용할 수도 없다. 그러나 애플릿이 자신의 윈도우(또는 프레임)를 갖게되면 그 윈도우에 종속된 대화상자를 가질 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 프레임 윈도우의 제목표시줄에 Dialog 클래스를 이용하여 제목을 지정하는 프로그램이다. 두 개의 클래스가 필요하며 TitleBox.java를 먼저 컴파하고 DialogExample.java를 컴파일한다. 실행은 DialogExample.java를 컴파한 후 만들어진 DialogExample.class파일을 이용한다. 물론 두 개의 프로그램을 하나로 만들어도 가능하지만 이럴 경우 파일명을 main() 메소드가 있는 클래스를 파일명으로 해야 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV169.GIF" BORDER=0 WIDTH=256 HEIGHT=103 HSPACE=3 ALIGN=BOTTOM><FONT FACE="바탕">  
</FONT><IMG SRC="file:///C|/지빠귀/FYXIV170.GIF" BORDER=0 WIDTH=255 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=728>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TitleBox.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TitleBox extends Dialog implements ActionListener{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private TextField field;</FONT>
<P>	<FONT FACE="Courier New">private Button setButton;</FONT>
<P>	<FONT FACE="Courier New">private Frame parent;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public TitleBox(Frame f, String title) {</FONT>
<P>		<FONT FACE="Courier New">super(f, title, false);</FONT>
<BR>
<P>		<FONT FACE="Courier New">parent = f;</FONT>
<P>		<FONT FACE="Courier New">setLayout(new FlowLayout());</FONT>
<BR>
<P>		<FONT FACE="Courier New">field = new TextField(20);</FONT>
<P>		<FONT FACE="Courier New">setButton = new Button(&quot;SET&quot;);</FONT>
<P>		<FONT FACE="Courier New">setButton.addActionListener(this);</FONT>
<BR>
<P>		<FONT FACE="Courier New">add(field);</FONT>
<P>		<FONT FACE="Courier New">add(setButton);</FONT>
<BR>
<P>		<FONT FACE="Courier New">pack();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) {</FONT>
<P>		<FONT FACE="Courier New">if( e.getActionCommand().equals(&quot;SET&quot;) ) {</FONT>
<P>			<FONT FACE="Courier New">parent.setTitle(field.getText());</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">field.selectAll();</FONT>
<P>		<FONT FACE="Courier New">setVisible(false);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램은 길이 20인 텍스트 필드와 버튼을 가진 대화상자를 나타낸다. 텍스트 필드에 특정 문자열을 입력하고 &quot;set&quot; 단추를 누르면 그 내용이 윈도우의 제목표시줄에 출력된다. 이 프로그램 하나만으로는 실행이 되지 않고 다음에 나와있는 DialogExample.java 프로그램 안에서 앞 클래스 파일의 인스턴스를 생성하여 실행시킨다. 즉 실행은 다음 프로그램을 이용한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=524>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DialogExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class DialogExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TitleBox myTitleBox;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public DialogExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame();</FONT>
<P>		<FONT FACE="Courier New">myTitleBox = new TitleBox(f, &quot;Input title&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myTitleBox.show();</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(250, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">DialogExample de = new DialogExample();</FONT>
<P>		<FONT FACE="Courier New">de.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Dialog 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Dialog owner), Dialog(Frame owner) : 이름이 없고, 주어진 프레임 또는 대화상자에 종속되고, non-modal인 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Frame owner, boolean modal) : 이름이 없고, 주어진 프레임에 종속되고, 주어진 modal(true이면 modal, false이면 non-modal)의 대화상자를 생성하며 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Dialog owner, String title) : 주어진 이름을 갖고, 주어진 대화상자에 종속되고, non-modal인 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Frame owner, String title) : 주어진 이름을 갖고, 주어진 프레임 에 종속되고, non-modal인 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Dialog owner, String title, boolean modal) : 주어진 이름으로 대화상자에 종속되며 modal을 갖는 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Frame owner, String title, boolean modal) : 주어진 이름으로 프레임에 종속되며 modal을 갖는 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ String getTitle() : 대화상자의 제목을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isModal() : 대화상자가 modal인지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isResizable() : 대화상자가 임의로 크기 변화가 가능한지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setModal(boolean b) : 대화상자의 modal을 주어진 값으로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setResizable(boolean resizable) : 대화상자의 크기변화 여부를 주어진 값으로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setTitle(String title) : 대화상자의 제목을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void show() : 대화상자를 보이지 않게한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.6 FileDialog</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.FileDialog 클래스는 Dialog의 하위 클래스로 읽거나 쓸 파일을 선택하기 쉽게 도와준다. 윈도우 응용프로그램에서 파일을 읽거나 쓰려고 할 때 나타나는 대화상자와 같을 역할을 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV171.GIF" BORDER=0 WIDTH=532 HEIGHT=248 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 FileDialog를 이용하여 선택한 파일명을 출력하는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileDialogExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FileDialogExample{</FONT>
<P>	
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private FileDialog loadDialog;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FileDialogExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;FileDialog Example&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>  
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileDialogExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">loadDialog = new FileDialog(f, &quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;, FileDialog.LOAD);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">loadDialog.setVisible(true);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;File &lt;&quot; + loadDialog.getFile() + &quot;&gt;is Selected&quot;);</FONT>
<P>   		<FONT FACE="Courier New">f.pack();</FONT>
<P>   		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>   		<FONT FACE="Courier New">FileDialogExample fde = new FileDialogExample();</FONT>
<P>		<FONT FACE="Courier New">fde.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private FileDialog loadDialog;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">새로운 파일대화상자 객체를 정의한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">loadDialog = new FileDialog(f, &quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;, FileDialog.LOAD);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임 f에 속하면서 제목 표시줄에 &quot;열기&quot;이라는 문자열을 표시하고 파일불러오기 대화상자(FileDialog.LOAD)를 생성한다. 저장하기 대화상자를 생성하기 위해서는 FileDialog.SAVE를 이용한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">loadDialog.setVisible(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">파일대화상자를 보이게 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(&quot;File &lt;&quot; + loadDialog.getFile() + &quot;&gt;is Selected&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">선택한 파일명을 출력한다.</FONT>
<BR>
<P><FONT FACE="바탕">FileDialog 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 필드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int LOAD : 읽을파일을 선택하기 위해 파일대화상자 윈도우를 사용함을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int SAVE : 저장할 파일을 선택하기 위해 파일대화상자 윈도우를 사용함을 나타낸다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ FileDialog(Frame parent) : 주어진 프레임에 속한 파일적재용(loading a file) 대화상자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ FileDialog(Frame parent, String title) : 주어진 프레임에 속하고 주어진 이름을 갖는 파일적재용(loading a file) 대화상자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">῁ FileDialog(Frame parent, String title, int mode) : 주어진 프레임에 속하고 주어진 이름을 갖고 주어진 모드(loading/saving)의 파일 대화상자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ String getDirectory() : 파일 대화상자의 디렉토리를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getFile() : 파일 대화상자에서 선택한 파일을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ FilenameFilter getFilenameFilter() : 파일 대화상자의 파일 이름 필터를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMode() : 파일 대화상자의 용도가 읽기용(loading)인지 쓰기용(saving)인지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setDirectory(String dir) : 파일 대화상자의 디렉토리를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setFile(String file) : 파일 대화상자의 파일을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setFilenameFilter(FilenameFilter filter) : 파일 대화상자의 파일 이름 필터를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMode(int mode) : 파일 대화상자의 용도(mode)를 설정한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV172.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.2  </FONT><FONT FACE="바탕">레이아웃</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">관리자</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">레이아웃 관리자(Layout Manager)는 컨테이너 내에서 컴포넌트의 배치를 결정하는데 사용하며, 레이아웃 관리자의 특정 인스턴스를 계속 참조하다가 컴포넌트의 위치를 결정할 때 컨테이너가 레이아웃 관리자를 호출하게된다. 
</FONT><P><FONT FACE="바탕">일반적으로 레이아웃 관리자는 컨테이너 내에서 컴포넌트의 크기와 위치를 결정하는 일을 하기 때문에 프로그래머가 이를 직접 설정해서는 안된다. 만약 setLocation() 이나 setSize() 또는 setBounds() 등의 메소드를 이용하여 직접 설정한다 해도 레이아웃 관리자는 설정된 값을 무시하게된다.</FONT>
<P><FONT FACE="바탕">특별히 컴포넌트의 크기와 위치를 결정해야 할 경우라면 컨테이너에 대해 다음 메소드를 이용하여 LayoutManager를 사용할 수 없게 만들 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">setLayout(null);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이렇게 지정한 후 컴포넌트의 위치와 크기를 설정하려면 해당 컴포넌트에 대해 setLocation(), setSize() 또는 setBounds() 등의 메소드를 이용해야 하지만  시스템과 글꼴 크기의 차이 때문에 플랫폼과 관계없는 레이아웃이 만들어진다. 따라서, 다른 방법으로 LayoutManager의 새 클래스를 만들어 사용하는 방법이 더 효율적일 수있다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 자바 AWT에서 사용할 수 있는 레이아웃 관리자의 종류는 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P>  <FONT FACE="돋움">∘ FlowLayout - 판넬 클래스의 기본 레이아웃 관리자이며, 컨테이너의 컴포넌트를 페이지상의 단어처럼 왼쪽에서 오른쪽으로, 위에서 아래로 배열한다. 이 클래스는 한 행에 컴포넌트를 최대한 채워 넣은 후 그 다음 행으로 넘어간다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ BorderLayout - Window, Dialog, Frame클래스의 기본 레이아웃 관리자이며, &quot;North&quot;, &quot;South&quot;, &quot;East&quot;, &quot;West&quot;, &quot;Center&quot; 등의 이름으로 컨테이너에 추가된 컴포넌트를 배열한다. 지정된 컴포넌트는 컨테이너의 위, 아래, 오른쪽, 왼쪽 그리고 중앙에 배열된다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ GridLayout - 컨테이너를 지정된 수의 행과 열로 나눈 다음 그 행과 열에 왼쪽에서 오른쪽, 위에서 아래로 컴포넌트를 배치시킨다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ CardLayout - 컴포넌트의 크기를 컨테이너 크기와 같게 한 번에 한 컴포넌트만 나타나게 한다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ GridBagLayout - java.awt 패키지에서 가장 복잡하면서도 가장 강력한 레이아웃 관리자이다. 이 클래스는 컨테이너를 눈금모양의 행과 열로 나눈 다음 눈금 안에 넣고 필요하면 눈금의 크기를 조절하여 컴포넌트가 서로 겹쳐지지 않게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.1 FlowLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">FlowLayout 관리자는 Panel의 기본 레이아웃 관리자로서 컨테이너 내의 컴포넌트를 왼쪽에서 오른쪽, 위에서 아래로 차례대로 배치한다. 즉, 문서 편집기에서 텍스트를 입력할 때 왼쪽에서 오른쪽으로 글이 입력되고, 한 줄이되면 다음 줄로 넘어가는 방식처럼 컴포넌트를 차례대로 왼쪽에서 오른쪽을 배치하고, 한 줄이 넘어가면 새 줄을 시작하는 방식이다.</FONT>
<BR>
<P ALIGN=CENTER>  
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=515 HEIGHT=125>
<TD VALIGN=TOP WIDTH=39%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV173.GIF" BORDER=0 WIDTH=153 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=60%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV175.GIF" BORDER=0 WIDTH=263 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=39%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=60%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">다른 레이아웃 관리자와 달리 FlowLayout은 자신이 관리하는 컴포넌트의 크기를 제한하지 않고 컴포넌트의 크기가 최적이 되도록한다. 또 관리하는 영역의 크기가 변경되면 포함된 컴포넌트의 배치도 재설정된다. 옵션을 사용하면 기본값인 중앙정렬을 왼쪽정렬이나 오른쪽정렬 방식으로 배열할 수 있다. 또 Inset을 지정하여 컴포넌트 사이의 테두리 영역을 더 크게 만들 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 setLayout() 메소드를 이용하여 FlowLayout 관리자를 생성하는 예제 코드를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=573 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">setLayout(new FlowLayout(FlowLayout.RIGHT, 20, 40));</FONT>
<P><FONT FACE="Courier New">setLayout(new FlowLayout(FlowLayout.LEFT));</FONT>
<P><FONT FACE="Courier New">setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">매개변수 FlowLayout.RIGHT는 컴포넌트를 오른쪽정렬 방식으로 설정하고, FlowLayout.LEFT는 왼쪽정렬방식으로 설정한다. 매개변수 20과 40은 컴포넌트 사이의 수평 여백(20)과 수직 여백(40)을 나타내는데, 여백을 주지 않으면 기본 간격이 5픽셀로 설정된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 FlowLayout관리자를 지정한 Frame에 버튼을 배열하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=563>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FlowLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FlowLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FlowLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;FlowLayout Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;Button 1&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;Button 2&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;Button 3&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.setSize(150, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setTitle(&quot;FlowLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">FlowLayoutExample fl = new FlowLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">fl.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setLayout() 메소드를 이용하여 레이아웃 관리자를 플로우레이아웃으로 지정한다.</FONT>
<BR>
<P><FONT FACE="바탕">플로우레이아웃 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 필드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int LEFT : 플로우레이아웃 관리자의 왼쪽정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int CENTER : 플로우레이아웃 관리자의 가운데정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int RIGHT : 플로우레이아웃 관리자의 오른쪽정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int LEADING : 플로우레이아웃 관리자의 리딩에지(leading edge) 정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int TRAILING : 플로우레이아웃 관리자의 트레일링 에지(trailing edge) 정렬 값을 나타낸다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ FlowLayout() : 디폴트로 중앙정렬을 하고, 수평과 수직 간격이 5인 플로우레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ FlowLayout(int align) : 주어진 정렬을 하고, 수평과 수직 간격이 5인 플로우 레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ FlowLayout(int align, int hgap, int vgap) : 주어진 정렬을 하고, 수평과 수직 간격이 각각 hgap과 vgap인 플로우레이아웃 관리자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void addLayoutComponent(String name, Component comp) : 주어진 이름으로 컴포넌트를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getAlignment() : 정렬 방식의 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setAlignment(int align) : 정렬 방식을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void layoutContainer(Container target) : 컨테이너에 대한 레이아웃을 행한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 수평 간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 수직 간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 수평 간격을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 수직 간격을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.2 BorderLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">BorderLayout 관리자는 Window, Frame, Dialog의 기본 레이아웃 관리자이다. 컨테이너에 포함된 컴포넌트는 North, South, East, West 및 Center 중에서 하나의 영역에 배치될 수 있다. North는 위를 차지하며, East는 오른쪽을 차지하고, Center영역은 North, South, East, West 등의 영역이 채워진 후에 남는 영역 전체이다. 이들 영역에는 각각 하나의 컴포넌트만 추가할 수 있으며, 하나 이상의 컴포넌트를 추가해도 하나만 나타난다. 만약 한 영역을 사용하지 않으면 그 영역의 최적크기는 0&times;0이 된다. 따라서 컴포넌트를 하나도 넣지 않으면 가운데 영역은 배경으로 나타나고, 주위영역은 0(Zero) 상태로 줄어들어 보이지 않게 된다.</FONT>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=621 HEIGHT=227>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV177.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV179.GIF" BORDER=0 WIDTH=340 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">가로방향 크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=621 HEIGHT=324>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV177.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV183.GIF" BORDER=0 WIDTH=204 HEIGHT=295 HSPACE=2 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">세로방향 크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">BorderLayout 관리자를 사용할 때는 &quot;North&quot;, &quot;South&quot;, &quot;East&quot;, &quot;West&quot;, &quot;Center&quot; 등과 같은 문자열의 영역이름을 지정한다. 이러한 영역은 미리 정의된 상수인 BorderLayout.NORTH, BorderLayout. SOUTH, BorderLayout.EAST,  BorderLayout.WEST, BorderLayout.CENTER 등을 이용한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 BorderLayout을 만드는 예이다. 실행 후 창의 크기를 변경하여 BorderLayout 관리자가 어떻게 반응하는지 살펴보기 바란다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BorderLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class BorderLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	
<P>	<FONT FACE="Courier New">public BorderLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;BorderLayout Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BorderLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">f.setLayout(new BorderLayout());</FONT>
<P>		
<P>		<FONT FACE="Courier New">f.add(&quot;East&quot;, new Button(&quot;East&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;West&quot;, new Button(&quot;West&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;North&quot;, new Button(&quot;North&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;Center&quot;, new Button(&quot;Center&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;South&quot;, new Button(&quot;South&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setTitle(&quot;BorderLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">BorderLayoutExample ble = new BorderLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">ble.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">setLayout(new BorderLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">주석처리하여 레이아웃관리자를 지정하지 않았는데 그 이유는 프레임 클래스의 레이아웃관리자가 BorderLayout관리자이기 때문이다. 즉, 여기서는 6번째 줄이 주석 처리되건 그렇지 않건 상관없다.</FONT>
<BR>
<P><FONT FACE="바탕">BorderLayout 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ BorderLayout() : 컴포넌트간의 수평간격과 수직간격이 0인 Border 레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ BorderLayout(int hgap, int vgap) : 컴포넌트간의 수평간격(hgap)과 수직간격(vgap)을 갖는 Border 레이아웃 관리자를 생성한다. 
</FONT><BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 컴포넌트간의 수평간격(hgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 컴포넌트간의 수직간격(vgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 컴포넌트간의 수평간격(hgap)을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 컴포넌트간의 수직간격(vgap)을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.3 GridLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">GridLayout 관리자는 컨테이너의 영역을 주어진 행과 열 크기로 나누고, 같은 크기의 셀에 컴포넌트를 배치시키는 레이아웃 관리자이다. 예를 들어 new GridLayout(3, 2)문으로 Grid 레이아웃을 만들면 아래 그림처럼 여섯 개의 셀(3개의 행과 2개의 열)이 나타난다. 이 때 모든 셀의 폭은 동일하며 사용 가능한 폭을 셀 수로 나누는 간단한 방식으로 결정된다. 셀 높이도 동일하며, 사용 가능한 높이를 행  수로 나누어 간단하게 결정할 수 있다. 나눈 셀의 수보다 더 많거나 적게 컴포넌트를 삽입하면 먼저 행은 고정되고, 열 수가 변한다.</FONT>
<BR>
<P ALIGN=CENTER>  
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=500 HEIGHT=168>
<TD VALIGN=TOP WIDTH=37%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV185.GIF" BORDER=0 WIDTH=114 HEIGHT=97 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=62%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV187.GIF" BORDER=0 WIDTH=234 HEIGHT=144 HSPACE=3 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=37%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=62%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">BorderLayout관리자와 마찬가지로 컨테이너 크기를 변경해도 컴포넌트의 상대적 위치는 변함이 없고, 컴포넌트의 크기만 변경된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞 그림의 GridLayout 관리자에 대한 사용 예를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class GridLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public GridLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;GridLayout Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new GridLayout(3, 2));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;1&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;2&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;3&quot;)); </FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;4&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;5&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;6&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.pack();</FONT>
<P>		<FONT FACE="Courier New">f.setTitle(&quot;GridLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">GridLayoutExample gle = new GridLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">gle.launchFrame();</FONT>
<P>   <FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(new GridLayout(3, 2));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">3행 2열의 Grid 레이아웃을 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.pack();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">pack() 메소드 호출은 프레임의 크기를 그 프레임 내에 포함된 모든 컴포넌트의 최적 크기와 일치되게 설정한다. 따라서, 프레임이 적절한 크기로 설정된다. 
</FONT><BR>
<P><FONT FACE="바탕">GridLayout 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ GridLayout() : 하나의 행을 갖고 각 컴포넌트가 하나의 열을 차지하도록 Grid 레이아웃관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ GridLayout(int rows, int cols) : 주어진 행과 열을 갖는 Grid 레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ GridLayout(int rows, int cols, int hgap, int vgap) : 주어진 행과 열을 갖고 수평과 수직 간격이 각각 hgap과 vgap인 Grid 레이아웃 관리자를 생성한다.</FONT>
<P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void addLayoutComponent(String name, Component comp) : 주어진 이름으로 컴포넌트를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getColumns() : 열의 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 수평간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getRows() : 행의 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 수직간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void layoutContainer(Container parent) : 컨테이너를 레이아웃 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 주어진 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setColumns(int cols) : 열의 크기를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 수평간격을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setRows(int rows) : 행의 크기를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 수직간격을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.4 CardLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스를 한 번에 한 장씩 나타나는 카드처럼 다룰 수 있다. 즉, 여러 장의 카드를 겹쳐 배치하는 식으로 관리하여 컨테이너가 포함한 컴포넌트를 한 장씩 볼 수 있게 한다. 윈도우에서 탭 대화상자와 유사하다. 여러장으로 겹쳐진 경우 맨 처음 등록된 컴포넌트를 디폴트로 보여준다.</FONT>
<BR>
<P ALIGN=CENTER>  
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=515 HEIGHT=106>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV189.GIF" BORDER=0 WIDTH=204 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV191.GIF" BORDER=0 WIDTH=204 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림처럼 마우스를 클릭 할 때마다 두 개의 Panel을 번갈아 보여주는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CardLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CardLayoutExample implements MouseListener {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Panel cardPanel, p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private CardLayout myCardLayout;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CardLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;CardLayout Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myCardLayout = new CardLayout();</FONT>
<P>		<FONT FACE="Courier New">cardPanel = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=651>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CardLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">cardPanel.setLayout(myCardLayout);</FONT>
<BR>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">p2.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">p1.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">p2.addMouseListener(this);</FONT>
<BR>
<P>		<FONT FACE="Courier New">cardPanel.add(p1, &quot;First&quot;);</FONT>
<P>		<FONT FACE="Courier New">cardPanel.add(p2, &quot;Second&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(cardPanel);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CardLayoutExample cle = new CardLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">cle.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mousePressed(MouseEvent me) {</FONT>
<P>		<FONT FACE="Courier New">myCardLayout.next(cardPanel);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseReleased(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseEntered(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseExited(MouseEvent me) {}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class CardLayoutExample implements MouseListener {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">마우스 이벤트를 사용하기 위해 MouseListener 인터페이스를 구현한 것이다. 이벤트에 대한 자세한 내용은 뒤에서 자세히 다루기로 한다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Panel cardPanel, p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private CardLayout myCardLayout;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체와 CardLayout객체를 선언한다. 선언된 Panel객체 중 cardPanel객체는 또 다른 Panel 객체인 p1과 p2객체를 포함시킬 패널이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myCardLayout = new CardLayout();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">7번째 줄에서 선언한 CardLayout 객체의 인스턴스를 생성한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">cardPanel = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6번째 줄에서 선언한 Panel의 인스턴스를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">cardPanel.setLayout(myCardLayout);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">CardLayout객체의 인스턴스인 myCardLayout을 이용하여 cardPanel객체의 레이아웃 관리자를 CardLayout으로 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">p2.setBackground(Color.red);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체 p1의 배경색은 노란색으로, p2의 배경색은 빨간색으로 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">p2.addMouseListener(this);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체 p1과 p2에 마우스 이벤트 처리 객체를 등록시켜 p1과 p2를 이벤트 발생시키는 객체로 만든다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">cardPanel.add(p1, &quot;First&quot;);</FONT>
<P>		<FONT FACE="Courier New">cardPanel.add(p2, &quot;Second&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체 p1과 p2를 6번째 줄에서 선언된 Panel객체인 cardPanel에 부착한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(cardPanel);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">cardPanel객체를 프레임에 부착한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void mousePressed(MouseEvent me) {</FONT>
<P>		<FONT FACE="Courier New">myCardLayout.next(cardPanel);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이벤트 처리 루틴을 구현하는 부분이다. 
</FONT><P><FONT FACE="바탕">39 : 다음 컴포넌트를 보여준다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="바탕">∼</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">...</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">41 : ∼ 44 : 인터페이스를 사용했을 때는 사용하지 않더라도 인터페이스 내에 선언되어있는 모든 메소드를 프로그램 내에서 모두 구현해야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">CardLayout 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ CardLayout() : 컴포넌트 간의 수평간격과 수직간격이 0인 카드레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ CardLayout(int hgap, int vgap) : 컴포넌트간의 수평간격이 hgap이고, 수직간격이 vgap인 카드레이아웃 관리자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void addLayoutComponent(Component comp, Object constraints) : 주어진 컴포넌트를 카드레이아웃 관리자의 내부 이름테이블에 삽입한다.</FONT>
<P>  <FONT FACE="돋움">∘ void first(Container parent) : 주어진 컨테이너에 포함된 첫 번째 카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void last(Container parent) : 주어진 컨테이너에 포함된 마지막 카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void next(Container parent) : 주어진 컨테이너에 포함된 다음카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void previous(Container parent) : 주어진 컨테이너에 포함된 이전카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void show(Container parent, String name) : 주어진 컨테이너에 포함된 컴포넌트 중 주어진 이름을 가진 컴포넌트로 전환하여 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 주어진 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void layoutContainer(Container parent) : 이 카드 레이아웃 관리자를 이용하여 주어진 컨테이너에 포함된 컴포넌트를 레이아웃 시킨다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 컴포넌트간의 수평간격(hgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 컴포넌트간의 수직간격(vgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 컴포넌트간의 수평간격(hgap)을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 컴포넌트간의 수직간격(vgap)을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.5 GridBagLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">GridBagLayout는 레이아웃 관리자 중에서 가장 복잡하면서도 다양한 형태를 가지고있다. 이 레이아웃 관리자는 각 컴포넌트를 격자나 셀을 기준으로 배치한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV193.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">GridBagLayout 관리자는 컴포넌트를 출력할 때 각 컴포넌트가 차지하는 셀의 위치(수평크기, 수직크기) 등을 설정할 때 GridBagConstraints 클래스를 이용한다. 
</FONT><BR>
<P><FONT FACE="바탕">GridBagConstraints 클래스의 기능은 다음과 같다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.gridx, GridBagConstraints.gridy : 컴포넌트가 위치할 셀의 x 값과 y 값을 나타낸다.</FONT>
<P><FONT FACE="바탕">- 맨 왼쪽 위 셀의 gridx과 gridy 값은 0이다.</FONT>
<P><FONT FACE="바탕">- 컴포넌트를 순서대로 배치할 때는 GridBagConstraints.RELATIVE를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=650 HEIGHT=118>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV194.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=49%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV196.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 5의 gridx 값 : 1</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=49%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 5의 gridx 값 : 2</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.gridwidth, GridBagConstraints.gridheight : 컴포넌트가 차지할 폭과 높이를 나타내는 셀의 개수를 나타낸다.</FONT>
<P><FONT FACE="바탕">- 디폴트값은 1이다.</FONT>
<P><FONT FACE="바탕">- gridwidth를 GridBagConstraints.REMAINDER 값으로 설정하면 현재 행의 마지막 셀이된다.</FONT>
<P><FONT FACE="바탕">- gridheight를 GridBagConstraints.REMAINDER 값으로 설정하면 현재 열의 마지막 셀이된다.</FONT>
<P><FONT FACE="바탕">- gridwidth를 GridBagConstraints.RELATIVE 값으로 설정하면 현재 행의 다음 셀부터 마지막 셀까지 차지하도록 한다.</FONT>
<P><FONT FACE="바탕">- gridheight 를 GridBagConstraints.RELATIVE 값으로 설정하면 현재 열의 다음 셀부터 마지막 셀까지 차지하도록 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=479 HEIGHT=118>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV198.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 4의 gridwidth 값 : GridBagConstraints.REMAINDER</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.fill : 컴포넌트 영역이 요청한 크기보다 클 때, 크기설정을 다시 할 것인가를 결정한다. GridBagConstraints 클래스는 다음과 같은 값을 가능한 값으로 제공한다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NONE : 디폴트값.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.HORIZONTAL : 수평방향으로 확장하고 수직방향으로는 확장하지 않는다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.VERTICAL : 수직방향으로 확장하고 수평방향으로는 확장하지 않는다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.BOTH : 수평 및 수직으로 확장한다. 
</FONT><P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=383 HEIGHT=118>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV200.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 5의 fill 값 : GridBagConstraints.BOTH</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.ipadx, GridBagConstraints.ipady : 컴포넌트 폭의 최소값에 (ipadx * 2) 픽셀을 더하고, 높이의 최소값에 (ipady * 2) 픽셀을 더한다. 
</FONT><BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=486 HEIGHT=197>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV202.GIF" BORDER=0 WIDTH=204 HEIGHT=153 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV204.GIF" BORDER=0 WIDTH=204 HEIGHT=153 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipadx 값 : 10</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipady 값 : 50</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipadx 값 : 50</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipady 값 : 10</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.insets : 컴포넌트와 디스플레이 영역의 경계선 사이 공간크기를 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ GridBagConstraints.anchor : 컴포넌트가 디스플레이 영역보다 작을 때, 컴포넌트가 위치할 값을 나타낸다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.CENTER : 디폴트 값.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NORTH</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NORTHEAST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.EAST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.SOUTHEAST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.SOUTH</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.SOUTHWEST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.WEST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NORTHWEST</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=421 HEIGHT=138>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV206.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button5의 anchor값은 GridBagConstraints.WEST</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.weightx, GridBagConstraints.weighty : 컴포넌트 영역이 요청한 크기보다 클 때 남는 영역을 각 컴포넌트에게 배분해 주어야 하는데, 이 때 컴포넌트가 차지할 폭(weightx)과 높이(weighty)에 대한 가중값(weight)을 나타낸다. 가중값은 컴포넌트마다 다르게 줄 수 있으며, 가중값이 0이면 디스플레이 영역이 커지더라도(사용자가 윈도우의 창을 키울 때) 각 컴포넌트에 할당되는 영역이 없으므로 모든 컴포넌트가 한군데 위치하게 되고 남는 영역은 빈 공간으로 나타나게 된다.</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=640 HEIGHT=212>
<TD VALIGN=TOP WIDTH=43%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV208.GIF" BORDER=0 WIDTH=277 HEIGHT=61 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP COLSPAN=2 WIDTH=28%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 1, 2, 3</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weightx값 : 0</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weighty값 : 0</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=27%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 4</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weightx값 : 1</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weighty값 : 0</FONT></SPAN></FONT></TD>
    </tr>
<TR>
<TD VALIGN=TOP COLSPAN=2 WIDTH=58%>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV210.GIF" BORDER=0 WIDTH=369 HEIGHT=61 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP COLSPAN=2 WIDTH=41%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> 윈도우를 가로로 확대한 모습</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=640 HEIGHT=127>
<TD VALIGN=TOP WIDTH=58%>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV212.GIF" BORDER=0 WIDTH=277 HEIGHT=122 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=41%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> 윈도우를 세로로 확대한 보습</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 GridBagConstraints 객체값을 적당하게 설정하여 각 컴포넌트를 컨테이너에 등록한 후, 그리드백 레이아웃 관리자를 이용하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridBagLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class GridBagLayoutExample {</FONT>		<FONT FACE="Courier New">//extends Frame {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private GridBagLayout gridbag;</FONT>
<P>	<FONT FACE="Courier New">private GridBagConstraints c;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public GridBagLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;GridBagLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag = new GridBagLayout();</FONT>
<P>		<FONT FACE="Courier New">c = new GridBagConstraints();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=978>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridBagLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(gridbag);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.ipadx = 8;</FONT>
<P>		<FONT FACE="Courier New">c.ipadx = 8;</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.fill = GridBagConstraints.BOTH;</FONT>
<P>		<FONT FACE="Courier New">c.weightx = 1.0; c.weighty = 1.0;</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button1 = new Button(&quot;Button1&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button1, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button1);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button2 = new Button(&quot;Button2&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button2, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button3 = new Button(&quot;Button3&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button3, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button3);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.REMAINDER;</FONT>
<P>		<FONT FACE="Courier New">//end row</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button4 = new Button(&quot;Button4&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button4, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button4);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.fill = GridBagConstraints.BOTH;</FONT>
<P>		<FONT FACE="Courier New">c.weightx = 0.0;  c.weighty = 0.0;</FONT>
<P>		<FONT FACE="Courier New">//reset to the default</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button5 = new Button(&quot;Button5&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button5, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button5);</FONT>
<P>		<FONT FACE="Courier New">//another row</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.RELATIVE;</FONT>
<P>		<FONT FACE="Courier New">//next-to-last in row</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button6 = new Button(&quot;Button6&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button6, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button6);</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=916>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridBagLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.REMAINDER;</FONT>
<P>		<FONT FACE="Courier New">//end row</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.weightx = 0.75; c.weighty = 0.75;</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button7 = new Button(&quot;Button7&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button7, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button7);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = 1; 		//reset to the default</FONT>
<P>		<FONT FACE="Courier New">c.gridheight = 2;</FONT>
<P>		<FONT FACE="Courier New">c.weightx = 0.25; c.weighty = 0.25;</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button8 = new Button(&quot;Button8&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button8, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button8);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.weighty = 0.0; 		//reset to the default</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.REMAINDER;</FONT>
<P>		<FONT FACE="Courier New">//end row</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridheight = 1; 		//reset to the default</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button9 = new Button(&quot;Button9&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button9, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button9);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button10 = new Button(&quot;Button10&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button10, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button10);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">GridBagLayoutExample gbl = new GridBagLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">gbl.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램을 실행한 후, 윈도우 크기를 적당하게 조절해 보면, 주어진 가중값에  따라 남는 영역이 분배되므로 가중값에 따라 각 컴포넌트의 크기가 변하는 것을 알 수 있다. 
</FONT><P><FONT FACE="바탕">그리고, GridBagConstraints.REMAINDER와 GridBagConstraints.RELATIVE의 차이점도 알 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">GridBagLayout 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ GridBagLayout() : 그리드백 레이아웃 관리자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ void addLayoutComponent(Component comp, Object constraints) : 주어진 컴포넌트를 주어진 constraints 객체를 이용하여 추가한다.</FONT>
<P> <FONT FACE="돋움">∘ void addLayoutComponent(String name, Component comp) : 주어진 이름으로 컴포넌트를 추가한다.</FONT>
<P> <FONT FACE="돋움">∘ GridBagConstraints getConstraints(Component comp) : 주어진 컴포넌트에 연결된 GridBagConstraints 객체를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ Point getLayoutOrigin() : 레이아웃 그리드의 시작 위치값을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ double[][] getLayoutWeights() : 레이아웃 그리드의 행과 열이 갖는 가중값 배열을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ void invalidateLayout(Container target) : 레이아웃을 무효화시킨다.</FONT>
<P> <FONT FACE="돋움">∘ void layoutContainer(Container parent) : 그리드백 레이아웃 관리자를 이용하여 주어진 컨테이너를 레이아웃 시킨다.</FONT>
<P> <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 주어진 컴포넌트를 제거한다.</FONT>
<P> <FONT FACE="돋움">∘ void setConstraints(Component comp, GridBagConstraints constraints) : 주어진 컴포넌트에 대한 constraints를 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.6 </FONT><FONT FACE="바탕">복합</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">레이아웃</FONT><FONT FACE="HY부활M">(Complex Layout)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">프레임과 패널은 AWT에서 필수 컨테이너라고 할 수 있다. 
</FONT><P><FONT FACE="바탕">프레임은 제목, 테두리, 크기조절용 모서리 등이 있는 &quot;최상위 레벨&quot; 창이다. 창의 모양과 동작 방식은 사용하는 플랫폼에 따라 다르며, setLayout() 메소드를 사용하여 레이아웃 관리자를 지정하지 않으면 BorderLayout이 프레임의 기본 레이아웃 관리자가 된다. 일반적으로 GUI 환경으로 프로그램을 작성할 때는 적어도 하나의 프레임을 사용하게 되지만 하나의 코드 내에서 여러 프레임을 사용할 수도 있다. 프레임의 상위 클래스인 Window도 BorderLayout을 기본 레이아웃 관리자로 한다.</FONT>
<P><FONT FACE="바탕">패널에서 setLayout() 메소드를 명시적으로 사용하지 않으면 FlowLayout 관리자가 사용된다. 패널은 독립적인 모양도 없고 독립적인 창으로 사용할 수도 없지만, 컴포넌트(버튼, 레이블 등) 뿐만 아니라 다른 컨테이너(패널, 프레임 등)를 넣을 수 있다. 패널을 컨테이너에 넣으면 독립적으로 다른 레이아웃 관리자를 사용할 수 있다. 패널 클래스의 하위 클래스인 Applet도 FlowLayout을 기본 관리자로 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV214.GIF" BORDER=0 WIDTH=275 HEIGHT=138 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">앞의 그림에서 &quot;버튼 1&quot;과 &quot;버튼 2&quot;가 있는 패널은 FlowLayout관리자가 적용되었고, &quot;버튼 3&quot;과 &quot;버튼 4&quot;가 있는 패널에는 BorderLayout관리자가 적용되었다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 ComplexLayoutExample에 대한 결과를 출력하는 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=746>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ComplexLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ComplexLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Panel p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2, b3, b4;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ComplexLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;ComplexLayout Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 2&quot;);</FONT>
<P>		<FONT FACE="Courier New">b3 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 3&quot;);</FONT>
<P>		<FONT FACE="Courier New">b4 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 4&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">p1.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT>
<BR>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">p2.add(&quot;West&quot;, b3);</FONT>
<P>		<FONT FACE="Courier New">p2.add(&quot;Center&quot;,b4);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(&quot;North&quot;, p1);</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;Center&quot;, p2);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ComplexLayoutExample cl = new ComplexLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">cl.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Panel p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">Panel p2 = new Panel();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">두 개의 패널 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">10번째 줄과 11번째 줄에서 생성된 패널객체 p1은 FlowLayout을 레이아웃 관리자로 하고, p2는 BorderLayout을 레이아웃 관리자로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">11번째 줄에서 만들어진 버튼 객체를 p1에 포함시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p2.add(&quot;West&quot;, b3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">16번째 줄에서 만들어진 버튼 객체를 p2에 포함시킨다. p2패널의 레이아웃 관리자가 BorderLayout이므로 add() 메소드에 위치를 명시해준다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(&quot;North&quot;, p1);</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;Center&quot;, p2);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">21번째 줄과 22번째 줄은 패널 객체 p1과 p2를 프레임에 부착한다. 프레임의 기본 레이아웃 관리자는 BorderLayout이므로 위치를 명시한 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.7 </FONT><FONT FACE="바탕">레이아웃</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">관리자를</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용하지</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">않는</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">레이아웃</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">원하는 곳에 직접 컴포넌트를 배치하려면 먼저 레이아웃을 사용하지 않아야 하므로 레이아웃 관리자를 null(setLayout(null))로 설정한다. 그리고 각 컴포넌트의 크기와 위치 결정은 setSize(), setLocation() 메소드 또는 setBounds() 메소드 등을 이용하여 결정한다. 레이아웃 관리자를 지정하지 않을 경우 플랫폼에 따라 의도한 것과 다르게 나타날 수 있으므로 주의해야 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV215.GIF" BORDER=0 WIDTH=221 HEIGHT=112 HSPACE=3 ALIGN=BOTTOM>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 앞의 NoLayoutExample을 출력하기 위한 예를 보인 것으로 레이아웃 관리자를 사용하지 않고, 컴포넌트의 위치를 직접 설정해 주는 방법을 보여주는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=784>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">NoLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class NoLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2, b3;</FONT>
<P>	<FONT FACE="Courier New">private Insets insets;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public NoLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;NoLayout Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;one&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;two&quot;);</FONT>
<P>		<FONT FACE="Courier New">b3 = new Button(&quot;three&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(null);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<BR>
<P>		<FONT FACE="Courier New">insets = f.getInsets();</FONT>
<P>		<FONT FACE="Courier New">b1.setBounds(50 + insets.left, 5 + insets.top, 50, 20);</FONT>
<P>		<FONT FACE="Courier New">b2.setLocation(new 	Point(70 + insets.left, 35 + insets.top));</FONT>
<P>		<FONT FACE="Courier New">b2.setSize(new Dimension(50, 20));</FONT>
<P>		<FONT FACE="Courier New">b3.setLocation(130 + insets.left, 15 + insets.top);</FONT>
<P>		<FONT FACE="Courier New">b3.setSize(50, 30);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(b1);  f.add(b2);  f.add(b3);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">NoLayoutExample nt = new NoLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">nt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Insets insets;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Insets 객체를 이용해 프레임 경계선의 두께를 얻는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(null);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이아웃 관리자를 사용하지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임 윈도우의 크기를 가로 200픽셀 세로 100픽셀로 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">자바에서 테두리를 구하려면 먼저 컴포넌트가 보이는(visible) 상태여야 한다. 그렇지 않으면 테두리(inset) 값은 모두 0이 된다. 따라서, 이 부분을 20번째 줄 이후로 옮겨 실행시키면 다음과 같은 결과를 얻을 수 있다.</FONT>
<P>  
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV216.GIF" BORDER=0 WIDTH=204 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">insets = getInsets();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임의 경계선 두께를 얻는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b1.setBounds(50 + insets.left, 5 + insets.top, 50, 20);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setBound()는 컴포넌트의 크기와 위치를 동시에 지정할 수 있으므로 가로 50픽셀, 세로 20픽셀로 크기를 지정하고, 위치는 원점(0, 0)에서 (50, 5) 부분에 컴포넌트의 왼쪽 상단 모서리를 배치한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b2.setLocation(new 	Point(70 + insets.left, 35 + insets.top));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setLocation() 메소드는 컴포넌트의 위치를 지정해 주는 메소드로 좌표(70, 35)에 배치한다. 여기서는 Point클래스(Point클래스는 x좌표와 y좌표를 가지고 있다.)를 이용하여 위치를 지정했지만 23번째 줄처럼 Point클래스를 사용하지 않아도 된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b2.setSize(new Dimension(50, 20));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setSize() 메소드는 컴포넌트의 크기를 지정해 주는 메소드이다. 가로 50픽셀, 세로 20픽셀 크기의 컴포넌트를 생성한다. 여기서는 Dimension 클래스를 이용했지만 24번째 줄처럼 Dimension 클래스를 사용하지 않아도 된다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(b1);  f.add(b2);  f.add(b3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼 컴포넌트를 프레임에 부착시킨다.</FONT>
<P><FONT FACE="바탕">컴포넌트의 크기와 위치에 관련된 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ void setLocation(int x, int y) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P> <FONT FACE="돋움">∘ void setLocation(Point p) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P> <FONT FACE="돋움">∘ void setSize(Dimension d) : 컴포넌트의 폭과 높이를 각각 d.width와 d.height로 설정한다.</FONT>
<P> <FONT FACE="돋움">∘ void setSize(int width, int height) : 컴포넌트의 폭과 높이를 각각 width와 height로 설정한다.</FONT>
<P> <FONT FACE="돋움">∘ void setBounds(int x, int y, int width, int height) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P> <FONT FACE="돋움">∘ void setBounds(Rectangle r) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=439>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">Inset 클래스</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">컨테이너에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">테두리를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">나타내는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">클래스로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">레이아웃을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">지정할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">때</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">유용하다</FONT><FONT FACE="Courier New">. </FONT><FONT FACE="바탕">즉</FONT><FONT FACE="Courier New">, </FONT><FONT FACE="바탕">컨테이너</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">영역</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실제</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">컴포넌트를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표현하거나</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">작업할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">영역은</FONT><FONT FACE="Courier New"> inset</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">가리키는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">테두리</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">영역이라</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있다</FONT><FONT FACE="Courier New">. 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">Inset 클래스는 다음과 같은 변수와 메소드를 제공한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 변수</FONT>
<P>    <FONT FACE="바탕">∘ int bottom : 테두리 아래쪽크기를 나타낸다.</FONT>
<P>    <FONT FACE="바탕">∘ int left : 테두리 왼쪽크기를 나타낸다.</FONT>
<P>    <FONT FACE="바탕">∘ int right : 테두리 오른쪽크기를 나타낸다.</FONT>
<P>    <FONT FACE="바탕">∘ int top : 테두리 위쪽크기를 나타낸다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 생성자</FONT>
<P>    <FONT FACE="바탕">∘ Insets(int top, int left, int bottom, int right) : 주어진 크기의 inset을 생성한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 메소드</FONT>
<P>    <FONT FACE="바탕">∘ String toString() : inset 객체를 문자열로 표현하여 되돌려준다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV217.GIF" BORDER=0 WIDTH=360 HEIGHT=233 ALIGN=BOTTOM>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV218.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.3  </FONT><FONT FACE="바탕">메뉴</FONT><FONT FACE="Bookman Old Style">(Menu)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT에서 메뉴는 몇 개의 클래스에서 제공하는데, 자바 어플리케이션 또는 애플릿에서 원하는 형태의 메뉴를 구성할 수 있도록 해준다. 윈도우는 몇 개의 메뉴를 갖고 각 메뉴는 다시 하나 이상의 메뉴, 메뉴 아이템, 메뉴 분리자 등을 갖는다.</FONT>
<P><FONT FACE="바탕">메뉴는 다른 컴포넌트(Button, TextField 등)처럼 흔히 사용하는 컨테이너에 추가할 수 없을 뿐만 아니라 레이아웃 관리자를 사용할 수도 없으며, 메뉴 컨테이너(Menu container)에만 추가할 수 있다. 이때 사용하는 메소드가 setMenuBar()이며, setMenuBar()를 이용하여 메뉴 표시줄을 만들면 메뉴 &quot;트리&quot;가 만들어진다. 다시 메뉴에는 메뉴 항목뿐만 아니라 또 다른 메뉴가 추가될 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 AWT에서 제공되는 메뉴 컴포넌트 클래스의 계층 구조를 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV219.GIF" BORDER=0 WIDTH=491 HEIGHT=160 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.1 MenuComponent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">맨 위 클래스인 MenuComponent는 메뉴를 제공하기 위한 기본적인 기능을 정의하며 실제 클래스 자체를 사용하지는 않는다. 다른 메뉴 관련 클래스는 이 클래스를 상속받는 하위클래스이다.</FONT>
<BR>
<P><FONT FACE="바탕">MenuComponent 클래스가 제공하는 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuComponent() : MenuComponent 객체를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Font getFont() : 메뉴 컴포넌트에 사용된 폰트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getName() : 메뉴 컴포넌트의 이름을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuContainer getParent() : 메뉴 컴포넌트의 부모 컨테이너를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setFont(Font f) : 메뉴 컴포넌트가 사용할 폰트를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setName(String name) : 주어진 문자열로 메뉴 컴포넌트의 이름을 설정한다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.2 MenuBar</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">MenuBar 컴포넌트는 수평 메뉴로서 프레임 객체에만 추가할 수 있으며, 발생하는 모든 이벤트가 정상적인 메뉴 동작의 일부로 처리되기 때문에 리스너(Listener)를 지원하지 않는다. setHelpMenu(Menu) 메소드를 이용하면 [Help]메뉴를 지정할 수 있다. 
</FONT><P><FONT FACE="바탕">MenuBar 클래스가 제공하는 객체 생성자와  메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuBar() : 메뉴바를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Menu add(Menu m) : 메뉴바에 주어진 메뉴를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void deleteShortcut(MenuShortcut s) : 주어진 메뉴단축키를 삭제한다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu getHelpMenu() : 메뉴바의 도움말 메뉴를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu getMenu(int i) : 주어진 번호의 메뉴를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMenuCount() : 메뉴바에 있는 메뉴의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem getShortcutMenuItem(MenuShortcut s) : 주어진 메뉴 단축키에 연결된 메뉴 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int index) : 주어진 인덱스에 해당하는 메뉴를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(MenuComponent m) : 주어진 메뉴 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHelpMenu(Menu m) : 도움말 메뉴를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Enumeration shortcuts() : 메뉴바에 등록된 메뉴단축키를 얻는다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.3 Menu</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Menu 컴포넌트는 기본적인 풀다운 메뉴를 만드는데 사용하며, MenuItem클래스의 하위 클래스이기 때문에 메뉴를 다른 메뉴에 추가하면 새로운 메뉴를 생성할 수 있다. 즉, MenuBar에 추가하여 메뉴를 나타내거나, 다른 Menu에 추가하여 서브 메뉴를 구성할 수 있다. 다음 그림은 두 개의 Menu객체를 추가한 예이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV220.GIF" BORDER=0 WIDTH=268 HEIGHT=134 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림과 같이 윈도우의 프레임에 메뉴를 붙이는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=629>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MenuExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, editMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MenuExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Menu Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>
<P>		<FONT FACE="Courier New">mb.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MenuExample mt = new MenuExample();</FONT>
<P>		<FONT FACE="Courier New">mt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">MenuBar 클래스의 인스턴스를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">MenuBar에 들어갈 Menu 클래스의 인스턴스를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setMenuBar() 메소드를 사용하여 MenuBar를 프레임에 추가한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 Menu를 MenuBar에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">Menu 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<P>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Menu() : 레이블이 없는 메뉴를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu(String label) : 주어진 레이블을 갖는 메뉴를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu(String label, boolean tearOff) : 주어진 레이블을 갖고, 메뉴가 tear-off 될 수 있는지 여부를 설정하여 메뉴를 생성한다.</FONT>
<P> 
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuItem add(MenuItem mi) : 메뉴 아이템을 추가한다. 
</FONT><P>  <FONT FACE="돋움">∘ void add(String label) : 주어진 이름의 메뉴 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void addSeparator() : 메뉴 분리자를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem getItem(int index) : 주어진 인덱스에 해당하는 메뉴 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getItemCount() : 메뉴에 추가된 메뉴 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(MenuItem menuitem, int index) : 주어진 인덱스에 메뉴 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(String label, int index) : 주어진 인덱스에 주어진 이름의 메뉴 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void insertSeparator(int index) : 주어진 인덱스에 메뉴 분리자를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isTearOff() : 이 메뉴가 tear-off 메뉴인지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int index) : 주어진 인덱스에 해당하는 메뉴 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(MenuComponent item) : 주어진 메뉴 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeAll() : 등록된 모든 메뉴 아이템을 제거한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.4 MenuItem</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">MenuItem 클래스는 Menu에 추가된 각 아이템을 만드는 클래스이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV222.GIF" BORDER=0 WIDTH=288 HEIGHT=192 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림과 같은 결과를 얻도록 메뉴에 메뉴항목을 붙이는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=784>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuItemExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MenuItemExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, editMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MenuItemExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;MenuItem Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">저장하기</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.addSeparator();</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">출력</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">mb.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MenuItemExample mt = new MenuItemExample();</FONT>
<P>		<FONT FACE="Courier New">mt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">18 : ∼ 23 : 까지는 Menu에 MenuItem을 포함시키는 부분으로 이 줄에서는 &quot;새글&quot;이라는 명칭의 메뉴항목을 &quot;파일&quot; 메뉴에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.addSeparator();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">메뉴 항목을 분리하기 위해 addSeparator() 메소드를 이용하여 메뉴 분리자를 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">MenuItem 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuItem() : 레이블이 없고, 메뉴단축키가 없는 메뉴 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem(String label) : 주어진 레이블을 갖고, 연결된 메뉴단축키가 없는 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem(String label, MenuShortcut s) : 주어진 레이블을 갖고, 주어진 메뉴단축키가 연결된 메뉴 아이템을 생성한다.</FONT>
<P> 
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void deleteShortcut() : 연결된 메뉴단축키를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getLabel() : 메뉴 아이템의 레이블을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuShortcut getShortcut() : 메뉴 아이템에 연결된 메뉴단축키 객체를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isEnabled() : 아이템이 활성화되어 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setEnabled(boolean b) : 메뉴 아이템을 활성화 또는 비활성화 되도록 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setLabel(String label) : 메뉴 아이템의 레이블을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setShortcut(MenuShortcut s) : 메뉴 아이템의 메뉴단축키 객체를 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.5 CheckboxMenuItem</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">CheckboxMenuItem는 체크박스를 포함하고 있는 메뉴 아이템을 만드는데 사용하며 선택 항목은 메뉴에 나열된다. CheckboxMenuItem은 ItemListener 인터페이스를 통해 제어가 이루어지기 때문에 상태가 바뀌면 itemStateChanged() 메소드가 호출된다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV223.GIF" BORDER=0 WIDTH=306 HEIGHT=163 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 CheckboxMenuItem을 구현하는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=762>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CheckboxMenuItemExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CheckboxMenuItemExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, viewMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CheckboxMenuItemExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;CheckboxMenuItem Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">viewMenu = new Menu(&quot;</FONT><FONT FACE="바탕">보기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<BR>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>
<P>		<FONT FACE="Courier New">mb.add(viewMenu);</FONT>
<P>	
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">표준</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단추</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">주소</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표시줄</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">상태</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표시줄</FONT><FONT FACE="Courier New">&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 160);</FONT>	
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CheckboxMenuItemExample ct = new CheckboxMenuItemExample();</FONT>
<P>		<FONT FACE="Courier New">ct.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">표준</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단추</FONT><FONT FACE="Courier New">&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">체크박스를 포함한 메뉴항목을 만들고 이를 메뉴(viewMenu)에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">CheckboxMenuItem의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ CheckboxMenuItem() : 레이블이 없는 체크박스 메뉴 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ CheckboxMenuItem(String label) : 주어진 레이블을 갖는 체크박스 메뉴 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ CheckboxMenuItem(String label, boolean state) : 주어진 레이블과 선택 상태를 갖는 체크박스 메뉴 아이템을 생성한다.</FONT>
<P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ boolean getState() : 체크박스 메뉴 아이템의 선택 상태를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setState(boolean b) : 체크박스 메뉴 아이템을 주어진 상태로 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.6 PopupMenu</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">PopupMenu는 독립형 메뉴를 만드는데 사용하며 메뉴(Menu)나 메뉴항목(MenuItem)을 추가할 수 있다.</FONT>
<P><FONT FACE="바탕">이것은 컨테이너에 일반적인 컴포넌트를 넣는 것과는 달리 반드시 상위 컴포넌트에 붙여야 한다. PopupMenu를 화면에 나타나게 하려면 show() 메소드를 호출해야 하고, 팝업메뉴가 나타날 x좌표와, y좌표의 위치를 지정해야 한다. 위치지정은 동작을 시작시키는 컴포넌트를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV224.GIF" BORDER=0 WIDTH=255 HEIGHT=163 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 PopupMenu를 만드는 예제이다. 마우스 오른쪽 버튼을 누르면 팝업 메뉴가 나타나고, 이를 위해 이벤트를 적용하였다. 이벤트에 대한 자세한 내용은 뒤에서 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PopupMenuExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class PopupMenuExample </FONT>
<P>		<FONT FACE="Courier New">extends MouseAdapter </FONT>
<P>		<FONT FACE="Courier New">implements ActionListener {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<B><FONT FACE="Courier New">private PopupMenu popupMenu;</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=1022>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PopupMenuExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Menu editMenu;</FONT>
<P>	<FONT FACE="Courier New">private MenuItem cancelItem, redoItem, quitItem;</FONT>
<P>	<FONT FACE="Courier New">private MenuItem copyItem, pasteItem;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public PopupMenuExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;PopupMenu Example&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">popupMenu = new PopupMenu();</FONT></B>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">cancelItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">취소</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">redoItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">재</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">copyItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">복사하기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">pasteItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">붙여넣기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">quitItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">popupMenu.add(cancelItem);</FONT>
<P>		<FONT FACE="Courier New">redoItem.setEnabled(false);</FONT>
<P>		<FONT FACE="Courier New">popupMenu.add(redoItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">popupMenu.addSeparator();</FONT>
<BR>
<P>		<FONT FACE="Courier New">editMenu.add(copyItem);</FONT>
<P>		<FONT FACE="Courier New">editMenu.add(pasteItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">popupMenu.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">popupMenu.addSeparator();</FONT>
<BR>
<P>		<FONT FACE="Courier New">popupMenu.add(quitItem);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">f.add(popupMenu);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(250, 160);</FONT>
<BR>
<P>		<FONT FACE="Courier New">copyItem.addActionListener(this);</FONT>
<P>		<FONT FACE="Courier New">pasteItem.addActionListener(this);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( new WindowAdapter() {</FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT>
<P>				<FONT FACE="Courier New">System.exit(0);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">} );</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PopupMenuExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">PopupMenuExample pme = new PopupMenuExample();</FONT>
<P>		<FONT FACE="Courier New">pme.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent e) {</FONT>
<P>		<FONT FACE="Courier New">if(e.getModifiers() == MouseEvent.BUTTON3_MASK) {</FONT>
<P>			<B><FONT FACE="Courier New">popupMenu.show(f, e.getX(), e.getY());</FONT></B>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) {</FONT>
<P>		<FONT FACE="Courier New">if(e.getSource().equals(copyItem)) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Selected copy item&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else if(e.getSource().equals(pasteItem)) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Selected paste item&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Menu 클래스를 상속받아 메뉴를 생성하므로 사용법은 메뉴 컴포넌트에서와 같다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">popupMenu = new PopupMenu();</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">PopupMenu객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">40:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">f.add(popupMenu);</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임에 팝업메뉴를 붙인다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">62:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<B><FONT FACE="Courier New">popupMenu.show(f, e.getX(), e.getY());</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">팝업메뉴를 이벤트가 발생한 위치에 나타나게 한다.</FONT>
<BR>
<P><FONT FACE="바탕">PopupMenu가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ PopupMenu() : 팝업메뉴를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ PopupMenu(String label) : 주어진 이름을 갖는 팝업메뉴를 생성한다.</FONT>
<P> 
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void show(Component origin, int x, int y) : 팝업 메뉴를 주어진 컴포넌트의 해당 위치에 나타나게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.7 MenuShortcut</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">MenuShortcut 클래스는 메뉴에 단축키 기능을 제공하는 기능을 한다. 단축키를 등록하려면 해당키의 문자를 직접 입력할 수도 있고, 'KeyEvent.VK_'와 키값을 입력하면 되는데 만약, 'A' 키라면 KeyEvent.VK_A라고 기술한다. 이렇게 하면, CTRL 키와 조합되어 메뉴단축키를 생성한다. SHIFT 키와 함께 누르는 단축키로 지정하려면 useShiftModifier 값을 true로 설정한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV225.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 MenuShortcut 클래스를 익히기 위한 예제이다. 여기서는 이벤트 처리를 하지 않았으므로 실제 단축키를 눌러도 아무 반응도 나타나지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=348>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuShortcutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MenuShortcutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, editMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MenuShortcutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;MenuShortcut Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=629>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuShortcutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<BR>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>			<FONT FACE="Courier New">mb.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut('N')));</FONT>
<BR>
<P>		<FONT FACE="Courier New">MenuItem openItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">openItem.setShortcut(new  MenuShortcut('O'));</FONT>
<BR>
<P>		<FONT FACE="Courier New">fileMenu.add(openItem);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">저장하기</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut(KeyEvent.VK_S)));</FONT>
<P>		
<P>		<FONT FACE="Courier New">MenuShortcut saveAsShortcut = new MenuShortcut('A', true);</FONT>
<P>		<FONT FACE="Courier New">MenuItem saveAsItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">다른</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">저장</FONT><FONT FACE="Courier New">&quot;, saveAsShortcut);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(saveAsItem);</FONT>
<P>		
<P>		<FONT FACE="Courier New">fileMenu.addSeparator();</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut('X')));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MenuShortcutExample mt = new MenuShortcutExample();</FONT>
<P>		<FONT FACE="Courier New">mt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut('N')));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Ctrl+N을 단축키로 갖는 메뉴항목(MenuItem)을 생성하여 메뉴에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">MenuItem openItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">openItem.setShortcut(new  MenuShortcut('O'));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">MenuItem 객체를 생성하고 setShortcut() 메소드를 이용하여 Ctrl+O를 단축키로 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">저장하기</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut(KeyEvent.VK_S)));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">java.awt.event.KeyEvent 클래스의 필드(VK_S)를 사용하여 Ctrl+S를 단축키로 지정한다. KeyEvent 클래스의 필드를 사용하려면 java.awt.event 패키지를 import한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">MenuShortcut saveAsShortcut = new MenuShortcut('A', true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">단축키로 Shift키와 함께 사용하는 MenuShortcut 객체를 생성한다. 단축키는 Ctrl+Shift+A를 갖게 된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=29>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">MenuItem saveAsItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">다른</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">저장</FONT><FONT FACE="Courier New">&quot;, saveAsShortcut);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">28번째 줄에서 생성된 MenuShortcut객체를 이용하여 MenuItem의 단축키를 지정한다.</FONT>
<BR>
<P><FONT FACE="바탕">MenuShortcut 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuShortcut(int key) : 주어진 키에 대한 메뉴단축키 객체를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuShortcut(int key, boolean useShiftModifier) : 주어진 키에 대한 메뉴단축키 객체를 생성한다. Shift키를 함께 사용할것인지의 여부를 결정할 수 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getKey() : 키 코드값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean usesShiftModifier() : 메뉴단축키 객체가 Shift키를 사용할지 여부를 설정한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV226.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.4  </FONT><FONT FACE="바탕">색상과</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">글꼴</FONT><FONT FACE="Bookman Old Style">(Font)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 부분에서는 AWT가 제공하는 색상과 글꼴의 사용법 및 기능에 대해 설명하기로 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.4.1 </FONT><FONT FACE="바탕">색상</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">색을 변경하려면 setForeground(Color c)메소드와 setBackground(Color c) 메소드를 이용한다. 이 메소드는 모두 java.awt.Color 클래스의 인스턴스를 인수로 갖는다. Color 클래스의 인스턴스는 자주 사용되는 색에 대해서는 상수로 지정된 Color.red, Color.blue 등의 static 멤버변수를 사용할 수도 있고, Color 클래스의 생성자를 통해 R(빨강), G(초록), B(파랑)에 0∼255사이의 값을 주어 고유한 색을 만들 수도 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=549 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">public Color(int red, int green, int blue)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV227.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞 그림의 버튼 배경색과 전경색을 바꾸는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=673>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ColorExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ColorExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ColorExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">btn = new Button(&quot;</FONT><FONT FACE="바탕">버</FONT><FONT FACE="Courier New">  </FONT><FONT FACE="바탕">튼</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.add(btn, BorderLayout.SOUTH);</FONT>
<BR>
<P>		<FONT FACE="Courier New">btn.setBackground(</FONT><B><FONT FACE="Courier New">Color.blue</FONT></B><FONT FACE="Courier New">);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Color yellow = new Color(255, 255, 0);</FONT></B>
<P>		<FONT FACE="Courier New">btn.setForeground(</FONT><B><FONT FACE="Courier New">yellow</FONT></B><FONT FACE="Courier New">);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ColorExample win = new ColorExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.4.2 </FONT><FONT FACE="바탕">글꼴</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT에서 문자를 표시하는데 사용하는 글꼴은 setFont(Font f) 메소드를 이용하여 지정할 수 있으며, 이 메소드는 java.awt.Font 클래스의 인스턴스를 인자로 갖는다. Color 클래스와는 달리 글꼴을 직접 지정하는 상수는 없지만, 글꼴이름, 스타일, 포인트 크기 등을 지정할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=549 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">public Font(String name, int style, int size)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">- name에는 Dialog, Helvetica, TimesRoman, Curier 등의 글꼴 명을 사용한다. 
</FONT><P><FONT FACE="바탕">- 스타일 상수는 int값으로 다음중 하나를 갖는다.</FONT>
<BR>
<P>	<FONT FACE="바탕">Font.BOLD</FONT>
<P>	<FONT FACE="바탕">Font.ITALIC</FONT>
<P>	<FONT FACE="바탕">Font.PLAIN</FONT>
<P>	<FONT FACE="바탕">Font.BOLD + Font.ITALIC</FONT>
<BR>
<P><FONT FACE="바탕">- 폰트의 기본값은 10이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV228.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림과 같은 글꼴을 출력시키는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=740>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FontExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FontExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn;</FONT>
<P>	<FONT FACE="Courier New">private TextArea output;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FontExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">btn = new Button(&quot;</FONT><FONT FACE="바탕">버</FONT><FONT FACE="Courier New">  </FONT><FONT FACE="바탕">튼</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">output = new TextArea();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.add(btn, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.add(output, BorderLayout.CENTER);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Font myFont = new Font(&quot;Curier&quot;, Font.ITALIC, 20);</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">btn.setFont(myFont);</FONT></B>
<P>		<B><FONT FACE="Courier New">output.setFont(myFont);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">FontExample win = new FontExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV229.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV230.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV231.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[이벤트 프로그래밍]</FONT></SPAN></FONT>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV232.GIF" BORDER=0 ALIGN=LEFT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이벤트란 사용자 인터페이스를 통한 행위나, 어떤 객체가 활동하여 발생하는 모든 행위를 말하는데, 예를 들어 사용자가 버튼을 클릭 하거나 특정키를 누르는 행위 등을 말한다. 이벤트는 AWT 컴포넌트에 대한 동작의 결과를 나타내는데, 예를 들어 버튼 위에서 마우스를 누르면 마우스 이벤트의 발생 원인이 되는 것이다. 이벤트가 발생하면 동작 대상인 컴포넌트(버튼, 텍스트 필드 등)가 그 이벤트를 받게되는데 이처럼 이벤트 객체를 받는 메소드를 이벤트핸들러(Event Handler)라고 한다.</FONT></SPAN></FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이벤트 처리 방식은 JDK 1.0의 계층형 이벤트 모델(Hierarchical event model)과 JDK 1.1 이후의 위임형 이벤트모델(Delegation event model)방식이 있다.</FONT></SPAN></FONT>
<BR>
<BR>
<P>
<BR>
</body>

</html>
