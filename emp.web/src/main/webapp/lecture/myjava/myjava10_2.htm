<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">10.2</P></td>
        <td width="518"><p class="TitleTitle">JDBC API</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P>&nbsp;JDBC 1.0 스펙에서는 java.sql 패키지를 제공하였고, 2.0에서는 몇몇 기능이 추가된 java.sql 패키지와 javax.sql 패키지를 제공한다. java.sql 패키지는 J2SE에 포함되어 있으며 CoreAPI라하고, javax.sql 패키지는 J2EE에 포함되어 있으며 Standard extension API라고 한다. JDK 1.4버전에서는 JDBC 스펙 3.0까지 지원하고 있는데 JDK 1.4 버전의 J2SE에는 java.sql 패키지와 javax.sql 패키지를 모두 포함하고 있다.
		</ul>
		<P class="TSubmenu">10.2.1 JDBC API
		<ul>
		<P>java.sql 패키지에는 14개의 인터페이스와 7개의 클래스로 구성되어 있다. 인터페이스는 서로 주고받는 표준인데, 같은 인터페이스를 사용하면 상대방이 누구이건 내가 알고 있는 방법으로 통신을 할 수 있다. JDBC는 이러한 인터페이스의 사상을 잘 구현하고 있는 예이다. 데이터베이스엔진 개발자는 java.sql 패키지에 있는 드라이버 인터페이스를 구현하여 자바와 자신의 DBMS를 연결할 수 있는 드라이버를 만들고, 자바 프로그램 개발자는 java.sql 패키지에 있는 인터페이스와 클래스를 가지고 데이터베이스를 사용하는 프로그램을 개발하게 된다.
		<P>JDBC 프로그램에 쉽게 적응하려면 java.sql 패키지에 있는 클래스, 인터페이스 및 관련 메소드를 잘 이해해야 한다. 다음 그림은 JDBC 클래스 및 인터페이스 상속관계를 나타낸 것이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV350.GIF" BORDER=0 ALIGN=BOTTOM>
		<P>- DriverManager : JVM에서 JDBC 전체를 관리하는 클래스로 드라이버를 등록하고, Connec -tion객체를 얻는데 사용한다.
		<P>- Driver : 데이터베이스를 만든 회사(Oracle, Informix, Sybase, 등)에서 데이터베이스를 연결할 수 있는 JDBC 드라이버 클래스를 만드는 인터페이스이다. 
		<P>- Connection : 데이터베이스와 연결성을 가지고 있는 인터페이스이다. 프로그래머는 Driver -Manger로부터 얻어내어 데이터베이스와 연결한다. 
		<P>- Statement : 실제 SQL문을 실행하기 위해 Connection에서 받아 내는 인터페이스이다. 
		<P>- ResultSet : Statement를 통해 SQL SELECT문을 실행한 결과 데이터값을 갖는 인터페이스이다. 한 개의 Statement는 한 개의 ResultSet 공간만 할당받는다. 
		</ul>
		<P class="TSubmenu">10.2.2 JDBC 드라이버 타입
		<ul>
		<P>JDBC 드라이버 타입은 다음과 같이 4가지가 있다. 
		<P>10.2.2.1 타입 Ⅰ 드라이버(JDBC-ODBC Bridge Driver)
		<P>ODBC 드라이버를 연결한다. 이 타입의 드라이버는 마이크로소프트의 장점을 살리기 위해 제공되는 드라이버다. 마이크로소프트의 표준인 ODBC 드라이버를 연결하고 이를 통하여 데이터베이스를 접근하는 방식이기 때문에 JDBC-ODBC 가교 드라이버라고도 한다. 타입 Ⅰ드라이버를 사용하려면 클라이언트 컴퓨터에 ODBC 드라이버와 JDBC 드라이버가 설치되어 있어야 한다. 이 때문에 동적으로 드라이버가 다운로드 되는 환경에서는 사용하기 어렵고 고정된 드라이버를 사용하는 환경에 적합하다. JDBC 1.2부터 기본으로 장착되어 있으므로 따로 설치할 필요가 없다. JVM에 기본적으로 제공하는 JDBC-ODBC 드라이버는 sun.jdbc.odbc.JdbcOdbcDriver이다. 이 드라이버의 장점은 거의 모든 데이터베이스에 사용이 가능하다는 것이다. 단점으로는 ODBC를 사용하므로 100% 자바가 아닌데, 이는 프로그램이 데이터베이스에 의존적이고 또한 플랫폼 독립적이지 않다는 것을 의미한다.
		<P>10.2.2.2 타입 Ⅱ 드라이버(Native API Partly Driver)
		<P>타입 Ⅱ 드라이버는 일부가 자바로 되어있는 JDBC 드라이버로 데이터베이스 회사에서 제공해 준다. 따라서 플랫폼 의존적이다. 전체가 자바로 구현되지는 않았지만 수행능력이 뛰어나 속도가 빠르다는 장점을 가지고 있다. 타입 Ⅲ 드라이버와 마찬가지로 클라이언트 컴퓨터에 설치하는 드라이버가 필요하다. 이러한 형식은 오라클,  인포믹스(Informix), DB2 등 DBMS 회사가 제공하는 API를 다시 호출하게 되는데, 타입 Ⅰ 드라이버와 마찬가지로 클라이언트 컴퓨터에 정적으로 설치하여 데이터베이스와 연동하는 환경에 적합하다. 오라클의 oci타입이 이에 해당한다.
		<P>10.2.2.3 타입 Ⅲ 드라이버(JDBC-NET Pure Java Driver)
		<P>Type Ⅲ 드라이버는 프로토콜이나 플랫폼에 무관한 완전한 자바기술 및 코드로 이루어진 JDBC 드라이버를 의미한다. 이 타입은 JDBC API 표준에 따라 만들어졌기 때문에 DBMS의 종류에 상관없이 사용할 수 있다. 4가지 타입 중에서 가장 융통성이 뛰어나기 때문에 동적으로 내려받는 애플릿과 같은 환경에 적합하며, 클라이언트 컴퓨터가 정적으로 이루어졌다고 하더라도 시스템 유지보수가 쉬워진다. 단점이라면 유료이다. 특별한 요구사항이 필요한 경우 즉, 특정 DBMS에만 제공되는 기능을 사용할 때 또는 DBMS 자체가 타입 Ⅲ 드라이버를 지원하지 않는 경우를 제외하고는 타입 Ⅲ 드라이버를 사용하는 것이 가장 이상적이다.
		<P>10.2.2.4 타입 Ⅳ 드라이버(Native Protocol Pure Java)
		<P>Type Ⅳ 드라이버는 데이터베이스 회사의 프로토콜을 사용하며, 전체가 자바기술 및 코드로 이루어진 JDBC 드라이버를 의미한다. Type Ⅲ 드라이버와는 다른데 JDBC API 표준에 따르지 않고 DBMS 회사가 표준에 기능을 추가하거나 삭제하여 독자적인 형태로 만든 타입이다. 따라서 특정 DBMS에 의존적인 반면에 해당 DBMS만이 제공하는 기능을 사용할 수 있는 장점이 있다. 클라이언트가 동적인 상황에서 특정 DBMS만 제공하는 기능을 사용할 때 적합하다. MS-SQL의 경우에만 유료이고 나머지는 해당하는 데이터베이스 사이트에서 무료로 내려받아 사용할 수 있다. 플랫폼 독립으로 프로그래밍이 가능하지만 속도가 느리다는 단점도 있는데,  본 교재에서는 바로 타입 Ⅳ 드라이버를 사용하기로 한다. 참고로 오라클은 thin타입에 해당한다.
		</ul></td>
    </tr>
</table>
</body>
</html>