<HTML>
<HEAD>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<META NAME="GENERATOR" CONTENT="HTML document by Hwpw 97">
<TITLE>JAVA plus SCJP</TITLE>
</HEAD>

<BODY>

<P>
<A NAME="[문서의 처음]"></A>
<IMG SRC="FYXIV001.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV002.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV003.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV004.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[자바의 개요]</FONT></SPAN></FONT>
<BR>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이 장에서는 자바의 전반적인 개요 및 특징에 대하여 설명함으로써 자바를 이해하는데 이해력을 돕고, 자바의 설치 및 실행 방법과 객체지향 언어의 근간을 이루는 객체와 클래스의 의미에 관해서 개괄적으로 설명하고자 한다.</FONT></SPAN></FONT>
<BR>
<P>
<P>
<BR>
<P>
<IMG SRC="FYXIV009.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.1  </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">개요</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 C++를 모델로 하여 Sun Microsystems(이하 Sun)사에서 개발한 객체지향 프로그래밍 언어이며 개발환경을 가지고 있다.</FONT>
<P><FONT FACE="바탕">자바는 운영체제와 관계없이 이식될 수 있도록 고안된 플랫폼 독립적인 언어이다. &quot;플랫폼 독립적이다&quot;는 예를 들어 윈도우에서 실행되는 워드프로세서를 자바로 만들었다면, 같은 프로그램을 유닉스나 매킨토시에서도 그대로 사용할 수 있다는 말이다. 이렇게 플랫폼에 자유로울 수 있는 이유가 바로 각 플랫폼마다 각기 특성에 맞는 자바 가상 기계(JVM : Java Virtual Machine)를 배포하고 있기 때문이다.</FONT>
<P><FONT FACE="바탕">자바의 실행환경 즉 자바 플랫폼은 자바 API(Application Programming Interface)와 자바 가상 기계(Java Virtual Machine)로 이루어진다. 자바의 실행환경은 운영체제(Operating System)와 하드웨어를 감싸서 자바 프로그램이 동작할 수 있는 환경을 제공하는 역할을 하므로, 이러한 환경에서는 모든 자바 프로그램이 동일하게 동작을 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.1.1 </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">역사</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바의 탄생 배경을 알면 자바 언어의 특성에 대한 이해가 쉬워진다.</FONT>
<P><FONT FACE="바탕">1990년대 초 자바는 미국의 Sun Microsystems사의 제임스 고슬링(James Gosling)이 가전제품에 이용할 목적으로 개발을 시작했다. 제임스 고슬링은 특정한 컴퓨터 칩에 대해 컴파일 해야 하는 C 언어의 문제점, 또 가전 제품의 긴 수명으로 인한 완벽한 호환을 가진 소프트웨어의 개발 요구, 가전 제품에 사용될 소프트웨어의 높은 신뢰성 필요 등의 문제들에 봉착하게 되었으며, 이러한 문제의 해결책으로 탄생한 것이 C와 C++의 불필요한 부분이나 문제가 될 부분들을 제거한 새로운 언어인 자바였다. 
</FONT><P><FONT FACE="바탕">개발 초기에는 파스칼(UCSD Pascal)언어를 모델로 설계하였으나, 이후 C++로 모델을 변경하였다. 최초로 자바를 이용한 프로젝트는 가전 제품과 전기 기기들을 통합하여 가전제품이나 가정 환경에 새로운 인터페이스를 제공하는 그린 프로젝트(Green Project)(Bill Joy, Patric Naughton, Mike sheridan, James Gosling)였다. 팀의 구성원인 제임스 고슬링은 프로그램의 이름을 Oak라고 명명하였고, 후에 자바(java)라는 이름으로 명명하였다.</FONT>
<BR>
<P><FONT FACE="바탕">1994년 인터넷과 그래픽 기반의 월드와이드웹이 확산되면서 기종과 운영체제에 무관한 프로그래밍 언어가 필요함을 느끼게 되었고 개발팀은 곧 이러한 웹 기반의 응용 프로그램에는 자바와 같은 하드웨어 구조에 영향을 받지 않는 중립적인 언어가 이상적이라는 것을 발견하였다. 이에 자바로 만들어진 웹 브라우저인 HotJava(후에 웹러너(webrunner)로 이름이 바뀜)가 탄생하게 되었다. 이것이 최초로 자바를 지원한 웹 브라우저가 되었다. 자바라는 이름은 지역의 어느 커피점 명칭에서 얻었다. 그래서 지금은 웹 페이지에서 항상 끓고 있는 커피를 볼 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">1995년 5월 자바 기술이 처음으로 발표되었고, 정식 버전이 1996년 최초로 발표되었다.</FONT>
<P><FONT FACE="바탕">1995년 말 Netscape 2.0에서 자바 프로그램(Applet) 실행을 지원하면서부터 자바가 급속히 확산되었고, 1990년대 후반 IBM, Borland, Symantic 등 소프트웨어 업체들이 자바 라이센스를 획득하고, 마이크로소프트사의 Windows 98에 자바가 표준적으로 탑재되면서 자바의 전성기를 맞게 되었다.</FONT>
<P><FONT FACE="바탕">자바가 원래 가전기기 제어를 위해 고안되었다는 사실은 현재 이러한 기기용으로 자바의 부분집합이라 할 수 있는 PersonalJava(네트웍 연결 가능한 개인용 소비 기기의 자바 소프트웨어 플랫폼), Embedded Java(Embedded 장치-이동 전화, 사무실 주변 기기, 네트웍 라우터, 스위치 등의 장치- 전용 자바 소프트웨어 플랫폼)가 각광을 받고 있는 현실을 잘 설명해준다.</FONT>
<P><FONT FACE="바탕">또한 근래에는 이동통신기기(Mobile) 분야에 많은 접목이 이루어 지고 있으며, XML이 나온 이후 자바는 또 다른 전성기를 맞게 되었는데. 이는 자바는 Any Where, XML은 Any Thing이라는 점이 서로 잘 맞기 때문이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.1.2 </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">버전</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바의 버전은 JDK가 설치되어 있는 디렉토리(C:\j2sdk\bin)에서 다음 명령으로 확인할 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">C:\j2sdk\bin&gt;java -version</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="HY타자B">⽦ Java 1.0.X</FONT>
<P><FONT FACE="바탕">현재에도 웹 브라우저용 프로그램(애플릿)의 제작 방법으로 많이 사용되며, 자바 열풍의 시초가 되어 애플릿으로 자바를 세상에 알린 버전이다. 현재 대부분의 웹 브라우저가 지원하고 있다.</FONT>
<BR>
<BR>
<P><FONT FACE="HY타자B">⽦ Java 1.1.X</FONT>
<P><FONT FACE="바탕">Java 1.0.X의 업그레이드 된 버전으로서 이벤트 처리부분이 drill-up/drill-down 방식에서 위임형 이벤트 모델(delegation event model) 방식으로 완전히 변경되었다. 또한 1.0.X에 있었던 메소드 중에서 보다 개선된 새로운 메소드로 인해 이전의 메소드에서도 사용은 가능하나 권장하지 않는 메소드(deprecated method)가 나타나게 되었다. 향후의 브라우저는 1.1.X 스타일로 프로그래밍을 하고, 자바빈즈(Java Beans ; 자바 환경에서 컴포넌트를 정의한 것), RMI(원격 메소드 호출), JFC(Swing ; Java의 GUI Frame Work) 등의 확장이 일어나게된다.</FONT>
<BR>
<P><FONT FACE="HY타자B">⽦ 1.2.1.3 Java 2(JDK 1.2.X)</FONT>
<P><FONT FACE="바탕">1998년 12월에 발표되었고, JFC(Swing)이 통합되었으며, 보다 향상된 보안 모델을 채택하였고, 코드 최적화와 Drag &amp; Drop 기능이 구현되었으며, 음향 지원 기능이 향상되었다. 현재 완벽하게 지원하는 브라우저가 없으며, appletviewer 또는 Java Plug-in을 사용한다. 후에 JDK 1.2.2로 업그레이드되었다.</FONT>
<BR>
<P><FONT FACE="HY타자B">⽦ 1.3 Java 2 SDK</FONT>
<P><FONT FACE="바탕">CORBA 프로그래밍에 사용되는 idl2java.exe가 idlj.exe로 바뀌었고, 몇몇 API가 추가된 것을 제외하고는 JDK 1.2.2와 거의 유사하다. 1.3의 경우에는 1.4가 나온 이후에도 1.3.1_03버전이 나오기도 하였다.</FONT>
<BR>
<P><FONT FACE="HY타자B">⽦ 1.4 Java 2 SDK</FONT>
<P><FONT FACE="바탕">2002년도 2월에 정식 버전이 나왔으며, 1.3에 비해 많은 기능이 추가되었다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV010.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.2  </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">특징</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 프로그래밍 언어 중 하나지만 다른 프로그래밍 언어에 비해 많은 특징을 가지고 있다. 다음은 자바의 특징에 대하여 개괄적으로 설명한 것이다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">플랫폼</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">독립적</FONT><FONT FACE="Asia줄리엣M">(</FONT><FONT FACE="바탕">아키텍쳐</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">중립적</FONT><FONT FACE="Asia줄리엣M">)</FONT><FONT FACE="바탕">이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">플랫폼 독립적인 특징은 자바가 인기 있는 프로그램 언어가 된 가장 큰 이유이다. 자바는 플랫폼 독립적인 프로그래밍 솔루션으로 플랫폼에 무관한 이식이 가능한 언어이다. 즉, 서로 다른 다양한 플랫폼(하드웨어와 운영체제)에서도 실행이 가능하다. 자바는 서로 다른 네트워크 환경으로 배치될 수 있는 프로그램을 지원하도록 설계되었기 때문에, 네트워크를 통해 프로그램을 다운받아 하드웨어에 관계없이 사용하려면 근본적으로 아키텍처에 독립적이고 이식성을 보장하는 구조가 요구된다. 
</FONT><BR>
<BR>
<P><FONT FACE="바탕">일반적으로 네트워크에는 한 개 이상의 운영체제가 있는데, 시스템 엔지니어나 그래픽 개발자는 UNIX 운영체제를 사용할 것이고, 영업부 등에서는 윈도우95/98 또는 윈도우 NT를 사용하고, 매킨토시 시스템은 광고와 마케팅에서 사용할 것이다. 이렇게 다른 운영체제가 같은 부서나 사무실 안에서 사용되는 일이 점점 늘어나고 있는데, 이때 소프트웨어가 플랫폼에 독립적이지 않다면 사용 소프트웨어를 모든 플랫폼에 맞게 제작하거나, 그 사람을 재교육시켜 새로운 운영체제를 다루도록 해야 한다. 이때 자바를 사용하면 어떤 운영체제에서도 가능한 어플리케이션을 개발하여 그들이 어떤 운영체제에서 실행되든 전혀 차이가 없는 동일한 인터페이스를 만들 수 있게 된다. 이러한 다양한 운영체제를 수용하기 위해 자바 컴파일러는 바이트코드(Bytecode)를 생성한다.</FONT>
<P><FONT FACE="바탕">자바 프로그램은 Windows, Solaris, Mac OS와 같이 자바가 지원되는 모든 플랫폼 상에서 자바 컴파일러에 의해 바이트 코드 형태로 컴파일 되고, 인터프리터가 동작하는 자바 가상 기계에 의해 어떤 기종의 시스템에서도 쉽게 실행된다. 
</FONT><BR>
<P ALIGN=CENTER> 
<IMG SRC="FYXIV011.GIF" BORDER=0 WIDTH=368 HEIGHT=164 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P>                        
<IMG SRC="FYXIV012.GIF" BORDER=0 WIDTH=510 HEIGHT=166 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">객체지향</FONT><FONT FACE="Asia줄리엣M">(Object Oriented) </FONT><FONT FACE="바탕">언어이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스의 계층 구조, 상속(inheritance), 은닉(encapsulation), 다형성(polymorphism) 등과 같이 유용하고 효율적인 객체 지향 언어의 특징을 모두 제공하며, 자바에서는 분산환경, 클라이언트-서버 기반 시스템의 요구가 객체 기반 소프트웨어의 은닉된 메시지 전달 패러다임과 함께 만나고 있다.</FONT>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">멀티쓰레드</FONT><FONT FACE="Asia줄리엣M">(Multi-thread)</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">지원한다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">멀티쓰레드란 한 프로그램 내에 여러 개의 쓰레드가 존재하여 동시에 여러 가지 일을 수행하는 것으로, 하나의 단일 자바 프로그램은 여러 개의 쓰레드 프로그램으로 구성될 수 있으며, 이 쓰레드는 독립적으로 다른 일을 계속해서 할 수 있다. 이는 최종사용자와 높은 수준의 상호작용을 가능하게 해준다. 자바는 언어 자체에서 멀티쓰레드를 지원한다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">분산환경에서</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">동작한다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 네트워크상의 운영을 고려해 설계된 언어이므로 소켓 바인딩 같은 TCP/IP 프로토콜과 URL처리 같은 HTTP 프로토콜을 처리할 수 있다. 자바의 네트워크 관련 패키지에는 이를 위해 미리 패키지로 구현해 놓은 Content Handler, InetAddress, ServerSocket, Socket, SocketImpl, URL, URLConnection, URLStreamHandler 클래스들이 포함되어 있어 네트워크 관련 프로그램 개발을 보다 쉽게 할 수 있다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">인터프리터형</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">프로그래밍</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">언어이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 인터프리터형 언어이지만 수행 성능과 보안, 플랫폼 독립성 등의 이유로 인터프리팅에 앞서 컴파일을 거치는 독특한 형태를 지니고 있다. C/C++ 같은 기존 언어와는 달리, 자바 컴파일러는 소스코드를 기종에 무관한 바이트코드로 만들고, 이를 자바런타임 시스템 즉, 자바가상 기계에서 동작하도록 한다. 즉, 자바는 실행시에 코드를 읽어들여 기계어로 번역하면서 수행되는 프로그램을 만드는 언어이다. 그렇다면 C나 C++, 파스칼 등과 같이 미리 기계어로 번역하여 변환된 바이너리를 수행하는 컴파일형 프로그래밍 언어에 비해 수행 속도가 현저하게 떨어지는 인터프리터 방식을 채택한 자바가 어떻게 살아남을 수 있을 것인가의 문제가 대두된다. 자바는 컴파일과 인터프리팅이 같이 존재하는 모델을 채택하고 있다. 컴파일하여 바이트코드로 변환한 다음 그 바이트코드를 번역하면서 수행하는 방식이다. 바이트코드는 플랫폼에 독립적인 형태로서 인터프리팅이 용이하도록 설계된 자바만의 독특한 형식을 가진다. 자바는 이러한 방식을 통해 플랫폼 독립성과 수행 성능의 향상이라는 두 마리 토끼를 잡으려 하고 있다. 하지만 아직은 만족할 만한 수행 성능을 보여주지 못하고 있는 것이 현실이다. 
</FONT><BR>
<P><FONT FACE="HY타자B">⽦ </FONT><FONT FACE="바탕">기존의</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">프로그래밍</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">모델과</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">프로그래밍</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">모델</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">비교</FONT>
<P><FONT FACE="바탕">- 기존의 프로그래밍 모델(C) : 컴파일 → 링크 → 실행 파일(바이너리)</FONT>
<P><FONT FACE="바탕">- 자바의 프로그래밍 모델 : 컴파일 → 클래스 파일(바이트코드) → 인터프리팅</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV013.GIF" BORDER=0 WIDTH=611 HEIGHT=163 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">코드가</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">간단</FONT><FONT FACE="Asia줄리엣M">(Simple)</FONT><FONT FACE="바탕">하다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 다른 객체지향 언어의 복잡성을 제거하여 설계되었다. 수많은 객체지향 특성과, C++의 외양을 그대로 유지하였으며, C++ 언어에 있는 복잡한 요소들을 과감하게 제거하였는데, 자바에서는 C++에서 허용되었던 포인터뿐만 아니라 구조체(struct)와 공용체(union), 그리고 연산자 중복(overloading), 가상함수 등이 제거되었으며, 다중상속을 지원하지 않는다.그러나 자바는 이러한 단순함을 가지면서도 C/C++에서 제공되지 않는 메모리 회수(Garbage Collection), 쓰레드 동기화, 풍부한 클래스 라이브러리 등 추가적인 기능을 제공한다. 즉, 자동적인 메모리 회수 기능은 메모리 관리를 위해 사용자가 일일이 free 선언을 해야하는 불편함을 해소했으며, 쓰레드 동기화는 멀티 쓰레드 프로그램을 더욱 간단히 구성하도록 도와준다. 또한 구문 자체가 단순해진 반면, 사용자 인터페이스, 그래픽, 네트워크 등을 지원하는 풍부한 클래스 라이브러리를 지원함으로써 사용자가 직접 프로그램 해야하는 번거로움을 많이 줄여준다. 또, C언어에는 있지만 자바에서 지원하지 않는 구조체 또는 공용체 등도 구현할 수 있는데 C에 비해 매우 간단하다. 자바의 클래스에서 메소드가 없으면 바로 구조체이다. 특별히 구조체라고 정의한 것은 없으며, 그냥 클래스를 구조체처럼 쓰면 된다. 자세한 내용은 뒤에서 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=195>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">자바가 C/C++과 다른점</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">1. 구조체(Struct), 공용체(Union), 포인터(Pointer)를 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">2. typedef와 #define을 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">3. 연산자 다중정의를 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">4. 클래스 다중상속을 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">5. 문자 배열로서 String이라는 클래스를 지원한다.</FONT>
<P><FONT FACE="바탕">6. Garbage Collection 기능 제공으로 메모리 할당과 해제 함수를 사용할 필요가 없다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">보안성</FONT><FONT FACE="Asia줄리엣M">(Secure)</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">뛰어나다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">엄격한 보안은 자바가 완벽한 네트워크 프로그램을 작성할 수 있는 잇점이기도 하다. 자바는 네트워크 환경에서 운영되는 언어이므로 다른 언어보다 안전에 대한 중요성이 요구된다. 다시 말해, 애플릿과 같은 프로그램의 다운로드시에 적절한 제재를 가하지 않으면 보안상 많은 문제를 발생시킬 수 있기 때문이다. 따라서 자바 코드는 바이러스, 파일의 삭제나 수정, 데이터 파괴작업이나 컴퓨터 오류 연산 등을 방지할 수 있는 환경에서 실행되도록 설계되었다. 
</FONT><P><FONT FACE="바탕">자바의 실행에 있어서 보안은 크게 3번 이루어진다. 컴파일 단계에서 보안성 체크를 하여 위반사항이 있을 경우 컴파일 되지 않는다. 컴파일 된 바이트코드를 실행하기 위해서 메모리로 적재시키는 단계에서 다시 한번 보안위반을 검사한다. 컴파일 단계에서 통과된 프로그램인 경우에도 해커에 의해서 바이트코드가 변경되거나 자바컴파일러를 대체하여 사용할 수 있기 때문이다. 마지막으로 실행할 때 다시 한번 보안검사를 한다. 브라우저를 사용하여 애플릿이 있는 웹 페이지를 방문할 경우 실행이 느린 것은 보안검사를 하는 시간이 많은 부분을 차지하기 때문이다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">고성능</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">언어이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 인터프리터 언어이므로 CPU 처리를 많이 요하는 프로그램의 경우 20∼30배, 네트워크 프로그램의 경우 5배정도 기존 프로그램보다 처리속도가 느리다. 이러한 단점을 보완하기 위해 선마이크로시스템즈는 JDK 1.1에 &quot;just-in-time&quot; 컴파일러를 도입해 처리속도를 향상 시켰으며 현재 Hot Spot이란 이름으로 버전1.4까지 출시되었다. 또한 자바 프로그램은 시스템 자원에 얽매이지 않는다. 그 예로 윈도우 운영체제에서 객체 지향 테크닉을 사용한 C++로 코딩된 고급 어플리케이션은 보통 8∼10MB의 메모리가 있어야 하지만, 같은 어플리케이션에서 자바는 3∼4MB의 메모리만을 필요로 한다. 
</FONT><BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">동적이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 컴파일시 엄격하게 정적인 검사를 하지만 런타임시는 시스템이 동적으로 링크를 수행한다. 즉, 자바는 실행시간까지 링크 과정을 연기함으로써 응용 프로그램이 동적으로 패치 될 수 있도록 한다. 이 방식은 상위 클래스가 수정됐을 때 하위 클래스까지도 다시 컴파일 하는 'Superclass Problem'을 해결한다. 
</FONT><BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">견고하다</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">C/C++에서 사용하는 포인터의 개념은 디버깅이 어려운 런타임 오류를 많이 발생시킨다. 그러나 자바에서는 포인터 처리를 없앰으로써 런타임 오류 발생을 감소시켰으며, 메모리 포인터의 사용으로 주소 기억의 필요성을 없앴다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">모듈화</FONT><FONT FACE="Asia줄리엣M">(Modularity)</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">가능하다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바를 이용해 제사용 가능한 객체를 만들 수 있다. 이 객체는 향후 다른 프로그램 내에서 코드 수정 없이 제사용 가능하다.</FONT>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">무료</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">개발</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">환경을</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">제공한다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바 컴파일러는 선마이크로시스템즈의 자회사인 자바소프트사의 홈페이지에서 Java Software Development Kit(J2SDK)와 API를 다운로드 받아 사용할 수 있으며, 확장 버전 또한 출시와 함께 다운로드 받을 수 있다. 현재의 개발자 툴킷은 대부분의 프로그래머들이 필요로 하는 조건을 충족시켜주는 7가지 강력한 툴을 포함하고 있다. 이러한 툴의 구성을 보면 애플릿을 표시하는 자바 애플릿 뷰어(appletviewer.exe), 자바 바이트코드를 실행하는 자바 인터프리터(java.exe), 자바 프로그램을 바이트코드로 컴파일하는 자바 컴파일러</FONT>
<P><FONT FACE="바탕">javac.exe), 자바 소스코드에서 html 문서로 만들어내는 자바 문서생성기(javadoc.exe), 자바 클래스에서 C언어 헤더와 스텁 파일을 만드는 자바 헤더 및 스텁 파일 생성기(javah.exe), 자바 파일을 분해해서 자바 바이트 코드를 표시하도록 하는 자바 클래스 디셈블러(javap.exe), 자바 코드에 문법상의 문제를 찾는 자바 언어 디버거(jdb.exe)로 이루어져 있다. 
</FONT><BR>
<BR>
<P>
<IMG SRC="FYXIV014.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.3   Java 2 SDK(Java 2 Software Development Kit)</FONT></B></SPAN></FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.1 </FONT><FONT FACE="바탕">설치</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">환경</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">설정</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">선사에서는 JDK(Java Development Kit, 자바 개발 도구)라는 이름으로 컴파일러, 인터프리터 등의 여러 자바 환경 도구들을 배포해왔는데, 이후 버전1.3으로 업드레이드 되면서 J2SDK(Java 2 Software Development Kit)라고 부르고 있다. 자바는 이론적으로 거의 모든 시스템에 이식 가능하지만 선사의 자바 홈페이지(http://java.sun.com)에서 바로 구할 수 있는 JDK는 솔라리스 버전과 윈도우(윈도우95/98와 윈도우NT)용, 그리고 맥 OS용이다. 여기서는 Microsoft Windows 용을 기준으로 설명하기로 한다.</FONT>
<P><FONT FACE="바탕">선사의 홈페이지에서 프로그램을 다운로드 받은 다음 설치한 후 시작하기로 하자.</FONT>
<BR>
<P><FONT FACE="바탕">이후는 JDK가 설치된 폴더가 C:\j2sdk로 되어 있는 것을 기준으로 한다.</FONT>
<P><FONT FACE="바탕">path 환경 변수를 설정하는 이유는 JDK 실행 파일(javac.exe, java.exe, javadoc.exe, 등)을 실행할 때 어느 디렉토리에서든지 전체 경로를 지정하지 않고 실행하고자 하기 때문이다. 만일 path 설정을 하지 않았다면 위 JDK 실행 파일을 실행할 때 항상 다음과 같이 전체 경로를 일일이 기술해야 한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=48>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">C:\j2sdk\bin\javac MyClass.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">윈도우에서 자바를 설치한 디렉토리가 C:\j2sdk인 경우 다음과 같이 클래스 경로를 autoexec.bat 파일에 함께 지정한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">set PATH=%PATH%;C:\j2sdk\bin;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">윈도우 NT에서의 환경 설정은 제어판에서 시스템을 선택한 후 환경변수에서 Path 부분에 C:\j2sdk\bin 경로를 세미콜론(;)으로 구분하여 추가한다.</FONT>
<P><FONT FACE="바탕">솔라리스에서는 설치한 디렉토리가 /usr/java인 경우 다음과 같이 클래스 경로를 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=84>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">sh</FONT><FONT FACE="바탕">이나</FONT><FONT FACE="Courier New"> ksh</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">경우</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">PATH=$PATH:/usr/java/bin</FONT>
<P><FONT FACE="Courier New">export PATH</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=62>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">csh</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">경우</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">set path=( $path /usr/java/bin )</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">JDK 설치가 끝나면 필수적인 자바 프로그래밍 환경은 갖추게 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.2 </FONT><FONT FACE="바탕">자바</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">환경</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">도구</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바 환경 도구란 /j2sdk/bin 디렉토리에 있는 여러 가지 실행 프로그램을 말한다. 자바는 컴파일과 인터프리팅을 모두 수행해야 하는 언어이므로 컴파일러, 인터프리터를 포함한 몇 가지 환경 도구를 제공한다. 윈도우에서 환경 도구를 실행하려면 도스 창 프롬프트에서 실행한다.</FONT>
<BR>
<P><FONT FACE="바탕">⽦ javac : 자바 컴파일러이다. 텍스트 소스 파일인 *.java 파일을 기계 독립적인 바이트 코드, *.class로 컴파일 해준다. 인자는 자바 소스 파일 이름이다. 일반적으로 다음 예와 같이 사용한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javac HelloApp.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">필요에 따라 다음 선택사항을 지정해야 하는 경우가 있다.</FONT>
<BR>
<P>  <FONT FACE="바탕">(1) -classpath '경로' : javac가 클래스를 검색할 경로를 지정한다. 이 값을 지정하면 이미 지정된 CLASSPATH 환경 변수 값은 오버라이드된다. 디렉토리 구분은 세미콜론(;)으로 한다.</FONT>
<P>      <FONT FACE="바탕">사용 예 : javac -classpath .;C:\lib\classes.zip HelloApp.java</FONT>
<P>  <FONT FACE="바탕">(2) -d '디렉토리' : 클래스 계층 구조의 루트 디렉토리를 지정한다. 즉, 컴파일 된 .class 바이트 코드 파일을 다른 곳에 넣고자할 때 사용한다.</FONT>
<P>      <FONT FACE="바탕">사용 예 : javac -d C:\classes HelloApp.java</FONT>
<P>  <FONT FACE="바탕">(3) -g : 디버깅 테이블을 생성해준다. 디버깅 테이블은 줄 번호와 지역 변수 정보(자바 디버깅 도구에 의해 사용되는 정보)를 포함하고 있다. 최적화(-O) 선택사항이 함께 주어지지 않으면 단지 줄 번호만 생성된다.</FONT>
<P>  <FONT FACE="바탕">(4) -nowarn : 경고 메시지를 출력하지 않는다.</FONT>
<P>  <FONT FACE="바탕">(5) -O : static, final and private 도구에 인라인 기법을 사용하여 최적화 한다. 이렇게 되면 클래스 파일은 크기가 커진다. (C++의 inline 예약어와 같은 방법이다. 이 방법은 함수 점프의 오버헤드를 막기 위해 컴파일 시에 실제 코드를 각 함수 대신에 직접 삽입하는 방법을 쓰는 것이다.)</FONT>
<P>  <FONT FACE="바탕">(6) -verbose : 컴파일러와 링커에게 현재 컴파일 되고있는 소스 파일과 적재되는 클래스 파일의 이름을 출력하게 한다.</FONT>
<BR>
<P><FONT FACE="바탕">⽦ java : 자바 인터프리터를 나타내며, 클래스 파일을 실행한다. 클래스 이름을 인자로 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">java HelloApp</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ javaw : 같은 자바 인터프리터이지만 콘솔(윈도우 도스 창)에서 독립된 윈도우를 만들어낸다. 콘솔로의 출력은 행하지 않는다. 예를 들어 애플릿뷰어를 다음과 같은 방법으로 실행해서 두 결과를 비교해 보라. javaw로 실행한 경우에는 콘솔로 출력을 하지 않는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">java sun.applet.AppletViewer example1.html</FONT>
<P><FONT FACE="Courier New">javaw sun.applet.AppletViewer example1.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>  
<P><FONT FACE="바탕">⽦ javadoc : class 파일의 패키지, 계층 구조, 도구 등을 HTML 문서로 만들어준다. 클래스 이름을 인자로 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javadoc HelloApp.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ javah : 해당 애플러케이션의 C 스텁 헤더 파일을 생성해준다. 인자로 클래스 이름을 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javah HelloApp</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ javap : 자바 역 컴파일러이다. 클래스 파일을 원시 코드로 역 컴파일 해준다. 완전한 소스 파일을 구할 수는 없다. 인자로 클래스 이름을 받으며 역 컴파일 한 결과를 표준 출력(콘솔) 장치로 내보낸다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javap -c HelloApp &gt; HelloApp.txt</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ jdb : 자바 디버거. 유닉스 디버거인 dbx와 유사한 기능을 갖고 있으며 인자로 클래스 이름을 받는다. 디버거 프롬프트에서 help를 입력하면 사용 가능한 명령어를 알 수 있다. 디버거를 제대로 사용하려면 클래스 파일을 컴파일 할 때 dbx의 경우와 같이 -g 옵션으로 컴파일 해야 한다.(예 : javac -g HelloApp.java)</FONT>
<P><FONT FACE="바탕">⽦ appletviewer : HTML 문서에 포함되어 있는 애플릿을 실행시켜준다. 일종의 웹 브라우저로서 &lt;applet&gt; 태그만 찾아서 애플릿을 보여준다. 인자로 URL이나 HTML 문서 파일 이름을 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">appletviewer example1.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이외에도 여러 가지 환경 도구가 JDK에 함께 제공되므로 좀더 자세히 알고 싶으면 선사의 자바 홈페이지(http://java.sun.com) 사이트를 참고하면 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.3 </FONT><FONT FACE="바탕">컴파일</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">컴파일은 원시 파일(*.java)을 입력으로 바이트 코드를 생성한다. 생성되는 바이트 코드는 클래스(*.class)파일이라고도 한다. 소스 파일명에는 반드시 확장자(.java)가 포함되어야 하며 대문자와 소문자를 구분한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=46>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="바탕">소스파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">디렉토리&gt;</FONT><FONT FACE="Courier New">javac </FONT><I><FONT FACE="바탕">소스파일명</FONT><FONT FACE="Courier New">.java</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.4 </FONT><FONT FACE="바탕">실행</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">실행은 컴파일 한 후 생성된 바이트 코드를 이용하여 사용자가 실제 원하는 값을 얻기 위한 것으로 어플리케이션의 실행과 애플릿의 실행이 있다. 실행할 때에는 파일명 뒤의 확장자(.class)가 붙지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">어플리케이션의 실행은 자바 인터프리터를 사용하여 실행하는데, 자바 인터프리터는 C:\j2sdk\bin 디렉토리의 java.exe파일이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=62>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">어플리케이션의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="바탕">클래스파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">디렉토리&gt;</FONT><FONT FACE="Courier New">java </FONT><I><FONT FACE="바탕">클래스파일명</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">애플릿의 실행은 애플릿 태그를 사용하여 html 문서에 등록한 후 웹 브라우저를 사용하거나 appletviewer 프로그램을 사용하여 실행한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=75>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">태그</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">삽입</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P>&lt;<FONT FACE="Courier New">applet code=&quot;</FONT><I><FONT FACE="바탕">클래스파일명</FONT></I><FONT FACE="Courier New">&quot; width=</FONT><I><FONT FACE="바탕">넓이</FONT></I><FONT FACE="Courier New"> height=</FONT><I><FONT FACE="바탕">높이</FONT></I>&gt;
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=62>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="Courier New">appletviewer </FONT><FONT FACE="바탕">사용법</FONT><FONT FACE="Courier New">(</FONT><FONT FACE="바탕">애플릿의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New">)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">HTML</FONT><FONT FACE="바탕">파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">디렉토리&gt;</FONT><FONT FACE="Courier New">appletviewer </FONT><I><FONT FACE="Courier New">HTML</FONT><FONT FACE="바탕">파일명</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV015.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.4  </FONT><FONT FACE="바탕">어플리케이션</FONT><FONT FACE="Bookman Old Style">(Application)</FONT><FONT FACE="바탕">과</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Bookman Old Style">(Applet)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 두 가지 종류의 프로그램 형태를 가지고 있는데, 하나는 일반적인 응용 프로그램 즉, 어플리케이션(Application)이고, 또 하나는 작은 프로그램이라는 뜻을 가진 애플릿(Applet)이다. 어플리케이션에는 다시 도스모드 형태로 실행되는 Console 어플리케이션과, 윈도우 형태로 실행되는 Window 어플리케이션, 그리고 서버에서 실행되는 웹 어플리케이션이 있다.</FONT>
<P><FONT FACE="바탕">애플릿과 어플리케이션에는 차이가 있는데, 자바 애플릿은 html 문서 안에서 사용되므로 애플릿을 보려면 외부 뷰어가 있어야 하며, 애플릿을 표시하기 위해서는 웹 브라우저나 애플릿 뷰어(appletviewer.exe)를 이용한다. 자바 어플리케이션은 단독으로 사용되도록 고안되어 외부 뷰어가 필요 없다. 즉, 이것은 자바 인터프리터를 사용해 자바 어플리케이션을 실행할 수 있음을 의미한다. 이러한 특징으로 자바 어플리케이션은 로컬(Local)에서 실행되고, 자바 애플릿은 서버(Server)에서 다운로드 되어 실행된다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.4.1 </FONT><FONT FACE="바탕">어플리케이션의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">기초</FONT></SPAN></FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.1 Hello World! </FONT><FONT FACE="바탕">응용프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">예</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">일반적으로 사용되는 가장 짧은 응용프로그램 코드는 Hello World!라는 문자열을 화면에 표시하는 것이다. 아래의 자바코드는 Hello World!라는 문자열을 화면에 표시하는 응용프로그램의 예이다. 프로그램 코드는 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorld.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">// Sample HelloWorld application</FONT>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Hello World!&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.2 HelloWorld </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">분석</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">// Sample HelloWorld application</FONT>
<P><FONT FACE="Courier New">//</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프로그램의 처음 세 줄은 주석 라인이다. //(이중 빗금)표시는 그 라인에서 이후의 문장들은 주석이 되어 실행과는 무관하다는 것을 의미한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">4 : 클래스를 선언하는 곳으로 여기에서는 클래스 이름을 HelloWorld로 선언하였다. 소스코드 파일 이름 형식은 ClassName.java로 되어야 한다. 컴파일 하면 소스 파일이 저장되어 있는 폴더에 ClassName. class라는 파일이 생성된다. 이 프로그램의 경우에는 파일명이 HelloWorld.java가 되어야 하며, 컴파일하면 HelloWorld.class라는 파일이 생성된다. 자바에서는 소스코드뿐만 아니라 파일명에서도 대문자와 소문자를 철저하게 구분한다. 또한 파일의 이름은 public으로 선언된 클래스가 있으면 그 클래스 이름과 동일하게 정해져야하며, 그렇지 않으면 main() 메소드가 있는 클래스 이름을 파일 이름으로 한다. 하나의 파일 내에는 여러 개의 클래스가 존재할 수 있지만 public으로 선언된 클래스는 두 개 이상 존재할 수 없다.</FONT>
<P><FONT FACE="바탕">'{'는 클래스 블록의 시작을 나타낸다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : 프로그램 실행이 시작되는 main() 메소드의 선언부이다. 메소드는 일종의 함수로 자세한 내용은 뒤에서 설명하기로 한다. 약술하면 자바 어플리케이션 프로그램의 경우 위에 기술한 내용과 똑같이 정의된 main() 메소드가 반드시 하나 존재해야 하는데,  만약 main() 메소드가 없으면 프로그램은 실행되지 않는다. 메인 메소드의 형태는 기억해두는 것이 좋다. 즉, psvms라고...</FONT>
<P><FONT FACE="바탕">메소드 선언부분의 String args[]은 프로그램을 실행할 때 명령행에서 인수를 사용하면 그 인수는 main() 메소드로 전달되어 args라는 문자열로 선언된 배열로 들어간다. 보통 C언어 등에서는 String args[] 형식으로 배열을 나타내는 대괄호(&quot;[]&quot;)가 뒤에 추가되어야 하지만 자바에서는 어느 곳에 들어가도 상관이 없다. 배열도 일종의 타입이기 때문에 앞에 넣어주는 것이 보기가 좋을 것이다. 이 예제에서는 main() 메소드 선언 이후에 args 배열을 참조하는 부분이 전혀 없기 때문에 인수가 사용되지 않는다.</FONT>
<P><FONT FACE="바탕">5번째 줄에 몇 가지 키워드가 나오는데, 키워드에 대한 전반적인 내용은 뒤에서 자세히 설명하기로 하고, 우선 여기에 나온 키워드만 간단히 설명하면 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ public - main() 메소드를 모든 클래스가 사용할 수 있음을 의미한다.</FONT>
<P>  <FONT FACE="돋움">∘ static - main() 메소드에서는 호출하는데 쓰이는 인스턴스가 필요하지 않다고 컴파일러에 알려주는 키워드이다.</FONT>
<P>  <FONT FACE="돋움">∘ void - main() 메소드를 실행해도 실행 결과로 돌아오는 것이 없음을 의미한다. 자바에서는 타입(type) 확인은 철저하게 하며, 그 중에는 호출된 메소드의 실행 결과와 그 메소드가 선언된 유형이 같은지 확인하기 때문에 중요하다.</FONT>
<P>  <FONT FACE="돋움">∘ String args[] - String형 배열을 선언하는 키워드이다. 이 배열에서 명령행의 클래스 이름 다음에 입력한 인수가 들어간다. 일종의 배열형이므로 이후부터는 &quot;String[] args&quot;로 표기하기로 한다.</FONT>
<BR>
<P>  <FONT FACE="돋움">'{'는 main() 메소드 블록의 시작을 나타낸다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Hello World!&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6 : &quot;Hello World!&quot;라는 문자열을 출력하는 것으로 클래스 이름(System)과 객체 이름(out; PrintStream형 객체) 그리고 메소드 이름(println)을 사용하는 방법을 보여주는 예이기도 하다. 자바에서 문장의 끝은 세미콜론(;)으로 마친다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">중괄호는 각각 main() 메소드의 끝과 HelloWorld 클래스의 끝을 나타낸다.</FONT>
<BR>
<P><FONT FACE="바탕">위의 소스코드에 대해서 이해가 잘 안될 수 도 있지만 이후 계속 학습해 가다보면 곧 이해가 될 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.3 </FONT><FONT FACE="바탕">파일</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">저장하기</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">위의 소스 코드를 입력하는데 필요한 에디터는 텍스트 에디터라면 무엇이건 좋다. 물론 자바 전용 에디터도 몇 가지 있는데, 그 중의 하나인 kawa는 많이 사용되는 에디터 중의 하나지만 kawa를 사용하지 않고 윈도우에서 제공하는 일반 에디터(메모장 등)로도 충분하다.</FONT>
<P><FONT FACE="바탕">일단 프로그램 작성이 끝나면 파일을 저장해야 한다. 파일을 저장할 때 유의해야 할 사항은 그 파일에서 정의하는 클래스와 동일한 이름을 붙여야 하며, 확장자는 .java이어야 한다.</FONT>
<P><FONT FACE="바탕">위의 HelloWorld 프로그램의 경우 파일 이름은 HelloWorld.java이다. 소스코드는 물론 파일명도 대문자와 소문자를 구분하여 사용한다.</FONT>
<BR>
<P ALIGN=CENTER> 
<IMG SRC="FYXIV016.GIF" BORDER=0 WIDTH=510 HEIGHT=221 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">메모장에서 저장할 때 파일명의 앞과 뒤를 큰따옴표(&quot;)로 묶어주면 확장자가 txt인 파일로 저장되는 것을 방지할 수 있다.</FONT>
<P ALIGN=CENTER> 
<IMG SRC="FYXIV017.GIF" BORDER=0 WIDTH=514 HEIGHT=55 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.4 HelloWorld </FONT><FONT FACE="바탕">컴파일</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">하기</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">응용프로그램을 컴파일한 후 실행시키는 것은 사용하는 자바 개발환경에 따라 다를 수도 있지만, 여기에서는 선사의 Java 2 SDK(Software Development kit)를 기준으로 한다. JDK의 javac 명령은 소스파일을 바이트코드 파일(.class)로 컴파일 하는 명령이며, 이 파일은 JDK가 설치된 폴더 아래의 bin이라는 폴더에 있다.</FONT>
<BR>
<P><FONT FACE="바탕">HelloWorld.java 소스파일을 만들었으면, 다음 코드 라인을 사용하여 컴파일 할 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">javac</FONT></B><FONT FACE="Courier New"> HelloWorld.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">컴파일 후 아무런 메시지도 나타나지 않으면 컴파일이 성공적으로 수행된 것이고, 소스파일과 같은 폴더에 HelloWorld.class라는 새로운 파일이 저장된 것을 알 수 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">컴파일할 때 나타나는 오류</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="바탕">다음은 자바에서 컴파일 하는 도중에 나타날 수 있는 일반적인 오류를 나타낸 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• javac: Command not found</FONT></SPAN></FONT>
<P><FONT FACE="바탕">컴파일러가 있는 경로 변수가 올바르게 설정되지 않는 경우이다. path명령으로 JDK가 설치되어 있는 폴더 아래의 bin이라는 폴더를 지정한다.</FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">•HelloWorld.java:6: cannot resolve symbol</FONT></SPAN></FONT>
<P>  <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">symbol  : method printl (java.lang.String)</FONT></SPAN></FONT>
<P>  <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">location: class java.io.PrintStream</FONT></SPAN></FONT>
<P>                  <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">System.out.printl(&quot;Hello World!&quot;);</FONT></SPAN></FONT>
<P>                              <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">^</FONT></SPAN></FONT>
<P><FONT FACE="바탕">메소드 이름 println이 printl로 잘못 입력되었다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.5 HelloWorld </FONT><FONT FACE="바탕">실행하기</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">HelloWorld를 실행하려면 JDK가 설치된 폴더 아래의 bin 폴더에 있는 자바인터프리터(interpreter)인 java.exe를 사용한다. 이때 주의해야 할 사항은 자바인터프리터가 HelloWorld.class 파일을 실행시킨다고 해서 확장자인 .class를 넣어서는 안 된다. 자바에서 &quot;.&quot; 은 폴더를 구분하는 역할을 하기 때문에 &quot;.class&quot;를 넣었을 경우에는 HelloWorld라는 폴더 아래의 &quot;class.class&quot;라는 파일을 의미한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=73>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> HelloWorld</FONT>
<P> <FONT FACE="Courier New">Hello World!</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=203>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">런타임 오류</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="바탕">다음은 실행할 때 나타날 수 있는 일반적인 오류이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• class Helloworld</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">찾을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">없음</FONT></SPAN></FONT>
<P><FONT FACE="바탕">일반적으로 클래스 이름의 철자가 소스파일 이름과 다르며 파일을 클래스 정의에 나오는 철자(대소문자 포함)에 일치하게 지정하지 않았음을 의미한다. 위의 예에서 실행할 때 java Helloworld라고 입력하면 발생한다.(대문자 W를 소문자 w로 잘 못 입력)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.4.2 </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">기초</FONT></SPAN></FONT>
<P><FONT FACE="바탕">웹 페이지 안에서 동적으로 사용자의 입력에 반응하거나 실시간으로 변화하는 다양한 자바 프로그램은 모두 애플릿이며, 독자적으로 일반 프로그램과 같이 실행될 수 있는 자바 프로그램은 모두 자바 어플리케이션이다. 자바가 웹 프로그래밍 언어의 표준으로 등장하게 된 데에는 무엇보다 자바 애플릿이 큰 영향을 주었다고 볼 수 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.1 Hello World! Applet </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">예</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 웹 브라우저 화면에 Hello World!라는 문자열을 표시하는 애플릿 프로그램의 예이다. 단순히 텍스트로 콘솔(윈도우 도스 창)에 &quot;Hello&quot;라는 문자열만 출력하는 어플리케이션에 비해 일단 웹 브라우저 안에서 글자를 표현해야 하는 애플릿은 그래픽으로 문자열을 그려야 한다는 점에서 훨씬 복잡하다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldApplet.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT>
<P><FONT FACE="Courier New">public class HelloWorldApplet extends Applet {</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World!&quot; , 100, 100);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.2 HelloWorldApplet </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">분석</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프로그램 내에서 사용될 클래스 파일을 포함하는 패키지를 import한 것이다. C언어의 include문과 유사하지만 구체적인 내용은 많이 다르다. 그래픽 관련 클래스를 사용하기 위해서 java.awt.Graphics 클래스를 import하였고, 애플릿을 프로그래밍하기 위해 java.awt.Applet 클래스를 import하였다. 이를 좀서 쉽게 작성하면 다음과 같다. Graphics 클래스는 java.awt 패키지 내의 클래스이고, Applet 클래스는 java.awt 패키지 내의 클래스이므로 다음과 같이 표기가 가능하다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class HelloWorldAppet extends Applet {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">클래스의 선언부이며 이 클래스는 애플릿 프로그램을 만들기 위해서 Applet 클래스를 상속(extends)받았다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">화면에 무언가를 그리기 위한 paint() 메소드를 선언하였다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World!&quot; , 100, 100);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">g라는 그래픽 객체를 가지고 애플릿의 화면 좌측으로부터 100 픽셀, 상단으로부터 100 픽셀의 위치에 Hello, World! 라는 문자열을 출력한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.3 HTML </FONT><FONT FACE="바탕">프로그램</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿 프로그램의 저장 및 컴파일도 기본적으로 어플리케이션 프로그램과 같다. 그러나 애플릿은 웹 브라우저 안에서 실행되는 작은 프로그램이므로 웹 브라우저가 있어야 실행시켜 볼 수 있다. 프로그래머를 위하여 선사에서 배포하는 JDK에는 애플릿만 실행시켜주는 간단한 웹 브라우저인 애플릿뷰어(appletviewer)가 포함되어 있다. 애플릿은 웹 페이지에 포함되는 것이므로 반드시 애플릿을 포함하도록 지시하는 HTML 문서가 필요하다. 이 애플릿은 다음과 같이 HTML 문서 안에 포함시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldApplet.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">HTML&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">HEAD&gt;&lt;TITLE&gt;Hello Applet&lt;/TITLE&gt;&lt;/HEAD&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">BODY&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=</FONT><B><FONT FACE="Courier New">HelloWorldApplet.class</FONT></B><FONT FACE="Courier New"> width=300 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/BODY&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/HTML&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">applet code=</FONT><B><FONT FACE="Courier New">HelloWorldApplet.class</FONT></B><FONT FACE="Courier New"> width=300 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">위 내용은 HTML 문장 내에서 애플릿 프로그램을 포함시키는 구문이다. 컴파일 후 생성된 클래스 파일을 HTML 문서 내에서 지시하게 되는데, 이때 사용되는 태그(tag)가 &lt;applet&gt;태그이다. &lt;applet&gt; 태그에 속해 있는 옵션 중에서 code 와 width 그리고 height는 빠져서는 안될 기본 옵션이다. width와 height는 애플릿의 크기를 자로와 세로 픽셀 단위로 지정하고, code 옵션은 실제 실행될 애플릿 프로그램을 지정하는 부분으로 자바 소스코드를 지정하는 것이 아니라, 컴파일 후 생성된 클래스파일을 지정하는 곳이다. HTML 문서 내에서는 대문자와 소문자를 구분하지 않지만 code 옵션에서 지정하는 클래스파일의 이름은 대문자와 소문자를 구분한다. HTML 문서의 이름은 어느 것을 지정해도 관계없다.</FONT>
<P><FONT FACE="바탕">애플릿 프로그램의 실행은 클래스파일이 지정된 HTML 파일을 불러오거나 다음과 같이 appletviewer.exe를 이용할 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">appletviewer</FONT></B><FONT FACE="Courier New"> HelloWorld.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.4 </FONT><FONT FACE="바탕">출력</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">결과</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 appletviewer.exe로 실행했을 때의 출력화면을 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV018.GIF" BORDER=0 WIDTH=227 HEIGHT=199 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 웹브라우저 상에 출력된 화면을 나타낸 것이다.</FONT>
<P ALIGN=CENTER>  
<IMG SRC="FYXIV019.GIF" BORDER=0 WIDTH=341 HEIGHT=266 ALIGN=BOTTOM>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.5 </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">태그</FONT></SPAN></FONT>
<P>  
<P><FONT FACE="바탕">애플릿을 홈페이지에 설치하려면 &lt;applet&gt; 태그에 대해 정확한 이해가 필요하다. 핫자바 1.0 알파 버전이 지원하던 JDK 1.0 알파 버전에서는 HTML 태그가 &lt;applet&gt;이 아니고 &lt;app&gt;였다. &lt;app&gt; 태그는 다음과 같이 하나의 태그 안에 모든 속성을 기입하는 형식을 택하였다. 현재의 웹 브라우저는 &lt;app&gt; 태그를 지원하지 않으므로 관심을 둘 필요는 없다. 
</FONT><P>&lt;<FONT FACE="바탕">applet&gt; 태그는 이것과 상당히 다른데, 먼저 HTML 명령의 규격을 준수하여 &lt;applet&gt;으로 시작해서 &lt;/applet&gt;으로 끝난다. 그리고 각 애플릿이 필요로 하는 속성은 별도로 &lt;param&gt; 태그를 이용하여 속성(attribute) 값을 주게된다.</FONT>
<BR>
<P>&lt;<FONT FACE="바탕">applet&gt; 태그의 형식은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=636 HEIGHT=309>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P>&lt;<FONT FACE="Courier New">applet code=&quot;</FONT><I><FONT FACE="바탕">클래스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	<FONT FACE="Courier New">width=&quot;</FONT><I><FONT FACE="바탕">픽셀</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단위의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">폭</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	<FONT FACE="Courier New">height=&quot;</FONT><I><FONT FACE="바탕">픽셀</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단위의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">높이</FONT></I><FONT FACE="Courier New">&quot; </FONT>
<P>	  <FONT FACE="Courier New">[ codebase=&quot;</FONT><I><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">존재하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">기반</FONT><FONT FACE="Courier New"> URL</FONT></I><FONT FACE="Courier New">&quot; </FONT>
<P>	    <FONT FACE="Courier New">alt=&quot;</FONT><I><FONT FACE="바탕">텍스트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">전용</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">브라우저에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대신</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">텍스트</FONT></I><FONT FACE="Courier New">&quot; </FONT>
<P>	    <FONT FACE="Courier New">name=&quot;</FONT><I><FONT FACE="바탕">별명</FONT><FONT FACE="Courier New">-</FONT><FONT FACE="바탕">같은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문서에서는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있다</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	    <FONT FACE="Courier New">align=&quot;</FONT><I><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">정렬</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방식</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>		<FONT FACE="Courier New">vspace=&quot;</FONT><I><FONT FACE="바탕">세로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방향의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">여백</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>		<FONT FACE="Courier New">hspace=&quot;</FONT><I><FONT FACE="바탕">가로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방향의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">여백</FONT></I><FONT FACE="Courier New">&quot; ] &gt;</FONT>
<BR>
<P>&lt;<FONT FACE="Courier New">param name=&quot;</FONT><I><FONT FACE="바탕">속성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT></I><FONT FACE="Courier New">&quot; value=&quot;</FONT><I><FONT FACE="바탕">속성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT></I><FONT FACE="Courier New">&quot;&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">param ...&gt;</FONT>
<P><FONT FACE="Courier New">...</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">[ ] 안의 부분은 생략이 가능하다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.4.3 AWT </FONT><FONT FACE="바탕">프로그램</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿처럼 그래픽으로 윈도우 위에 문자열을 표시하는 자바 어플리케이션은 애플릿보다 훨씬 복잡한데 이는 프로그램 작성이 어려운건 아니고 세세한 신경을 써야하는 면이 복잡하다고 할 수 있다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.3.1 AWT </FONT><FONT FACE="바탕">응용프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">예</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞에서 애플릿을 사용할 때와 같이 윈도우에 문자열을 나타내는 자바 어플리케이션의 예를 나타낸 것인데 자세한 설명은 생략하고 흐름만 간단하게 익히기 바란다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=340>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldWin.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Frame;</FONT>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">public class HelloWorldWin extends Frame {</FONT>
<P>	<FONT FACE="Courier New">public HelloWorldWin(String title) {</FONT>
<P>		<FONT FACE="Courier New">super(title);</FONT>
<P>		<FONT FACE="Courier New">setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World&quot;, 100, 100);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">new HelloWorldWin(&quot;Hello World&quot;);</FONT>
<P>	<FONT FACE="Courier New">} </FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.3.2 AWT </FONT><FONT FACE="바탕">응용프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">실행결과</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 윈도우 출력화면을 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV020.GIF" BORDER=0 WIDTH=266 HEIGHT=177 ALIGN=BOTTOM>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=448>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">자바의 종류</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">• Application : 독립적으로 실행되는 프로그램이다.</FONT>
<P><FONT FACE="바탕">• Applet : 웹 브라우저 내에서 실행된다.</FONT>
<P><FONT FACE="바탕">• Servlet : 애플릿에 대응되는 말로 서버에서 동작하는 작은 자바 프로그램을 말한다. 이것은 웹서버에서 동작한다.</FONT>
<P><FONT FACE="바탕">• CORBA : CORBA는 분산객체환경을 위해 OMG라는 그룹에서 제정한 표준안이며, CORBA와 대응되는 것은 Microsoft의 DCOM(COM+)이다. 자바에서는 RMI라는 것이 있는데, 규모로 보면 CORBA나 COM+보다는 작지만 자바에 한정해서 보면 기능이 같다.</FONT>
<P><FONT FACE="바탕">• Java Beans : 자바환경에서 컴포넌트를 정의한 것이다.</FONT>
<P><FONT FACE="바탕">• JDBC : ODBC를 연상하면 된다.</FONT>
<P><FONT FACE="바탕">• JFC는 자바의 GUI Frame Work으로 생각하면 되고, MFC를 생각하면 된다. 이 중 일부는 Swing이라는 이름으로 구현되었다.</FONT>
<P><FONT FACE="바탕">• JMF : Java Media Framework로 동영상 등을 재생하는 것이다.</FONT>
<P><FONT FACE="바탕">• SCJP : 자바를 만든 선사에서 공인하는 자바 프로그래머 자격증이다.(Sun Certified Java Programmer) </FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">이를 보면 선사에서는 자바를 이용하여 MS에 대응하는 제품을 계속 만들고 있음을 알 수 있다.</FONT>
<P><FONT FACE="바탕">MFC ↔ JFC, ODBC ↔ JDBC, ASP ↔ JSP, COM+ ↔ RMI</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV021.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.5  </FONT><FONT FACE="바탕">객체와</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">클래스</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">객체는 객체지향 프로그래밍에서 가장 기본이 되는 개념이다. 사전적 의미로는 물건, 물체를 의미한다. 객체지향의 기본 원리는 현실 세계의 모든 것을 객체로 간주하고 이러한 객체를 속성(attribute)과 행위(behavior)를 갖는 소프트웨어적 개념으로 표현하는 것이라고 할 수 있다. 자바에서의 객체는 클래스의 실제 인스턴스(instance)이다. 즉, 클래스의 인스턴스를 만들 때마다 객체가 만들어진다.</FONT>
<BR>
<P><FONT FACE="바탕">클래스는 일종의 설계도나 명세서(specification)라고 할 수 있으며, 하나 이상의 유사한 객체를 묶어 하나의 공통된 특성으로 표현한 추상적 데이터형으로, 내부 데이터와 데이터에 작용하는 연산 집합으로 구성된다. 즉 실제의 물체(object)를 추상화(abstraction)라는 작업을 통해 자바 프로그램에 사용할 수 있는 코드 형태를 만드는데, 이것이 클래스인 것이다. 클래스가 자기 자신의 구조를 기술하고 정보를 유지하는데 사용하는 데이터를 필드라고 하며, 필드에 작용하는 연산을 메소드라 부른다. 객체에 있어서 명사적 특징들이 클래스에서는 속성(attribute) 즉, 변수에 해당하고, 객체의 동사적 특징은 메소드(method)에 해당한다(C언어에 있어서는 함수).</FONT>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.1 </FONT><FONT FACE="바탕">클래스</FONT><FONT FACE="HY부활M">(Class)</FONT><FONT FACE="바탕">의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스의 코딩은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=132>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I>&lt;<FONT FACE="Courier New">modifiers&gt;</FONT></I><FONT FACE="Courier New"> class </FONT><I>&lt;<FONT FACE="Courier New">ClassName&gt;</FONT></I><FONT FACE="Courier New"> {</FONT>
<P>	<I><FONT FACE="Courier New">ClassBody;</FONT></I>
<P>	<I><FONT FACE="바탕">//attributes</FONT></I>
<P>	<I><FONT FACE="바탕">//constructors</FONT></I>
<P>	<I><FONT FACE="바탕">//methods</FONT></I>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ modifiers : 대표적인 접근 재한자로서 public, protected, default(공백), private 등이 있다. 이 중에서 클래스의 선언에 사용되는 것은 public과 default(공백)이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 실제 클래스를 선언한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=795 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass {</FONT>
<P>	<FONT FACE="바탕">//클래스 안의 코드 작성</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">선언한 클래스를 가지고 &quot;new&quot;라는 키워드(메모리 할당 연산자)를 통해 만들어진 실체 즉, 인스턴스를 객체라 하며, 코딩은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I><FONT FACE="Courier New">ClassName instanceName</FONT></I><FONT FACE="Courier New"> = </FONT><B><FONT FACE="Courier New">new</FONT></B><FONT FACE="Courier New"> </FONT><I><FONT FACE="Courier New">Constructor</FONT></I><FONT FACE="Courier New">();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위에서 Constructor는 생성자로서 뒤에서 설명하겠지만 클래스와 이름이 같아야 하므로 통상 클래스 이름과 같이 사용한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=795 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><B><FONT FACE="Courier New">3:</FONT></B>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestMyClass {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MyClass m = </FONT><B><FONT FACE="Courier New">new</FONT></B><FONT FACE="Courier New"> MyClass();</FONT>
<P>	<FONT FACE="바탕">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.2 </FONT><FONT FACE="바탕">변수</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 변수를 선언하는 방법이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I>&lt;<FONT FACE="Courier New">modifiers&gt; &lt;type&gt; &lt;variableName&gt;</FONT></I><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ modifiers : 재한자로서 public, protected, default, private 등의 Access Level 제한자와 Usage Level 제한자가 있다. 자세한 설명은 뒤에서 하기로 하고 간단하게 설명하면 다음과 같다.</FONT>
<P><FONT FACE="바탕">- public : 어느 클래스에서나 참조가능.</FONT>
<P><FONT FACE="바탕">- protected : 같은 package 내의 클래스에서만 참조가능, 자손 클래스가 다른 package에 있을 경우, 그 자손 클래스도 참조 가능.</FONT>
<P><FONT FACE="바탕">- default : 같은 package내의 클래스에서만 참조가능.</FONT>
<P><FONT FACE="바탕">- private : 같은 클래스 내에서만 참조가능.</FONT>
<P><FONT FACE="바탕">⽦ type : 기본자료형뿐만 아니라 클래스도 자료형으로 사용할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 변수를 선언한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><B><FONT FACE="Courier New">2:</FONT></B>
<P><B><FONT FACE="Courier New">3:</FONT></B>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass {</FONT>
<P>	<FONT FACE="Courier New">public int var1;</FONT>
<P>	<FONT FACE="Courier New">int var2;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.3 </FONT><FONT FACE="바탕">메소드의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">메소드 선언은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=65>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I>&lt;<FONT FACE="Courier New">modifiers&gt; &lt;return_type&gt; &lt;name&gt; (argument_list)</FONT></I><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">....</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE> 
<BR>
<P><FONT FACE="바탕">⽦ modifiers : 재한자로서 public, protected, default, private 등의 Access Level 제한자와 Usage Level 제한자가 있다. 
</FONT><BR>
<BR>
<BR>
<P><FONT FACE="바탕">⽦ return_type : 외부로 값을 반환하는데 사용되며, void(리턴값이 없음), byte, short, int, long, float, double, char, boolean, 배열, Class형 등 11가지가 있다.</FONT>
<BR>
<P><FONT FACE="바탕">⽦ argument_list : 외부로부터 값은 받는데 사용되며, return-type 에서 void를 제외한 10 가지가 argument_list의 자료형으로 올 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 메소드를 선언한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><B><FONT FACE="Courier New">5:</FONT></B>
<P><B><FONT FACE="Courier New">6:</FONT></B>
<P><B><FONT FACE="Courier New">7:</FONT></B>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass {</FONT>
<P>	<FONT FACE="Courier New">public int var1;</FONT>
<P>	<FONT FACE="Courier New">int var2;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void doIt() {</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Hello World!&quot;);</FONT>
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.4 </FONT><FONT FACE="바탕">멤버변수와</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">지역변수</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스 안에는 변수와 메소드가 올 수 있는데, 이들 클래스와 메소드를 멤버라 부른다. 멤버변수(Member Variable)는 클래스 안에서 선언 된 변수를 말하는데, 초기화를 시켜주지 않아도 객체를 생성할 때 각 자료형의 기본값으로 초기화된다.  
</FONT><P><FONT FACE="바탕">지역변수(Local Variable)는 Automatic variable이라고도 하며, 메소드 안에서 선언된 것을 말하는데, 반드시 초기화를 필요로 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음의 예를 보자</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=259>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">VarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class VarExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">int a;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void printNum(int c) {</FONT>
<P>		<FONT FACE="Courier New">int b = 1;</FONT>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">반드시</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">초기화</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">해야</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">함</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">멤버변수</FONT><FONT FACE="Courier New"> : &quot; + a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">지역변수</FONT><FONT FACE="Courier New"> : &quot; + b);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">매개변수</FONT><FONT FACE="Courier New"> : &quot; + c);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestVarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestVarExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]){</FONT>
<P>		<FONT FACE="Courier New">VarExample ve = new VarExample();</FONT>
<P>		<FONT FACE="Courier New">ve.printNum(2);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV022.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV023.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT><FONT FACE="Courier New">   	
</FONT></B><P>		<B><FONT FACE="바탕">멤버변수</FONT><FONT FACE="Courier New"> : 0</FONT></B>
<P>		<B><FONT FACE="바탕">지역변수</FONT><FONT FACE="Courier New"> : 1</FONT></B>
<P>		<B><FONT FACE="바탕">매개변수</FONT><FONT FACE="Courier New"> : 2</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.5 </FONT><FONT FACE="바탕">생성자</FONT><FONT FACE="HY부활M">(Constructor) </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">생성자는 객체가 생성될 때 객체를 초기화하는데 사용된다. 앞에서 객체를 생성할 때 new 다음에 오는 것을 생성자라고 한다. 
</FONT><P><FONT FACE="바탕">생성자는 메소드와는 분명히 다르며, 객체가 생성될 때 단 한번 자동으로 수행된다. 생성자는 반드시 하나 이상은 있어야 하는데, 만일 명시적으로 선언하지 않으면 컴파일러가 대신해서 하나를 만들어주게 되는데 이를 기본 생성자(Default Constructor)라 부른다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I><FONT FACE="Courier New">ClassName</FONT></I><FONT FACE="Courier New"> (</FONT><I><FONT FACE="Courier New">argument_list</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="Courier New">...</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">생성자를 만드는 규칙은 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">1. 생성자의 이름은 클래스 이름과 같아야 한다.(대/소문자까지 정확히 같아야 함) 만일 클래스이름과 다른 이름으로 만들면 메소드로 간주하여 반환 유형이 없다는 오류가 발생한다.</FONT>
<P>  <FONT FACE="돋움">2. 메소드와는 달리 반환 유형이 없다. 메소드의 경우 반환 유형이 없더라도 void라고 명시를 해주지만 생성자는 반환 유형을 정의하지 않는다.</FONT>
<BR>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음의 예를 보자.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ConExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ConExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">int var;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ConExample(int init_var) {</FONT>
<P>		<FONT FACE="Courier New">var = init_var;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestConExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestConExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]){</FONT>
<P>		<FONT FACE="Courier New">ConExample ce = new ConExample(100);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;var</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> &quot; + ce.var + &quot;</FONT><FONT FACE="바탕">으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">초기화</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV024.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV025.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">var</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> 100</FONT><FONT FACE="바탕">으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">초기화</FONT></B>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=267>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">Garbage Collecting</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">• 자바에서 객체 사용 후 메모리에서 해제할 때 어떻게 해야 할까? 객체를 생성하는데 사용되는 연산자는 &quot;new&quot;이지만, 생성된 객체를 해제시키는 연산자는 존재하지 않는다. 자바에서는 자바 가상머신이 알아서 메모리를 관리해 주며 이를 Garbage Collecting이라 한다. Garbage Collecting은 객체가 더 이상 프로그램에서 사용되지 않으면 Garbage Collector가 판단하여 스스로 해제시켜 메모리를 수거하게된다.</FONT>
<BR>
<P><FONT FACE="바탕">• System.gc();</FONT>
<P><FONT FACE="바탕">Garbage Collecting의 단점은 언제 동작이 일어날지 모르기 때문에 메모리를 다 차지해 버릴 수도 있다는 것이다. 이때 System클래스의 gc() 메소드를 호출하면 시스템이 Garbage Collecting을 가능한 빠른 시간에 수행시킨다. 이 메소드를 호출한다고 해서 Garbage Collector가 바로 실행되는 것은 아니다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.6 </FONT><FONT FACE="바탕">객체</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">추상화</FONT><FONT FACE="HY부활M">(Object Abstraction)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">모든 객체는 두 가지 특징을 가지고 있다. 하나는 속성에 해당하는 명사적 특징과 또 하나는 행위에 해당하는 동사적 특징이다. 실세계의 객체에서 명사적 특징과, 동사적 특징을 추출해 내는 것을 추상화라고 하는데, 명사적 특징은 객체지향 프로그래밍에서 속성 또는 변수에 해당하고, 동사적 특징은 행위 또는 메소드에 해당한다.</FONT>
<P><FONT FACE="바탕">은행 계좌의 경우를 추상화해보자. 먼저 명사적 특징으로는 계좌번호, 비밀번호, 이율, 잔고 등이 있고 이를 추상화하면 프로그램의 변수에 해당하게 된다. 동사적 특징으로는 입금하다, 출금하다, 조회하다, 이자를 계산하다 등이 있고 이들을 추상화하면 프로그램의 메소드 부분에 해당된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 완벽한 예제는 아니지만 추상화를 거쳐서 실제 은행계좌 객체를 자바로 코딩한 것이다. 이와 같이 추상화 된 객체를 클래스라고 부른다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=358>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Account {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public String accountNumber;</FONT>
<P>	<FONT FACE="Courier New">public String passwd;</FONT>
<P>	<FONT FACE="Courier New">public long restMoney;</FONT>
<P>	<FONT FACE="Courier New">public float interest;</FONT>
<P>	<FONT FACE="Courier New">public void saveMoney(logn amount) {</FONT>
<P>		<FONT FACE="Courier New">restMoney = restMoney + amount;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void withdrawMoney(long amount) {</FONT>
<P>		<FONT FACE="Courier New">restMoney = restMoney - amount;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public long getRestMoney() {</FONT>
<P>		<FONT FACE="Courier New">return = restMoney;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">위 예제는 객체를 추상화하는 과정을 거쳐 만들어 놓은 클래스로 일종의 설계도에 해당한다. 집은 설계도만으로는 별 의미가 없고 실제로 집을 지어야 한다. 이처럼 실제로 만들어져야 할 집을 클래스의 인스턴스라 하며, 바로 객체를 나타낸다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 new 키워드를 이용하여 인스턴스를 만드는 예이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">Account myAccount = new Account();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이제 객체 즉, 인스턴스에 값을 할당해 보자. 클래스 내에서 선언된 변수나 메소드를 사용하려면 객체를 이용한다. 위 예에서 name, accountNumber, passwd, restMoney, interest를 멤버 변수라 부르고, saveMoney(), withdrawMoney(), getRestMoney() 등을 멤버 메소드라 부른다.</FONT>
<P><FONT FACE="바탕">멤버 변수의 사용은 객체이름 뒤에 &quot;.&quot;점으로 구분하여 변수의 이름을 덧붙여준다. 다음은 만들어진 객체의 멤버 변수에 값을 할당하는 예이다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">myAccount.name = &quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.accountNumber = &quot;002-122-011420&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.passwd = &quot;1234&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.restMoney = &quot;3800000&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.interest = 6.03F;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">멤버 메소드를 사용할 때에도 멤버 변수의 사용과 같이 객체이름 뒤에 &quot;.&quot;점으로 구분하여 메소드의 덧붙여준다. 다음은 만들어진 객체의 멤버 메소드를 사용하는 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=75>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">myAccount.saveMoney(50000);</FONT>	<FONT FACE="Courier New">//50000</FONT><FONT FACE="바탕">원</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입금</FONT>
<P><FONT FACE="Courier New">myAccount.withdrawMoney(80000);</FONT>	<FONT FACE="Courier New">//80000</FONT><FONT FACE="바탕">원</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">출금</FONT>
<P><FONT FACE="Courier New">myAccount.getRestMoney()</FONT>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">현금</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조회</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV026.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.6   </FONT><FONT FACE="바탕">패키지</FONT><FONT FACE="Bookman Old Style">(package)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스에는 크게 2가지 종류가 있는데, 하나는 사용자가 직접 만들어 사용하는 것이고, 다른 하나는 JDK 안에 포함되어있거나, 혹은 누군가가 만들어 놓은 클래스가 있다. 그런데 이런 클래스가 매우 많기 때문에 서로 관계 있는 것끼리 모아놓은 묶음을 패키지라고 한다. 자바소스코드에서 java.lang, java.io란 코드를 볼 수 있는데, 바로  패키지를 나타낸 것이다.</FONT>
<P><FONT FACE="바탕">예를 들어 java.lang 란 패키지 안에는 수많은 클래스가 포함되어 있는데 이 들은 자바가 수행될 때 필수적으로 사용되는 기본적인 클래스를 모아놓은 것이다. 따라서 모든 자바 소스코드에는 반드시 이 패키지가 포함되어야 한다. 물론 이 패키지는 자동으로 포함된다. 자바소스코드에 특정한 패키지를 포함시키려면 import라는 키워드를 사용하며, 사용 방법은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=31>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">import java.lang.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">여기서 &quot;*&quot; 기호는 &quot;java.lang 패키지에 있는 모든 클래스를 사용한다.&quot;라는 의미이다. (사실 import 구문은 C 언어의 include 구문과 유사하다.)</FONT>
<BR>
<P><FONT FACE="바탕">다음은 일반적인 자바 소스코드의 레이아웃이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=92>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">package xxx;</FONT>
<P><FONT FACE="Courier New">import xxx.xxx.*;</FONT>
<P><FONT FACE="Courier New">class </FONT><FONT FACE="바탕">선언</FONT>
<P><FONT FACE="Courier New">...</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">package 선언문은 사용자가 만든 클래스를 어느 패키지로 묶을것인가를 지정하는 구문이며, import 선언문은 기존에 있던 패키지 안에 있는 클래스를 사용하겠다는 의미이다. 그 다음의 class 선언은 사용자가 만들어서 이용할 클래스를 나타낸다.</FONT>
<BR>
<P><FONT FACE="바탕">일단 예제 프로그램부터 다시 보자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorld.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println (&quot;Hello World!&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">위의 프로그램에서 패키지 구문은 생략되었는데, 이처럼 생략되면 패키지는 만들어지지 않고, 현재 폴더에 클래스 파일만 생성된다. 또 위 프로그램에서 import 구문도 생략되었는데, 이렇게 생략하면 java.lang 패키지가 자동으로 import된다. 즉 import java.lang.*; 구문은 코딩을 하거나 하지 않거나 결과는 마찬가지이다. 예를 들어 만약 file i/o를 하고자 하는데, 관련 클래스가 필요하다면 java.io 패키지를 import하면 된다. 사용 예는 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.6.1 </FONT><FONT FACE="바탕">패키지</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">사용자가 임의로 패키지를 만들려면 프로그램의 맨 위에 패키지 구문을 포함시키면 된다. 
</FONT><BR>
<P><FONT FACE="바탕">사용 예는 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=236>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorld.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package test.sample;</FONT></B>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">// Sample HelloWorld application</FONT>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println (&quot;Hello World!&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 때 유의할 점은 위와 같이 package를 선언한 다음 컴파일 할 때 다음과 같이 -d 옵션을 주어야만 패키지가 생성된다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javac  -d  </FONT><I><FONT FACE="바탕">패키지가만들어질경로</FONT><FONT FACE="Courier New">  </FONT><FONT FACE="바탕">자바소스파일</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위 프로그램의 예에서 패키지를 현재 경로에 만들려면 다음 예와 같이 기술한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; javac </FONT><B><FONT FACE="Courier New">-d</FONT></B><FONT FACE="Courier New"> . test/sample/HelloWorld.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">여기서 -d 다음의 점(.)은 현재 폴더를 의미한다. 즉 현재 폴더에 패키지를 생성하겠다는 의미이다. 이와 같이 컴파일을 하면 현재 폴더에 test란 디렉토리가 만들어지고 그 아래에 다시 sample이란 디렉토리가 만들어진 후 그 아래에 HelloWorld.class 파일이 생성된다.</FONT>
<BR>
<P><FONT FACE="바탕">위의 파일을 컴파일 한 후 HelloWorld.class를 실행하려면 다음과 같이 입력한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; java test.sample.HelloWorld</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">만약 다른 클래스에서 위의 클래스를 사용하려면 다음과 같이 import 구문을 이용한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import test.sample.HelloWorld;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">물론 이와 같이 import문을 사용하였을 때는 컴파일하기 전에 해당되는 클래스 파일의 경로가 설정되어 있어야 한다. 클래스 파일경로 설정 방법은 도스에서는 다음과 같이 기술한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">set classpath = %classpath%;</FONT><I><FONT FACE="바탕">클래스파일절대경로명</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV027.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.7  API </FONT><FONT FACE="바탕">도움말</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">API(Application Programming Interface) 온라인 문서는 자바의 여러 가지 기술을 HTML 파일로 설명하고 있다.</FONT>
<P><FONT FACE="바탕">API 문서의 홈페이지에서 특정한 package를 선택하면, 그 package 내의 클래스와 인터페이스 목록이 나타나고, 원하는 클래스를 선택하면 해당 클래스에 관한 정보가 화면에 나타난다. 각 클래스 문서는 동일한 포맷으로 되어있으며, 해당 클래스와 관련이 없는 일부 요소는 생략될 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 http://java.sun.com/j2se/1.3/docs/api/index.html에 있는 1.3버전의 자바 API 온라인 설명서 시작 페이지를 나타낸 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV028.GIF" BORDER=0 WIDTH=416 HEIGHT=288 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">위의 화면 구성을 살펴보면 다음과 같다. 원하는 패키지를 선택할 수 있는 패키지 창이 왼쪽 위 프레임에 있고, 선택한 패키지에 포함된 인터페이스와 클래스 이름이 나열되는 클래스 창이 왼쪽 아래 프레임에 나타난다. 그리고 클래스 창에서 지정한 클래스나 인터페이스에 대한 설명과 여기에 포함된 필드, 메소드에 대한 설명을 보여주는 API 창(오른쪽)으로 구성되어 있다. 
</FONT><P><FONT FACE="바탕">클래스 온라인 설명서의 APT 창에는 클래스의 일반적인 용도에 대한 해설이 있고, 멤버 변수 목록과 각 변수의 목적과 사용법을 보다 자세히 설명하는 변수 세부 목록이 있으며, 생성자 목록 및 이를 자세히 설명하는 생성자 세부 목록이 있다. 또, 메소드 목록 및 이를 설명하는 메소드 세부 목록 등으로 구성되어 있다. 또한 클래스, 인터페이스, 변수, 메소드 등이 알파벳순으로 색인화 되어있어 쉽게 원하는 자료를 찾을 수 있다. 자바의 온라인 설명서는 자바를 익히고 이해력을 높이는데 많은 도움이 된다.</FONT>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="FYXIV029.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV030.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV031.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[자바 언어의 기본 구조]</FONT></SPAN></FONT>
<P>
<IMG SRC="FYXIV032.GIF" BORDER=0 ALIGN=LEFT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이 장에서는 프로그램을 작성할 때 구성되는 문장의 기본 요건과 기본 데이터 유형(primitive data type) 및 배열, 그리고 여러 가지 연산자와 제어문을 통하여 자바의 기본적인 문법에 대하여 자세히 알아본다. C언어를 경험했다면 많은 부분이 C언어와 유사한 것을 알 수 있을 것이다. 
</FONT></SPAN></FONT><BR>
<P>
<P>
<BR>
<P>
<IMG SRC="FYXIV034.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">2.1  </FONT><FONT FACE="바탕">기본</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">구성</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">요소</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">여기서는 프로그램의 실행에는 전혀 영향을 미치지 않고 프로그램을 이해하는데 도움을 주는 주석문과 키워드, 그리고 8개의 기본데이터 유형과 한 개의 참조 데이터 유형에 대해 알아보기로 한다.</FONT>
<P><FONT FACE="바탕">모든 프로그램 언어에서와 마찬가지로 매우 중요하게 사용되는 배열에 대해서도 상술하고자 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.1.1 </FONT><FONT FACE="바탕">주석문과</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">기본</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">원칙</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">주석문을 잘 사용하면 추후 프로그램을 분석하는데 매우 유익하다. 일반적으로 프로그램을 작성할 때는 알고리즘을 분석한 상태이기 때문에 프로그램의 모든 부분을 상세히 파악하고 있지만 시간이 지나고 업무가 달라진 상태에서 예전에 작성한 프로그램을 빠른 시간내에 이해하기는 매우 어려워진다. 따라서, 가능한한 프로그램을 작성할 때 많은 주석문을 만들어 주는 기본 원칙을 지키는 것이 시간과 노력을 절감하는 지름길인 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.1.1 </FONT><FONT FACE="바탕">주석문</FONT><FONT FACE="HY울릉도M">(Comment)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">주석문은 프로그램의 실행에는 전혀 영향을 미치지 않는 문장으로서, 프로그램의 이해를 도와주는데 주로 사용된다. 주석문을 사용하는 방법은 다음 세 가지가 있다.</FONT>
<BR>
<P>  <FONT FACE="돋움">῁  // 한 줄 주석</FONT>
<P>  <FONT FACE="돋움">῁  /* 한 줄 또는 여러 줄 주석 */</FONT>
<P>  <FONT FACE="돋움">῁  /** document 생성용 주석 */</FONT>
<BR>
<P><FONT FACE="바탕">//는 주석 내용이 한 줄일 때 편리하다. //는 줄의 어느 위치에나 올 수 있으며, 이 부호 바로 다음부터 그 줄의 끝까지의 내용이 주석으로 간주된다.</FONT>
<BR>
<P><FONT FACE="바탕">/* */는 주로 여러 줄의 주석문을 만들 때 사용된다. 즉, /*와 */ 사이에 있는 모든 내용이 주석으로 간주된다.</FONT>
<BR>
<P><FONT FACE="바탕">/** */는 온라인 설명서용 주석인데 일반적으로 변수나 메소드 등의 선언문 바로 앞에 오며, javadoc 명령에 의해 자동으로 생성되는 설명서용 html 파일에 주석 내용이 포함된다. javadoc은 JDK 안에 들어있는 utility로 패키지, 클래스 등의 설명서를 만들 때 사용된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.1.2 </FONT><FONT FACE="바탕">세미콜론</FONT><FONT FACE="HY울릉도M">(;), </FONT><FONT FACE="바탕">블록</FONT><FONT FACE="HY울릉도M">(Block), </FONT><FONT FACE="바탕">공백</FONT><FONT FACE="HY울릉도M">(Whitespace)</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ 논리적인 한 문장이 끝날 때 반드시 세미콜론(;)을 붙여준다.  이는 파스칼과 동일하다.</FONT>
<P> <FONT FACE="돋움">∘ 블록은 괄호(curly brace), 즉 &quot;{&quot; 와 &quot;}&quot;로 묶여진 부분을 말하며, 복합문을 구성하는 요소이다.</FONT>
<P>    <FONT FACE="돋움">즉, 종속된 문장이 다수개일 때 &quot;{&quot;로 시작하고 &quot;}&quot; 닫아준다. 이는 파스칼의 begin∼end와 같다. 
</FONT><P> <FONT FACE="돋움">∘ 공백(Whitespace)은 빈칸, 탭, 빈 줄 등이 있으며, 이러한 공백은 소스 코드를 보기 좋게 하고 알아보기 쉽게 하는데 사용된다. 즉, 프로그램을 구조화 형태로 표현하는데 유용하다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.1.3 </FONT><FONT FACE="바탕">식별자</FONT><FONT FACE="HY울릉도M">(Identifier)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바 언어에서 식별자는 클래스 명, 메소드 명, 변수 명 등 사용자가 만들어 이용하는 고유한 이름을 식별자라고 하며 다음과 같은 몇 가지 규칙을 반드시 지켜야 한다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ 대.소문자를 구분하고, 길이에는 제한이 없다.</FONT>
<P> <FONT FACE="돋움">∘ 유니코드 문자나 &quot;_(underscore)&quot;, &quot;$&quot;로 시작한다. 즉, 숫자로 시작하면 안 되며,  특수문자(!, @, # 등...) 중에서는 &quot;_&quot;과 &quot;$&quot;만 시작할 때 사용할 수 있다. 그러나 &quot;_&quot;와 &quot;$&quot;의 경우는 식별자에 이 기호를 포함시키라는 로컬 시스템의 규칙이 있거나 부득이한 경우가 아니면 사용하지 않는 것이 좋다. 또한 유니코드를 지원하기 때문에 한글 사용이 가능하지만 ASCII 코드를 사용하는 것이 좋다.</FONT>
<P> <FONT FACE="돋움">∘ 첫 문자 외에는 문자, 숫자, 밑줄, 달러기호 등을 임의의 순서로 사용할 수 있다.</FONT>
<P> <FONT FACE="돋움">∘ 키워드는 식별자로 사용할 수 없다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 잘못된 식별자의 예로서 컴파일 시 오류가 발생한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=98>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">잘못된 예</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=85%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">설    명</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">3test</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">@test</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">this</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=85%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">식별자는 숫자로 시작하면 안 된다.</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">식별자의 첫 문자에 올 수 있는 특수문자는 &quot;_&quot;와 &quot;$&quot;뿐이다.</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">this는 키워드이다. 키워드는 식별자로 사용할 수 없다.</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 올바른 사용 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=578 HEIGHT=98>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">바른 사용 예</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">설    명</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">test3</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">_test</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">This</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">숫자는 식별자의 첫 문자만 아니면 어느 곳이나 올 수 있다.</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">&quot;_&quot;는 식별자의 첫 문자로 사용할 수 있다.</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">This는 자바에서 사용되는 this와는 다르다.(대/소문자 구분)</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.1.4 </FONT><FONT FACE="바탕">코딩</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">규칙</FONT><FONT FACE="HY울릉도M">(Naming Conventions)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">코딩을 할 때 식별자에 관련된 아래와 같은 몇 가지 규정이 있다. 꼭 아래와 같은 형식을 따르라는 것은 아니고 이는 프로그램의 이해도를 높이기 위한 프로그래머들간의 규칙이라고 생각하면 된다. 가능하면 클래스 이름이나 변수 이름, 메소드 이름 등을 만들 때에 이러한 규칙으로 만들기를 권장한다.</FONT>
<BR>
<P>  <FONT FACE="바탕">⁙ 클래스 이름/인터페이스 이름</FONT>
<P><FONT FACE="바탕">- 명사나 형용사를 서술적으로 연결하여 사용한다.</FONT>
<P><FONT FACE="바탕">- 첫 글자는 대문자로 표기한다.</FONT>
<P><FONT FACE="바탕">- 연결된 단어의 첫 글자도 대문자로 표기한다.</FONT>
<P><FONT FACE="바탕">- 나머지 문자는 소문자로 표기한다.</FONT>
<P><FONT FACE="바탕">- &quot;$&quot;은 내부 클래스에서 특별한 의미가 있기 때문에 사용을 권장하지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">이상의 규칙을 적용한 예를 들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=597 HEIGHT=62>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">class ClassOne { }</FONT>
<P><FONT FACE="Courier New">class MyCalss { }</FONT>
<P><FONT FACE="Courier New">interface Account { }</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT FACE="바탕">⁙ 변수 이름</FONT>
<P><FONT FACE="바탕">- 명사적 의미를 갖게 한다.</FONT>
<P><FONT FACE="바탕">- 첫 글자는 소문자, 연결 단어의 첫 글자는 대문자로 표기한다.</FONT>
<P><FONT FACE="바탕">- 일반적으로 변수 이름에서는 &quot;_(underscore character)&quot;를 사용하지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">이상의 규칙을 적용한 예를 들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=597 HEIGHT=42>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int variableOne;</FONT>
<P><FONT FACE="Courier New">String customerName;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>    <FONT FACE="바탕">⁙ 메소드 이름</FONT>
<P><FONT FACE="바탕">- 동사적 의미를 갖게 한다.</FONT>
<P><FONT FACE="바탕">- 첫 글자는 소문자, 연결 단어의 첫 글자는 대문자로 표기한다.</FONT>
<P><FONT FACE="바탕">- 메소드 이름 뒤에는 한 쌍의 괄호&quot;()&quot;　가 온다.</FONT>
<P><FONT FACE="바탕">- 일반적으로 메소드 이름에서는 &quot;_(underscore character)&quot;를 사용하지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">이상의 규칙을 적용한 예를 들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=597 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int methodOne() { }</FONT>
<P><FONT FACE="Courier New">void printTheResults() { }</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT FACE="바탕">⁙ 상수 이름</FONT>
<P><FONT FACE="바탕">- 모든 문자는 대문자로 표기한다.</FONT>
<P><FONT FACE="바탕">- 단어와 단어 사이는 &quot;_&quot;(underscore characters)로 연결한다.</FONT>
<BR>
<P><FONT FACE="바탕">이상의 규칙을 적용한 예를 들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=597 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">final int CONSTANT_ONE = 1234;</FONT>
<P><FONT FACE="Courier New">final double PI = 3.141592;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT FACE="바탕">⁙ 제어문</FONT>
<P><FONT FACE="바탕">- if∼else 문이나 for 문과 같은 제어문은 단일 명령문이라 하더라도 괄호({ }) 안에 넣는다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=597 HEIGHT=103>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">if (condition) {</FONT>
<P>	<FONT FACE="Courier New">do something1;</FONT>
<P><FONT FACE="Courier New">} else {</FONT>
<P>	<FONT FACE="Courier New">do something2;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT FACE="바탕">⁙ 빈칸</FONT>
<P><FONT FACE="바탕">- 하나의 줄에는 하나의 명령문만 기술하고 4칸 또는 탭으로 들여 쓰기를 하면 코드를 알아보기 쉽다.</FONT>
<BR>
<P>  <FONT FACE="바탕">⁙ 주석</FONT>
<P><FONT FACE="바탕">- 의미가 분명하지 않은 코드 부분에 주석을 사용한다.</FONT>
<P><FONT FACE="바탕">- 한 줄에 해당하는 주석을 넣을 때는 주석 구분 기호 //를 사용한다.</FONT>
<P><FONT FACE="바탕">- 여러 줄의 주석을 사용할 때는 주석 구분 기호 /* ... */를 사용한다.</FONT>
<P><FONT FACE="바탕">- 온라인 설명서용 주석을 넣을 때에 /** ... */를 구분 문자로 사용하면 나중에 유지 보수 작업을 하는 사람들이 javadoc으로 만든 API를 사용할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=597 HEIGHT=123>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">// </FONT><FONT FACE="바탕">한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">라인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">차지하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">주석</FONT>
<BR>
<P><FONT FACE="Courier New">/* </FONT><FONT FACE="바탕">길이가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">라인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이상</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">길어져서</FONT>
<P>	<FONT FACE="바탕">여러</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">라인의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">공간을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">차지하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">주석</FONT><FONT FACE="Courier New"> */</FONT>
<BR>
<P><FONT FACE="Courier New">/** </FONT><FONT FACE="바탕">온라인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">설명서</FONT><FONT FACE="Courier New">(API Document)</FONT><FONT FACE="바탕">용</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">주석</FONT><FONT FACE="Courier New"> */</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음의 예제를 보자</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=119>
<TD VALIGN=TOP WIDTH=9%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=90%>
<P><FONT FACE="Courier New">public class </FONT><B><FONT FACE="Courier New">WizardBank</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">public static void </FONT><B><FONT FACE="Courier New">main</FONT></B><FONT FACE="Courier New"> (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int </FONT><B><FONT FACE="Courier New">customerAccount</FONT></B><FONT FACE="Courier New"> = 10;</FONT>
<P>	<FONT FACE="Courier New">} // end main method</FONT>
<P><FONT FACE="Courier New">} // end class</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위의 예에서 WizardBank는 클래스 명, main은 메소드 명, customerAccount는 변수 명을 나타낸다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.1.2 </FONT><FONT FACE="바탕">키워드와</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">리터럴</FONT><FONT FACE="HY부활M">(Literal)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 자바에서 사용되는 키워드를 나타낸 것이다. 식별자에 키워드를 넣을 수는 있지만 그렇다고 키워드를 식별자로 사용해서는 안 된다. 예를 들어 &quot;finalSample&quot;은 유효한 식별자이지만 &quot;final&quot;은 그렇지 않다.</FONT>
<P><FONT FACE="바탕">아래의 목록에서 true, false, null 등이 있지만 엄격히 말해서 이러한 것은 키워드가 아니라 리터럴이다. 자바에서 true, false, null 등의 리터럴은 C언어의 리터럴과 같은 대문자가 아니라 소문자이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=638 HEIGHT=205>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">abstract</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">assert</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">boolean</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">break</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">byte</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">case</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">catch</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">char</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">class</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">continue</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">default</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">do</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">double</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">else</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">extends</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">false</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">final</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">finally</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">float</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">for</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">if</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">implement</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">import</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">instanceof</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">interface</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">long</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">native</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">new</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">null</FONT></SPAN></FONT>	</TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">package</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">private</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">protected</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">public</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">return</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">short</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">static</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">strictfp</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">super</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">switch</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">synchronized</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">this</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">throw</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">throws</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">transient</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">true</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">try</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">void</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">volatile</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">while</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">* const와 goto는 키워드이지만 자바에서는 사용하지 않는다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.1.3 </FONT><FONT FACE="바탕">자료형</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 8개의 기본데이터 유형과 한 개의 참조(Reference) 데이터 유형을 사용한다. 이 유형의 데이터들은 리터럴 값이나 변수로 사용될 수 있다. 이 중 기본 데이터 유형은 네 가지 종류, 즉 논리형(Logical), 텍스트형(Textual), 정수형(Integral), 부동 소수점형(Floating point) 등으로 구분할 수 있다. 
</FONT><P><FONT FACE="바탕">다음 표에 나와 있는 유형 중에서 String을 제외하고는 모두 기본 데이터 유형에 속한다. String은 Reference형으로 문자열을 표현할 때 문자열 객체를 사용하여 처리할 수 있도록 String 클래스를 따로 지원하고 있다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=661 HEIGHT=464>
<TD VALIGN=MIDDLE WIDTH=18%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">유형</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">범    위</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">초기값</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=4 WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">정수형</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Integral</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">1 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=102 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^7 SIM 2^7 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

        </tr>
</TABLE>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-128 ~ 127)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">short</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">2 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=113 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^15 SIM 2^15 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

        </tr>
</TABLE>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-32,768 ~ 32,767)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">4 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=113 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^31 SIM 2^31 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

        </tr>
</TABLE>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-2,147,483,648 ~ 2,147,483,647)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">long</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">8 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=113 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^63 SIM 2^63 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

        </tr>
</TABLE>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-9,223,372,036,854,775,808 ~</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">9,223,372,036,854,775,807)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0L</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=2 WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">실수형</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Floating-Point</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">float</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">4 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">&plusmn;(1.401e-45F ~ 3.402e+38F)</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(7자리의 소수)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0.0F</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">double</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">8 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">&plusmn;(4.940e-324 ~ 1.797e+308)</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(15자리의 소수)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0.0D</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">논리형</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Logical</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">boolean</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">1 bit</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">true 또는 false</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">false</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=2 WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">문자형</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Textual</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">char</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">2 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\u0000 ∼ \uFFFF</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">'\u0000'</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">String</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">variable</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">각 위치에서 \u0000 ∼ \uFFFF</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">null</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=30%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">All reference type</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=11%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=46%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=12%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">null</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.3.1 </FONT><FONT FACE="바탕">정수형</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">정수형에는 4가지 유형이 있는데, byte, short, int, long 등의 키워드를 사용하여 선언한다. 정수형은 10진수, 8진수, 16진수 등의 형태로 표현한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IntegerExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class IntegerExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int decimalValue = 7;</FONT>
<P>		<FONT FACE="Courier New">int octalValue = 077;</FONT>
<P>		<FONT FACE="Courier New">int hexaValue = 0xFEFE;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=795 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">int decimalValue = 17;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">십진수 7을 대입한 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=795 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">int octalValue = 077;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">첫 머리에 붙은 0(Zero)은 8진수 값임을 표시하는 것이다. 실제로 octalValue에는 8진수 77의 십진수 값인 63이 저장된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=795 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">int hexaValue = 0xFEFE;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">첫 머리에 붙은 0x는 16진수 값임을 표시하는 것이다. hexaValue에는 16진수 FEFE의 십진수 값인 65278값이 저장된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 4가지 정수형의 크기와 범위를 타나낸 것이다. 범위는 2의 보수로 정의되며, 플랫폼에 관계없이 사용할 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=558 HEIGHT=278>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">유형</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">저장크기</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=57%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">범위</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">초기값</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">1 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=57%>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=102 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^7 SIM 2^7 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

            </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-128 ~ 127)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">short</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">2 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=57%>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=113 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^15 SIM 2^15 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

            </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-32,768 ~ 32,767)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">4 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=57%>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=113 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^31 SIM 2^31 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

            </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-2,147,483,648 ~ 2,147,483,647)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">long</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">8 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=57%>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=113 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">-2^63 SIM 2^63 -1  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

            </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(-9,223,372,036,854,775,808 ~</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">9,223,372,036,854,775,807)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0L</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음의 예를 보자</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IntegerTypeExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class IntegerTypeExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">byte b = 214748364;</FONT>
<P>		<FONT FACE="Courier New">short s = 214748364;</FONT>
<P>		<FONT FACE="Courier New">int i = 214748364;</FONT>
<P>		<FONT FACE="Courier New">long l = 214748364;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P> 
<P><FONT FACE="바탕">정수형 다음에 &quot;L&quot;자가 붙지 않으면 모두 int형이며, 대문자 &quot;L&quot;이나 소문자 &quot;l&quot;을 붙여 주면 long형 값임을 표시하는 것으로, 대문자와 소문자 모두 사용할 수 있지만 소문자를 사용하면 숫자 1과 구분하기 어렵기 때문에 사용하지 않는 것이 좋다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">byte b = 214748364;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">컴파일 시 오류가 발생한다. byte형 변수 b에 넣을 값인 214748364가 최대 범위를 벗어나기 때문이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">short s = 214748364;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">컴파일 시 오류가 발생한다. short형 변수 s에 넣을 값 214748364이 byte형의 최대 범위를 벗어나기 때문이다.</FONT>
<BR>
<P><FONT FACE="바탕">3번째 줄과 4번째 줄의 경우 오류가 발생하지 않게 하려면 숫자 앞에 (byte)와 (short)를 넣어서 강제로 숫자를 캐스팅(Casting)해서 범위를 축소시켜야 한다. 물론 값을 출력하면 전혀 다른 값이 나올 수 있다. 캐스팅에 관해서는 뒤에서 자세히 설명하기로 한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">byte b = </FONT><B><FONT FACE="Courier New">(byte)</FONT></B><FONT FACE="Courier New">214748364;</FONT>
<P>		<FONT FACE="Courier New">short s = </FONT><B><FONT FACE="Courier New">(short)</FONT></B><FONT FACE="Courier New">214748364;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">int i = 214748364;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">정상적으로 컴파일 된다. int형 변수의 i에 넣고자 값인 214748364가 int형의 표현 범위에 맞기 때문이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">long l = 214748364;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">정상적으로 컴파일 된다. long형 변수의 l에 넣고자 하는 값 214748364가 long형의 표현 범위에 맞기 때문이다. 위의 경우 보다 올바른 표기법은 숫자 뒤에 long형임을 나타내는 &quot;L&quot;을 붙여 주는 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">long l = 214748364</FONT><B><FONT FACE="Courier New">L</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">정수형은 8진수, 10진수, 16진수를 사용하여 입력할 수 있다. 10진수의 경우 앞에 0(Zero)이 아닌 숫자로 시작하여 표기하고 0∼9까지의 숫자를 사용한다. 8진수는 숫자 앞에 0을 붙이고, 0∼7까지의 숫자를 사용한다. 16진수는 16진수 숫자 앞에 0x 또는 0X를 붙이고, 숫자 표기를 위한 알파벳은 대/소문자를 구분하지 않는다. 16진수는 0∼9, A∼F까지의 숫자를 사용한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=613 HEIGHT=126>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">10진수</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">8진수</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">16진수</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 65</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 0101</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 0x41</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 0X41</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 97</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 0141</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=33%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 0x61</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int i = 0X61</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=241>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">정수형 변수의 연산</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">정수형 변수에 있어서 int형 보다 작은 자료형(byte, short)의 연산은  int형으로의 묵시적 형 변환이 일어난다. 다음의 예는 컴파일시 오류가 발생한다.</FONT>
<P>	<FONT FACE="바탕">short a, b, c;</FONT>
<P>	<FONT FACE="바탕">a = 1;</FONT>
<P>	<FONT FACE="바탕">b = 2;</FONT>
<P>	<FONT FACE="바탕">c = a + b;</FONT>	<FONT FACE="바탕">//Error</FONT>
<P><FONT FACE="바탕">위의 예에서는 변수 a와 b의 연산 결과를 다음과 같이 캐스팅(Casting)해 주어야 한다.</FONT>
<P>	<FONT FACE="바탕">c = (short)(a + b);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.3.2 </FONT><FONT FACE="바탕">실수형</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">실수형에는 2가지가 있는데, float, double 키워드를 사용하여 선언하며  IEEE754 표준을 따르는 근사값을 사용하여 표현된다. 실수형은 디폴트형이 double이므로 float형으로 지정하려면 숫자 뒤에 &quot;F&quot; 또는 &quot;f&quot;를 붙여준다. 또한 정확히 하기 위해 double형 뒤에 &quot;D&quot;또는 &quot;d&quot;를 붙여 주기도 하는데, 소수점 표현 방식인 10진수형 표현방식과, 과학 기술용 지수함수 표기법인 의사코드(Pseudo-scientific) 방식이 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=126>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">유형</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=56%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">범    위</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">초기값</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">float</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">4 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=56%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">&plusmn;(1.401e-45F ~ 3.402e+38F)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(7자리의 소수)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0.0F</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=14%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">double</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">8 byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=56%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">&plusmn;(4.940e-324 ~ 1.797e+308)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(15자리의 소수)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0.0D</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=175>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">RealExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class RealExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">float f = 1.1;</FONT>	<FONT FACE="Courier New">//Error</FONT>
<P>		<FONT FACE="Courier New">double d = 1.1;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">float f = 1.1;</FONT>	<FONT FACE="Courier New">//Error</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">컴파일 시 오류가 발생한다. 실수의 상수 표현형은 무조건 double형인데, float형 변수에 double형 값을 넣으려고 했기 때문에 발생한 것이다. 3번째 줄의 경우에 오류가 발생하지 않게 하려면 다음과 같이 숫자 뒤에 float형 숫자임을 명시해 주는 &quot;F&quot; 또는 &quot;f&quot;를 넣어야 한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">float f = 1.1</FONT><B><FONT FACE="Courier New">F</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.3.3 </FONT><FONT FACE="바탕">논리형</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">논리형 값에는 &quot;true&quot;와 &quot;false&quot; 두 가지 상태가 있는데 이를 boolean형이라고 한다. 정수형과 논리형은 서로 캐스팅 처리할 수 없으며, C언어에서는 숫자 값을 논리 값으로 해석하여, 0을 false로 다루고 0이 아닌 값은 true로 다루지만 자바에서는 허용되지 않는다. 
</FONT><BR>
<P><FONT FACE="바탕">다음은 boolean 변수 선언문과 대입문의 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BooleanExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class BooleanExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">boolean one = false;</FONT>
<P>		<FONT FACE="Courier New">boolean two = False;</FONT>		<FONT FACE="Courier New">//Error</FONT>
<P>		<FONT FACE="Courier New">boolean three = &quot;false&quot;;</FONT>	<FONT FACE="Courier New">//Error</FONT>
<P>		<FONT FACE="Courier New">boolean four = 1;</FONT>			<FONT FACE="Courier New">//Error</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">boolean one = false;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">올바른 대입문이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">boolean two = False;</FONT>		<FONT FACE="Courier New">//Error</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">잘못된 대입문이다. 리터럴(literal)은 모두 소문자여야 한다. False는 false와 엄연히 다른데, 대문자와 소문자를 확실히 구분하기 때문이다.</FONT>
<P> 
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P>		<FONT FACE="Courier New">boolean three = &quot;false&quot;;</FONT>	<FONT FACE="Courier New">//Error</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">잘못된 대입문이다. 6번째 줄은 &quot;false&quot;라는 문자열 값을 boolean형 변수에 대입하려고 하기 때문에 컴파일 오류가 발생한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">boolean four = 1;</FONT>			<FONT FACE="Courier New">//Error</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">잘못된 대입문이다. C언어에서는 가능하지만 자바에서는 boolean형 변수에는 오로지 true 또는 false 중 하나만 대입이 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 각 데이터 타입별 최소값과 최대값을 알아보기 위한 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=821>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DataTypeSize.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class DataTypeSize {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n byte type&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMin : &quot; + Byte.MIN_VALUE);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMax : &quot; + Byte.MAX_VALUE);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n short type&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMin : &quot; + Short.MIN_VALUE);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMax : &quot; + Short.MAX_VALUE);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n int type&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMin : &quot; + Integer.MIN_VALUE);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMax : &quot; + Integer.MAX_VALUE);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n long type&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMin : &quot; + Long.MIN_VALUE);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMax : &quot; + Long.MAX_VALUE);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n float type&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMin : &quot; + Float.MIN_VALUE);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMax : &quot; + Float.MAX_VALUE); 
</FONT><BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n double type&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMin : &quot; + Double.MIN_VALUE);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMax : &quot; + Double.MAX_VALUE);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n char type&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMin : &quot; + Character.MIN_VALUE);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\tMax : &quot; + Character.MAX_VALUE); 
</FONT><BR>
<P>		<FONT FACE="Courier New">System.out.println();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot; boolean : &quot; + Boolean.TRUE); </FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot; boolean : &quot; + Boolean.FALSE);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.1.3.4 </FONT><FONT FACE="바탕">문자</FONT><FONT FACE="HY울릉도M">(char)</FONT><FONT FACE="바탕">형</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">문자열</FONT><FONT FACE="HY울릉도M">(String)</FONT><FONT FACE="바탕">형</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">단일 문자는 char형으로 표현한다. char형은 0∼216의 범위 내에서 부호가 없는 16비트(2바이트) 숫자를 사용하여 유니 코드 문자를 표현한다. 리터럴 char형은 홑 따옴표(' ')안에 넣어야 한다.</FONT>
<P><FONT FACE="바탕">String형은 하나의 클래스이며, 일련의 문자열을 표현하는데 사용된다. 문자 자체는 유니 코드지만, char형으로 되어 있는 탈출시퀸스(escape sequence) 스타일도 String형에서 사용할 수 있다. String형은 겹 따옴표(&quot; &quot;)안에 넣는다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 문자 선언문과 대입문의 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TextualExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TextualExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">char one = 'A';</FONT>
<P>		<FONT FACE="Courier New">char two = '\t';</FONT>
<P>		<FONT FACE="Courier New">char three = '\u????';  //????</FONT><FONT FACE="바탕">대신</FONT><FONT FACE="Courier New"> 16</FONT><FONT FACE="바탕">진수</FONT><FONT FACE="Courier New"> 4</FONT><FONT FACE="바탕">자리</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력</FONT>
<P>		<FONT FACE="Courier New">String four = &quot;\u???? \u????&quot;;</FONT>
<P>		<FONT FACE="Courier New">String five = &quot;dream&quot;;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">char ont = 'A';</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">일반적인 아스키문자를 대입한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">char two = '\t';</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">탭과 같은 특수문자는 탈출시퀀스로 표현할 수 있다.</FONT>
<P><FONT FACE="바탕">다음은 탈출 시퀀스를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=558 HEIGHT=106>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\n</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">New Line(\u000A)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\f</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Form Feed(\u000C)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\t</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Tab(\u0009)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\\</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Backslash(\u005C)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\b</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Backspace(\u0008)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\'</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Single Quote(\u0027)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\r</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Return(\u000D)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=10%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">\&quot;</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Double Quote(\u0022)</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">char three = '\u????';</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">유니코드를 이용하여 문자를 나타낸 것이다. ???? 는 4개의 16진수 숫자로 표현된다. 예를 들어 '\u03A6'을 입력하면 
</FONT><TABLE BORDER=0 CELLPADDING=2 WIDTH=14 HEIGHT=20>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">phi  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE><FONT FACE="바탕">(phi)를 나타낸다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">String four = &quot;\u???? \u????&quot;;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">유니코드를 이용하여 연속된 문자열을 문자를 나타내는 것이다. ???? 는 4개의 16진수 숫자로 표현된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">String five = &quot;dream&quot;;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">일반적인 문자열의 할당문이다. char형이 아스키를 포함한 유니코드를 지원하는 16비트(2바이트) 크기를 차지하기 때문에 String에서도 각각의 문자는 영문자라 할 지라도 16비트(2바이트) 크기를 차지한다. String은 C나 C++과는 달리 끝에 null 문자('\0')가 포함되지 않는다. 그러므로 7번째 줄의 String값은 영문자 다섯 글자이지만 10바이트를 차지한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=168>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">유니코드(16비트-유니코드)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">• 공식적으로는 &quot;세계문자 표준 - 유니코드&quot;라고 불리며, 이 코드체계는 세계 각국의 다양한 언어로 작성된 문자에 대해 상호교환, 처리, 및 표현을 용이하게 하기 위한 시스템이다. 유니코드는 16비트로 표현되며, 현재 유니코드 표준은 24개 언어를 지원하기 위해 34,168개의 개별 코드문자를 담고 있는데, 이 문자는 세계 주요 언어로 작성된 문서를 모두 표현하기에 충분하며, 여러 가지 언어로 작성된 고문서(古文書)까지도 지원할 수 있다. </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.1.4 </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="HY부활M">(array)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">배열은 데이터형이 아닌 객체이기 때문에 C언어와 같이 배열에서 각각의 배열 요소를 포인터로 취급하여 연산할 수 없다. 이는 자바를 더욱 견고하고, 신뢰할 수 있는 코드를 만들 수 있도록 한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=418 HEIGHT=98>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I><FONT FACE="Courier New">type name</FONT></I><FONT FACE="Courier New">[];</FONT>
<P><I><FONT FACE="Courier New">name</FONT></I><FONT FACE="Courier New"> = new </FONT><I><FONT FACE="Courier New">type</FONT></I><FONT FACE="Courier New">[</FONT><I><FONT FACE="Courier New">array_size</FONT></I><FONT FACE="Courier New">];</FONT>
<P>  <FONT FACE="바탕">또는</FONT>
<P><I><FONT FACE="Courier New">type</FONT></I><FONT FACE="Courier New">[]</FONT><I><FONT FACE="Courier New"> name</FONT></I><FONT FACE="Courier New"> = new </FONT><I><FONT FACE="Courier New">type</FONT></I><FONT FACE="Courier New">[</FONT><I><FONT FACE="Courier New">array_size</FONT></I><FONT FACE="Courier New">];</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">자바에서는 배열도 일종의 자료형이기 때문에 대괄호(&quot;[]&quot;)가 배열 이름의 앞에 오는 것이 가능하다. 이후의 배열은 대괄호(&quot;[]&quot;)를 배열 이름 앞에 표기하기로 한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=418 HEIGHT=80>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I><FONT FACE="Courier New">type</FONT></I><B><FONT FACE="Courier New">[]</FONT></B><I><FONT FACE="Courier New"> name</FONT></I><FONT FACE="Courier New">;</FONT>
<P>  <FONT FACE="바탕">또는</FONT>
<P><I><FONT FACE="Courier New">type</FONT></I><B><FONT FACE="Courier New">[]</FONT></B><I><FONT FACE="Courier New"> name</FONT></I><FONT FACE="Courier New"> = new </FONT><I><FONT FACE="Courier New">type</FONT></I><FONT FACE="Courier New">[</FONT><I><FONT FACE="Courier New">array_size</FONT></I><FONT FACE="Courier New">];</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">배열은 기본 데이터형, 객체 참조형, 또는 다른 배열의 순차적인 집합체라고 할 수 있으며, 반드시 한 가지 형으로 지정해야 하며 이는 다른 언어에서도 마찬가지다. 즉 여러 데이터 형을 혼합하여 사용할 수 없다.</FONT>
<BR>
<P><FONT FACE="바탕">배열은 다음과 같이 선언, 생성, 초기화의 과정을 통하여 만들어진다.</FONT>
<BR>
<BR>
<P>  <FONT FACE="바탕">∘ 1 단계 : 선언</FONT>
<BR>
<P>    <FONT FACE="돋움">⋄ 데이터형이나 객체 참조형을 배열 변수를 지정함으로써 배열을 선언한다.</FONT>
<P>      
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=97>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int[] aa;</FONT>		<FONT FACE="Courier New">// int</FONT><FONT FACE="바탕">형으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언</FONT>
<P><FONT FACE="Courier New">int aa[];</FONT>		<FONT FACE="Courier New">// int[] aa; </FONT><FONT FACE="바탕">와</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">같다</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">float[] bb;</FONT>		<FONT FACE="Courier New">// float</FONT><FONT FACE="바탕">형으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언</FONT>
<P><FONT FACE="Courier New">Point[] cc;</FONT>		<FONT FACE="Courier New">// </FONT><FONT FACE="바탕">객체</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">참조형으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>    <FONT FACE="돋움">⋄ 선언시에는 배열의 크기를 명시할 수 없다.</FONT>
<P>      
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=34>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int[6] aa;</FONT>		<FONT FACE="Courier New">// </FONT><FONT FACE="바탕">선언시에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">크기를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">지정하면</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">컴파일</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">오류발생</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT FACE="바탕">∘ 2 단계 : 생성</FONT>
<BR>
<P>    <FONT FACE="돋움">⋄ 생성은 new 키워드를 이용, 배열의 크기를 명시하여 지정된 크기만큼의 배열을 메모리에 생성시킨다. 배열의 생성과정은 런타임(runtime) 시에 일어난다.</FONT>
<P>      
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int[] aa;</FONT>		<FONT FACE="Courier New">// int</FONT><FONT FACE="바탕">형으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언</FONT>
<P><FONT FACE="Courier New">aa = new int[10];</FONT>	<FONT FACE="Courier New">// </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변수에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">크기를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">명시하여</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">객체</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>      <FONT FACE="바탕">위의 배열 aa의 경우 aa[0] ∼ aa[9]까지 모두 10개의 공간을 생성한다.</FONT>
<BR>
<P>    <FONT FACE="돋움">⋄ 배열의 생성 과정은 선언과정과 함께 긴 줄로 지정이 가능하다. 위의 문장은 다음과 같이 표현 할 수 있다.</FONT>
<P>      
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=34>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int[] aa = new int[10];</FONT>	<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">선언과</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">동시</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>    <FONT FACE="돋움">⋄ 다차원 배열의 경우 배열을 생성할 때 주의해야 한다.</FONT>
<P>      
<TABLE BORDER=0 CELLPADDING=2 WIDTH=611 HEIGHT=82>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="바탕">올바른</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">예</FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int[][] aa;</FONT>		<FONT FACE="Courier New">// int[] </FONT><FONT FACE="바탕">배열형에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">크기가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">명시되어</FONT><FONT FACE="Courier New"> </FONT>
<P><FONT FACE="Courier New">aa = new int[10][];</FONT>	<FONT FACE="Courier New">// </FONT><FONT FACE="바탕">있으므로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">컴파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">잘</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">된다</FONT><FONT FACE="Courier New">.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>      
<TABLE BORDER=0 CELLPADDING=2 WIDTH=611 HEIGHT=82>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="바탕">잘못된</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">예</FONT><FONT FACE="HY타자B"> - </FONT><FONT FACE="바탕">컴파일</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">오류</FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int[][] aa;</FONT>		<FONT FACE="Courier New">// int[10] </FONT><FONT FACE="바탕">배열형에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">크기가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">명시되어</FONT>
<P><FONT FACE="Courier New">aa = new int[][10];</FONT>	<FONT FACE="Courier New">// </FONT><FONT FACE="바탕">있지</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">않으므로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">인스턴스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">안</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">된다</FONT><FONT FACE="Courier New">.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT FACE="바탕">∘ 3 단계 : 초기화</FONT>
<BR>
<P>    <FONT FACE="돋움">⋄ 배열의 초기화 과정은 배열의 생성과 동시에 자동으로 일어난다. 다음 표는 각 배열의 초기화 값을 나타내고 있다.</FONT>
<BR>
<P>      
<TABLE BORDER=0 CELLPADDING=2 WIDTH=404 HEIGHT=288>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">배열 변수형</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">초기 값</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">short</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">long</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0L</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">float</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0.0F</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">double</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">0.0D</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">boolean</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">false</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">char</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">'\u0000'</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=48%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">object reference</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=51%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">null</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>    <FONT FACE="돋움">⋄ 사용자가 직접 배열을 초기화시킬 수 도 있다. 사용자가 초기화 작업을 하면 배열의 선언, 생성, 초기화 과정을 한 줄로 지정할 수 있다. 다차원 배열의 경우 같은 단위의 값끼리 중괄호 &quot;{&quot;와 &quot;}&quot;로 묶어주면 된다.</FONT>
<P>      
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=75>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int[] aa = {10, 20, 30, 40, 50}</FONT>	<FONT FACE="Courier New">// 1</FONT><FONT FACE="바탕">차원</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New">(</FONT><FONT FACE="바탕">크기</FONT><FONT FACE="Courier New"> 5)</FONT>
<P><FONT FACE="Courier New">float[][] bb = { {0.5f, 1.3f, 1.8f}, {2.3, 3.6, 5.2} };</FONT>
<P>		<FONT FACE="Courier New">// 2</FONT><FONT FACE="바탕">차원</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New">(2</FONT><FONT FACE="바탕">행</FONT><FONT FACE="Courier New"> 3</FONT><FONT FACE="바탕">열</FONT><FONT FACE="Courier New">)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 배열 사용 예를 나타낸 것이다.</FONT>
<P>  
<TABLE BORDER=0 CELLPADDING=2 WIDTH=756 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PrimitiveArrayExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class PrimitiveArrayExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">char[] s;</FONT>	<FONT FACE="Courier New">//Primivive</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">char[5] s2;</FONT>	<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">오류</FONT><FONT FACE="Courier New"> - </FONT><FONT FACE="바탕">선언시</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">크기</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">명시</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">못함</FONT>
<BR>
<P>		<FONT FACE="Courier New">s = new char[5];</FONT>	<FONT FACE="Courier New">//Primivive</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성</FONT>
<P>		<FONT FACE="Courier New">s[0] = 'A';</FONT>	<FONT FACE="Courier New">//Primitive</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">후</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">바로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">할당</FONT>
<P>		<FONT FACE="Courier New">s[1] = 'B';</FONT>
<P>		<FONT FACE="Courier New">s[2] = 'C';</FONT>
<P>		<FONT FACE="Courier New">s[3] = 'D';</FONT>
<P>		<FONT FACE="Courier New">s[4] = 'E';</FONT>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;s.length; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.print(&quot;\t&quot; + s[i]);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV035.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV036.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">A       B       C       D       E</FONT></B>
<BR>
<P><FONT FACE="바탕">다음은 Reference 타입 배열 사용 예를 보이고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ReferenceArrayExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ReferenceArrayExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">java.awt.Point[] p;</FONT>	<FONT FACE="Courier New">//Reference</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">java.awt.Point[5] p2; //</FONT><FONT FACE="바탕">오류발생</FONT><FONT FACE="Courier New"> - </FONT><FONT FACE="바탕">선언시</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">크기</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">명시</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">못함</FONT>
<BR>
<P>		<FONT FACE="Courier New">p = new java.awt.Point[5];</FONT>	<FONT FACE="Courier New">//Reference</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성</FONT>
<P>		<FONT FACE="Courier New">p[0] = new java.awt.Point(0, 1);</FONT>
<P>		<FONT FACE="Courier New">p[1] = new java.awt.Point(7, 6);</FONT>
<P>		<FONT FACE="Courier New">p[2] = new java.awt.Point(9, 6);</FONT>
<P>		<FONT FACE="Courier New">p[3] = new java.awt.Point(0, 8);</FONT>
<P>		<FONT FACE="Courier New">p[4] = new java.awt.Point(2, 3);</FONT>
<P>		<FONT FACE="Courier New">//Reference</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">배열은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">후</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">객체를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성하여</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">할당</FONT>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;p.length; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(p[i]);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV037.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV038.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>	
<P>		<B><FONT FACE="Courier New">java.awt.Point[x=0,y=1]</FONT></B>
<P>		<B><FONT FACE="Courier New">java.awt.Point[x=7,y=6]</FONT></B>
<P>		<B><FONT FACE="Courier New">java.awt.Point[x=9,y=6]</FONT></B>
<P>		<B><FONT FACE="Courier New">java.awt.Point[x=0,y=8]</FONT></B>
<P>		<B><FONT FACE="Courier New">java.awt.Point[x=2,y=3]</FONT></B>
<BR>
<P><FONT FACE="바탕">다음은 두 개 이상의 배열이 같은 배열 요소를 참조하고 있는 예를 보인 것이다. 8번째 줄에서는 배열 array2에 array1의 reference를 갖게 한 다음 array2의 0번째 배열 값과 2번째 배열 값을 각각 0과 2로 바꾸었다. 그런 다음 array2를 출력하는 것이 아니고 array1을 다시 출력하였을 때 결과를 보면 array1의 배열 내용도 바뀐 것을 알 수 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ArrayReferExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ArrayReferExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int[] array1 = { 2, 3, 5, 7, 11, 13, 17, 19 };</FONT>
<P>		<FONT FACE="Courier New">int[] array2;</FONT>
<BR>
<P>		<FONT FACE="Courier New">printArray(array1);</FONT>
<P>		<FONT FACE="Courier New">array2 = array1;</FONT>
<P>		<FONT FACE="Courier New">array2[0] = 0;</FONT>
<P>		<FONT FACE="Courier New">array2[2] = 2;</FONT>
<P>		<FONT FACE="Courier New">printArray(array1);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void printArray(int[] array) {</FONT>
<P>		<FONT FACE="Courier New">System.out.print('&lt;');</FONT>
<P>		<FONT FACE="Courier New">for ( int i=0; i&lt;array.length; i++ ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.print(array[i]);</FONT>
<P>			<FONT FACE="Courier New">if( i+1 &lt; array.length) {</FONT>
<P>				<FONT FACE="Courier New">System.out.print(&quot; , &quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.out.println('&gt;');</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV039.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV040.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B>&lt;<FONT FACE="Courier New">2 , 3 , 5 , 7 , 11 , 13 , 17 , 19&gt;</FONT></B>
<P>		<B>&lt;<FONT FACE="Courier New">0 , 3 , 2 , 7 , 11 , 13 , 17 , 19&gt;</FONT></B>
<BR>
<P><FONT FACE="바탕">다음은 배열 요소를 복사하는 예를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ArrayCopyExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ArrayCopyExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>	<FONT FACE="Courier New">int source[] = { 1, 2, 3, 4, 5, 6 };</FONT>
<P>	<FONT FACE="Courier New">int destin[] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };</FONT>
<P>	<FONT FACE="Courier New">System.arraycopy(source, 0, destin, 0, source.length);</FONT>
<BR>
<P>	<FONT FACE="Courier New">for( int i=0; i&lt;destin.length; i++)</FONT>
<P>		<FONT FACE="Courier New">System.out.print(destin[i] + &quot;\t&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV041.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV042.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">1    2    3    4    5    6    3    2    1    0</FONT></B>
<BR>
<P>  
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=458>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">배열에서 사용할 수 있는 유용한 내용</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">배열의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">길이를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">알</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> .length</FONT></SPAN></FONT>
<P><FONT FACE="바탕">배열 이름 뒤에 .length를 붙이면 배열의 크기를 얻을 수 있다. .length()처럼 뒤에 괄호가 붙으면 안된다. 예를 들어 위의 2차원 배열 크기를 알고 싶을 때는 bb.length라고 하면된다. 물론 화면에 그 크기를 출력하려면 다음과 같이한다.</FONT>
<P>	<FONT FACE="바탕">System.out.println(bb.length);</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">배열값을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">복사하는</FONT><FONT FACE="Courier New"> System.arraycopy()</FONT></SPAN></FONT>
<P><FONT FACE="바탕">배열내용을 복사해 주는 메소드가 System 클래스 내에 static변수로 선언되어 있다. 메소드 선언은 다음과 같다.</FONT>
<P>	<FONT FACE="바탕">arraycopy(Object src, int src_position, </FONT>
<P>		<FONT FACE="바탕">Object dst, int dst_position, int length)</FONT>
<P><FONT FACE="바탕">다음의 예를 보자</FONT>
<P>	<FONT FACE="바탕">int[] source = { 1, 2, 3, 4, 5, 6 };</FONT>
<P>	<FONT FACE="바탕">int[] destin = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };</FONT>
<P>	<FONT FACE="바탕">System.arraycopy(source, 0, destin, 3, 4);</FONT>
<P><FONT FACE="바탕">이와 같이하면  source 배열의 0번째 이후 원소 4개를 destin 배열의 3번째 이후 원소에 복사하라는 뜻이다. 이후의 destin 배열값은 { 9, 8, 7, 1, 2, 3, 4, 2, 1, 0 }이 된다.   </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>  
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=376>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">System.out.println();</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">도스 창에 문자열을 출력하고 줄을 바꾸는 기능을 한다. 나중에 알겠지만 여기에서 System은 클래스 이름이고, out은 변수 이름, 그리고 println은 메소드 이름을 나타낸다. println() 메소드는 PrintStream 클래스에 선언되어 있는 메소드로서 System 클래스의 out 변수타입이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">특정문자열을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">출력하려면</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">출력할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문자열을</FONT><FONT FACE="Courier New"> &quot; &quot;</FONT><FONT FACE="바탕">로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">감싸준다</FONT><FONT FACE="Courier New">. </FONT></SPAN></FONT>
<P>	<FONT FACE="바탕">System.out.println(&quot;Hello. Java&quot;);</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">변수값을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">출력하려면</FONT><FONT FACE="Courier New"> &quot; &quot;</FONT><FONT FACE="바탕">로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">감싸지</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">않고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변수로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표기해준다</FONT><FONT FACE="Courier New">.</FONT></SPAN></FONT>
<P>	<FONT FACE="바탕">int x = 10;</FONT>
<P>	<FONT FACE="바탕">System.out.println(x);</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">특정</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문자열과</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변수값을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">동시에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">출력하려면</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">둘</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사이를</FONT><FONT FACE="Courier New"> +(plus)</FONT><FONT FACE="바탕">로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">연결해준다</FONT><FONT FACE="Courier New">. </FONT></SPAN></FONT>
<P>	<FONT FACE="바탕">int x = 10;</FONT>
<P>	<FONT FACE="바탕">System.out.println(&quot;x의 값은 : &quot; + x + &quot;입니다&quot;);</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">도스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">창으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문자열을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">출력하고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">줄을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">바꾸는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">기능을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하지</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">않으려면</FONT><FONT FACE="Courier New"> System.out.print()</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한다</FONT><FONT FACE="Courier New">. </FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.1.5 </FONT><FONT FACE="바탕">변수와</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">초기화</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">프로그램을 작성할 때 가장 많이 사용하는 것이 변수일 것이다. 자바에는 3가지 범위의 변수가 있는데, 변수가 있는 위치에 따라서 지역변수(Local variable)와 멤버변수(Member variable), 그리고 선언되는 형식에 의한 전역변수(Global variable)로 나눌 수 있다.</FONT>
<BR>
<P>  <FONT FACE="바탕">∘ 지역변수</FONT>
<P>    <FONT FACE="돋움">지역변수는 메소드 안에 선언된 변수를 말하며 사용자가 직접 초기화를 해주어야 한다. 지역변수를 선언하고 초기화를 하지 않으면 오류가 발생한다. 지역변수는 local 대신에 automatic, temporary 또는 stack이라고도 부른다.</FONT>
<BR>
<P><FONT FACE="바탕">지역변수의 생성 시점은 해당 메소드가 수행 될 때이며, 메소드 수행이 끝나면 변수는 메모리에서 없어진다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=165>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">LocalVariableExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class LocalVariableExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int a;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(a); //Error</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(a);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">2번째 줄에서 선언만 하고 초기화를 하지 않았으므로 컴파일시에 오류가 발생한다. 지역변수를 선언과 동시에 초기화 할 필요는 없으나 사용하기 전에는 반드시 초기화를 해 주어야 한다.</FONT>
<BR>
<P>  <FONT FACE="바탕">∘ 멤버변수</FONT>
<P>    <FONT FACE="돋움">멤버변수는 클래스 안에 선언된 변수를 말하며, 사용자가 초기화시키지 않아도 시스템에 의해서 자동으로 초기화된다. 하지만 프로그램의 정확성을 위해 직접 초기화하는 습관이 필요하다. 멤버변수가 자동으로 초기화될 때 초기값은 배열에서의 예와 같다. 멤버변수를 참조하기 위해 static으로 선언되어있지 않을 경우에는 객체를 생성한 후 참조해야 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MemberVariableExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MemberVariableExample {</FONT>
<P>	<FONT FACE="Courier New">int a;</FONT>
<P>	<FONT FACE="Courier New">static int b;</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(a); //Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(b);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">int a;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">멤버변수는 초기값을 지정하지 않아도 자동으로 초기화된다. 일반 멤버변수의 경우 클래스의 생성자가 실행되기 직전에 초기화가 이루어진다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">static int b;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">멤버변수 중에서 static은 객체가 동일 데이터 공간을 참조하여 공유변수가 된다. 따라서, 변수나 메소드를 static으로 선언하면 객체를 생성하지 않고도 접근이 가능하다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(a); //Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(b);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : 오류가 발생하는데, 멤버변수의 경우 static으로 선언하지 않고 static으로 선언된 메소드 안에서 참조할 때는 반드시 객체를 생성한 후 참조해야한다. 
</FONT><P><FONT FACE="바탕">6 : 3번째 줄에서 선언된 변수 b가 static으로 선언되었기 때문에 바로 참조할 수 있다. 2번째 줄 2에서 선언된 변수 a를 참조하기 위해 5번째 줄을 다음과 같이 객체를 생성한 후 사용하여야 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">MemberVariableExample me;</FONT>
<P>		<FONT FACE="Courier New">me = new MemberVariableExample();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(me.b);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV043.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">2.2   </FONT><FONT FACE="바탕">연산자</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">연산자는 변수의 값을 변경하거나 대입하는데 사용된다. 일반적인 연산과는 달리 연산자에 따라 연산 대상이 될 수 있는 데이터형이 정해져 있다. 예를 들면, 조건 연산자의 경우 논리형만을 사용할 수 있고, 비트 연산자인 경우에는 정수형만 사용할 수 있다.</FONT>
<P><FONT FACE="바탕">범위를 벗어나는 연산 즉, 오버플로(overflow) 또는 언더플로(underflow)에 대해서는 오류가 나지 않고, 단지 연산 결과에 불필요한 값이 저장된다. 예를 들어 바이트형인 경우 127에 1을 더하면 128이 아니고 -127이 된다. 연산에서 오류가 발생하는 경우는 나눗셈이나 나머지 연산의 경우 분모가 0(Zero)이 될 때이다. 
</FONT><P><FONT FACE="바탕">다음은 자바에서 사용하는 연산자와 이들의 우선 순위를 나타낸 것이다. 우선 순위란 두개 이상의 연산이 결합된 복합연산의 경우 실행순서를 말하는 것으로, 다음 표에서는 위의 것일수록 우선 순위가 높은 것을 나타낸다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=624 HEIGHT=559>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">우선 순위</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">연산자</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">연산자 설명</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=10 WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">높음▅</FONT></SPAN></FONT>
<BR>
<BR>
<BR>
<BR>
<BR>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">우</FONT></SPAN></FONT>
<BR>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">선</FONT></SPAN></FONT>
<BR>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">순</FONT></SPAN></FONT>
<BR>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">위</FONT></SPAN></FONT>
<BR>
<BR>
<BR>
<BR>
<BR>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">낮음▇</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">( )  [ ]</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">.</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">괄호</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">소수점/참조 연산자</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">++, --</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">+, -</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">!</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">~</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(type)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">증/감 연산자(증가, 감소)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">부호</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">논리 연산자(반전)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">비트 연산자(반전)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">형 변환</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">*, /, %</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">산술 연산자(곱셈, 나눗셈, 나머지)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">+, -</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">산술 연산자(덧셈, 뺄셈)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&lt;&lt;<FONT FACE="바탕">, &gt;&gt;, &gt;&gt;&gt;</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">비트 이동 연산자</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(좌, 우, 우(부호 포함))</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&lt;<FONT FACE="바탕">, &lt;=, &gt;, &gt;=</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">==, !=</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">instanceof</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">비교 연산자(대/소 비교)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">비교 연산자(동/이 비교)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">type 연산자(객체 형 비교)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&amp;<FONT FACE="바탕">, |, ^</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">비트 연산자(AND, OR, XOR)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">논리 연산자(AND, OR, XOR)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&amp;&amp;<FONT FACE="바탕">, ||</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">논리 연산자(Short Circuit)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">?:</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">논리연산자(3항 연산자)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">=</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">+=, -+, *=, /=, %=</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&lt;&lt;<FONT FACE="바탕">=, &gt;&gt;=, &gt;&gt;&gt;=</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&amp;<FONT FACE="바탕">=, ^=, |=</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=47%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">대입 연산자</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">연산 후 대입 연산자</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">연산 후 대입 연산자</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">연산 후 대입 연산자</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.2.1 </FONT><FONT FACE="바탕">단항연산자</FONT><FONT FACE="HY부활M">(Unary operator)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">단항연산자는 피 연산자가 하나인 연산자를 말한다. 단항연산자는 변수의 앞이나 뒤에 붙어서 변수 값을 하나 증가시키거나 감소시킬 때 사용하는 증가/감소 연산자와 양수와 음수를 나타내는 부호 연산자, 비트의 값을 바꾸어주는 비트 반전 연산자, 논리 대수의 값을 반전시켜주는 논리 반전 연산자, 그리고 형을 바꾸어주는 캐스트 연산자가 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.1.1 </FONT><FONT FACE="바탕">증가</FONT><FONT FACE="HY울릉도M">/</FONT><FONT FACE="바탕">감소</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Increment and Decrement operaotor) : ++, --</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">++</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">증가 연산자(값 1 증가)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">--</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">감소 연산자(값 1 감소)</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이 연산자는 변수의 앞이나 뒤에 붙어서 사용되는데, 연산자가 변수의 앞에 붙을 때는 변수 값이 증가 또는 감소 후 사용되고, 연산자가 변수의 뒤에 붙을 때에는 변수의 값이 사용된 후에 변수의 값이 증가 또는 감소한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 증가/감소 연산자의 사용 예를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">UnaryOperator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class UnaryOperator {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int i=1, j=0;</FONT>
<P>		<FONT FACE="Courier New">j = i++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">후위</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;i</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> &quot; + i);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;j</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> &quot; + j);</FONT>
<BR>
<P>		<FONT FACE="Courier New">int x=1, y=0;</FONT>
<P>		<FONT FACE="Courier New">y = ++x;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n</FONT><FONT FACE="바탕">전위</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;x</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> &quot; + x);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;y</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> &quot; + y);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV044.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV045.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">후위</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">연산자</FONT></B>
<P>		<B><FONT FACE="Courier New">i</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> 2</FONT></B>
<P>		<B><FONT FACE="Courier New">j</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> 1</FONT></B>
<P>		<B><FONT FACE="바탕">전위</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">연산자</FONT></B>
<P>		<B><FONT FACE="Courier New">x</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> 2</FONT></B>
<P>		<B><FONT FACE="Courier New">y</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> 2</FONT></B>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">int i=1, j=0;</FONT>
<P>		<FONT FACE="Courier New">j = i++;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">증가/감소 연산자가 변수의 뒤에 왔으므로 변수 j에는 변수 i의 처음 값인 1이 입력된다. 그 후 i값이 증가하여 i값은 2가 된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">int x=1, y=0;</FONT>
<P>		<FONT FACE="Courier New">y = ++x;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">증가/감소 연산자가 변수의 앞에 온 경우이다. 이 경우에는 변수 y에 값이 대입 되기 전에 x 값이 증가된다. 그러므로 x 값이 증가되어 2가 되고, 그 증가된 값이 대입 되므로 y는 2가 된다.</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.1.2 </FONT><FONT FACE="바탕">부호</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M"> : +, -</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 연산자는 피 연산자의 앞에 위치하여 양수인지 음수인지를 지정한다. +를 생략하면 기본 지정은 양수이다. 2항 연산자의 산술 연산을 하는 +, -와는 다르다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">+</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">양수 표현</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">-</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">음수 표현</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.1.3 </FONT><FONT FACE="바탕">비트</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">반전</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">과</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">논리</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">반전</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M"> : ~, !</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">먼저 비트 연산자인 ~는 피연산자의 앞에 사용되어 피연산자를 2진수로 바꾼 다음 2진수의 각 비트를 0은 1로, 1은 0으로 모두 반전시킨다. 그리고 !는 논리 대수를 반전시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">~</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">2진수의 각 비트(0, 1)을 반전</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">!</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">논리 값(true, false)을 반전</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.1.4 </FONT><FONT FACE="바탕">캐스트</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M"> : (type)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">캐스트 연산자는 괄호안에 바꾸고자 하는 데이터형을 지정함으로써 해당 데이터의 형으로 변환시키는 연산을 수행한다. 형변환을 수행하기 위해서는 변수나 값 앞에 새로운 자료형을 다음과 같이 지정한다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=26>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(type)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">데이터형을 강제로 바꿈</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CastOperator1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class CastOperator1 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">byte a = 100;</FONT>
<P>		<FONT FACE="Courier New">int  b = a; //Promotion</FONT>
<BR>
<P>		<FONT FACE="Courier New">byte c = </FONT><B><FONT FACE="Courier New">(byte)</FONT></B><FONT FACE="Courier New">b; //Type Casting</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">크기가 작은 데이터형을 크기가 큰 데이터형으로 변환할 때는 캐스트 연산자를 지정하지 않아도 컴파일러에 의해 자동으로 수행(묵시적 형 변환 : Promotion)이 가능하지만, 크기가 큰 데이터형을 크기가 작은 데이터형으로 변환할 때에는 반드시 캐스트 연산자를 사용하여 변환될 데이터형을 명시(명시적 형 변환 : Type Casting)해야 한다. 그렇지 않으면 컴파일시 오류가 발생한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CastOperator2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class CastOperator2 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int  a = 1522;</FONT>
<P>		<FONT FACE="Courier New">byte b = (byte)a; //Type Casting</FONT>
<P>		<FONT FACE="Courier New">System.out.println( b ); //-14 </FONT><FONT FACE="바탕">출력됨</FONT>
<BR>
<P>		<FONT FACE="Courier New">double d = 3.6;</FONT>
<P>		<FONT FACE="Courier New">a = (int)d;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( a ); //3 </FONT><FONT FACE="바탕">출력됨</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV046.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV047.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">-14</FONT></B>
<P>		<B><FONT FACE="Courier New">3</FONT></B>
<BR>
<P><FONT FACE="바탕">형 변환시 크기가 작은 자료형에서 큰 자료형으로 변환할 때는 값이 손실되지 않지만, 크기자 작은 자료형에서 큰 자료형으로 변환할 때는 윗 부분(high order bit)이 잘려나가 값이 손실된다. 예를 들어 int값 5를 byte형으로 형 변환할 때 값의 손실이 발행하지 않지만, 256을 byte형으로 형 변환하면 범위를 벗어나므로 엉뚱한 값이 저장된다. 또 정수 자료형은 실수 자료형으로 형 변환이 가능하지만, 부동 소수점을 정수로 변환할 때는 소수점 첫째 자리에서 버림을 한다. 즉 1.5를 정수로 변환하면 1이 되고, -1.5를 정수로 변환하면 -1이 된다.</FONT>
<P>  
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=336>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">High order bit</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">2진수를 표현했을 때 왼쪽 부분을 상위 비트(high order bit), 오른쪽 부분을 하위 비트(low order bit)라 한다. 정수 5와 256을 byte형으로 형 변환하였을 경우</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• 5</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> int</FONT><FONT FACE="바탕">형으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표현하면</FONT></SPAN></FONT>
<P>	<FONT FACE="바탕">00000000 00000000 00000000 00000101 이 된다</FONT>
<P><FONT FACE="바탕">여기서 byte형으로 형 변환하면 왼쪽 상위 비트 중 24비트가 잘려 나가는데, 이 경우 byte형으로 변환한 후에도 </FONT>
<P>	<FONT FACE="바탕">00000101 이 되어서 그대로 5의 값을 갖게 된다.</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• 256</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> int</FONT><FONT FACE="바탕">형으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표현하면</FONT></SPAN></FONT>
<P>	<FONT FACE="바탕">00000000 00000000 00000001 00000000 이 된다</FONT>
<P><FONT FACE="바탕">여기서 byte형으로 형 변환하면 왼쪽 상위 비트 중 24비트가 잘려 나가게 되는데, byte형으로 변환한 후에는 </FONT>
<P>	<FONT FACE="바탕">00000000 이 되어서 전혀 다른 0의 값을 갖게 된다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.2 2</FONT><FONT FACE="바탕">항</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Binary operator)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">2항 연산자는 피 연산자(operand)가 두 개인 연산자를 말한다. 연산자가 int형(4바이트) 보다 작은 크기의 데이터형일 경우 boolean형을 제외하고는 모두 int형으로 변환되어 연산을 수행한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.2.1 </FONT><FONT FACE="바탕">산술</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Arithmetic operator) : +, -, *, /, %</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=132>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">+</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">덧셈</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">-</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">뺄셈</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">*</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">곱셈</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">/</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">나눗셈</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">%</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">나머지 연산(결과는 항상 정수)</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">덧셈, 뺄셈, 곱셈, 나눗셈은 수학에서의 연산과 동일하고, 나머지 연산자는 피젯수를 젯수로 나눈 나머지 값을 구하는 연산이다. 나머지 연산의 실제 계산은 피젯수에서 젯수를 계속 빼서 피젯수의 값이 젯수의 값보다 작아질 때의 피젯수의 값이 최종적으로 나머지 연산의 값이 된다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int a = 7;</FONT>
<P><FONT FACE="Courier New">int b = a % 3;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">7을 3으로 나눈 나머지 값인 1이 된다.</FONT>
<BR>
<P><FONT FACE="바탕">원칙적으로 연산자 중복은 허용되지 않지만 +연산의 경우는 예외라고 할 수 있다. 덧셈 연산에서 String 객체의 경우 문자열을 연결하는 집합 연산자로 사용되는데, 이때 연산의 방향은 왼쪽에서 오른쪽으로 진행된다. 예를 들면 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">OperatorOverloading.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class OperatorOverloading {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">String s1 = &quot;Sun&quot;;</FONT>
<P>		<FONT FACE="Courier New">String s2 = &quot;day&quot;;</FONT>
<P>		<FONT FACE="Courier New">int a = 20;</FONT>
<P>		<FONT FACE="Courier New">int b = 30;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(s1 + s2);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(s1 + a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(a + b + s1 + s2);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(s1 + s2 + a + b);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV048.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV049.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Sunday</FONT></B>
<P>		<B><FONT FACE="Courier New">Sun20</FONT></B>
<P>		<B><FONT FACE="Courier New">50Sunday</FONT></B>
<P>		<B><FONT FACE="Courier New">Sunday2030</FONT></B>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(s1 + s2);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">s1의 문자열인 &quot;Sun&quot;과 s2의 문자열인 &quot;day&quot;를 연결하여 출력한다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(s1 + a);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">문자열과 숫자를 + 연산하려고 한다. 문자열과 숫자의 +연산이 있을 경우 숫자가 문자열로 변하게 된다. 그러므로 a의 값 20은 숫자가 아닌 문자 20이 되고 출력 결과는 Sun20이 출력된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(a + b + s1 + s2);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">결과가 50Sunday라고 출력되는데, 이유는 같은 우선 순위를 가진 연산자가 있을 때는 연산순서가 왼쪽에서 오른쪽으로 진행되기 때문에 먼저 정수 a 값 20과 b 값 30이 먼저 계산되어 50이 되고, 그 다음 문자열과 더해진다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(s1 + s2 + a + b);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">9번째 줄과는 반대로 문자열이 먼저 더해지므로 결과는 Sunday2030이 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.2.2 </FONT><FONT FACE="바탕">비교</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Comparison operator) : &lt;, &lt;=, &gt;, &gt;=, ==, !=</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=525 HEIGHT=186>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a &lt; b</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">b가 a보다 크면 true</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a &lt;= b</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">b가 a보다 크거나 같으면 true</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a &gt; b</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a가 b보다 크면 true</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a &gt;= b</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a가 b보다 크거나 같으면 true</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a == b</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a와 b가 같으면 true(조건문에서 유용)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a != b</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">a와 b가 같지 않으면 true</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">instanceof</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=75%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">왼쪽이 오른쪽 클래스의 인스턴스일 경우 true</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">비교 연산자의 결과 값은 크기 값을 비교하여 조건을 만족하면 true를, 맞지 않으면 false를 반환한다. 만약 비교되는 숫자의 자료형이 다를 경우 기본적으로 크기가 큰 자료형에 맞추어 비교 연산을 수행한다.</FONT>
<P><FONT FACE="바탕">동등(equality) 연산자 '=='와 비동등(inequality) 연산자 '=='는 객체 참조 즉, 주소 값이 같은 지의 여부를 판단하여 true와 false를 반환한다. 객체 참조가 아닌 실제 값을 비교 판단하기 위해서는 equals 메소드를 이용해야 한다.</FONT>
<P><FONT FACE="바탕">instanceof 연산자의 경우 런타임 시에 연산자의 왼쪽 항의 객체가 오른쪽 항 클래스의 인스턴스이면 true를 반환하고, 그렇지 않으면 false를 반환한다. 이 연산자를 이해하려면 클래스 개념이 있어야 하므로 여기서는 종류만을 이해하고 3장에서 자세히 설명하기로 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.2.3 </FONT><FONT FACE="바탕">비트</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Bit operator) : &amp;, |, ^</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">비트 연산자는 두 수를 각각 2진수로 변환하여 두 수의 각 비트를 AND, OR, XOR 연산을 수행한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=361 HEIGHT=79>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&amp;</SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">AND</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">|</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">OR</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">^</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">XOR</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">비트 연산자는 특정 비트를 0또는 1로 바꾸기 위한 마스크비트로 많이 사용된다. 
</FONT><BR>
<P><FONT FACE="바탕">다음은 비트 연산자 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BitOperator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class BitOperator {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">byte a = 5; //00000101</FONT>
<P>		<FONT FACE="Courier New">byte b = 3; //00000011</FONT>
<P>		<FONT FACE="Courier New">System.out.println( a &amp; b ); //00000001</FONT>
<P>		<FONT FACE="Courier New">System.out.println( a | b ); //00000111</FONT>
<P>		<FONT FACE="Courier New">System.out.println( a ^ b ); //00000110</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV050.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV051.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">1</FONT></B>
<P>		<B><FONT FACE="Courier New">7</FONT></B>
<P>		<B><FONT FACE="Courier New">6</FONT></B>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.2.4 </FONT><FONT FACE="바탕">비트</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">이동연산자</FONT><FONT FACE="HY울릉도M">(Bit shift operator) : &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">비트 이동 연산자는 피젯수를 2진수로 변환하여 젯수만큼 비트를 좌, 우로 이동시키는 연산을 수행한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=361 HEIGHT=79>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&lt;&lt;</SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">왼쪽으로 비트 이동</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;&gt;</SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">오른쪽으로 비트 이동</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;&gt;&gt;</SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">오른쪽으로 비트 이동(비부호형)</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>'&lt;&lt;'<FONT FACE="바탕">는 2진수의 비트를 좌측으로 젯수의 수만큼 이동시키고, 오른쪽의 최하위 비트(LSB)에 0을 채운다. 이때 부호 비트는 변화가 없다. 이는 실제로 
</FONT><TABLE BORDER=0 CELLPADDING=2 WIDTH=46 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">2^피젯수  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE><FONT FACE="바탕">만큼 곱한 결과를 나타낸다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int a = 192;</FONT>
<P><FONT FACE="Courier New">int b = a &lt;&lt; 3;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">192를 2진수로 변환하면 00000000 00000000 00000000 11000000이 된다. 이 수를 왼쪽으로 3비트 이동시키면 00000000 00000000 00000110 00000000이 되어 192에 
</FONT><TABLE BORDER=0 CELLPADDING=2 WIDTH=19 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">2^3  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE><FONT FACE="바탕">를 곱한 1536이 된다.</FONT>
<BR>
<P>'&gt;&gt;'<FONT FACE="바탕">는 2진수 비트를 오른쪽으로 젯수의 수만큼 이동시키고, 부호 비트에는 변화를 주지 않으며, 왼쪽의 최상위 비트(MSB)에 부호 비트의 수가 채워진다. 이는 실제로 
</FONT><TABLE BORDER=0 CELLPADDING=2 WIDTH=46 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">2^피젯수  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE><FONT FACE="바탕">만큼 나눈 결과를 나타낸다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=611 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="Courier New">int a = 192;</FONT>
<P><FONT FACE="Courier New">int b = a &gt;&gt; 3;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">192를 2진수로 변환하면 00000000 00000000 00000000 11000000이 된다. 이 수를 오른쪽으로 3비트 이동시키면 00000000 00000000 00000000 00011000이 되어 192를 
</FONT><TABLE BORDER=0 CELLPADDING=2 WIDTH=19 HEIGHT=22>
<TD VALIGN=BOTTOM WIDTH=100%>
<P><FONT FACE="바탕">2^3  </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE><FONT FACE="바탕">으로 나눈 24가 된다.</FONT>
<BR>
<P>'&gt;&gt;&gt;'<FONT FACE="바탕">는 부호 없는 이동 연산자로고도 불리며, '&gt;&gt;'연산과 같지만, 최상위(MSB)비트에 부호 비트의 수가 채워지는 것이 아니고 무조건 0이 채워진다. 양수인 경우 나눗셈의 결과를 가져오지만 뺄셈의 경우는 전혀 다른 양수가 된다.</FONT>
<BR>
<P><FONT FACE="바탕">비트 이동 연산자는 오른쪽 항 즉 젯수에서 단축이 일어난다. 단축이란 비트 이동 연산자의 젯수 값이 자료형의 크기 이상일 때 젯수의 숫자를 자료형의 크기로 나눈 나머지를 젯수로 한다는 뜻이다. 예를 들면 int형의 경우 젯수의 수가 33이면 33비트만큼 이동하는 게 아니고 33을 32로 나눈 나머지인 1만큼 이동한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 쉬프트 연산자 예를 보이고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=195>
<TD VALIGN=MIDDLE WIDTH=8%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=91%>
<P><FONT FACE="HY타자B">ShiftOperator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=8%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=91%>
<P><FONT FACE="Courier New">public class ShiftOperator {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int a = 192;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;a(192)\t&quot; + toBinaryString(a));</FONT>
<P>		
<P>		<FONT FACE="Courier New">int b = a &lt;&lt; 3;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;a&lt;&lt;3\t&quot; + toBinaryString(b));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=8%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=91%>
<P><FONT FACE="HY타자B">ShiftOperator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=8%>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=91%>
<BR>
<P>		<FONT FACE="Courier New">int c = a &gt;&gt; 3;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;a&lt;&lt;3\t&quot; + toBinaryString(c));</FONT>
<BR>
<P>		<FONT FACE="Courier New">a = -192;</FONT>
<P>		<FONT FACE="Courier New">c = a &gt;&gt;&gt; 3;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;a(-192)\t&quot; + toBinaryString(a));</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;a&gt;&gt;&gt;3\t&quot; + toBinaryString(c));</FONT>
<BR>
<P>		<FONT FACE="Courier New">c = a &gt;&gt;&gt; 35;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;a&gt;&gt;&gt;35\t&quot; + toBinaryString(c));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">private static String toBinaryString(int num) {</FONT>
<P>		<FONT FACE="Courier New">String s = Long.toBinaryString( num | 0xFFFFFFFF00000000L );</FONT>
<P>		<FONT FACE="Courier New">return s.substring(32);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV052.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV053.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">a(192)  00000000000000000000000011000000</FONT></B>
<P>		<B><FONT FACE="Courier New">a&lt;&lt;3    00000000000000000000011000000000</FONT></B>
<P>		<B><FONT FACE="Courier New">a&lt;&lt;3    00000000000000000000000000011000</FONT></B>
<P>		<B><FONT FACE="Courier New">a(-192) 11111111111111111111111101000000</FONT></B>
<P>		<B><FONT FACE="Courier New">a&gt;&gt;&gt;3   00011111111111111111111111101000</FONT></B>
<P>		<B><FONT FACE="Courier New">a&gt;&gt;&gt;35  00011111111111111111111111101000</FONT></B>
<BR>
<P><FONT FACE="바탕">이 예에서 10진수를 2진수로 출력하기 위해 Integer클래스의 toBinaryString() 메소드를 직접 사용할 수 있으나 그럴 경우에는 2진수의 앞부분 0이 출력되지 않으므로 임의로 toBinaryString() 메소드를 만든 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.2.5 </FONT><FONT FACE="바탕">논리</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Logical operator) : &amp;, ^, |, &amp;&amp;, ||</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=361 HEIGHT=132>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&amp;</SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">AND</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">|</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">OR</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">^</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">XOR</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&amp;&amp;</SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">AND(short circuit)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">||</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=76%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">OR(short circuit)</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>&amp;<FONT FACE="바탕">, |, ^는 비트 연산자로 사용되지만 true와 false를 통해 논리 연산을 수행하는 논리 연산자로도 사용되며 &amp;, |, ^ 연산자의 경우는 양쪽 항 모두 수행하지만 &amp;&amp;, || 연산자는 short circuit operator라고 하여 오른쪽 항을 수행하지 않을 수 도 있다.</FONT>
<P>'&amp;&amp;'<FONT FACE="바탕"> 연산자는 AND연산을 수행하여 양쪽 항이 모두 true일 때만 true를 반환한다. 만일 왼쪽이 false일 때는 오른쪽을 수행하지 않고 무조건 false를 반환한다.</FONT>
<P>'<FONT FACE="바탕">||' 연산자는 OR연산을 수행하여 양쪽 중 한쪽만 만족해도 true를 반환한다. 만일 왼쪽이 true이면 오른쪽을 수행하지 않고 무조건 true를 반환해도 결과는 같다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 논리 연산자 중에서 &amp;, | 연산자와 &amp;&amp;, ||연산자의 차이점을 예를 든 것인데, y 값은 증가해도 b 값은 증가하지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=435>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">LogicalOperator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class LogicalOperator {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">int x=10, y=20;</FONT>
<P>		<FONT FACE="Courier New">if ((x != 10) </FONT><B>&amp;</B><FONT FACE="Courier New"> (++y == 21))</FONT>
<P>			<FONT FACE="Courier New">System.out.println(x + &quot; &quot; + y);</FONT>
<BR>
<P>		<FONT FACE="Courier New">if ((x == 10) </FONT><B><FONT FACE="Courier New">|</FONT></B><FONT FACE="Courier New"> (++y == 21))</FONT>
<P>			<FONT FACE="Courier New">System.out.println(x + &quot; &quot; + y);</FONT>
<BR>
<P>		<FONT FACE="Courier New">int a=10, b=20;</FONT>
<P>		<FONT FACE="Courier New">if ((a != 10) </FONT><B>&amp;&amp;</B><FONT FACE="Courier New"> (++b == 21))</FONT>
<P>			<FONT FACE="Courier New">System.out.println(a + &quot; &quot; + b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">if ((a == 10) </FONT><B><FONT FACE="Courier New">||</FONT></B><FONT FACE="Courier New"> (++a == 21))</FONT>
<P>			<FONT FACE="Courier New">System.out.println(a + &quot; &quot; + b);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV054.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV055.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">10 22</FONT></B>
<P>		<B><FONT FACE="Courier New">10 20</FONT></B>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.3 3</FONT><FONT FACE="바탕">항</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Ternary operator)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">피 연산자가 세 개인 연산자를 말하며, 조건 연산자인 ?: 가 있다.</FONT>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.2.3.1 </FONT><FONT FACE="바탕">조건</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY울릉도M">(Conditional operator) : ? :</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">조건 연산자 사용법은 다음과 같다.</FONT>
<P>	<FONT FACE="바탕">a = x ? b : c;</FONT>
<P><FONT FACE="바탕">x는 boolean형 조건 연산식으로 연산을 수행하여 x의 결과가 true이면 변수 a에 b 값이 대입되고, x의 결과가 false이면 a에 c 값이 대입된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 조건 연산자를 이용하여 절대값을 구하는 식으로 실행시에 인자를 필요로 한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ConditionalOperator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ConditionalOperator {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int a = Integer.parseInt(args[0]);</FONT>
<BR>
<P>		<FONT FACE="Courier New">int abs = (a &gt;= 0) </FONT><B><FONT FACE="Courier New">?</FONT></B><FONT FACE="Courier New"> a </FONT><B><FONT FACE="Courier New">:</FONT></B><FONT FACE="Courier New"> -a;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(a + &quot;</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">절대값은</FONT><FONT FACE="Courier New"> : &quot; + abs);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV056.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV057.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT><FONT FACE="Courier New">    (</FONT><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> : java ConditionalOperator -64)</FONT></B>
<P>		<B><FONT FACE="Courier New">-64</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">절대값은</FONT><FONT FACE="Courier New"> : 64</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.2.4 </FONT><FONT FACE="바탕">대입</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">연산자</FONT><FONT FACE="HY부활M">(Assignment operator)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">대입 연산자의 기본 기호는 '='이고, 보다 발전된 대입 연산자는 x operand = a의 형태를 가지고 있으며 이는 x = x operand a 와 같은 역할을 한다.</FONT>
<P><FONT FACE="바탕">대입 연산자에는 =, +=, -+, *=, /=, %=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=, &amp;=, ^=, |= 등이 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AssignmentOperator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class AssignmentOperator {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int a=5;</FONT>
<P>		<FONT FACE="Courier New">int b=5;</FONT>
<P>		<FONT FACE="Courier New">a += 3; //a = a + 3;</FONT>
<P>		<FONT FACE="Courier New">b =+ 3; //b = +3;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(a + &quot;\t&quot; + b);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV058.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV059.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">8       5</FONT></B>
<BR>
<P><FONT FACE="바탕">주의할 점은 복합대입연산자의 경우에는 '=' 기호가 연산자 뒤에 나온다는 것이다. 위의 예에서 6번째 줄에서처럼 '='을 앞에 두면 컴파일 오류가 발생하지 않더라도 원치 않는 결과 값을 갖게 될 수 있다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV060.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">2.3   </FONT><FONT FACE="바탕">제어구조</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">제어문은 특정한 조건에 따라서 실행문을 선택하는 분기문과 특정한 실행문을 반복하는 반복문으로 나누어진다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.3.1 </FONT><FONT FACE="바탕">분기문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">분기문은 조건에 맞는 실행문 만을 선택하여 실행함으로써 프로그램의 흐름을 바꾸는데 사용되며, 종류에는 if문과 switch문으로 나뉘어진다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.1.1 if </FONT><FONT FACE="바탕">∼</FONT><FONT FACE="HY울릉도M"> else </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">if문은 프로그램의 흐름을 바꾸는데 사용되는 조건 선택 분기문이다.</FONT>
<BR>
<P><FONT FACE="바탕">기본적인 if문의 사용 방법은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=92>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">)</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">1;</FONT>
<P><FONT FACE="Courier New">else</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">2;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">if문의 조건식 결과는 반드시 boolean형이어야 하므로 결과는 true 아니면 false가 된다. 따라서, 조건식이 참이면 문장1이 실행되고 거짓일 경우에는 문장2가 실행된다.</FONT>
<BR>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 if∼else 문의 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IfExample1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class IfExample1 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int jumsu = Integer.parseInt(args[0]);</FONT>
<P>		<FONT FACE="Courier New">if( jumsu &gt;= 60 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;60</FONT><FONT FACE="바탕">이상인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">else</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;60</FONT><FONT FACE="바탕">보다</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">작은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV061.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV062.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT></B>
<P>
<IMG SRC="FYXIV063.GIF" BORDER=0 ALIGN=LEFT>		<B><FONT FACE="Courier New">java IfExample1 79</FONT></B>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">60</FONT><FONT FACE="바탕">이상인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.</FONT></B>
<BR>
<P><FONT FACE="바탕">수행할 문장이 복문이면 중괄호 &quot;{}&quot;로 묶어준다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=203>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">1;</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">2;</FONT>
<P>	<FONT FACE="바탕">…</FONT>
<P><FONT FACE="바탕">} </FONT><FONT FACE="Courier New">else {</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">3;</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">4;</FONT>
<P>	<FONT FACE="바탕">…</FONT>
<P><FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 예는 if~else에 복문이 사용된 예를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=279>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IfExample2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class IfExample2 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int jumsu = Integer.parseInt(args[0]);</FONT>
<P>		<FONT FACE="Courier New">if( jumsu &gt;= 60 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;60</FONT><FONT FACE="바탕">이상인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">합격</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하셨습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">else {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;60</FONT><FONT FACE="바탕">보다</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">작은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">불합격</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하셨습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV064.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV065.GIF" BORDER=0 ALIGN=LEFT>
<P>
<IMG SRC="FYXIV066.GIF" BORDER=0 ALIGN=LEFT>		<B><FONT FACE="Courier New">java IfExample2 75</FONT></B>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">60</FONT><FONT FACE="바탕">이상인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.</FONT></B>
<P>		<B><FONT FACE="바탕">합격</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하셨습니다</FONT><FONT FACE="Courier New">.</FONT></B>
<BR>
<P><FONT FACE="바탕">조건식의 결과가 거짓일 때 실행할 문장이 없으면 else문 이하를 생략(단독 if문)할 수도 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=48>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">)</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">1;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 else문 없이 if문 단독으로 사용되는 예를 나타낸 것으로 8번째 줄은 if문과 관계없이 항상 실행된다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=9%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=90%>
<P><FONT FACE="HY타자B">IfExample3.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=9%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=90%>
<P><FONT FACE="Courier New">public class IfExample3 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int jumsu = Integer.parseInt(args[0]);</FONT>
<P>		<FONT FACE="Courier New">if( jumsu &gt;= 60 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;60</FONT><FONT FACE="바탕">이상인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">합격</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하셨습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">수고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하셨습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<IMG SRC="FYXIV067.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV068.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT></B>
<P>
<IMG SRC="FYXIV069.GIF" BORDER=0 ALIGN=LEFT>		<B><FONT FACE="Courier New">java IfExample3 75</FONT></B>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">60</FONT><FONT FACE="바탕">이상인</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT></B>
<P>		<B><FONT FACE="바탕">합격</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하셨습니다</FONT><FONT FACE="Courier New">.</FONT></B>
<P>		<B><FONT FACE="바탕">수고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하셨습니다</FONT><FONT FACE="Courier New">.</FONT></B>
<BR>
<P><FONT FACE="바탕">if문은 전체가 논리적으로 하나의 실행문이기 때문에 else 다음에 다시 if문이 올 수 있는데 이를 복합 if문이라고 한다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=198>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT><FONT FACE="Courier New"> 1</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">1;</FONT>
<P><FONT FACE="Courier New">} else if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT><FONT FACE="Courier New"> 2</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">2;</FONT>
<P><FONT FACE="Courier New">} else if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT><FONT FACE="Courier New"> 3</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">3;</FONT>
<P><FONT FACE="Courier New">} else {</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">4;</FONT>
<P><FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">다음은 else if문을 이용하여 여러 개의 조건식을 검사하는 예이다. 입력한 점수에 따라서 해당하는 학점이 출력된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=9%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=90%>
<P><FONT FACE="HY타자B">IfExample4.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=9%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=90%>
<P><FONT FACE="Courier New">public class IfExample4 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int jumsu = Integer.parseInt(args[0]);</FONT>
<P>		<FONT FACE="Courier New">if( jumsu &gt;= 90 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> A</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if( jumsu &gt;= 80 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> B</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if( jumsu &gt;= 70 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> C</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if( jumsu &gt;= 60 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> D</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> F</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">재수강</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대상자입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV070.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV071.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT></B>
<P>
<IMG SRC="FYXIV072.GIF" BORDER=0 ALIGN=LEFT>		<B><FONT FACE="Courier New">java IfExample4 85</FONT></B>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> B</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.</FONT></B>
<BR>
<P><FONT FACE="바탕">if문 내에 또 다른 조건식을 포함시킬 수도 있다. 이와 같은 중첩된 if문의 경우 외부의 if∼else문장과 내부의 if∼else문장이 서로 겹쳐서는 안 된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=196>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT><FONT FACE="Courier New"> 1</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="Courier New">if (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT><FONT FACE="Courier New"> 1-2</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>		<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">1-1;</FONT>
<P>	<FONT FACE="Courier New">} else {</FONT>
<P>		<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">1-2;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">} else {</FONT>
<P>	<FONT FACE="바탕">문장</FONT><FONT FACE="Courier New">2;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 복합 if문의 예를 보인 것으로 4번째 줄에 있는 외부 if문의 조건식이 참일 때에만 5번째 줄의 내부 if문이 실행된다. 만약 입력점수가 100점을 초과하면 점수가 잘못 입력된 것으로 간주하고 메시지를 출력한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=463>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IfExample5.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class IfExample5 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int jumsu = Integer.parseInt(args[0]);</FONT>
<P>		<B><FONT FACE="Courier New">if( jumsu &gt;= 90 ) {</FONT></B>
<P>			<B><FONT FACE="Courier New">if( jumsu &gt; 100 ) {</FONT></B>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">잘못</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력된</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<B><FONT FACE="Courier New">}</FONT></B><FONT FACE="Courier New">else {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> A</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<B><FONT FACE="Courier New">}</FONT></B><FONT FACE="Courier New">else if( jumsu &gt;= 80 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> B</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if( jumsu &gt;= 70 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> C</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if( jumsu &gt;= 60 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> D</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> F</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">재수강</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대상자입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV073.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT></B>
<P>		<B><FONT FACE="Courier New">java IfExample5 120</FONT></B>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">잘못</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력된</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">점수입니다</FONT><FONT FACE="Courier New">.</FONT></B>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=391>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">인자(argument) 값이 있는 프로그램의 실행</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">인자의 수에는 제한이 없지만, 프로그램에서 처리가 되는 인자만큼을 넣어 주어야 한다.</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">인자값을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">경우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">컴파일</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">명령문에는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변함이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">없고</FONT><FONT FACE="Courier New">, </FONT><FONT FACE="바탕">실행은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">클래스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">파일의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">뒤에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">공백을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">띄우고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">기록한다</FONT><FONT FACE="Courier New">. </FONT><FONT FACE="바탕">첫</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">번째</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">인자는</FONT><FONT FACE="Courier New"> args[0]</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">저장되고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">다음</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">인자</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값은</FONT><FONT FACE="Courier New"> args[1]</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">저장된다</FONT><FONT FACE="Courier New">. </FONT><FONT FACE="바탕">위의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">프로그램을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">컴파일하고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행시키려면</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">다음과</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">같이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">한다</FONT><FONT FACE="Courier New">.</FONT></SPAN></FONT>
<BR>
<P>   <FONT FACE="바탕">컴파일 &gt; javac IfExample.java</FONT>
<P>   <FONT FACE="바탕">실 행 &gt; java IfExample 3000</FONT>
<P>   <FONT FACE="바탕">결 과 &gt; 버스</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• Kawa</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용하여</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">인자값이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">프로그램을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행시키는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방법은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">다음과</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">같다</FONT><FONT FACE="Courier New">.</FONT></SPAN></FONT>
<P>   <FONT FACE="바탕">먼저 새로운 Project를 만든 후 소스코드를 작성한다.</FONT>
<P>   <FONT FACE="바탕">메뉴에서 Project -&gt; Interpreter Option을 선택</FONT>
<P><FONT FACE="바탕">Command Line Argument 체크 옵션은 선택하고 &quot;&gt;&gt;&quot; 버튼을 눌러 인자 값을 공백으로 구분하여 넣어준다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.1.2 switch </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">복합 if문은 구현하기가 복잡하고 프로그램의 효율성이 감소되는 단점이 있가 때문에 다중 분지 문제를 해결할 때는 switch 문을 사용한다. switch문은 다중 분지이므로 복합 if문의 논리적인 구조를 간결하게 표현할 수 있다. C언어에서는 switch이지만 파스칼이나 델파이에서는 명칭이 case이다. 
</FONT><BR>
<P><FONT FACE="바탕">switch문은 int형 변수의 값에 따라 다중 조건을 판단하여 선택적으로 실행문을 실행할 수 있도록 해주는 분기문이다. if문과는 달리 조건식이 사용되지 않고, 값을 가지는 변수가 판단 조건으로 사용되며, 연산결과의 기본형은 int형이다. 조건식의 위치에는 int형으로 Promotion 즉, 묵시적 캐스팅이 될 수 있는 형의 변수를 사용해야 한다. switch문의 조건식은 결과 값이 int 형, byte 형, short 형, char 형이 올 수 있으며, 그 외에 boolean 형, float 형, long 형, object reference 형 등은 올 수가 없다. case문 뒤에 사용되는 값(레이블)은 변수를 사용할 수 없고, 반드시 상수를 사용해야 한다. 또, 각각의 case문은 여러 개의 실행문을 기술할 수 있는데, case와 값 사이는 반드시 공백으로 구분을 해 주어야 하며, 중괄호&quot;{ }&quot;는 사용되지 않는다. 해당 case문이 실행된 이후에는 바로 아래에 위치한 실행문으로 흐름이 넘어가기 때문에, 해당 case의 실행문만 실행하고 switch문을 종료하기 위해서는 break문을 사용해야 한다. default문은 조건을 만족하는 경우가 없을 때에 실행되는 문장을 기술한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=358>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">switch (</FONT><I><FONT FACE="Courier New">int</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="Courier New">case </FONT><I><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">1</FONT></I><FONT FACE="Courier New">:</FONT>
<P>		<FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New"> 1;</FONT>
<P>		<FONT FACE="Courier New">break;</FONT>
<P>	<FONT FACE="Courier New">case </FONT><I><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">2</FONT></I><FONT FACE="Courier New">:</FONT>
<P>		<FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New"> 2;</FONT>
<P>		<FONT FACE="Courier New">break;</FONT>
<BR>
<P>		<FONT FACE="Courier New">......</FONT>
<BR>
<P>	<FONT FACE="Courier New">case </FONT><I><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">N</FONT></I><FONT FACE="Courier New">:</FONT>
<P>		<FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New"> N;</FONT>
<P>		<FONT FACE="Courier New">break;</FONT>
<P>	<FONT FACE="Courier New">default:</FONT>
<P>		<FONT FACE="Courier New">default </FONT><FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New">;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 switch문의 예를 보여주고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SwitchExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class SwitchExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">int jumsu = Integer.parseInt(args[0]);</FONT>
<P>		<B><FONT FACE="Courier New">switch( jumsu / 10 ) {</FONT></B>
<P>			<B><FONT FACE="Courier New">case 9 :</FONT></B><FONT FACE="Courier New"> </FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> A</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<B><FONT FACE="Courier New">break;</FONT></B>
<P>			<FONT FACE="Courier New">case 8 :</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> B</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 7 : </FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> C</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 6 : </FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> D</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<B><FONT FACE="Courier New">default :</FONT></B>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> F</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">당신은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">재수강</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대상자입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>		<B><FONT FACE="Courier New">}</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV074.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV075.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT></B>
<P>
<IMG SRC="FYXIV076.GIF" BORDER=0 ALIGN=LEFT>		<B><FONT FACE="Courier New">java SwitchExample5 90</FONT></B>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">당신의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">학점은</FONT><FONT FACE="Courier New"> A</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.</FONT></B>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 사칙연산을 하기 위한 switch문의 예를 보여주고 있다. switch문의 조건식 결과가 char형일 때에는 다음과 같이 ' '로 묶어 준다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SwitchCalculator.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class SwitchCalculator {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">int i ;</FONT>
<P>		<FONT FACE="Courier New">int first, second;</FONT>
<P>		<FONT FACE="Courier New">first = Integer.parseInt(args[0]);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SwitchCalculator.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">second =  Integer.parseInt(args[2]);</FONT>
<P>		<FONT FACE="Courier New">switch(args[1].charAt(0)){</FONT>
<P>			<FONT FACE="Courier New">case '+' : </FONT>
<P>				<FONT FACE="Courier New">System.out.println(first + second);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 'x' :</FONT>
<P>				<FONT FACE="Courier New">System.out.println(first * second);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case '/' : </FONT>
<P>				<FONT FACE="Courier New">System.out.println(first / second);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case '-' :</FONT>
<P>				<FONT FACE="Courier New">System.out.println(first - second);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">default :</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">잘못된</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">연산식입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV077.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV078.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT></B>
<P>
<IMG SRC="FYXIV079.GIF" BORDER=0 ALIGN=LEFT>		<B><FONT FACE="Courier New">java SwitchCalculator 20 + 30</FONT></B>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">50</FONT></B>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">switch(args[1].charAt(0)) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">switch문의 charAt() 메소드는 특정 문자열에서 원하는 위치의 문자만을 원할 때 사용한다. args[1].charAt(0)은 두 번째 인자(첫 번째 인자는 args[0]) 값에서 첫 번째 문자 하나를 의미한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">case 'x' :</FONT>
<P>				<FONT FACE="Courier New">System.out.println(first * second);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">11 : case문의 'x'를 '*'로 바꾸면 안될 수도 있다. 이유는 곱셈에 해당하는 연산자는 * 일지라도 도스모드에서 *를 사용하면 운영체제에서 사용되는 메타문자(* 는 임의의 문자열, ? 는 한 문자)로 인식하기 때문이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.3.2 </FONT><FONT FACE="바탕">반복문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">반복문은 하나 이상의 실행문을 특정 조건이 만족하는 한 반복해서 실행하는 문장이다. 반복문의 종류에는 while문, do∼while문, for문이 있다. 이러한 반복문을 사용하면 프로그램의 코드 크기를 효율적으로 줄일 수 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.2.1 while </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<P>  
<P><FONT FACE="바탕">while문은 조건식을 만족하는 동안 반복문을 실행하는데, 조건식을 검사해서 조건식이 참이면 실행문을 반복하고, 거짓이면 while문을 빠져 나온다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">while (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New">;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">while문의 조건식도 if문과 마찬가지로 반드시 boolean형으로 결과를 반환해야 한다. 자바는 C언어에서처럼 0(Zero)은 false, 0이 아니면 true인 semi-boolean형의 개념이 없으며, 조건 부분에는 반드시 boolean형의 결과가 true 또는 false값을 갖는다. 실행문이 한 줄이면 단문이므로 당연히 중괄호 &quot;{ }&quot;는 사용할 필요가 없다.</FONT>
<P><FONT FACE="바탕">while문은 먼저 조건 부분을 검사하여 결과가 진이면 실행한다. 실행문이 한번 실행되면 다시 조건 부분으로 되돌아와 반복해서 조건을 검사하고 그 결과가 true이면 실행하고, false이면 while문을 빠져 나와 다음 문장으로 넘어간다. 따라서, while문 내의 실행문에는 조건식에 사용되는 변수 등을 조정해 주는 문장이 있어야 while문을 빠져나올 수 있으며, 그렇지 않으면 무한루프에 빠지게 된다. 만약 while문에서 조건 부분의 결과가 처음부터 false가 판명되면 while문 내의 실행문은 실행되지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 1부터 10까지 더한 결과를 while문을 이용하여 출력하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=280>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WhileExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class WhileExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">int i = 1;</FONT>
<P>		<FONT FACE="Courier New">int sum = 0;</FONT>
<P>		<FONT FACE="Courier New">while(i &lt;= 10) {</FONT>
<P>			<FONT FACE="Courier New">sum = sum + i;</FONT>
<P>			<FONT FACE="Courier New">i++;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">합은</FONT><FONT FACE="Courier New">:&quot; + sum);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.2.2 do </FONT><FONT FACE="바탕">∼</FONT><FONT FACE="HY울릉도M"> while </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">do∼while문은 while문과 유사한데, 먼저 while문은 조건식을 먼저 검사하고 실행문이 반복되기 때문에 처음 실행 조건이 false이면 한번도 실행되지 않는다. 반면에 do∼while문은 실행된 후 조건식을 검사하므로 조건식의 결과가 true이건 false이건 무조건 한번은 실행이 된다. 실행문이 한 줄이면 단문이므로 중괄호  &quot;{ }&quot; 를 생략할 수 있다. while문은 파스칼의 while∼do와 비슷하고 do∼while은 repeat∼until과 유사하다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">do {</FONT>
<P>	<FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New">;</FONT>
<P><FONT FACE="Courier New">} while (</FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 do ∼ while 문을 이용하여 1부터 10까지의 합을 구하는 프로그램이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=280>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DoWhileExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class DoWhileExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">int i = 1;</FONT>
<P>		<FONT FACE="Courier New">int sum = 0;</FONT>
<P>		<FONT FACE="Courier New">do{</FONT>
<P>			<FONT FACE="Courier New">sum = sum + i;</FONT>
<P>			<FONT FACE="Courier New">i++;</FONT>
<P>		<FONT FACE="Courier New">}while(i &lt;= 10); </FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">합은</FONT><FONT FACE="Courier New">:&quot; + sum);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.2.3 for </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">for문은 제어 조건을 한꺼번에 지정한다는 점이 다른 반복문과는 다르다. 따라서, 정확한 반복횟수를 알고있을 때는 for문이 가장 유용하다. for문의 경우에도 실행문이 한 줄이면 단문이므로 중괄호 &quot;{ }&quot;를 생략할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">for(</FONT><I><FONT FACE="바탕">초기값</FONT></I><FONT FACE="Courier New"> ; </FONT><I><FONT FACE="Courier New">boolean</FONT><FONT FACE="바탕">형</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New"> ; </FONT><I><FONT FACE="바탕">증감값</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="바탕">실행문</FONT><FONT FACE="Courier New">;</FONT>
<P><FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">for문의 각 구성 요소는 생략할 수도 있으며, 각각을 설명하면 다음과 같다.</FONT>
<BR>
<P><FONT FACE="바탕">- 초기값 : for문이 시작되기 전에 실행되며 변수에 대한 초기화를 해줄 수 있다. 또 콤마를 사용하여 여러 개의 변수를 다중으로 적용할 수도 있지만 선언은 한번만 가능하다.</FONT>
<P><FONT FACE="바탕">- boolean형 조건식 : 조건식의 결과는 true나 false가 되어야 하며, false면 루프의 실행문은 한번도 실행되지 않는다.</FONT>
<P><FONT FACE="바탕">- 증감값 : 반복되는 변수의 값을 증.감 시킨다. 증.감값도 초기값에서 처럼 콤마를 사용하여 여러 개의 변수에 다중으로 증.감값을 적용할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 for문을 이용하여 1부터 10까지의 합을 구하는 프로그램이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=236>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ForExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ForExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">int sum = 0;</FONT>
<P>		<FONT FACE="Courier New">for (int i=0; i&lt;=10; i++) {</FONT>
<P>			<FONT FACE="Courier New">sum = sum + i;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">합은</FONT><FONT FACE="Courier New">:&quot; + sum);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">for문을 중첩해서 다중 for문으로 사용하면 2차원 이상의 배열을 다루는데 유용하게 사용할 수 있다. 유의할 점은 루프의 몸체가 서로 겹치지 않도록 해야한다. 다중 for문에서 루프가 겹쳐졌을 때 문법적 오류가 발생하지 않아도 논리적인 오류를 발생시킬 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 다중 for문을 이용하여 구구단을 출력하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=258>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MultiForExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MultiForExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">for (int i=1; i&lt;=9; i++) {</FONT>
<P>			<FONT FACE="Courier New">for (int j=2; j&lt;=9; j++) {</FONT>
<P>				<FONT FACE="Courier New">System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + i*j + '\t');</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">System.out.println();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">다음은 다중 for문을 이용하여 1부터 100사이의 소수(prime number)를 출력하는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PrimeNumber.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class PrimeNumber {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;======= Prime Number =======&quot;);</FONT>
<P>		<FONT FACE="Courier New">int cnt;</FONT>
<P>		<FONT FACE="Courier New">for (int i=1; i&lt;=100; i++) {</FONT>
<P>			<FONT FACE="Courier New">cnt = 0;</FONT>
<P>			<FONT FACE="Courier New">for (int j=1; j&lt;=i; j++) {</FONT>
<P>				<FONT FACE="Courier New">if(i%j == 0) {</FONT>
<P>					<FONT FACE="Courier New">cnt++;</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">if(cnt == 2) {</FONT>
<P>				<FONT FACE="Courier New">System.out.print(i + &quot; &quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">2.3.3 </FONT><FONT FACE="바탕">분기문</FONT><FONT FACE="HY부활M">(Jump statement)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">분기문은 프로그램의 실행 순서를 지정된 곳으로 이동시키는 것으로 반복문에서 빠져 나올 때 사용한다. 분기문에는 break문과 continue문 그리고 return 문이 있다. goto문은 리터럴에는 포함되어 있으나 사용하지 않는다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.3.1 break </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">break문은 반복문 내의 어떤 곳이든지 위치할 수 있으며, 처리 도중에 break 문을 만나면 반복문을 곧바로 빠져 나온다. 특히 다중 반복문일 경우 break 문을 만나면 그 break 문이 속한 반복문만 빠져나오게 된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=31>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">break [</FONT><I><FONT FACE="Courier New">label</FONT></I><FONT FACE="Courier New">];</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 break 문을 사용한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=258>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BreakExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class BreakExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">for (int i=0; i&lt;10; i++) {</FONT>
<P>			<FONT FACE="Courier New">if (i==5) {</FONT>
<P>				<B><FONT FACE="Courier New">break;</FONT></B>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">System.out.println(i);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위 프로그램에서 break문을 만나면 for문을 빠져나와 for문 바로 다음 문장을 실행하게 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.3.2 continue </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">continue문 또한 반복문 내의 어떤 곳이든지 위치할 수 있으며 continue문을 만나면 반복문의 맨 처음으로 제어가 이동한다. 따라서, 이 문의 뒷부분은 실행되지 않게된다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=31>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">continue [</FONT><I><FONT FACE="Courier New">label</FONT></I><FONT FACE="Courier New">];</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 continue 문을 사용한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ContinueExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ContinueExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">for (int i=0; i&lt;10; i++) {</FONT>
<P>			<FONT FACE="Courier New">if (i==5) {</FONT>
<P>				<B><FONT FACE="Courier New">continue;</FONT></B>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">System.out.println(i);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">위 프로그램에서 continue문을 만나면 아래의 출력문을 실행하지 않고 반복문의 처음으로 가서 계속 수행한다.</FONT>
<P><FONT FACE="바탕">continue문이나 break문을 둘러싸고 있는 루프가 둘 이상일 때는 레이블이 유용하게 사용될 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=404 HEIGHT=114>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><I><FONT FACE="Courier New">label</FONT></I><FONT FACE="Courier New"> : </FONT><FONT FACE="바탕">반복문</FONT><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="바탕">반복문</FONT><FONT FACE="Courier New"> {</FONT>
<P>			<FONT FACE="Courier New">continue </FONT><I><FONT FACE="Courier New">label</FONT></I><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="바탕">}</FONT>
<P>	<FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 label문이 사용된 예를 보여주고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ContinueExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class LabelExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<B><FONT FACE="Courier New">outer :</FONT></B><FONT FACE="Courier New"> </FONT>
<P>		<FONT FACE="Courier New">for (int i=0; i&lt;3; i++) {</FONT>
<P>			<FONT FACE="Courier New">for (int j=0; j&lt;3; j++) {</FONT>
<P>				<FONT FACE="Courier New">if (j==2) {</FONT>
<P>					<B><FONT FACE="Courier New">break outer;</FONT></B>
<P>				<FONT FACE="Courier New">}</FONT>
<P>				<FONT FACE="Courier New">System.out.println(i + &quot;\t&quot; + j);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">2.3.3.3 return </FONT><FONT FACE="바탕">문</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">return문은 메소드의 실행을 끝내고 호출된 메소드로 제어를 넘기는 문장이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=31>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">return [</FONT><I><FONT FACE="바탕">표현식</FONT><FONT FACE="Courier New"> or </FONT><FONT FACE="바탕">변수</FONT></I><FONT FACE="Courier New">];</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">return문만 사용될 때에는 호출한 메소드로 제어만 넘어가지만 return문 뒤의 식과 함께 사용되면 식의 값과 제어가 함께 넘어간다. 즉, return문은 호출한 함수에게 결과 값을 넘겨주는 역할을 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=274>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ReturnExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ReturnExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int a = 20;</FONT>
<P>		<FONT FACE="Courier New">int b = 30;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">넓이는</FONT><FONT FACE="Courier New"> : &quot; + </FONT><B><FONT FACE="Courier New">calcRect(a, b)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static </FONT><B><FONT FACE="Courier New">int</FONT></B><FONT FACE="Courier New"> calcRect(int width, int height) {</FONT>
<P>		<B><FONT FACE="Courier New">return (width * height);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV080.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV081.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">넓이는</FONT><FONT FACE="Courier New"> : 600</FONT></B>
<BR>
<BR>
<P>
<IMG SRC="FYXIV082.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV083.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV084.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT>
<IMG SRC="FYXIV085.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[객체지향 프로그래밍]</FONT></SPAN></FONT>
<BR>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">C언어나 Pascal과 같은 프로시저를 기반으로 하는 구조적 프로그래밍(Procedure Oriented Programming)에서는 프로그램 내에서 일어나는 모든 변화와 사건 등을 프로그래머가 직접 기술해야 하며, 프로그램의 흐름을 간결하고, 단순하게 만들어 놓아야 좋은 프로그램으로 인정받았다. 그러나 이러한 기법은 프로그램의 크기가 커지고, 업그레이드 및 재사용성에 있어서의 한계점이 약점으로 나타나기 시작했다.</FONT></SPAN></FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">객체 지향 프로그래밍(OOP : Object Oriented Programming)에 대한 개념은 1960년대 Simula라는 언어에서 처음 소개되었는데, 이후 C++ 등과 같은 언어의 성공과 함께 새로운 프로그래밍 기법으로 등장했다. 객체 지향 프로그래밍에서는 객체에게 자신이 원하는 작업을 하라는 메시지를 전달하는 형태로 프로그램을 기술한다. 일반적으로 객체지향 프로그래밍을 사용하면 구조적 프로그래밍에 비해 모듈화가 용이하며 객체의 여러 가지 특성을 사용하여 소프트웨어 재사용과 확장성을 높일 수 있다. 이는 바로 소프트웨어 개발 시간의 단축에도 크게 기여한다.</FONT></SPAN></FONT>
<BR>
<P>
<IMG SRC="FYXIV086.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">자동차를</FONT></SPAN></FONT>
<IMG SRC="FYXIV087.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 예로 들어 구조적 프로그래밍 방식과 객체 지향 프로그램 방식을 설명하면, 구조적 프로그래밍 방식의 경우 원하는 목적지까지 가기 위해 자동차를 출발하려면 키를 꽂고 시동을 건 다음 기어를 넣고 가속 페달을 밟는 여러 가지 절차를 수행해야 한다. 그러나 객체 지향 프로그래밍 방법에서는 &quot;출발!&quot;이라는 메시지의 전달만 있으면 자동차를 출발시키고, 뿐만 아니라 &quot;정지!&quot;이라는 메시지만으로 차를 정지시키는 방식이다.</FONT></SPAN></FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이장에서는 주로 객체지향 프로그래밍 언어에서 나타나는 3가지 특징인 은닉(Encapsulation), 상속(Inheritance), 다형성(Polymorphism)에 대하여 설명하고 클래스, 변수, 메소드 앞에 사용되어 특정한 의미를 갖게 하는 제한자(Modifier)에 대해서도 자세하게 알아보도록 하자.</FONT></SPAN></FONT>
<P>
<IMG SRC="FYXIV089.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.1  </FONT><FONT FACE="바탕">은닉</FONT><FONT FACE="Bookman Old Style">(Encapsulation)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">은닉은 사용자에게 상세한 내부 구현을 숨기고 필요한 부분만을 보이게 하는 것이다. 은닉을 통해 클래스를 구성하는 필드 중에서 외부로 노출되어서는 안될 필드에 대해  불법적인 접근을 막아 클래스 내부의 정보를 보호하고, 클래스 자체가 훼손되는 것을 막을 수 있다. 따라서, 이러한 내부 데이터에 접근하기 위해 클래스 사용자는 공개된 메소드를 통해서만 내부 데이터에 접근하게 할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 예를 보기로 하자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyDate {</FONT>
<P>	<FONT FACE="Courier New">public int day;</FONT>
<P>	<FONT FACE="Courier New">public int month;</FONT>
<P>	<FONT FACE="Courier New">public int year;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestMyDate {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">MyDate myBirth = new MyDate();</FONT>
<P>		<B><FONT FACE="Courier New">myBirth.day = 32;</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Input day is &quot; + myBirth.day);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV090.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV091.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">My Day is 32</FONT></B>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myBirth.day = 32;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">TestMyDate클래스에서 MyDate클래스의 멤버를 참조하는 부분이다. 실제로 날짜 값에는 32라는 값이 존재하지 않지만 여기에서는 아무 제한이 없이 입력이 된다. 이러한 단점을 없애기 위해 MyDate클래스를 다음과 같이 수정한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=124>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyDate {</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> int day;</FONT>
<P>	<FONT FACE="Courier New">private int month;</FONT>
<P>	<FONT FACE="Courier New">private int year;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyDate.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">public void setDay(int d)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">if( (d&lt;1) || (d&gt;31) ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">잘못된</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">날짜입력입니다</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else {</FONT>
<P>			<FONT FACE="Courier New">day = d;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public int getDay()</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">return day;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> int day;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">변수선언이 private로 되어있다. private 접근 제한자는 해당 멤버의 참조 범위를 자신의 클래스 내로 한정시키므로 다른 클래스에서 이 변수를 직접 참조할 수 없다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">...</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">public void setDay(int d)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">...</FONT>
<P>	<B><FONT FACE="Courier New">public int getDay()</FONT></B><FONT FACE="Courier New"> {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 부분은 변수 day에 값을 입력하기 위해 선언한 메소드이고, 12번째 줄은 day의 값을 알기 위한 메소드이다. 이처럼 특정 변수 값을 알기 위해 메소드를 이용하는데, 5번째 줄과 12번째 줄에서 선언된 메소드를 접근자(일반적으로 </FONT><I><FONT FACE="바탕">getter</FONT></I><FONT FACE="바탕">(accessor)와 </FONT><I><FONT FACE="바탕">setter</FONT></I><FONT FACE="바탕">(mutator)로 나뉘어진다)라고 부르기도 한다. 이처럼 접근이 제한된 변수에 접근하려면 공개된 메소드를 이용해야 한다.</FONT>
<P><FONT FACE="바탕">접근자를 이용하면 6번째 줄에서처럼 메소드 내에 접근권한 여부를 체크할 수 있는 루틴을 넣을 수 있기 때문에 중요한 데이터나 로직을 숨길 수도 있고, 이를 제어할 수 도 있다. 또 클래스의 유지보수를 쉽게 할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestMyDate {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">MyDate myBirth = new MyDate();</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">myBirth.day = 32; //Error</FONT>
<P>		<B><FONT FACE="Courier New">myBirth.setDay(32);</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Input day is &quot; + </FONT><B><FONT FACE="Courier New">myBirth.getDay()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV092.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV093.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">잘못된</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">날짜입력입니다</FONT></B>
<P>		<B><FONT FACE="Courier New">Input day is 0</FONT></B>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myBirth.day = 32; //Error</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">private로 선언된 day의 값을 직접 변경하려고 했기 때문에 컴파일시 오류가 발생한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myBirth.</FONT><B><FONT FACE="Courier New">setDay(32)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Input day is &quot; + myBirth.</FONT><B><FONT FACE="Courier New">getDay()</FONT></B><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">day의 값을 변경하거나 얻어내기 위해서 접근자를 사용한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV094.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.2  </FONT><FONT FACE="바탕">상속</FONT><FONT FACE="Bookman Old Style">(Inheritance)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">객체지향 프로그래밍에서 상속은 기존의 클래스를 확장하여 새로운 클래스를 이끌어내는 것을 의미한다. UML(Unified Modeling Language) 표기법으로는 &quot;is a&quot; 관계라고 한다. 상속은 불필요한 코드를 재 작성하는 것을 없애고, 기존의 코드를 재사용하고 쉽게 확장함으로써 시간과 노력을 줄일 수 있다.</FONT>
<P><FONT FACE="바탕">상속은 단일 상속만 지원하고, 클래스의 멤버(변수와 메소드)에서만 이루어지며, 생성자는 상속되지 않는다.</FONT>
<P><FONT FACE="바탕">어떤 클래스가 다른 클래스로부터 상속을 받아 만들어지면 새롭게 만들어진 클래스는 자손(child 또는 sub)클래스가 되고, 변수와 메소드를 물려준 클래스는 부모(parent 또는 super)클래스가 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.1 </FONT><FONT FACE="바탕">상속</FONT><FONT FACE="HY부활M"> - Problem</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 학교 인적자원 관리 프로그램에서 사용되는 클래들이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<P>	<FONT FACE="Courier New">public String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + age + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<P>	<FONT FACE="Courier New">public String subject;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + age + &quot;\t</FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: &quot; + subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<P>	<FONT FACE="Courier New">public String departmen;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + age + &quot;\t</FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: &quot; + department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 4개의 클래스는 모두 비슷한 면이 있다. 사실 Student도 Person이고, Teacher도 Person이며 Employee도 Person이다. 어떤 경우에는 클래스끼리 서로 중복되는 자료가 있을 수 있다. 여기서는 모두 Person클래스가 가지고 있는 변수인 name과 age, 그리고 getDetails() 메소드를 가지고 있다. 이처럼 서로 중복된 자료를 공유해서 사용하기 위한 방법이 상속의 개념이다.</FONT>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.2 </FONT><FONT FACE="바탕">상속</FONT><FONT FACE="HY부활M"> - Solution</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 클래스를 상속이라는 개념을 적용하여 재 작성한 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student </FONT><B><FONT FACE="Courier New">extends Person</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">public String studentId;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher </FONT><B><FONT FACE="Courier New">extends Person</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">public String subject;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee </FONT><B><FONT FACE="Courier New">extends Person</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">public String department;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">상속받을 때 사용하는 키워드는 extends이다. Student클래스가 Person클래스를 상속받으면 Person클래스가 가지고 있는 것을 Student클래스가 갖게 된다. 이때 Person클래스를 부모클래스라 부르고, Student클래스를 자손클래스라 부른다. 이 같은 상속 관계를 &quot;is a relation&quot;이라고 하는데 &quot;Student is a Person&quot;이라는 뜻이다. 상속은 부모의 모든 것을 계승하기 때문에 자손은 부모와 같다고 해도 무리가 아니다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 위의 상속이 제대로 이루어 졌는지를 테스트하는 프로그램이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=651>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInheritance.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInheritance {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<FONT FACE="Courier New">Person p = new Person();</FONT>
<P>		<FONT FACE="Courier New">p.name = &quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">p.age = 25;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( p.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student();</FONT>
<P>		<FONT FACE="Courier New">s.name = &quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">s.age = 30;</FONT>
<P>		<FONT FACE="Courier New">s.studentId = &quot;20001234&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Teacher t = new Teacher();</FONT>
<P>		<FONT FACE="Courier New">t.name = &quot;</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">t.age = 40;</FONT>
<P>		<FONT FACE="Courier New">t.subject = &quot;</FONT><FONT FACE="바탕">자바프로그래밍</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( t.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Employee e = new Employee();</FONT>
<P>		<FONT FACE="Courier New">e.name = &quot;</FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">e.age = 30;</FONT>
<P>		<FONT FACE="Courier New">e.department = &quot;</FONT><FONT FACE="바탕">교무처</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( e.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV095.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV096.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 45</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 40</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30</FONT></B>
<BR>
<P><FONT FACE="바탕">상속에서 기억해야 할 점은 &quot;생성자(Constructor)는 상속되지 않는다&quot;는 점과 &quot;다중상속이 아닌 단일상속이다&quot;는 것이다. 즉, 여러 부모클래스로부터 상속받는 것을 지원하지 않는다. 다중상속은 장점도 있지만 코드를 굉장히 모호하게 만들 수 있는 단점이 있다. 따라서 다중상속의 단점을 없애기 위해 단일상속만 지원하고, 다중상속의 장점을 살리기 위해서 인터페이스라는 것을 만들었다. 나중에 배우겠지만 인터페이스를 사용하면 다중상속의 장점을 충분히 살릴 수 있다. 
</FONT><P><FONT FACE="바탕">extends 구문이 없으면 컴파일러는 모든 클래스의 최상위 클래스인 Object클래스를 상속받도록 &quot;extends Object&quot;구문을 삽입한다. 앞의 Person클래스는 사실상 다음과 같이 선언된 것과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person </FONT><B><FONT FACE="Courier New">extends Object</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">...</FONT>	
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.3 </FONT><FONT FACE="바탕">재정의</FONT><FONT FACE="HY부활M">(Overriding)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">재정의란 부모클래스로부터 상속받은 메소드를 자식클래스에서 행위를 바꾸거나 보완하기 위해 다시 정의해서 사용하는 것을 말한다. 이는 부모클래스에서 특별한 용도로 사용하던 메소드를 자식클래스에서는 그 용도를 달리하고자할 때 사용한다.</FONT>
<P><FONT FACE="바탕">앞의 예에서 Student, Teacher, Employee클래스는 모두 Person클래스를 상속받았으므로 getDetails()메소드의 경우 Person클래스에서 정의된 것을 사용해야 하는데, Person클래스에 있는 getDetails()메소드를 Student, Teacher, Employee클래스에서 다른 용도로 사용하고 싶으면 다음과 같이 재정의 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 Student, Teacher, Employee클래스에서 getDetails()메소드를 재 정의한 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">protected String name;</FONT>
<P>	<FONT FACE="Courier New">protected int age;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String studentID;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String subject;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age + &quot;\t</FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: &quot; + subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String department;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New"> : &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age + &quot;\t</FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: &quot; + department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 앞의 상속에서 사용되었던 예제를 복사해와 실행시켜보면 그 결과를 쉽게 확인할 수 있다. 앞의 상속 예에서는 getDetails()메소드를 호출했을 때 모두 name과 age필드만 출력되었으나 재 정의된 클래스를 가지고 수행시키면 각각의 클래스가 가지고있는 필드가 출력된 것을 확인할 수 있다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestOverriding.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestOverriding {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Person p = new Person();</FONT>
<P>		<FONT FACE="Courier New">p.name = &quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">p.age = 25;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( p.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student();</FONT>
<P>		<FONT FACE="Courier New">s.name = &quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">s.age = 30;</FONT>
<P>		<FONT FACE="Courier New">s.studentID = &quot;20001234&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Teacher t = new Teacher();</FONT>
<P>		<FONT FACE="Courier New">t.name = &quot;</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">t.age = 40;</FONT>
<P>		<FONT FACE="Courier New">t.subject = &quot;</FONT><FONT FACE="바탕">자바프로그래밍</FONT><FONT FACE="Courier New">&quot;;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestOverriding.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println( t.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Employee e = new Employee();</FONT>
<P>		<FONT FACE="Courier New">e.name = &quot;</FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">e.age = 30;</FONT>
<P>		<FONT FACE="Courier New">e.department = &quot;</FONT><FONT FACE="바탕">교무처</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( e.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV098.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV099.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 45       </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 10001234</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 40       </FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">자바프로그래밍</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30       </FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">교무처</FONT></B>
<BR>
<P><FONT FACE="바탕">이렇게 부모클래스로부터 상속받은 것을 재 정의해서 사용할 수 있다. 이를 메소드 재정의(method overriding)라 부르고, 메소드를 재 정의할 때는 다음과 같은 규칙에 따른다.</FONT>
<P>  <FONT FACE="돋움">∘ 상속을 전제로 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 반드시 반환타입이 같아야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 메소드 이름이 같아야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자값이 정확히 일치해야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 접근 제한자는 같거나 더 제한이 없어야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">메소드 중복(overloading)과 혼동하면 안 된다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.4 super</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스 안에서 부모클래스의 멤버를 참조하기 위해 사용된다. 부모클래스의 멤버 변수가 private로 선언되었을 경우, 부모클래스의 멤버변수를 참조하려면 메소드를 이용해야 하는데 이때 자식클래스에서 메소드가 재 정의되었을 경우 super를 이용하여 참조할 수 있다.</FONT>
<P><FONT FACE="바탕">다음의 예를 보자.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<B><FONT FACE="Courier New">protected</FONT></B><FONT FACE="Courier New"> String name;</FONT>
<P>	<B><FONT FACE="Courier New">protected</FONT></B><FONT FACE="Courier New"> int age;</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<B><FONT FACE="Courier New">protected </FONT></B><FONT FACE="Courier New">String studentID;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return </FONT><B><FONT FACE="Courier New">super.getDetails()</FONT></B><FONT FACE="Courier New"> + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 앞에서 보인 부모클래스의 멤버를 참조하는 클래스를 테스트하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestSuper1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestSuper1 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student();</FONT>
<P>		<FONT FACE="Courier New">s.name = &quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">s.age = 30;</FONT>
<P>		<FONT FACE="Courier New">s.studentID = &quot;20001234&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV100.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV101.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 10001234</FONT></B>
<BR>
<P><FONT FACE="바탕">앞의 예에서처럼 super를 이용하면 부모클래스의 메소드를 호출하여 name과 age변수에 접근할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 예는 멤버 변수가 모두 private으로 되어있는데, 이 때는 변수 값을 설정할 때 setXxx 메소드를 이용하거나 생성자를 이용해야 한다. 생성자는 상속이 되지 않으므로 객체를 생성하면서 멤버 변수를 초기화하려면 다음과 같은 방법을 이용한다. 
</FONT><BR>
<BR>
<BR>
<P><FONT FACE="바탕">이 프로그램은 자식클래스의 생성자로 부모클래스의 멤버를 초기화하는 방법을 보여주는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> String name;</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<B><FONT FACE="Courier New">super(init_name, init_age);</FONT></B>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 앞에서 보인 부모클래스의 생성자를 참조하는 클래스를 테스트하는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestSuper2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestSuper2 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="FYXIV102.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV103.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 10001234</FONT></B>
<BR>
<BR>
<P>
<IMG SRC="FYXIV104.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.3   </FONT><FONT FACE="바탕">접근</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">제한자</FONT><FONT FACE="Bookman Old Style">(Access Modifier)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">접근 제한자는 클래스와 클래스 변수, 메소드, 생성자 등의 접근을 제어할 수 있는 제한자로서 종류에는 public, private, protected와 접근 제한자를 붙이지 않았을 경우에 해당하는 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">가 있다.</FONT>
<BR>
<P><FONT FACE="바탕">접근 제한자를 표로 만들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=573 HEIGHT=144>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Modifier</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Same Class</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Same Package</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Subclass</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Universe</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">public</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">protected</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER> </TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><I><FONT FACE="바탕">friendly</FONT></I></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER> </TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER> </TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">private</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER> </TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER> </TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER> </TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.1 public</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">public은 외부에서 아무런 제한 없이 호출 가능하도록 해주며, 클래스나 메소드, 변수를 정의할 때 사용한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package pac;</FONT></B>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<B><FONT FACE="Courier New">public</FONT></B>		<B><FONT FACE="Courier New">int num1 = 10;</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위의 예에서 클래스 Super나 변수 num1은 모두 public으로 선언되었다. 이는 어디서나 사용할 수 있음을 나타내는데 예를 들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=176>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print(){</FONT>
<P>		<B><FONT FACE="Courier New">Super s = new Super();</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num1 = &quot; + </FONT><B><FONT FACE="Courier New">s.num1</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위의 Sub클래스는 Super클래스 및 num1 변수를 패키지가 달라도 참조할 수 있다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.2 protected</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">protected는 같은 패키지 안에 있는 모든 클래스와 그 하위 클래스까지만 접근 가능하다. protected는 자신의 서브클래스가 다른 패키지에 있을 경우, 이 서브클래스는 부모의 protected로 선언된 변수를 접근할 수 있다는 점이 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">와의 차이점이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=101>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package pac;</FONT></B>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<B><FONT FACE="Courier New">protected</FONT></B>		<B><FONT FACE="Courier New">int num2 = 20;</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=157>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub </FONT><B><FONT FACE="Courier New">extends Super</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num2 = &quot; + </FONT><B><FONT FACE="Courier New">num2</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 예에서처럼 num2는 패키지가 다르더라도 상속받은 경우 참조가 가능하다. 2개의 패키지가 있다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.3 </FONT><I><FONT FACE="HY부활M">package friendly</FONT></I></SPAN></FONT>
<BR>
<P><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">는 자바에서 제공하는 키워드는 아니며, 자바에서 클래스, 변수, 메소드 등의 앞에 아무 것도 명시하지 않았을 때 기본으로 지정되는 접근 제한 모드이다. 그래서 간혹 default라고 부르기도 한다. 같은 패키지 안에 있는 클래스에만 접근이 가능하므로 package friendly 또는 줄여서 friendly라고도 부른다. 하위 클래스라도 같은 패키지 안에 없으면 접근이 허용되지 않는다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=101>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package pac;</FONT></B>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<B><FONT FACE="Courier New">int num3 = 30;</FONT></B>	<FONT FACE="Courier New">/* </FONT><I><FONT FACE="Courier New">friendly </FONT></I><FONT FACE="Courier New">*/</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=157>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub </FONT><B><FONT FACE="Courier New">extends Super</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num3 = &quot; + </FONT><B><FONT FACE="Courier New">num3</FONT></B><FONT FACE="Courier New">); //Error</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 예제에서는 오류가 발생하는데 그 이유는 num3의 경우 접근범위가 동일 패키지에만 적용되기 때문이다. 패키지를 벗어나 참조할 경우에는 상속을 받았더라도 참조가 불가능하다. 이처럼 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">가 protected와 다른 점은 protected는 자기의 서브클래스가 다른 패키지에 있어도 서브클래스는 부모의 protected로 선언된 변수를 access할 수 있지만 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">는 서브클래스라 해도 패키지가 다르면 접근할 수 없다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.4 private</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">private는 접근제한이 가장 많은 제한자로서 소속된 클래스나 변수 또는 메소드의 범위 안에서만 접근이 가능하다. 이는 메소드나 변수 정의시 사용가능하고, 클래스에는 사용되지 않는다. (단, 내부 클래스일 경우에서는 사용이 가능하다)</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=181>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Sub {</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">private</FONT></B>			<B><FONT FACE="Courier New">int num4 = 40;</FONT></B>
<BR>
<P>	<FONT FACE="Courier New">public void print(){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Sub num5 = &quot; + </FONT><B><FONT FACE="Courier New">num4</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 예에서 변수 num5는 private로 선언되었으므로 자신의 클래스 안에서만 접근할 수 있고, 다음 예처럼 다른 클래스에서는 참조할 수 없다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=137>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Other {</FONT>
<P>	<FONT FACE="Courier New">public void doSomething() {</FONT>
<P>		<FONT FACE="Courier New">Sub s = new Sub();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(</FONT><B><FONT FACE="Courier New">s.num4</FONT></B><FONT FACE="Courier New">); //Error</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 프로그램은 4번째 줄에서 오류가 발생한다. private는 클래스가 같은 패키지 내에 존재하더라도 다른 클래스인 Other에서 Sub클래스의 num4를 access할 수 없다. 
</FONT><P><FONT FACE="바탕">private가 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">와 다른 점은, 같은 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">로 선언된 변수는 패키지 안의 어디서든지 access가 가능하다는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 접근 제어 예제를 모두 보여주고 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=260>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">pac/Super.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">package pac;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<FONT FACE="Courier New">public</FONT>			<FONT FACE="Courier New">int num1 = 10;</FONT>
<P>	<FONT FACE="Courier New">protected</FONT>		<FONT FACE="Courier New">int num2 = 20;</FONT>
<P>	<FONT FACE="Courier New">/*friendly*/</FONT>	<FONT FACE="Courier New">int num3 = 30;</FONT>
<P>	<FONT FACE="Courier New">private</FONT>			<FONT FACE="Courier New">int num4 = 40;</FONT>
<P>	
<P>	<FONT FACE="Courier New">public int getNum4(){</FONT>
<P>		<FONT FACE="Courier New">return num4;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=316>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Sub.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub extends Super{</FONT>
<P>	
<P>	<FONT FACE="Courier New">private</FONT>			<FONT FACE="Courier New">int num5 = 50;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print(){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num1 = &quot; + num1);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num2 = &quot; + num2);</FONT>		
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num3 = &quot; + num3); //Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num4 = &quot; + num4); //Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num4 = &quot; + getNum4());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Sub num5 = &quot; + num5);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=372>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestModifier.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TestModifier{</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;***** Super </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****&quot;);</FONT>
<P>		<FONT FACE="Courier New">Super sup = new Super();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;num1 = &quot; + sup.num1 + </FONT>
<P><FONT FACE="Courier New">//</FONT>							<FONT FACE="Courier New">&quot;\tnum2 = &quot; + sup.num2 + </FONT>
<P><FONT FACE="Courier New">//</FONT>							<FONT FACE="Courier New">&quot;\tnum3 = &quot; + sup.num3 + </FONT>
<P>							<FONT FACE="Courier New">&quot;\tnum4 = &quot; + sup.getNum4());</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n***** Sub </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****&quot;);</FONT>
<P>		<FONT FACE="Courier New">Sub sub = new Sub();</FONT>
<P>		<FONT FACE="Courier New">sub.print();</FONT>
<BR>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV105.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV106.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">***** Super </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****</FONT></B>
<P>		<B><FONT FACE="Courier New">num1 = 10       num4 = 40</FONT></B>
<P>		
<P>		<B><FONT FACE="Courier New">***** Sub </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****</FONT></B>
<P>		<B><FONT FACE="Courier New">Super num1 = 10</FONT></B>
<P>		<B><FONT FACE="Courier New">Super num2 = 20</FONT></B>
<P>		<B><FONT FACE="Courier New">Super num4 = 40</FONT></B>
<P>		<B><FONT FACE="Courier New">Sub num5 = 50</FONT></B>
<BR>
<BR>
<P>
<IMG SRC="FYXIV107.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.4   </FONT><FONT FACE="바탕">다형성</FONT><FONT FACE="Bookman Old Style">(polymorphism)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다형성은 임의의 객체가 다른 객체를 참조하는 것을 말한다. 다형성은 상속을 전제조건으로 하는데, 상속을 통해서 생성된 클래스는 계층 내에서는 동일한 메시지라도 어떤 객체에게 전달되느냐에 따라 다양한 동작이 발생한다. 다형성이란 &quot;poly(多)&quot;와 &quot;morph(形)&quot;가 합쳐진 합성어로 &quot;여러 형태를 가진다&quot;는 뜻이다. 
</FONT><P><FONT FACE="바탕">이와 같은 다형성은 확장이 가능한 시스템을 설계할 수 있도록 해주는데, 프로그램의 개발 시점에서는 존재하지 않았던 클래스를 기존 시스템의 수정 없이 시스템에 추가되도록 해 준다. 이는 모든 상속의 계층구조에서 서브클래스의 객체를 슈퍼클래스의 참조로 처리함으로써 가능하다.</FONT>
<P> 
<P><FONT FACE="바탕">앞의 Person과 그 하위 클래스에서 예를 만들어 보도록 하자.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=164>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestPolymorphism {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Person p = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 29);</FONT>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;10007890&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">Person ps = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">Person ps = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5번째 줄에서 객체를 선언한 부분이 좀 어색해 보이는데 원래대로라면 3번째 줄이나 4번째 줄처럼 나타내야 올바른 표현이다.</FONT>
<P><FONT FACE="바탕">한가지 중요한 점은 앞에서 다형성은 임의의 객체가 다른 객체를 참조하는 것이라고 하였는데 상속을 전제로 한다고 하였다. 다시 말하면 부모를 참조하는 reference변수는 자손 객체도 참조할 수 있음을 나타낸다. 따라서 5번째 줄에서 객체 ps는 부모와 자손 모두 참조할 수 있다. 이러한 점이 자바에서 다형성 구현을 가능하게 해주는 기능이다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.1 Virtual Method Invocation</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">우선 다음의 예를 먼저 살펴보자. 앞의 Person클래스와 Student클래스를 다시 보인 프로그램이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=323>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">private String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() +</FONT>
<P>			<FONT FACE="Courier New">&quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestPolymorphism.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestPolymorphism {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Person ps = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">System.out.println( </FONT><B><FONT FACE="Courier New">ps.getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV108.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV109.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001234</FONT></B>
<BR>
<BR>
<P><FONT FACE="바탕">위의 예는 다형성에서의 메소드 호출을 보여주고 있다. 7번째 줄에서 호출하고 있는 getDetails() 메소드는 Person클래스의 메소드를 Student클래스에서 재정의 하고 있다. 객체 ps는 Person 클래스를 이용하여 선언했지만 실제로 만들어진 것은 Student 객체이다. 따라서, 실제 호출되는 메소드는 Person의 것이 아니고 Student의 것이다. 결국 Student의 getDetails() 메소드가 호출된다. 즉, 객체 p가 참조하는 getDetails() 메소드는 컴파일시에는 Person의 것을, 실행시에는 Student의 것을 참조한다. 이를 보고 Virtual method invocation이라 한다.</FONT>
<BR>
<P><FONT FACE="바탕">여기서 주의할 점은 부모의 참조변수가 자손을 참조한다고 해서 그 변수가 자손의 모든 것을 호출할 수 있는 것은 아니다. 부모의 참조변수가 자손을 참조할 때는 부모로부터 상속받은 것이나 부모의 메소드를 재정의한 것만 가능하다. 따라서, 부모로부터 상속받지 않거나, 재 정의되지 않은 것을 호출할 때는 오류가 발생하게 된다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.2 </FONT><FONT FACE="바탕">이종모음</FONT><FONT FACE="HY부활M">(Heterogeneous Collection)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다형성의 개념은 약간 복잡하지만 강력한 기능을 가지고 있다. 따라서, 다형성에 대해 좀더 자세히 알아보도록 하자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=293>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">private String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=293>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String subject;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Teacher(String init_name, int init_age, String init_subject) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">subject = init_subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: &quot; + subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=293>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String department;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Employee(String init_name, int init_age, String init_department) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">department = init_department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: &quot; + department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 예제를 보면 Student, Teacher, Employee 클래스가 Person 클래스를 상속받았는데, 다형성을 배열에 적용하면 다음 프로그램과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestHetero.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestHetero {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<B><FONT FACE="Courier New">Person[] p = new Person[4];</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">p[0] = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 30);</FONT></B>
<P>		<B><FONT FACE="Courier New">p[1] = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT></B>
<P>		<B><FONT FACE="Courier New">p[2] = new Teacher(&quot;</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">&quot;, 40, &quot;JAVA&quot;);</FONT></B>
<P>		<B><FONT FACE="Courier New">p[3] = new Employee(&quot;</FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">&quot;, 30, &quot;</FONT><FONT FACE="바탕">교무처</FONT><FONT FACE="Courier New">&quot;);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;p.length; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println( p[i].getDetails() );</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV110.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001233</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 40        </FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: JAVA</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">교무처</FONT></B>
<BR>
<BR>
<P><FONT FACE="바탕">앞의 예를 보고 이상한 점을 발견했을 것이다. 배열은 같은 유형의 자료만 저장할 수 있는 것으로 알고 있었지만, 이 예는 다른 유형의 객체들이 하나의 배열에 저장되어 있다. 이러한 기능이 바로 부모의 참조 변수는 자손도 참조할 수 있다는 다형성의 원리이다. 이와 같이 배열에 다형성이 적용되어 서로 다른 자료형을 저장하는 것을 이종모음이라고 한다.</FONT>
<BR>
<P><FONT FACE="바탕">자바의 모든 객체는 Object라는 클래스를 자동 상속받게 되므로 다음과 같이 배열을 Object 타입으로 생성하면 자바의 모든 객체를 참조할 수도 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=340>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestHetero2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class TestHetero2 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<B><FONT FACE="Courier New">Object arr[] = new Object[5];</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">arr[0] = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 30);</FONT>
<P>		<FONT FACE="Courier New">arr[1] = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT>
<P>		<FONT FACE="Courier New">arr[2] = new Integer(100);</FONT>
<P>		<FONT FACE="Courier New">arr[3] = new String(&quot;Hello&quot;);</FONT>
<P>		<FONT FACE="Courier New">arr[4] = new java.util.Date();</FONT>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;arr.length; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println( arr[i] );</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV111.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV112.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Person@26b249</FONT></B>
<P>		<B><FONT FACE="Courier New">Student@82f0db</FONT></B>
<P>		<B><FONT FACE="Courier New">100</FONT></B>
<P>		<B><FONT FACE="Courier New">Hello</FONT></B>
<P>		<B><FONT FACE="Courier New">Mon Apr 08 18:56:20 KST 2002</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.3 Wrapper Class</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">앞의 예에서 arr[]이 reference형이면 모든 자료형을 저장할 수 있지만 primitive 자료형은 저장할 수 없는 단점이 있다. 
</FONT><P><FONT FACE="바탕">다음은 primitive 자료형을 클래스로 구현해 놓은 것인데, 이러한 클래스를 Wrapper 클래스라고 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=404 HEIGHT=239>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Primitive Data Type</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Wrapper Class</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Byte</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">short</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Short</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Integer</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">long</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Long</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">float</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Float</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">double</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Double</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">boolean</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Boolean</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">char</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Character</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 Wrapper클래스를 이용하여 배열에 서로 다른 자료형을 저장하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=442>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestWrapper.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestWrapper {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Object[] obj = new Object[10];</FONT>
<BR>
<P>		<FONT FACE="Courier New">obj[0] = new Byte((byte)127);</FONT>
<P>		<FONT FACE="Courier New">obj[1] = new Short((short)32767);</FONT>
<P>		<FONT FACE="Courier New">obj[2] = new Integer(2147483647);</FONT>
<P>		<FONT FACE="Courier New">obj[3] = new Long(2136484836482L);</FONT>
<P>		<FONT FACE="Courier New">obj[4] = new Float(3.5F);</FONT>
<P>		<FONT FACE="Courier New">obj[5] = new Double(3.7);</FONT>
<P>		<FONT FACE="Courier New">obj[6] = new Boolean(true);</FONT>
<P>		<FONT FACE="Courier New">obj[7] = new Character('J');</FONT>
<P>		<FONT FACE="Courier New">obj[8] = new String(&quot;Hello Java&quot;);</FONT>
<P>		<FONT FACE="Courier New">obj[9] = new java.util.Date();</FONT>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;obj.length ; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(obj[i]);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV113.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV114.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">127</FONT></B>
<P>		<B><FONT FACE="Courier New">32767</FONT></B>
<P>		<B><FONT FACE="Courier New">2147483647</FONT></B>
<P>		<B><FONT FACE="Courier New">2136484836482</FONT></B>
<P>		<B><FONT FACE="Courier New">3.5</FONT></B>
<P>		<B><FONT FACE="Courier New">3.7</FONT></B>
<P>		<B><FONT FACE="Courier New">true</FONT></B>
<P>		<B><FONT FACE="Courier New">J</FONT></B>
<P>		<B><FONT FACE="Courier New">Hello Java</FONT></B>
<P>		<B><FONT FACE="Courier New">Mon Apr 08 18:57:00 KST 2002</FONT></B>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.4 Polymorphic Argument</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다형성이 메소드의 인자에 적용된 것을 Polymorphic Argument라 부르는데, 메소드의 인자뿐만 아니라 메소드의 리턴타입에도 적용이 된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 다형성이 메소드 인자와 리턴타입에 적용된 예를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=391>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setName(String name) {</FONT>
<P>		<FONT FACE="Courier New">this.name = name;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setAge(int age) {</FONT>
<P>		<FONT FACE="Courier New">this.age = age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=260>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">private String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestPolyArg.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestPolyArg {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Person s2 = setPerson(s);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s2.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static </FONT><B><FONT FACE="Courier New">Person</FONT></B><FONT FACE="Courier New"> setPerson(</FONT><B><FONT FACE="Courier New">Person p</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>		<FONT FACE="Courier New">p.setName(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">p.setAge(29);</FONT>
<P>		<FONT FACE="Courier New">return p;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="FYXIV115.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV116.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 29        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001233</FONT></B>
<BR>
<P><FONT FACE="바탕">앞의 9번째 줄에서 리턴타입이 Person형으로 되어있는데 polyMethod() 메소드를 호출하여 Student형으로 선언한 자료에 대입하면 어떻게 될까? 
</FONT><BR>
<P><FONT FACE="바탕">Primitive 자료형에서 형 변환이 발생하듯이 객체에서도 형 변환이 발생한다. 다음은 위의 5번째 줄을 Student형으로 선언했을 때 객체 형 변환한 예를 보이고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Student s2 = </FONT><B><FONT FACE="Courier New">(Student)</FONT></B><FONT FACE="Courier New"> setPerson(s);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">형 변환시 작은 유형에서 큰 유형으로는 형 변환이 가능하지만, 큰 유형에서 작은 유형으로의 형 변환은 반드시 명시해 주어야한다. 즉, polyMethod()의 Person형이 Student형보다 큰 자료형이므로 앞에 &quot;(Student)&quot;라고 명시한 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.5 instanceof</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">instanceof는 객체가 특정 클래스의 인스턴스 인지를 검사할 때 사용하는 연산자이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 예에서 사용법이 나타나 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInstanceof.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInstanceof {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT>
<P>		<FONT FACE="Courier New">Person s2 = printInfo(s);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s2.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static Person printInfo(Person p) {</FONT>
<P>		<FONT FACE="Courier New">if( p </FONT><B><FONT FACE="Courier New">instanceof</FONT></B><FONT FACE="Courier New"> Student ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">학생</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else if( p instanceof Teacher ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">선생</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else if( p instanceof Employee ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">직원</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">return p;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV117.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV118.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">학생</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001233</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.6 </FONT><FONT FACE="바탕">중복</FONT><FONT FACE="HY부활M">(overloading)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">중복은 메소드와 생성자를 사용할 때 하나의 이름으로 서로 다른 인자값이 같은 기능을 수행하게 한다. 즉, 중복기능을 사용하여 하나의 인터페이스로 일반적인 클래스를 사용할 수 있는 것이다.</FONT>
<P><FONT FACE="바탕">중복 조건은 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ 이름이 같아야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자 유형(parameter type)이 달라야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자의 개수가 달라야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자의 순서가 달라야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 리턴형은 영향을 미치지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">자바에서 가장쉽게 볼 수 있는 중복 예는 System.out.print() 메소드 인데, 실제 java.io.PrintStream클래스의 print() 메소드를 보면 다음과 같이 9개의 메소드로 구성되어 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=198>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public void print(boolean b)</FONT>
<P><FONT FACE="Courier New">public void print(char c)</FONT>
<P><FONT FACE="Courier New">public void print(int I)</FONT>
<P><FONT FACE="Courier New">public void print(long l)</FONT>
<P><FONT FACE="Courier New">public void print(float f)</FONT>
<P><FONT FACE="Courier New">public void print(double d)</FONT>
<P><FONT FACE="Courier New">public void print(char[] s)</FONT>
<P><FONT FACE="Courier New">public void print(String s)</FONT>
<P><FONT FACE="Courier New">public void print(Object obj)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">화면이나 콘솔에 값을 출력할 때, 위와 같이 인자에 따라서 각각의 값을 출력하도록 하는 9개 메소드가 있으므로 사용자는 인자의 종류에 따른 입력 변경이나 메소드의 이름 변경 없이 자유롭게 출력할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=185>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Overloading.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Overloading {</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">abc(int i, String str)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">정수와</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">abc(String str)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT>	</TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestOverloading.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestOverloading {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Overloading om = new Overloading();</FONT>
<P>		<FONT FACE="Courier New">om.abc(100, &quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">om.abc(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV119.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV120.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">정수와</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT></B>
<P>		<B><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT></B>
<BR>
<BR>
<BR>
<P>
<IMG SRC="FYXIV121.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.5   static Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">static은 변수, 메소드, 변수범위에 적용되어 특별한 의미를 갖게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.1 static variables</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">static변수는 모든 객체들이 공유하는 공유변수가 된다. 다음 예에서 변수 a의 경우 객체 c1과 c2에 따로 잡히지만 b의 경우에는 같은 장소를 참조하게 된다. 뿐만 아니라  16번째 줄에서 처럼 멤버 참조시에 해당 클래스의 인스턴스 없이도 참조가 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 변수가 static으로 선언되었을 때를 나타내고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Count.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Count {</FONT>
<P>	<FONT FACE="Courier New">public int a=0;</FONT>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">static</FONT></B><FONT FACE="Courier New"> int b=0;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=492>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestCount.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestCount {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Count c1 = new Count();</FONT>
<P>		<FONT FACE="Courier New">c1.a++;</FONT>
<P>		<FONT FACE="Courier New">c1.b++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Non-static a : &quot; + c1.a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;static b : &quot; + c1.b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Count c2 = new Count();</FONT>
<P>		<FONT FACE="Courier New">c2.a++;</FONT>
<P>		<FONT FACE="Courier New">c2.b++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Non-static a : &quot; + c2.a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;static b : &quot; + c2.b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Count.b++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;c1.b : &quot; + c1.b);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;c2.b : &quot; + c2.b);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Count.b : &quot; + Count.b);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="FYXIV122.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV123.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Non-static a : 1</FONT></B>
<P>		<B><FONT FACE="Courier New">static b : 1</FONT></B>
<P>		<B><FONT FACE="Courier New">Non-static a : 1</FONT></B>
<P>		<B><FONT FACE="Courier New">static b : 2</FONT></B>
<P>		<B><FONT FACE="Courier New">c1.b : 3</FONT></B>
<P>		<B><FONT FACE="Courier New">c2.b : 3</FONT></B>
<P>		<B><FONT FACE="Courier New">Count.b : 3</FONT></B>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.2 static methods</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">static메소드는 변수와 마찬가지로 다음 예 TestStatic.java의 4번째 줄에서처럼 해당 클래스의 인스턴스 없이 참조가 가능하게 해준다. 또한 Count클래스의 6번째 줄에서처럼 static 메소드 안에서는 non-static 멤버(변수 또는 메소드)를 객체생성 없이 직접 참조할 수 없고, 메소드 안에서는 static변수를 선언할 수 없다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 static 메소드 예를 나타내고 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Count.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Count {</FONT>
<P>	<FONT FACE="Courier New">public int a=0;</FONT>
<P>	<FONT FACE="Courier New">public static int b=0;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">static</FONT></B><FONT FACE="Courier New"> int doIt() {</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">return ++a;</FONT>	<B><FONT FACE="Courier New">//Error</FONT></B>
<P>		<FONT FACE="Courier New">return ++b;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestCount.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestCount {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Count.doIt() : &quot; + </FONT><B><FONT FACE="Courier New">Count.doIt()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV124.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV125.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Count.doIt() : 1</FONT></B>
<BR>
<P><FONT FACE="바탕">.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.3 static initializer</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">정적 블록(static block)또는 정적 초기화자라고도 하며, static initializer는 클래스가 로딩될 때 main()메소드에 앞서 한번만 실행된다.  자바에서 JDBC를 이용하여 데이터베이스 연결시 드라이버 로딩에 사용될 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 클래스 안에 static블록을 두는 static initializer예를 나타내고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">StaticInit.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class StaticInit {</FONT>
<P>	<FONT FACE="Courier New">static {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;static initializer</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInitializer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInitializer {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">StaticInit c1 = new StaticInit();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;***********************&quot;);</FONT>
<P>		<FONT FACE="Courier New">StaticInit c2 = new StaticInit();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;***********************&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;main() </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV126.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV127.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">static initializer</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수행됨</FONT></B>
<P>		<B><FONT FACE="Courier New">***********************</FONT></B>
<P>		<B><FONT FACE="Courier New">***********************</FONT></B>
<P>		<B><FONT FACE="Courier New">main() </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> static 키워드의 기능을 정리하면 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 변수, 메소드, 범위에만 적용된다.</FONT>
<P><FONT FACE="바탕">- static 메소드나 변수는 해당 클래스의 인스턴스 없이도 사용할 수 있다.</FONT>
<P><FONT FACE="바탕">- static 메소드 안에서는 static 변수만 사용해야하고, static 메소드만 호출할 수 있다. 즉 static 메소드에서 non-static 멤버를 객체생성 없이 직접 참조할 수 없다.</FONT>
<P><FONT FACE="바탕">- static 제한자는 지정된 변수와 메소드를 인스턴스와 무관하게 만들어 주기 때문에 this를 가질 수 없다.</FONT>
<BR>
<P><FONT FACE="바탕">- static 메소드는 non-static 메소드로 재정의(overriding)될 수 없다.</FONT>
<P><FONT FACE="바탕">- scope({와 })에 사용할 경우에는 static initializer라하며, 이는 클래스가 로딩될 때 main()이 있더라도 main() 메소드보다 앞서 딱 한번만 수행된다.</FONT>
<P><FONT FACE="바탕">- 대표적인 static 메소드는 애플리케이션의 main() 메소드이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.4 Singleton Design Pattern</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Singleton Design Pattern은 객체를 하나만 만들도록 하는 일종의 프로그래밍 방법이다. 다음 예를 보면 Company 클래스에서는 생성자를 private으로 선언하여 외부에서 생성자를 이용하여 객체 생성이 불가능하게 하였다. 그리고 멤버 변수에서는 자신의 객체를 생성하고, 이를 또한 private으로 선언하여 외부에서 직접 참조가 불가능하게 하고 static을 붙여서 static 메소드에서 객체생성 없이 직접 참조가 가능하게 하였다. 마지막으로 멤버변수에서 만들어진 인스턴스를 참조하기 위해 public 메소드를 이용하였는데, 메소드도 객체 생성 없이 참조가 가능하도록 static으로 선언했다. 실행 결과를 보면 두 개의 인스턴스가 같은 해시코드(hashcode)를 가지고있는 것을 볼 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Company.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Company{</FONT>
<P>	<FONT FACE="Courier New">private String str;</FONT>
<P>	<B><FONT FACE="Courier New">private static</FONT></B><FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">Company c = new Company();</FONT></B>
<P>	<B><FONT FACE="Courier New">private Company(){</FONT></B>
<P>		<FONT FACE="Courier New">str = &quot;company&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(str);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public static Company getCompany(){</FONT></B>
<P>		<FONT FACE="Courier New">return c;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestSingleton.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestSingleton {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String [] args){</FONT>
<P>		<FONT FACE="Courier New">Company c1 = Company.getCompany();</FONT>
<P>		<FONT FACE="Courier New">Company c2 = Company.getCompany();</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(c1);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(c1 == c2);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(c2);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV128.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV129.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">company</FONT></B>
<P>		<B><FONT FACE="Courier New">Company@372a1a</FONT></B>
<P>		<B><FONT FACE="Courier New">true</FONT></B>
<P>		<B><FONT FACE="Courier New">Company@372a1a</FONT></B>
<BR>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="FYXIV130.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.6   final Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final은 클래스, 변수, 메소드에 적용되어 특별한 의미를 갖게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.6.1 final class</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final클래스는 상속이 불가능하게 한다. 즉 자식 클래스를 가질 수 없고 오직 객체생성을 통해서만 사용할 수 있다. 다음 예에서는 Child.java를 컴파일하면 오류가 발생하게 된다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=77>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Parent.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">final</FONT></B><FONT FACE="Courier New"> class Parent{</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=77>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Child.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Child extends Parent{ </FONT><B><FONT FACE="Courier New">//Error</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.6.2 final variables</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final변수는 상수 선언시 사용하는데, 한번 값을 할당하면 그 값을 변경할 수 없다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestFinalVar.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class TestFinalVar {</FONT>
<P>	<B><FONT FACE="Courier New">final int MY_VALUE=7;</FONT></B>
<P>	<FONT FACE="Courier New">public void go() {</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">MY_VALUE=10;</FONT>	<FONT FACE="Courier New">//Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(MY_VALUE);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TestFinalVar t = new TestFinalVar();</FONT>
<P>		<FONT FACE="Courier New">t.go();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV131.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV132.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">7</FONT></B>
<BR>
<P><FONT FACE="바탕">하지만 final변수라 할지라도 참조변수의 경우에는 다음 6번째 줄에서 보인 것처럼 멤버변수의 값은 변경할 수 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestFinalRefVar.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestFinalRefVar{</FONT>
<P>	<FONT FACE="Courier New">static final MyDate date = new MyDate();</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">date = new MyDate(); //Error</FONT>
<P>		<FONT FACE="Courier New">date.year = 2002;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( date.toString() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT>
<BR>
<P><FONT FACE="Courier New">class MyDate{</FONT>
<P>	<FONT FACE="Courier New">int year = 2000;</FONT>
<P>	<FONT FACE="Courier New">int month = 1;</FONT>
<P>	<FONT FACE="Courier New">int day = 1; </FONT>
<P>	<FONT FACE="Courier New">public String toString() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;[&quot; + year + &quot;-&quot; + month + &quot;-&quot; + day + &quot;]&quot;;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV133.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV134.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">[2002-1-1]</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.6.3 final methods</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final 메소드는 하위 클래스에서 재 정의하지 못하게 한다. 하지만 상속은 가능하므로 하위클래스에서 참조는 가능하다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Parent.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Parent{</FONT>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">final</FONT></B><FONT FACE="Courier New"> void method(){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Parent - method()&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Child.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Child extends Parent{</FONT>
<P>	<FONT FACE="Courier New">public void method(){ </FONT><B><FONT FACE="Courier New">//Error</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Parent - method()&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> final 키워드의 기능을 정리하면 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 클래스, 메소드, 변수에 적용된다.</FONT>
<P><FONT FACE="바탕">- 클래스의 경우에는 서브-클래싱(상속)을 할 수 없게 한다.</FONT>
<P><FONT FACE="바탕">- 메소드는 상속받아 재정의 할 수 없게 한다.</FONT>
<P><FONT FACE="바탕">- 변수 값을 변경하지 못하게 하여 상수처럼 사용하게 한다. final 변수는 메모리 공간을 절약하기 위해 static과 같이 사용된다.</FONT>
<P><FONT FACE="바탕">- abstract와 동시에 사용될 수 없다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV135.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.7  abstract Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">abstract클래스는 추상 클래스로서 abstract메소드를 가질 수 있다. 또, 객체 생성이 불가능하고 반드시 상속을 통해서만 사용이 가능하며, 메소드가 구현되어 있지 않으므로 클래스를 상속받은 하위 클래스에서 반드시 메소드를 구현해 주어야 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=238>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Sharp.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">abstract</FONT></B><FONT FACE="Courier New"> class Shape {</FONT>
<P>	<FONT FACE="Courier New">private int x;</FONT>
<P>	<FONT FACE="Courier New">private int y;</FONT>
<P>	<FONT FACE="Courier New">public Shape() {}</FONT>
<P>	<FONT FACE="Courier New">public Shape(int x, int y) {</FONT>
<P>		<FONT FACE="Courier New">this.x = x;</FONT>
<P>		<FONT FACE="Courier New">this.y = y;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public abstract double area();  //</FONT><FONT FACE="바탕">구현이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">되어있지</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">않음</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=258>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Circle.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Circle extends Shape {</FONT>
<P>	<FONT FACE="Courier New">private int radius;</FONT>
<P>	<FONT FACE="Courier New">public Circle(int r) {</FONT>
<P>		<FONT FACE="Courier New">//super();</FONT>
<P>		<FONT FACE="Courier New">radius = r;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public double area() {</FONT>
<P>		<FONT FACE="Courier New">return (Math.PI * radius * radius);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestAbstract.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestAbstract {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Shape circle = new Circle(10);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">원의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">넓이는</FONT><FONT FACE="Courier New"> : &quot;+circle.area());</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV136.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV137.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">원의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">넓이는</FONT><FONT FACE="Courier New"> : 314.1592653589793</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> abstract 키워드의 기능을 정리하면 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 클래스와 메소드에 적용된다.</FONT>
<P><FONT FACE="바탕">- abstract로 선언된 메소드는 몸체(body : &quot;{ }&quot;)가 없이 선언만 되어있다.</FONT>
<P><FONT FACE="바탕">- abstract 메소드가 있는 클래스는 abstract클래스여야하며, 역은 성립되지 않는다. 
</FONT><P><FONT FACE="바탕">- 객체생성이 되지 않기 때문에 사용하려면 반드시 상속을 받아 하위 클래스에서 상속받은 abstract클래스의 abstract 메소드를 구현해야 한다.</FONT>
<P><FONT FACE="바탕">- 상속되는 각 클래스에 대한 관계를 설정할 때 사용한다.(abstract로 선언된 클래스를 상속받는 클래스에서 특정한 메소드를 반드시 만들어야 할 때 사용)</FONT>
<P><FONT FACE="바탕">- final과 동시에 사용될 수 없다.</FONT>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="FYXIV138.GIF" BORDER=0 ALIGN=LEFT> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.8  </FONT><FONT FACE="바탕">기타</FONT><FONT FACE="Bookman Old Style"> Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 부분에서는 지금까지 언급한 내용을 제외한 나머지 modifier를 설명하고자 한다. 하지만 사용 빈도가 높지 않기 때문에 개략적으로 이해하기 바란다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.1 transient</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">변수에만 적용되는데, 객체 직렬화에서 transient로 지정된 변수는 직렬화에서 제외된다. 책의 후반부 I/O Programming에서 객체 직렬화를 설명할 때 언급된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.2 native</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 메소드에만 적용된다.</FONT>
<P><FONT FACE="바탕">- 몸체없이 메소드만을 선언하여 실제 구현부분은 자바가 아닌 C언어나 C++ 언어로 구현하여 사용한다.</FONT>
<P><FONT FACE="바탕">- 자바로 구현이 불가능한 부분이나 특정 플랫폼에 최적화를 시켜서 성능을 극대화시키고자 할 때 사용한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.3 synchronized</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 메소드와 범위에 적용된다.</FONT>
<P><FONT FACE="바탕">- 멀티 쓰레드에서 프로그램 동기화 시키는데 사용되는 제한자이다.</FONT>
<P><FONT FACE="바탕">- 락(Lock)을 걸어 한번에 하나의 쓰레드만 접근이 가능하도록 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.4 volatile</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 변수에만 적용된다.</FONT>
<P><FONT FACE="바탕">- 다중 프로세서 환경에서 변수를 비동기적으로 변경할 수 있도록 지정하기 위한 제한자이다. 
</FONT><P><FONT FACE="바탕">- default로 선언되기 때문에 거의 사용하지 않는다. 
</FONT><BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 각 제한자의 적용범위를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=672 HEIGHT=265>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Modifier</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Classes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Attributes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Methods</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Constructors</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=4 WIDTH=8%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Access</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">public</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<BR></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">protected</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">inner class의 경우에는 가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">friendly</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(공백)</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">private</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">inner class의 경우에는 가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Encapsulation - 정보 은닉화에 사용</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">클래스 안에서만 사용할 때</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Singleton Design Pattern</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=672 HEIGHT=390>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Modifier</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Classes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Attributes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Methods</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Constructors</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=6 WIDTH=8%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Usage</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">abstract</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체를 생성 못함, 상속 가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">body는 구현하지 않고 선언만 할 때</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">static</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">공유변수, 객체 생성 없이 변수에 참조</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체 생성 없이 참조</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">final</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체 생성 가능, 상속은 불가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">상수 값 선언 시, static과 같이 사용</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">final 메소드는 override 안됨</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">transient</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체 직렬화에 사용</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">synchronized</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Lock-한번에 하나의 쓰레드만 접근 가능하게 함</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">volatile</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">비동기화, 기본값</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT>
<BR></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 생성자와 메소드 내에서 선언되는 변수는 Access Level Modifier를 사용할 수 없다.(</FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">만 가능) 또한 static 제한자도 사용할 수 없다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV139.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.9  </FONT><FONT FACE="바탕">인터페이스</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다중상속을 지원하지는 않지만 필요한 기능이기 때문에 단일상속의 한계점을 극복하기 위해 만든 것이 인터페이스이다.</FONT>
<P><FONT FACE="바탕">인터페이스는 클래스의 골격만 정의해 놓은 것으로 이를 이용하면 여러 개의 부모를 갖는 효과를 줄 수 있다. 즉 인터페이스는 서로 주고받는 표준을 말하며, 같은 인터페이스를 구현하고 있으면 상대방이 어떻게 구현하였는지는 상관없이 내가 알고있는 방법으로 사용할 수 있게된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.1 </FONT><FONT FACE="바탕">인터페이스</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 인터페이스를 선언하는 방법이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=641 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">interface </FONT><I><FONT FACE="Courier New">InterfaceName</FONT></I><FONT FACE="Courier New"> [extends &lt;</FONT><I><FONT FACE="Courier New">SuperInterface&gt; &lt;,SuperInterface&gt;*</FONT></I><FONT FACE="Courier New">]{</FONT>
<P>	<I><FONT FACE="Courier New">interfaceBody</FONT></I>
<P>	<FONT FACE="Courier New">//[public static final]</FONT><I><FONT FACE="Courier New"> </FONT></I><FONT FACE="Courier New">data-type</FONT><I><FONT FACE="Courier New"> variableName;</FONT></I>
<P>	<FONT FACE="Courier New">//[public abstract] return-type </FONT><I><FONT FACE="Courier New">methodName</FONT></I><FONT FACE="Courier New">;</FONT>
<P><FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">인터페이스에 사용되는 필드는 상수(static final 변수)만 가질 수 있고, 메소드는 메소드의 원형만 선언 가능하다. 그리고 메소드의 몸체는 인터페이스를 사용하는 클래스 내에서 구현해야 한다.</FONT>
<P><FONT FACE="바탕">클래스가 상속 가능한 것처럼 인터페이스도 &quot;extends&quot; 예약어를 사용하면 상속을 받을 수 있으며, 다른 인터페이스를 다중상속 할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">예를 들면 인어는 사람의 속성과 물고기의 속성을 함께 물려받았다. 그러나 자바에서는 동시에 사람과 물고기의 속성을 함께 상속받지 못하므로 둘 중에서 하나는 인터페이스로 구현하는 것이다. 만약 사람이 클래스로 구현되었다면 물고기는 인터페이스로 구현해야한다. 다음은 물고기 인터페이스를 구현한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface Aquatic {</FONT>
<P>	<FONT FACE="Courier New">public void swimming();</FONT>
<P>	<FONT FACE="Courier New">public void breathUnderWater();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위 예에서 2번째 줄과 3번째 줄에서 인터페이스를 선언할 때 메소드 기술시 몸체는 구현하지 않고 원형만 선언했다.(분명히 메소드 선언하는 곳에 &quot;{ }&quot;가 빠져있음.) 실제 메소드의 몸체는 인터페이스를 구현하는 클래스에서 메소드의 몸체를 구현해 주어야 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.2 </FONT><FONT FACE="바탕">인터페이스</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스를 사용하는 것을 &quot;인터페이스를 구현한다&quot; 라고 하며 &quot;implements&quot;라는 예약어를 이용하는데, 클래스 선언부에서 상속받을 클래스 이름 다음에 &quot;implements&quot;라 기술하고 인터페이스 이름을 쓴다. 만약 여러 개의 인터페이스를 구현할 때에는 &quot;,&quot;로 구분하여 나열한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=617 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">class </FONT><I><FONT FACE="Courier New">className</FONT></I><FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">implements </FONT></B><I><B><FONT FACE="Courier New">InterfaceName1</FONT></B></I><FONT FACE="Courier New">, </FONT><I><B><FONT FACE="Courier New">InterfaceName2, ... </FONT></B></I><FONT FACE="Courier New">{</FONT>
<P>	<I><FONT FACE="Courier New">classBody;</FONT></I>
<P><FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 사람속성은 상속받고, 물고기속성은 인터페이스를 구현하여 인어를 만드는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=137>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Mermaid extends Human </FONT><B><FONT FACE="Courier New">implements</FONT></B><FONT FACE="Courier New"> Aquatic {</FONT>
<P>	<FONT FACE="Courier New">public void swimming() {</FONT>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">실제</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수영</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">부분을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">구현</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void breathUnderWater(){ }</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">2번째 줄이 인터페이스를 사용한 부분이다.(이곳에는 &quot;{ }&quot;가 있음.) 인터페이스를 구현할 때 메소드 재정의 규칙을 따라야하며, 인터페이스에 선언된 메소드 중 실제사용하지 않는 메소드가 있어도 클래스 내에서는 모두 구현해 주어야한다.</FONT>
<BR>
<P><FONT FACE="바탕">앞에서 설명한 인터페이스의 구현과 사용 예를 들면 다음과 같다.</FONT>
<P><FONT FACE="바탕">다음은 도형의 넓이를 구하는 프로그램을 작성하기 위한 인터페이스이다. 실제 도형의 넓이는 종류에 따라 서로 다른 식을 갖게되는데, 도형의 넓이를 구하는 클래스를 만들 때 정의한 Shape인터페이스를 implements할 경우 사용하는 식이 무었이든 구현부와는 관계없이 calcArea() 메소드를 사용하면 도형의 넓이를 구할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Shape.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">interface</FONT></B><FONT FACE="Courier New"> Shape{</FONT>
<P>	<B><FONT FACE="Courier New">public double calcArea();</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=279>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Rectangle.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Rectangle </FONT><B><FONT FACE="Courier New">implements Shape </FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">int width;</FONT>
<P>	<FONT FACE="Courier New">int height;</FONT>
<P>	<FONT FACE="Courier New">public Rectangle(int init_width, int init_height) {</FONT>
<P>		<FONT FACE="Courier New">width = init_width;</FONT>
<P>		<FONT FACE="Courier New">height = init_height;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public double calcArea() {</FONT></B>
<P>		<FONT FACE="Courier New">return 	width * height;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=299>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Triangle.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Triangle </FONT><B><FONT FACE="Courier New">implements Shape</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">int width;</FONT>
<P>	<FONT FACE="Courier New">int height;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Triangle(int init_width, int init_height) {</FONT>
<P>		<FONT FACE="Courier New">width = init_width;</FONT>
<P>		<FONT FACE="Courier New">height = init_height;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public double calcArea() {</FONT></B>
<P>		<FONT FACE="Courier New">return 	width * height / 2;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestArea.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestArea {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Rectangle rect = new Rectangle(20,34);</FONT>
<P>		<FONT FACE="Courier New">Triangle tri = new Triangle(20,34);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;rect's Area = &quot; + </FONT><B><FONT FACE="Courier New">rect.calcArea()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;tri's Area = &quot; + </FONT><B><FONT FACE="Courier New">tri.calcArea()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV140.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV141.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">rect's Area = 680.0</FONT></B>
<P>		<B><FONT FACE="Courier New">tri's Area = 340.0</FONT></B>
<BR>
<P><FONT FACE="바탕">앞의 예에서처럼 개발자가 인터페이스 내용에 대해 알고있으면 실제구현에 관계없이 해당 인터페이스를 보고 사용할 수 있다. 대표적인 예가 JDBC 인터페이스인데, JDBC인터페이스는 자바와 데이터베이스 연결을 위해 제공하고있는 일종의 설명서이다. 이 인터페이스의 구현은 각 데이터베이스 제조사가 구현하게 되는데, 개발자는 구현된 구체적인 내용을 몰라도 인터페이스를 보고 프로그램을 작성할 수 있는 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.3 </FONT><FONT FACE="바탕">인터페이스의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">멤버</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스 내의 변수는 자동으로 public static final로 선언되며, 메소드는 body가 없어야 하며 자동으로 public abstract로 선언된다.</FONT>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 인터페이스 내에 선언된 멤버가 실제로 선언되는 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=165>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface{</FONT>
<P>	<FONT FACE="Courier New">public static final int A = 11;      </FONT>
<P>	<FONT FACE="Courier New">int My_INT = 22; //</FONT><FONT FACE="바탕">이렇게</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">해도</FONT><FONT FACE="Courier New"> public static final </FONT><FONT FACE="바탕">이다</FONT><FONT FACE="Courier New">.</FONT>
<BR>
<P>	<FONT FACE="Courier New">public /* abstract */ void run();           </FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=361>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInterface.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInterface implements MyInterface{</FONT>
<P>	<FONT FACE="Courier New">public void run(){ </FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">My_INT  = 33; //Error - MyInterface</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> final </FONT><FONT FACE="바탕">변수임</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;run() : &quot; + MyInterface.A); </FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(MyInterface.My_INT);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(TestInterface.My_INT);</FONT>
<BR>
<P>		<FONT FACE="Courier New">MyInterface t1 = new TestInterface();</FONT>
<P>		<FONT FACE="Courier New">t1.run();</FONT>
<P>		<FONT FACE="Courier New">TestInterface t2 = new TestInterface();</FONT>
<P>		<FONT FACE="Courier New">t2.run();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV142.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV143.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">22</FONT></B>
<P>		<B><FONT FACE="Courier New">22</FONT></B>
<P>		<B><FONT FACE="Courier New">run() : 11</FONT></B>
<P>		<B><FONT FACE="Courier New">run() : 11</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.4 </FONT><FONT FACE="바탕">인터페이스</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">다중상속</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스는 다른 인터페이스를 다중상속 받을 수 있다. 다음은 인터페이스 다중상속에 대한 예를 보인다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface1 {</FONT>
<P>	<FONT FACE="Courier New">void m1();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface2 {</FONT>
<P>	<FONT FACE="Courier New">void m2();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface3.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface3 </FONT><B><FONT FACE="Courier New">extends MyInterface1, MyInterface2</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">void m3();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">다음은 한 클래스가 여러 인터페이스를 구현하는 예를 보이고 있다. 하나의 클래스는 여러 개의 서로 다른 인터페이스를 구현할 수 있는데, 다음처럼 MyInterface3을 implements할 때는 MyInterface3이 갖고있는 메소드는 물론이고, 부모 인터페이스인 MyInterface1과 MyInterface2의 메소드도 구현해야 한다. MyClass의 main()안에서 보인 것처럼 인터페이스를 구현했을 때도 상속과 마찬가지로 다형성이 적용된다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface4.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface4 {</FONT>
<P>	<FONT FACE="Courier New">void m4();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=544>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class MyClass </FONT><B><FONT FACE="Courier New">implements MyInterface3, MyInterface4</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">public void m1() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m1() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void m2() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m2() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;); </FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void m3() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m3() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void m4() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m4() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MyClass mc = new MyClass();</FONT>
<P>		<FONT FACE="Courier New">MyInterface3 i3 = mc; //</FONT><FONT FACE="바탕">다형성이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">적용됨</FONT>
<P>		<FONT FACE="Courier New">i3.m1();</FONT>
<P>		<FONT FACE="Courier New">i3.m2();</FONT>
<P>		<FONT FACE="Courier New">i3.m3();</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">i3.m4();  //Error - MyInterface3 </FONT><FONT FACE="바탕">에는</FONT><FONT FACE="Courier New"> m4()</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">없다</FONT><FONT FACE="Courier New">.</FONT>
<P>		<FONT FACE="Courier New">MyInterface4 i4 = mc;</FONT>
<P>		<FONT FACE="Courier New">i4.m4();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="FYXIV144.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV145.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">m1() </FONT><FONT FACE="바탕">구현</FONT></B>
<P>		<B><FONT FACE="Courier New">m2() </FONT><FONT FACE="바탕">구현</FONT></B>
<P>		<B><FONT FACE="Courier New">m3() </FONT><FONT FACE="바탕">구현</FONT></B>
<P>		<B><FONT FACE="Courier New">m4() </FONT><FONT FACE="바탕">구현</FONT></B>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="FYXIV146.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><B><FONT FACE="Bookman Old Style">3.10</FONT></B></SPAN></FONT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">  this</FONT><FONT FACE="바탕">와</FONT><FONT FACE="Bookman Old Style"> super</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">앞에서 super에 대해서 간단하게 소개했었다. 여기서는 this와 비교하여 그 사용법을 좀 더 자세하게 설명하기로 한다.</FONT>
<P><FONT FACE="바탕">this는 &quot;this.&quot;를 이용하면 자신의 object를 가리길 수 있고, &quot;this()&quot;를 사용하면 자신의 생성자를 호출 할 수 있다. 
</FONT><P><FONT FACE="바탕">super는 this와는 반대되는 개념으로 &quot;super.&quot;를 이용하면 부모클래스의 메소드 또는 변수를 참조할 수 있으며, 상속받는 전제하에 부모클래스의 생성자를 호출할 수도 있다..</FONT>
<BR>
<P><FONT FACE="바탕">먼저 this가 사용되는 예는 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String name, int age) {</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">name = name;</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">age = age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Person(String name) {</FONT>
<P>		<B><FONT FACE="Courier New">this(name, 0);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Person() {</FONT>
<P>		<B><FONT FACE="Courier New">this(null, 0);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public Person(String name, int age) {</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">name = name;</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">age = age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">this.'은 생성자 또는 메소드 내에서 사용되며, 동일 클래스 내의 멤버를 참조할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public Person(String name) {</FONT>
<P>		<B><FONT FACE="Courier New">this(name, 0)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">this()'는 생성자 내에서만 사용되며, 동일 클래스 내의 다른 생성자를 참조할 수 있고 반드시 생성자 내의 첫 번째 줄에 기술해야한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 super가 사용되는 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String studentID;</FONT>
<P>	
<P>	<FONT FACE="Courier New">public Student(String name, int age, String studentID) {</FONT>
<P>		<B><FONT FACE="Courier New">super(name, age);</FONT></B>
<P>		<FONT FACE="Courier New">this.studentID = studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Student(String name, int age) {</FONT>
<P>		<FONT FACE="Courier New">this(name, age, null);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + 			&quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public Student(String name, int age, String studentID) {</FONT>
<P>		<B><FONT FACE="Courier New">super(name, age);</FONT></B>
<P>		<FONT FACE="Courier New">this.studentID = studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">super()'는 생성자 내에서만 사용가능하며 부모클래스의 생성자를 호출하는데 사용된다. this()와 마찬가지로 생성자 내의 첫 번째 줄에 와야한다. 생성자 내에는 this() 또는 super()가 반드시 있어야 하는데, 이를 기술하지 않으면 묵시적으로 super()가 삽입되어 부모클래스의 기본 생성자를 호출한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + 			&quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">super.'는 부모클래스의 멤버를 참조하는데 사용되는데 특히 재정의된 메소드에서 현재클래스의 메소드와 부모클래스의 메소드를 구분하여 호출할 때 유용하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 두 클래스를 테스트하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestThisSuper.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class TestThisSuper {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Person p = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 25);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( p.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV147.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV148.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001234</FONT></B>
<BR>
<BR>
<P>
<IMG SRC="FYXIV149.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV150.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV151.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[AWT 프로그래밍]</FONT></SPAN></FONT>
<BR>
<P>
<BR>
<BR>
<P>
<IMG SRC="FYXIV153.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.1  AWT </FONT><FONT FACE="바탕">컴포넌트</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT(Abstract Window Toolkit)는 GUI와 관련된 클래스의 묶음인데, GUI와 관련된 모든 클래스를 말하지는 않지만 최근 많이 사용하는 스윙(SWING)도 여기에 포함된다. 즉, AWT는 기본적인 GUI와 관련된 클래스의 묶음을 말한다. 자바 AWT의 기본 구성요소는 컴포넌트와 컨테이너이다. 컴포넌트는 일반적으로 GUI에서 버튼(Button)이나 레이블(Label), 또는 텍스트 필드(TextField)와 같이 보여지도록 나타나는 부분이며, 컴포넌트는 컨테이너에 포함되어 화면에 출력된다. 일반적으로 컨테이너에는 하나 이상의 컴포넌트를 포함할 수 있으며, 컴포넌트뿐만 아니라 다른 컨테이너도 포함 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음의 예를 보며 이해하기로 한다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SampleWindow.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class SampleWindow {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public SampleWindow() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>	
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">SampleWindow sw = new SampleWindow();</FONT>
<P>		<FONT FACE="Courier New">sw.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">AWT와 관련된 클래스를 사용하기 위해 java.awt 패키지를 import.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Frame f;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Frame클래스의 객체변수를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public SampleWindow() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우&quot;</FONT><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성자를 만들고 그 안에 Frame클래스의 객체를 생성한다. 여기서 윈도우를 만들면서 Window클래스를 사용하지 않고 Frame클래스를 사용한 것은 Window클래스는 경계선과 타이틀 바를 갖지 않는 네모난 창에 불과하지만, Frame클래스는 Window클래스의 하위 클래스로서 프레임과 타이틀 바를 갖는 윈도우를 생성하기 때문이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>	</TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">객체 생성과 관련된 부분은 생성자를 이용하고 이 메소드에서는 그 이외의 부분을 기술하였다. 
</FONT><P><FONT FACE="바탕">12 : setSize() 메소드는 컴포넌트 객체의 크기를 픽셀단위로 지정한다. 여기서는 프레임의 크기를 가로 300픽셀, 세로 200픽셀로 설정하였다. 
</FONT><P><FONT FACE="바탕">13 : setVisible() 메소드는 주어진 논리형 변수 값이 false면 화면에 나타나지 않고, true면 나타난다. 만약 이 줄이 없으면 실행은 되지만 화면에는 아무것도 나타나지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">SampleWindow sw = new SampleWindow();</FONT>
<P>		<FONT FACE="Courier New">sw.launchFrame();</FONT>
<P> 	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">main() 메소드의 선언부로 개체생성 후 launchFrame() 메소드를 호출하여 화면에 윈도우를 출력시킨다.</FONT>
<P><FONT FACE="바탕">여기서 launchFrame() 메소드 안의 내용이 생성자 안에 기술돼도 실행에는 지장이 없지만, 생성자 안에서 객체 생성 이외의 작업을 진행하도록 프로그래밍 하는 방법은 권장할만한 기법은 아니다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 프로그램을 실행시켰을 때 나타나는 화면이다. 물론 이벤트를 다루지 않았기 때문에 윈도우의 종료버튼을 눌러도 프로그램이 종료되지 않는다.(강제로 프로그램을 종료시키기 위해서는 Ctrl+C를 누른다.)</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV154.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음은 자바 컴포넌트 계층 구조를 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV155.GIF" BORDER=0 WIDTH=567 HEIGHT=337 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">이상의 모든 컴포넌트는 컴포넌트클래스에서 상속받는다. 특성에 따라 컴포넌트를 분류하면 다음과 같이 3가지로 분류할 수 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 기본 컴포넌트 : Button, Label, Checkbox, Choice, List, Scrollbar, Canvas</FONT></SPAN></FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 텍스트 컴포넌트 :  TextField, TextArea</FONT></SPAN></FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 컨테이너 컴포넌트 : Panel, Applet, Window, Frame, Dialog, FileDialog</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">컴포넌트 클래스가 제공하는 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ Rectangle getBounds() : 컴포넌트의 테두리(바운드) 정보를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Rectangle getBounds(Rectangle r) : 컴포넌트의 바운드 정보를 주어진 Rectangle 객체 r에 저장하고 이 객체를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getX() : 컴포넌트의 x 축 시작좌표 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getY() : 컴포넌트의 y축 시작좌표 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Point getLocation() : 컴포넌트의 현재 위치 좌표를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Point getLocation(Point p) : 컴포넌트의 현재 위치 좌표를 주어진 Point객체 p에 저장하고 이 객체를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ Point getLocationOnScreen() : 컴포넌트의 화면상에서의 현재 좌표위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getWidth() : 컴포너트의 가로(폭)값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHeight() : 컴포넌트의 세로(높이)값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getSize() : 컴포넌트의 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getSize(Dimension d) : 컴포넌트의 크기를 얻어 Dimension객체 d에 저장하고 이 객체를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setLocation(int x, int y) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P>  <FONT FACE="돋움">∘ void setLocation(Point p) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSize(Dimension d) : 컴포넌트의 폭과 높이를 각각 d.width와 d.height로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSize(int width, int height) : 컴포넌트의 폭과 높이를 각각 width와 height로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setBounds(int x, int y, int width, int height) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setBounds(Rectangle r) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setName(String name) : 컴포넌트의 이름을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getMaximumSize() : 컴포넌트의 최대 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getMinimumSize() : 컴포넌트의 최소 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Dimension getPreferredSize() : 컴포넌트의 적당한 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Component getComponentAt(int x, int y) : 주어진 좌표를 포함하고 있는 컴포넌트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Component getComponentAt(Point p) : 주어진 좌표를 포함하고 있는 컴포넌트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean contains(int x, int y) : 주어진 위치 좌표를 포함하고 있는 컴포넌트가 있는지의 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean contains(Point p) : 주어진 위치 좌표를 포함하고 있는 컴포넌트가 있는지의 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isDisplayable() : 이 컴포넌트가 디스플레이 가능한 지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isShowing() : 이 컴포넌트가 보여지고 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isValid() : 이 컴포넌트가 유효한지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isVisible() : 컴포넌트가 보여질 수 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVisible(boolean b) : 컴포넌트를 보이거나 보이지 않게 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void invalidate() : 컴포넌트를 무효화한다.</FONT>
<P>  <FONT FACE="돋움">∘ void validate() : 이 컴포넌트가 유효한 레이아웃을 갖도록 만든다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.1.1 </FONT><FONT FACE="바탕">기본</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">컴포넌트</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=433 HEIGHT=212>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 기능</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Button</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">버튼 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Label</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">고정된 문자열 표시</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Checkbox</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">체크박스나 라디오 박스 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Choice</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">드롭다운 메뉴 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">List</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">리스트 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Scrollbar</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">스크롤바 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Canvas</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=62%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">그래픽객체를 그릴 때 사용</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.1 Button</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Button 컴포넌트 클래스는 사용자가 버튼을 누를 때 취해야할 동작할  생성하는 간단한 제어다. 버튼컴포넌트도 클래스객체를 생성한 후에 반드시 add() 메소드를 사용하여 컨테이너에 추가해야 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV156.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 예제는 앞의 설명을 실행하는 Button컴포넌트 프로그램이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=361>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ButtonExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ButtonExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ButtonExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Button Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 2&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">b1.setBackground(Color.yellow);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ButtonExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b1.setForeground(Color.blue);</FONT>
<P>		<FONT FACE="Courier New">b2.setEnabled(false);</FONT>
<P>		<FONT FACE="Courier New">f.add(b1);</FONT>
<P>		<FONT FACE="Courier New">f.add(b2);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ButtonExample be = new ButtonExample();</FONT>
<P>		<FONT FACE="Courier New">be.launchFrame();</FONT>
<P>   <FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Button b1, b2;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼객체를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 2&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성자 내에서 레이블을 가진 버튼과 그렇지 않은 버튼 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이아웃 관리자를 FlowLayout으로 지정한 것이다. 레이아웃 관리자는 컴포넌트의 배치를 다루는 것으로 자세한 내용은 다음 장에서 설명하기로 한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b2.setEnabled(false);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setEnabled() 인자값을 false로 지정하면 입력에 반응하지 않는 비 활성 상태가 된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myButton);</FONT>
<P>		<FONT FACE="Courier New">f.add(yourButton);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">두 개의 버튼객체를 add() 메소드를 사용하여 컨테이너에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">Button 클래스가 제공하는 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P>  <FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ public Button() : 레이블 없는 버튼을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ public Button(String label) : 주어진 레이블의 버튼을 생성한다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ public String getLabel() : 버튼의 레이블을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ public void setLabel(String label) : 버튼의 레이블을 주어진 문자열로 설정한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.2 Label</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Label 컴포넌트 클래스는 원하는 문장을 입력하는데 사용한다. 사용법은 레이블 객체를 생성한 후 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV157.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 예는 Label컴포넌트를 이용하는 방법을 기술한 프로그램이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=565>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">LabelExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class LabelExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Label myLabel;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public LabelExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Label Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myLabel = new Label(&quot;Hello World!&quot;, Label.RIGHT);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">myLabel.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">myLabel.setForeground(Color.blue);</FONT>
<P>		<FONT FACE="Courier New">f.add(myLabel, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">LabelExample le = new LabelExample();</FONT>
<P>		<FONT FACE="Courier New">le.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Label myLabel;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이블 객체를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myLabel = new Label(&quot;Hello World!&quot;, Label.RIGHT);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">&quot;Hello World!&quot; 문자열을 오른쪽 정렬방식을 가진 레이블 객체로 생성.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myLabel.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">myLabel.setForeground(Color.blue);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이블의 색상을 지정하는 부분으로 setBackground() 메소드는 배경색(여기서는 레이블의 배경색)을, setForeground() 메소드는 전경색(여기서는 글자의 색)을 설정할 수 있다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myLabel, BorderLayout.SOUTH);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">객체 myLabel을 add() 메소드를 이용하여 컨테이너 아래쪽에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">Label 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 속성</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int CENTER : 가운데 정렬</FONT>
<P>  <FONT FACE="돋움">∘ static int LEFT : 왼쪽 정렬</FONT>
<P>  <FONT FACE="돋움">∘ static int RIGHT : 오른쪽 정렬</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Label() : 레이블을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Label(String text) : 주어진 이름의 레이블을 생성하고, 기본적으로 왼쪽 정렬 상태를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ Label(String text, int alignment) : 주어진 이름의 레이블을 생성하고, 주어진 정렬방식으로 정렬한다. 정렬값은 Label.LEFT, Label.CENTER, Label.RIGHT가 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getAlignment() : 현재 정렬 방식을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setAlignment(int alignment) : 정렬 방식을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getText() : 레이블의 텍스트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setText(String text) : 레이블의 텍스트를 주어진 텍스트로 설정한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.3 Checkbox</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Checkbox는 다양한 옵션을 선택하는데 사용된다. &quot;on&quot; 또는 &quot;off&quot; 두가지 중 한가지 상태를 나타낸다. 체크박스를 누르면 설정상태가 변하며 처리할 동작이 일어난다. 이와 비슷하게 항목을 선택할 수 있는 컴포넌트에는 Choice, List, Menu 컴포넌트 등이 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV158.GIF" BORDER=0 WIDTH=357 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 그램에서 처럼 체크박스에는 두 종류가 있는데 먼저, 위 줄에 있는 세 개의 체크박스는 서로 독립적으로 선택될 수 있어, 동시에 모두 선택할 수도 있고, 하나도 선택하지 않을 수도 있다. 
</FONT><P><FONT FACE="바탕">아래 세 개의 체크박스는 그룹으로 관리되므로 그룹에 속한 체크박스 중 하나만 선택된다. 
</FONT><P><FONT FACE="바탕">이들 두 그룹의 체크박스는 외형상으로도 차이가 있는데, 위 줄의 체크박스는 일반적인 체크박스 형태인 반면 아래 줄의 체크박스들은 라디오 버튼의 형태를 갖고있다.</FONT>
<P><FONT FACE="바탕">여러 개의 체크박스 중 하나만 선택하려면 체크박스그룹(CheckboxGroup) 객체에 추가해준다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 예제는 앞에서 설명한 두 가지 형태의 체크박스에 대한 프로그램이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CheckboxExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CheckboxExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Checkbox check1, check2, check3;</FONT>
<P>	<FONT FACE="Courier New">private Checkbox radio1, radio2, radio3;</FONT>
<P>	<FONT FACE="Courier New">private CheckboxGroup group1;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CheckboxExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Checkbox Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">check1 = new Checkbox(&quot;Checkbox 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">check2 = new Checkbox(&quot;Checkbox 2&quot;, true);</FONT>
<P>		<FONT FACE="Courier New">check3 = new Checkbox(&quot;Checkbox 3&quot;);</FONT>
<P>		<FONT FACE="Courier New">group1 = new CheckboxGroup();</FONT>
<P>		<FONT FACE="Courier New">radio1 = new Checkbox(&quot;Checkbox 4&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio2 = new Checkbox(&quot;Checkbox 5&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio3 = new Checkbox(&quot;Checkbox 6&quot;, group1, true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CheckboxExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">check3.setState(true);</FONT>
<P>		<FONT FACE="Courier New">f.add(check1);  f.add(check2);  f.add(check3);</FONT>
<P>		<FONT FACE="Courier New">f.add(radio1);  f.add(radio2);  f.add(radio3);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(350, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CheckboxExample ce = new CheckboxExample();</FONT>
<P>		<FONT FACE="Courier New">ce.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Checkbox check1, check2, check3;</FONT>
<P>	<FONT FACE="Courier New">private Checkbox radio1, radio2, radio3;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Checkbox 클래스로부터 객체 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private CheckboxGroup group1</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">라디오버튼을 만들기 위해 체크박스 그룹객체를 선언.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">check1 = new Checkbox(&quot;Checkbox 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">check2 = new Checkbox(&quot;Checkbox 2&quot;, true);</FONT>
<P>		<FONT FACE="Courier New">check3 = new Checkbox(&quot;Checkbox 3&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">11 : 체크박스에 이름 부여. 
</FONT><P><FONT FACE="바탕">12 : 체크박스 이름을 부여하면서 초기 선택값으로 true를 주어 미리 선택이 되도록 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">group1 = new CheckboxGroup();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">라디오버튼을 만들기 위해 7번째 줄에서 선언된 체크박스 그룹객체를 생성.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">radio1 = new Checkbox(&quot;Checkbox 4&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio2 = new Checkbox(&quot;Checkbox 5&quot;, group1, false);</FONT>
<P>		<FONT FACE="Courier New">radio3 = new Checkbox(&quot;Checkbox 6&quot;, group1, true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">라디오버튼을 만들기 위해 체크박스를 그룹화하여 객체를 생성.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">check3.setState(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setState() 메소드에 인자값으로 true를 주어 체크박스를 선택상태로 설정. 선택 해제를 하려면 인자값으로 false를 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(check1);  f.add(check2);  f.add(check3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">체크박스 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(radio1);  f.add(radio2);  f.add(radio3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">체크박스 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">Checkbox 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Checkbox() : 레이블이 없는 체크박스를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label) : 주어진 레이블의 체크박스를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label, boolean state) : 주어진 레이블의 체크박스를 생성하며, 체크박스의 초기 선택 여부를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label, boolean state, CheckboxGroup group) : 주어진 레이블의 체크박스를 생성하며, 체크박스의 초기 선택 여부를 설정하고, 체크박스 그룹을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Checkbox(String label, CheckboxGroup group, boolean state) : 주어진 레이블의 체크박스를 생성하며, 체크박스의 초기 선택 여부를 설정하고, 체크박스 그룹을 설정한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>   <FONT FACE="돋움">∘ String getLabel() : 체크박스의 레이블을 구한다.</FONT>
<P>   <FONT FACE="돋움">∘ void setLabel(String label) : 체크박스의 레이블을 설정한다.</FONT>
<P>   <FONT FACE="돋움">∘ boolean getState() : 체크박스의 상태가 &quot;on&quot; 또는 &quot;off&quot; 상태인지를 얻는다.</FONT>
<P>   <FONT FACE="돋움">∘ void setState(boolean state) : 체크박스의 상태를 설정한다.(true이면 &quot;on&quot;)</FONT>
<P>   <FONT FACE="돋움">∘ CheckboxGroup getCheckboxGroup() : 설정된 체크박스 그룹을 얻는다.</FONT>
<P>   <FONT FACE="돋움">∘ void setCheckboxGroup(CheckboxGroup g) : 체크박스 그룹을 설정한다.</FONT>
<BR>
<P><FONT FACE="바탕">CheckboxGroup 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ CheckboxGroup() : 체크박스 그룹 객체를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Checkbox getSelectedCheckbox() : 체크박스 그룹 중에서 현재 선택된 체크박스를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setCurrent(Checkbox box) : setSelectedCheckbox(Checkbox)으로 바뀌었다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSelectedCheckbox(Checkbox box) : 현재 주어진 체크박스가 선택되도록 설정한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.4 Choice</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Choice 컴포넌트 클래스는 다음 그림과 같이 드롭다운(drop-down) 리스트를 제공해주는 컴포넌트이다. 이 컴포넌트는 제한된 공간에 많은 내용을 나타낼 때 유용하다. 
</FONT><P ALIGN=CENTER>  
<P ALIGN=CENTER>
<IMG SRC="FYXIV159.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<IMG SRC="FYXIV160.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Choice 컴포넌트를 사용하는 예를 보인 것이다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChoiceExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChoiceExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Choice myChoice;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ChoiceExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Choice Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice = new Choice();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows 95/98&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows NT&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows 2000&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Solaris&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChoiceExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;OS/2&quot;);</FONT>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Mac&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.add(myChoice);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ChoiceExample ce = new ChoiceExample();</FONT>
<P>		<FONT FACE="Courier New">ce.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=26>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myChoice = new Choice();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6번째 줄에서 선언된 Choice 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=26>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myChoice.add(&quot;Windows 95/98&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">15번째 줄에서 20번째 줄까지는 메뉴 항목을 Choice 컴포넌트에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=26>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myChoice);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 레이블 객체를 add() 메소드를 이용하여 컨테이너에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">Choice 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Choice() : 선택 메뉴를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void add(String item) : 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void addItem(String item) : 아이템을 추가한다. JDK1.2버전에서 자주 보던 것이다. Choice클래스에서는 사용되지만 대부분의 클래스에서는 사용하지 않고 있다.</FONT>
<P>  <FONT FACE="돋움">∘ int getItemCount() : 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getItem(int index) : 주어진 인덱스에 해당하는 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectedIndex() : 선택된 아이템의 인덱스를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getSelectedItem() : 선택된 아이템의 이름을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(String item, int index) : 주어진 이름의 아이템을 주어진 인덱스에 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int position) : 주어진 위치의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(String item) : 주어진 이름의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeAll() : 선택 메뉴에 있는 모든 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(int pos) : 주어진 위치의 아이템이 선택되도록 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(String str) : 주어진 이름의 아이템이 선택되도록 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.5 List</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.List 컴포넌트 클래스는 다수의 선택항목이 리스트에 나타나고 사용자가 이를 선택하고자 할 때 사용한다. 원하는 아이템을 클릭하여 선택하고 더블 클릭하거나 리턴하여 액션 이벤트를 발생시킬 수 있다. List 컴포넌트는 동시에 여러 개를 선택할 수도 있고 하나의 아이템만 선택할 수도 있다.</FONT>
<P ALIGN=CENTER>  
<IMG SRC="FYXIV161.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 예에서 왼쪽리스트는 동시에 여러 개의 아이템을 선택할 수 있고, 오른쪽리스트는 하나의 아이템만 선택할 수 있는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 List컴포넌트를 사용하는 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private List myList, yourList;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListExample(){</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;List Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList = new List(3, true);</FONT>
<P>		<FONT FACE="Courier New">yourList = new List();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows 95/98&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows NT&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows 2000&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;Solaris&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;OS/2&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=519>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myList.add(&quot;Machintosh&quot;);</FONT>
<P>		<FONT FACE="Courier New">myList.add(&quot;MS-DOS&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Windows 95/98&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Windows NT&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Windows 2000&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Solaris&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;OS/2&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;Machintosh&quot;);</FONT>
<P>		<FONT FACE="Courier New">yourList.add(&quot;MS-DOS&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(myList);</FONT>
<P>		<FONT FACE="Courier New">f.add(yourList);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListExample le = new ListExample();</FONT>
<P>		<FONT FACE="Courier New">le.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myList = new List(3, true);</FONT>
<P>		<FONT FACE="Courier New">yourList = new List();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">9 : 리스트 아이템이 3줄씩 보이게 하면서 여러 개의 아이템을 동시에 선택 가능(true)하게 하는 객체를 지정한다.</FONT>
<BR>
<P><FONT FACE="바탕">10 : 스크롤 가능한 리스트 컴포넌트를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myList.add(&quot;Windows 95/98&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">15번째 줄에서 29번째 줄까지는 주어진 이름의 아이템을 각각 해당 리스트에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myList);</FONT>
<P>		<FONT FACE="Courier New">f.add(yourList);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 레이블 객체를 add() 메소드를 사용하여 컨테이너에 추가한다.</FONT>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">List 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ List() : 스크롤 가능한 리스트 컴포넌트를 생성한다. 기본값으로 4개 줄이 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ List(int rows) : 주어진 개수만큼의 줄을 보이는 스크롤 가능한 리스트 컴포넌트를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ List(int rows, boolean multipleMode) : 주어진 개수만큼의 줄을 보이게 하는 스크롤 가능한 리스트 컴포넌트를 생성하면서, 다수의 아이템을 동시에 선택가능하게 할것인지의 여부를 설정한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void add(String item) : 주어진 이름의 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void add(String item, int index) : 주어진 이름의 아이템을 해당 인덱스에 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void deselect(int index) : 주어진 인덱스의 아이템을 선택 해제한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getItem(int index) : 주어진 인덱스의 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getItemCount() : 리스트 내의 아이템 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String[] getItems() : 리스트 내의 아이템 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getRows() : 리스트에서 보이는 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectedIndex() : 선택된 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int[] getSelectedIndexes() : 선택된 아이템의 인덱스 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getSelectedItem() : 선택된 아이템의 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String[] getSelectedItems() : 선택된 아이템의 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Object[] getSelectedObjects() : 선택된 아이템을 Object 객체 배열로 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVisibleIndex() : makeVisible() 메소드에 의해 마지막으로 보여진 아이템의 인덱스를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isIndexSelected(int index) : 인덱스에 해당하는 아이템이 선택되었는지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isMultipleMode() : 여러 개의 아이템이 선택가능한지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void makeVisible(int index) : 주어진 인덱스에 해당하는 아이템을 보이게 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int position) : 주어진 위치의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(String item) : 주어진 이름의 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeAll() : 모든 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void replaceItem(String newValue, int index) : 주어진 인덱스에 해당하는 아이템을 새로운 이름으로 변경한다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(int index) : 인덱스에 해당하는 아이템을 선택한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMultipleMode(boolean b) : 여러 개의 아이템을 선택 가능하도록 설정한다.</FONT>
<P>   
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.6 Scrollbar</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Scrollbar 컴포넌트 클래스는 연속적인 값을 선택하거나, 다른 컴포넌트의 옆에 붙어서 수평, 수직 스크롤바와 같이 실제 보여지는 영역을 지정하는 역할을 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV162.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Scrollbar컴포넌트를 사용하는 예를 보인것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=519>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ScrollbarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ScrollbarExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Scrollbar mySlider;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ScrollbarExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Scrollbar Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mySlider = new Scrollbar(Scrollbar.HORIZONTAL,100,20,0,255);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.add(mySlider);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ScrollbarExample se = new ScrollbarExample();</FONT>
<P>		<FONT FACE="Courier New">se.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">mySlider = new Scrollbar(Scrollbar.HORIZONTAL,100,20,0,255);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">최소값 0, 최대값 255, 초기값 100, 스크롤바 포인터(bubble)의 크기가 20픽셀인 수평 스크롤 바를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(mySlider);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<BR>
<P><FONT FACE="바탕">Scrollbar 클래스가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 속성</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int HORIZONTAL : 수평 스크롤바를 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int VERTICAL : 수직 스크롤바를 나타낸다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Scrollbar() : 스크롤바를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Scrollbar(int orientation) : 주어진 값에 따라 수평.수직 스클롤바를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Scrollbar(int orientation, int value, int visible, int minimum, int maximum) : 주어진 스크롤바의 속성값에 해당하는 스크롤바를 생성한다. 각 값은 다음과 같은 의미를 갖는다.</FONT>
<BR>
<P><FONT FACE="바탕">- int orientation : 스크롤바가 수평이면 Scrollbar.HORIZONTAL으로, 스클롤바가 수직이면 Scrollbar.VERTICAL으로 설정해준다.</FONT>
<P><FONT FACE="바탕">- int value : 스크롤바의 초기값을 나타낸다. 일반적인 초기값은 0이다.</FONT>
<P><FONT FACE="바탕">- int visible : 스크롤 가능한 영역의 보이는 부분에 대한 픽셀 단위의 크기를 나타낸다. 
</FONT><P><FONT FACE="바탕">- int minimum : 스크롤바가 가질 수 있는 최소값을 나타낸다. 스크롤 영역을 설정하기 위한 스크롤바의 경우에는 0이 된다.</FONT>
<P><FONT FACE="바탕">- int maximum : 스크롤바가 가질 수 있는 최대값을 나타낸다. 스크롤 영역을 설정하기 위한 스크롤바의 경우 픽셀 단위의 width 또는 height 값이 된다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getBlockIncrement() : 스크롤바의 블록 증가량을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMaximum() : 스크롤바의 최대값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMinimum() : 스크롤바의 최소값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getOrientation() : 스클롤바의 방향성 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getUnitIncrement() : 스크롤바의 단위 증가량을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getValue() : 스크롤바의 현재 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVisibleAmount() : 스크롤바의 보이는 부분의 양을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setBlockIncrement(int v) : 스크롤바의 블록 증가량을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMaximum(int newMaximum) : 스크롤바의 최대값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMinimum(int newMinimum) : 스크롤바의 최소값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setOrientation(int orientation) : 스크롤바의 방향성을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setUnitIncrement(int v) : 스크롤바의 단위 증가량을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setValue(int newValue) : 스크롤바의 현재 값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setValues(int value, int visible, int minimum, int maximum) : 스크롤바의 속성 값을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVisibleAmount(int newAmount) : 스크롤바의 보이는 부분의 양을 설정한다.</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.1.7 Canvas</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Canvas 컴포넌트 클래스는 특정한 모습이 없으며, 그림을 그리는 등 영상처리 작업을 하는데 유용한 컴포넌트이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV163.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Canvas컴포넌트의 사용 예를 보인 것이다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=607>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CanvasExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CanvasExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Canvas myCanvas;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CanvasExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Canvas Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myCanvas = new Canvas();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myCanvas.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">myCanvas.setSize(100, 50);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(myCanvas);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CanvasExample ce = new CanvasExample();</FONT>
<P>		<FONT FACE="Courier New">ce.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myCanvas = new Canvas();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">캔버스 컴포넌트를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myCanvas.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">myCanvas.setSize(100, 50);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">캔버스의 배경을 빨간색으로 지정하고, 크기를 가로 100픽셀, 세로 50픽셀로 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myCanvas);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 레이블 객체를 add() 메소드를 사용하여 컨테이너에 추가한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.1.2 </FONT><FONT FACE="바탕">텍스트</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">컴포넌트</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=380 HEIGHT=79>
<TD VALIGN=MIDDLE WIDTH=40%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=59%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 기능</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=40%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextField</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=59%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">한 줄 문자입력</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=40%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextArea</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=59%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">여러 줄 문자입력</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">TextComponent 클래스가 제공하는 주요 메소드는 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ int getCaretPosition() : 텍스트 삽입 캐럿(I자 형태)의 위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getSelectedText() : 선택 영역의 텍스트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectionEnd() : 선택된 텍스트의 끝 위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getSelectionStart() : 선택된 텍스트의 시작 위치를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getText() : 현재의 텍스트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isEditable() : 편집 가능한 상태인지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void select(int selectionStart, int selectionEnd) : 시작 위치부터 끝 위치까지 선택한다.</FONT>
<P>  <FONT FACE="돋움">∘ void selectAll() : 모든 텍스트를 선택한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setCaretPosition(int position) : 삽입 위치(캐럿)를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setEditable(boolean b) : 편집 상태를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSelectionEnd(int selectionEnd) : 선택 영역의 끝 위치를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setSelectionStart(int selectionStart) : 선택 영역의 시작 위치를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setText(String t) : 현재 텍스트를 설정한다.</FONT>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.2.1 TextField</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.TextField 컴포넌트 클래스는 한 줄 내에서 사용자의 문자 입력을 받는다. java.awt.TextComponent가 이 클래스의 상위 클래스이며, TextComponent 클래스는 텍스트 입력과 관련된 메소드를 처리해 주는 기능을 가지고 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV164.GIF" BORDER=0 WIDTH=306 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">다음 프로그램은 TextField컴포넌트를 사용하는 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TextFieldExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TextFieldExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TextField myTextField;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public TextFieldExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;TextField Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myTextField = new TextField(&quot;Hello!&quot;, 25);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">f.add(myTextField);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TextFieldExample te = new TextFieldExample();</FONT>
<P>		<FONT FACE="Courier New">te.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myTextField = new TextField(&quot;Hello!&quot;, 25);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">TextField 클래스로부터 새로운 텍스트 필드 컴포넌트를 생성한다. 숫자 25는 텍스트 필드의 폭이 25열임을 나타낸다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myTextField);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 객체를 add() 메소드를 사용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">TextField 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ TextField() : 텍스트 필드를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextField(int columns) : 주어진 열의 크기(개수)를 갖는 텍스트 필드를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextField(String text) : 주어진 텍스트를 갖는 텍스트 필드를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextField(String text, int columns) : 주어진 텍스트와 열의 크기(개수)를 갖는 텍스트 필드를 생성한다. 
</FONT><BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ boolean echoCharIsSet() : 에코 문자가 설정되어 있는지 여부를 얻는다. 패스워드를 입력받을 때 이 컴포넌트를 이용한다. 패스워드 대신 화면상에 나타날 문자를 에코 문자라고 한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getColumns() : 열의 크기(개수)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ char getEchoChar() : 에코 문자를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setColumns(int columns) : 텍스트 필드의 크기인 열의 크기(개수)를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setEchoChar(char c) : 에코 문자를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setText(String t) : 텍스트를 설정한다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.2.2 TextArea</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.TextArea 컴포넌트 클래스는 여러줄의 문자입력을 받을 때 사용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV165.GIF" BORDER=0 WIDTH=306 HEIGHT=153 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 TextArea컴포넌트를 사용하는 예를 보인것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TextAreaExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TextAreaExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TextArea myTextArea;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public TextAreaExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;TextArea Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myTextArea = new TextArea(&quot;</FONT><FONT FACE="바탕">안녕하세요</FONT><FONT FACE="Courier New">.\n</FONT><FONT FACE="바탕">반갑습니다</FONT><FONT FACE="Courier New">.&quot;, 5, 25);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">f.add(myTextArea);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TextAreaExample te = new TextAreaExample();</FONT>
<P>		<FONT FACE="Courier New">te.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myTextArea = new TextArea(&quot;</FONT><FONT FACE="바탕">안녕하세요</FONT><FONT FACE="Courier New">.\n</FONT><FONT FACE="바탕">반갑습니다</FONT><FONT FACE="Courier New">.&quot;, 5, 25);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">TextArea 클래스로부터 새로운 텍스트영역 컴포넌트를 생성한다. 숫자 5와 25는 각각 5행 25열을 의미하며, &quot;\n&quot;은 개행기능(return)을 의미한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(myTextArea);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 객체를 add() 메소드를 이용하여 컨테이너에 추가시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">TextArea 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 속성</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_BOTH : 수직.수평 스크롤바를 생성하고 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_HORIZONTAL_ONLY : 수평 스크롤바를 생성하고 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_VERTICAL_ONLY : 수직 스크롤바를 생성하고 보여준다</FONT>
<P>  <FONT FACE="돋움">∘ static int SCROLLBARS_NONE : 스크롤바를 생성하지 않는다. 
</FONT><P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ TextArea() : 텍스트영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(int rows, int columns) : 주어진 행과 열을 갖는 텍스트 영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(String text) : 주어진 텍스트를 갖는 텍스트 영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(String text, int rows, int columns) : 주어진 행, 열, 텍스트를 갖는 텍스트영역을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ TextArea(String text, int rows, int columns, int scrollbars) : 주어진 행, 열, 텍스트, 그리고 스크롤바를 갖는 텍스트 영역을 생성한다.</FONT>
<P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void append(String str) : 문자열을 텍스트 영역에 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getColumns() : 열의 크기(개수)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getRows() : 행의 크기(개수)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(String str, int pos) : 주어진 위치(라인)에 문자열을 삽입한다.</FONT>
<P>  <FONT FACE="돋움">∘ void replaceRange(String str, int start, int end) : 시작 위치부터 끝 위치 사이의 문자열을 주어진 문자열로 대체한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setColumns(int columns) : 열의 크기(개수)를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setRows(int rows) : 행의 크기(개수)를 설정한다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.1.3 </FONT><FONT FACE="바탕">컨테이너</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">컴포넌트</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">컨테이너(Container) 컴포넌트는 자신의 영역 안에 다른 컴포넌트를 포함할 수 있으며, 혼자서는 특별한 동작을 할 수 없고 다른 컴포넌트를 포함할 때만 의미가 있다. 컨테이너 클래스도 컴포넌트 클래스의 하위 클래스이기 때문에 그 자체도 컴포넌트로 취급되며, 다른 컨테이너 내에 포함될 수 있다.</FONT>
<P><FONT FACE="바탕">컴포넌트는 컨테이너에 포함되지 않으면 독자적으로 화면에 나타낼 수가 없다. 컨테이너에 컴포넌트를 포함시키기 위해서는 컨테이너 클래스의 add() 메소드를 이용한다. 
</FONT><BR>
<P><FONT FACE="바탕">컨테이너 컴포넌트의 종류와 기능은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=496 HEIGHT=186>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 기능</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Panel</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 배치</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Applet</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Window</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">윈도우 생성(경계선과 타이틀바가 없음)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Frame</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">경계선과 타이틀바를 갖는 윈도우 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Dialog</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">대화상자 생성</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FileDialog</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=67%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">파일 대화상자 생성</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">컨테이너 클래스가 제공하는 주요 메소드는 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ public Component add(Component comp) : 주어진 컴포넌트를 컴포넌트의 끝에 추가한다. 
</FONT><P>  <FONT FACE="돋움">∘ public void setLayout(LayoutManager mgr) : 레이아웃 관리자를 설정한다.</FONT>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.1 Panel</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Panel 컨테이너 클래스는 컨테이너의 하위 클래스로서 독립적인 모양이 없고 독립적인 창으로 사용할 수는 없지만 주요용도를 보면 다른 컴포넌트를 포함하거나 배치시키는데 사용한다. 또, 패널이 포함하고 있는 컴포넌트에 대한 이벤트를 처리할 수 있는 특별한 기능을 가지고 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 서로 다른 Panel객체를 이용하여 버튼 컴포넌트를 배치시키는 예를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=585>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PanelExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class PanelExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Panel p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2, b3, b4, b5, b6;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public PanelExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Panel Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;Button 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;Button 2&quot;);</FONT>
<P>		<FONT FACE="Courier New">b3 = new Button(&quot;Button 3&quot;);</FONT>
<P>		<FONT FACE="Courier New">b4 = new Button(&quot;Button 4&quot;);</FONT>
<P>		<FONT FACE="Courier New">b5 = new Button(&quot;Button 5&quot;);</FONT>
<P>		<FONT FACE="Courier New">b6 = new Button(&quot;Button 6&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b2);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b3);</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=399>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PanelExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p2.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">p2.add(b4));</FONT>
<P>		<FONT FACE="Courier New">p2.add(b5));</FONT>
<P>		<FONT FACE="Courier New">p2.add(b6));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(p1, BorderLayout.EAST);</FONT>
<P>		<FONT FACE="Courier New">f.add(p2, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">PanelExample pe = new PanelExample();</FONT>
<P>		<FONT FACE="Courier New">pe.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Panel p1, p2;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel 클래스로부터 새로운 패널 객체 2개(p1, p2)를 정의한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5번째 줄에서 정의된 패널 객체 p1과 p2를 생성자를 이용하여 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">패널 객체 p1의 바탕색을 노란색으로 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼 객체를 add() 메소드를 이용하여 패널 객체 p1에 부착시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=31>
<TD VALIGN=TOP WIDTH=9%>
<P><FONT FACE="Courier New">31:</FONT></TD>
<TD VALIGN=TOP WIDTH=90%>
<P>		<FONT FACE="Courier New">f.add(p1, BorderLayout.EAST);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">패널객체 p1을 프레임에 추가한다. add() 메소드의 인자값 중에서 BorderLayout.EAST는 BorderLayout클래스에서 객체를 오른쪽에 배치하라는 뜻이다. 레이아웃 관리자에 대해서는 다음 장에서 설명하기로 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 프로그램을 실행한 결과 화면이다. 패널을 이용하면 컴포넌트의 배치를 좀 더 쉽고 다양하게 할 수 있다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV166.GIF" BORDER=0 WIDTH=306 HEIGHT=153 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.2 Applet</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Applet 컨테이너 클래스는 Panel클래스의 하위 클래스로 애플릿 프로그램을 만드는데 사용한다. 애플릿이란 웹 브라우저에서 실행되는 자바 프로그램으로 자세한 내용은 6장에서 설명하기로 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.3 Window</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Window 컨테이너 클래스는 윈도우가 가져야 할 기본적인 기능을 제공하는 클래스로서, Dialog 와 Frame 클래스를 하위 클래스로 갖고, 경계선과 타이틀 바가 없는 윈도우를 생성한다. Window 클래스를 상속받아 하위클래스를 정의하면 독립된 윈도우로 동작할 수 있다. 실제 윈도우를 생성할 때는 Window 클래스을 사용하지 않고 하위  클래스인 Frame 클래스를 이용한다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 Frame을 이용하여 윈도우를 만들고 그 위에 Window객체를 이용하여 윈도우를 나타내는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class WindowExample extends Frame {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Window myWindow;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public WindowExample() {</FONT>
<P>		<FONT FACE="Courier New">myWindow = new Window(this);</FONT>
<P>		<FONT FACE="Courier New">myWindow.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myWindow.add(new Label(&quot;New Window&quot;));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchWindow() {</FONT>	
<P>		<FONT FACE="Courier New">myWindow.setLocation(150,150);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=359>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow.setBackground(Color.cyan);</FONT>
<P>		<FONT FACE="Courier New">myWindow.setSize(250, 150);</FONT>
<P>		<FONT FACE="Courier New">myWindow.show();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">WindowExample we = new WindowExample();</FONT>
<BR>
<P>		<FONT FACE="Courier New">we.setLocation(100,100);</FONT>
<P>		<FONT FACE="Courier New">we.setSize(250, 150);</FONT>
<P>		<FONT FACE="Courier New">we.setVisible(true);</FONT>
<BR>
<P>		<FONT FACE="Courier New">we.launchWindow();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Window myWindow;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Window 클래스로부터 새로운 윈도우 객체를 정의한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow = new Window(this);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">윈도우 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow.setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 윈도우 객체의 레이아웃 관리자를 지정한다. 레이아웃 관리자에 대해서는 다음 장에서 자세하게 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P ALIGN=RIGHT><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myWindow.add(new Label(&quot;New Window&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 윈도우 객체에 &quot;New Window&quot;라는 문자열을 가진 레이블을 생성하여 포함시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 앞의 프로그램을 실행시켰을 때 나타나는 결과화면이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV167.GIF" BORDER=0 WIDTH=281 HEIGHT=180 ALIGN=BOTTOM>
<P><FONT FACE="바탕">Window 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Window(Frame owner) : 주어진 프레임에 속하는 새로운 윈도우를 보이지 않게 한다</FONT>
<P>  <FONT FACE="돋움">∘ Window(Window owner) : 주어진 윈도우에 속하는 새로운 윈도우를 보이게 한다. 
</FONT><BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void dispose() : 윈도우에 속한 컴포넌트가 사용하는 모든 네이티브 스크린 자원의 할당을 해제한다.</FONT>
<P>  <FONT FACE="돋움">∘ Component getFocusOwner() : 윈도우가 활성화되어 있을 때, 현재 포커스를 가지고 있는 윈도우의 자손 컴포넌트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ InputContext getInputContext() : 윈도우의 입력 문장을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Locale getLocale() : 윈도우에 연결되어 있는 로케일 객체(Locale Object)를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Window[] getOwnedWindows() : 이 윈도우에 속한 모든 윈도우를 포함하는 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Window getOwner() : 윈도우의 부모윈도우를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Toolkit getToolkit() : 이 프레임의 툴킷을 얻는데 사용한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getWarningString() : 윈도우에 출력될 경고 문자열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isShowing() : 이 윈도우가 스크린 상에 보여지고 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void pack() : 윈도우를 적당한 크기로 조정하고 자신에 속한 컴포넌트를 배치한다.</FONT>
<P>  <FONT FACE="돋움">∘ void show() : 윈도우가 보여지도록 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void toBack() : 윈도우를 뒤로 보낸다.</FONT>
<P>  <FONT FACE="돋움">∘ void toFront() : 윈도우를 앞으로 가져온다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.4 Frame</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Frame 클래스는 Window의 하위 클래스로서 경계선과 타이틀바를 갖는 윈도우를 사용할 수 있게 해준다. 앞에서 예를 든 컴포넌트 프로그램은 모두 Frame 클래스를 상속하여 나타낸 것이다. 이로 미루어 알 수 있는 것은 윈도우를 이용하는 모든 프로그램은 적어도 하나의 프레임을 필요로 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 Frame 클래스를 이용하여 윈도우를 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV168.GIF" BORDER=0 WIDTH=306 HEIGHT=153 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Frame을 이용하여 윈도우를 나타내는 예를 든 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=468>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FrameExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FrameExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FrameExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Frame Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="바탕">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">FrameExample fe = new FrameExample();</FONT>
<P>		<FONT FACE="Courier New">fe.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Frame Example&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">새로운 윈도우 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">11 : 윈도우의 크기를 가로 300픽셀, 세로 150픽셀로 설정. 
</FONT><P><FONT FACE="바탕">12 : 윈도우를 실제로 화면에 나타나게 한다.</FONT>
<BR>
<P><FONT FACE="바탕">프레임 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Frame() : 새로운 프레임을 생성한다. 초기값은 보이지 않게 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Frame(String title) : 주어진 이름을 갖는 새로운 프레임을 생성한다. 초기값은 보이지 않게 설정된다.</FONT>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static Frame[] getFrames() : 생성된 모든 프레임을 포함하는 배열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Image getIconImage() : 프레임이 최소화 아이콘 상태일 때, 표시될 이미지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setIconImage(Image image) : 프레임이 최소화 아이콘 상태일 때, 표시할 이미지를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuBar getMenuBar() : 프레임 메뉴바를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMenuBar(MenuBar mb) : 주어진 메뉴바로 프레임의 메뉴바를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getState() : 프레임 상태를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setState(int state) : 프레임 상태를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getTitle() : 프레임 제목을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setTitle(String title) : 주어진 문자열로 프레임 제목을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isResizable() : 사용자에 의해 프레임의 크기가 변경가능한지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setResizable(boolean resizable) : 사용자에 의해 프레임의 크기가 변경가능한지를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(MenuComponent m) : 주어진 메뉴바를 프레임에서 제거한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.5 Dialog</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.Dialog는 프레임 클래스와 함께 Window의 하위 클래스로서 FileDialog를 하위 클래스로 두고 있으며, AWT프로그램에서 대화상자를 생성한다. 대화상자는 윈도우에 종속되기 때문에 그 윈도우가 닫히면 대화상자도 함께 닫히게 되고, 윈도우가 최소화되면 대화상자는 사라지게 된다. 대화상자는 non-modal 또는 modalless를 기본값으로 갖는데 non-modal(또는 modalless)은 대화상자가 나타나 있을 때도 다른 작업을 할 수 있는 상태를 말하며, 그 반대의 경우 즉, 대화상자가 닫힐 때까지 대화상자 이외의 다른 작업을 할 수 없는 상태를 모달(modal)이라고 한다.</FONT>
<P><FONT FACE="바탕">애플릿은 프레임이나 윈도우 클래스를 상속받지 않고 패널 클래스를 상속받으므로 윈도우를 가질 수 없기 때문에 대화상자를 사용할 수도 없다. 그러나 애플릿이 자신의 윈도우(또는 프레임)를 갖게되면 그 윈도우에 종속된 대화상자를 가질 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 프레임 윈도우의 제목표시줄에 Dialog 클래스를 이용하여 제목을 지정하는 프로그램이다. 두 개의 클래스가 필요하며 TitleBox.java를 먼저 컴파하고 DialogExample.java를 컴파일한다. 실행은 DialogExample.java를 컴파한 후 만들어진 DialogExample.class파일을 이용한다. 물론 두 개의 프로그램을 하나로 만들어도 가능하지만 이럴 경우 파일명을 main() 메소드가 있는 클래스를 파일명으로 해야 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV169.GIF" BORDER=0 WIDTH=256 HEIGHT=103 HSPACE=3 ALIGN=BOTTOM><FONT FACE="바탕">  
</FONT><IMG SRC="FYXIV170.GIF" BORDER=0 WIDTH=255 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=728>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TitleBox.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TitleBox extends Dialog implements ActionListener{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private TextField field;</FONT>
<P>	<FONT FACE="Courier New">private Button setButton;</FONT>
<P>	<FONT FACE="Courier New">private Frame parent;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public TitleBox(Frame f, String title) {</FONT>
<P>		<FONT FACE="Courier New">super(f, title, false);</FONT>
<BR>
<P>		<FONT FACE="Courier New">parent = f;</FONT>
<P>		<FONT FACE="Courier New">setLayout(new FlowLayout());</FONT>
<BR>
<P>		<FONT FACE="Courier New">field = new TextField(20);</FONT>
<P>		<FONT FACE="Courier New">setButton = new Button(&quot;SET&quot;);</FONT>
<P>		<FONT FACE="Courier New">setButton.addActionListener(this);</FONT>
<BR>
<P>		<FONT FACE="Courier New">add(field);</FONT>
<P>		<FONT FACE="Courier New">add(setButton);</FONT>
<BR>
<P>		<FONT FACE="Courier New">pack();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) {</FONT>
<P>		<FONT FACE="Courier New">if( e.getActionCommand().equals(&quot;SET&quot;) ) {</FONT>
<P>			<FONT FACE="Courier New">parent.setTitle(field.getText());</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">field.selectAll();</FONT>
<P>		<FONT FACE="Courier New">setVisible(false);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램은 길이 20인 텍스트 필드와 버튼을 가진 대화상자를 나타낸다. 텍스트 필드에 특정 문자열을 입력하고 &quot;set&quot; 단추를 누르면 그 내용이 윈도우의 제목표시줄에 출력된다. 이 프로그램 하나만으로는 실행이 되지 않고 다음에 나와있는 DialogExample.java 프로그램 안에서 앞 클래스 파일의 인스턴스를 생성하여 실행시킨다. 즉 실행은 다음 프로그램을 이용한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=524>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DialogExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class DialogExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TitleBox myTitleBox;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public DialogExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame();</FONT>
<P>		<FONT FACE="Courier New">myTitleBox = new TitleBox(f, &quot;Input title&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">myTitleBox.show();</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(250, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">DialogExample de = new DialogExample();</FONT>
<P>		<FONT FACE="Courier New">de.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Dialog 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Dialog owner), Dialog(Frame owner) : 이름이 없고, 주어진 프레임 또는 대화상자에 종속되고, non-modal인 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Frame owner, boolean modal) : 이름이 없고, 주어진 프레임에 종속되고, 주어진 modal(true이면 modal, false이면 non-modal)의 대화상자를 생성하며 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Dialog owner, String title) : 주어진 이름을 갖고, 주어진 대화상자에 종속되고, non-modal인 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Frame owner, String title) : 주어진 이름을 갖고, 주어진 프레임 에 종속되고, non-modal인 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Dialog owner, String title, boolean modal) : 주어진 이름으로 대화상자에 종속되며 modal을 갖는 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P>  <FONT FACE="돋움">∘ Dialog(Frame owner, String title, boolean modal) : 주어진 이름으로 프레임에 종속되며 modal을 갖는 대화상자를 생성한다. 초기값은 보이지 않도록 설정된다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ String getTitle() : 대화상자의 제목을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isModal() : 대화상자가 modal인지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isResizable() : 대화상자가 임의로 크기 변화가 가능한지 여부를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setModal(boolean b) : 대화상자의 modal을 주어진 값으로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setResizable(boolean resizable) : 대화상자의 크기변화 여부를 주어진 값으로 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setTitle(String title) : 대화상자의 제목을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void show() : 대화상자를 보이지 않게한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">4.1.3.6 FileDialog</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.awt.FileDialog 클래스는 Dialog의 하위 클래스로 읽거나 쓸 파일을 선택하기 쉽게 도와준다. 윈도우 응용프로그램에서 파일을 읽거나 쓰려고 할 때 나타나는 대화상자와 같을 역할을 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV171.GIF" BORDER=0 WIDTH=532 HEIGHT=248 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 FileDialog를 이용하여 선택한 파일명을 출력하는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileDialogExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FileDialogExample{</FONT>
<P>	
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private FileDialog loadDialog;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FileDialogExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;FileDialog Example&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>  
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileDialogExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">loadDialog = new FileDialog(f, &quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;, FileDialog.LOAD);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">loadDialog.setVisible(true);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;File &lt;&quot; + loadDialog.getFile() + &quot;&gt;is Selected&quot;);</FONT>
<P>   		<FONT FACE="Courier New">f.pack();</FONT>
<P>   		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>   		<FONT FACE="Courier New">FileDialogExample fde = new FileDialogExample();</FONT>
<P>		<FONT FACE="Courier New">fde.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private FileDialog loadDialog;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">새로운 파일대화상자 객체를 정의한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">loadDialog = new FileDialog(f, &quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;, FileDialog.LOAD);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임 f에 속하면서 제목 표시줄에 &quot;열기&quot;이라는 문자열을 표시하고 파일불러오기 대화상자(FileDialog.LOAD)를 생성한다. 저장하기 대화상자를 생성하기 위해서는 FileDialog.SAVE를 이용한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">loadDialog.setVisible(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">파일대화상자를 보이게 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(&quot;File &lt;&quot; + loadDialog.getFile() + &quot;&gt;is Selected&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">선택한 파일명을 출력한다.</FONT>
<BR>
<P><FONT FACE="바탕">FileDialog 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 필드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int LOAD : 읽을파일을 선택하기 위해 파일대화상자 윈도우를 사용함을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int SAVE : 저장할 파일을 선택하기 위해 파일대화상자 윈도우를 사용함을 나타낸다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ FileDialog(Frame parent) : 주어진 프레임에 속한 파일적재용(loading a file) 대화상자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ FileDialog(Frame parent, String title) : 주어진 프레임에 속하고 주어진 이름을 갖는 파일적재용(loading a file) 대화상자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">῁ FileDialog(Frame parent, String title, int mode) : 주어진 프레임에 속하고 주어진 이름을 갖고 주어진 모드(loading/saving)의 파일 대화상자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ String getDirectory() : 파일 대화상자의 디렉토리를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getFile() : 파일 대화상자에서 선택한 파일을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ FilenameFilter getFilenameFilter() : 파일 대화상자의 파일 이름 필터를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMode() : 파일 대화상자의 용도가 읽기용(loading)인지 쓰기용(saving)인지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setDirectory(String dir) : 파일 대화상자의 디렉토리를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setFile(String file) : 파일 대화상자의 파일을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setFilenameFilter(FilenameFilter filter) : 파일 대화상자의 파일 이름 필터를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setMode(int mode) : 파일 대화상자의 용도(mode)를 설정한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV172.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.2  </FONT><FONT FACE="바탕">레이아웃</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">관리자</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">레이아웃 관리자(Layout Manager)는 컨테이너 내에서 컴포넌트의 배치를 결정하는데 사용하며, 레이아웃 관리자의 특정 인스턴스를 계속 참조하다가 컴포넌트의 위치를 결정할 때 컨테이너가 레이아웃 관리자를 호출하게된다. 
</FONT><P><FONT FACE="바탕">일반적으로 레이아웃 관리자는 컨테이너 내에서 컴포넌트의 크기와 위치를 결정하는 일을 하기 때문에 프로그래머가 이를 직접 설정해서는 안된다. 만약 setLocation() 이나 setSize() 또는 setBounds() 등의 메소드를 이용하여 직접 설정한다 해도 레이아웃 관리자는 설정된 값을 무시하게된다.</FONT>
<P><FONT FACE="바탕">특별히 컴포넌트의 크기와 위치를 결정해야 할 경우라면 컨테이너에 대해 다음 메소드를 이용하여 LayoutManager를 사용할 수 없게 만들 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=356 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">setLayout(null);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이렇게 지정한 후 컴포넌트의 위치와 크기를 설정하려면 해당 컴포넌트에 대해 setLocation(), setSize() 또는 setBounds() 등의 메소드를 이용해야 하지만  시스템과 글꼴 크기의 차이 때문에 플랫폼과 관계없는 레이아웃이 만들어진다. 따라서, 다른 방법으로 LayoutManager의 새 클래스를 만들어 사용하는 방법이 더 효율적일 수있다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 자바 AWT에서 사용할 수 있는 레이아웃 관리자의 종류는 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P>  <FONT FACE="돋움">∘ FlowLayout - 판넬 클래스의 기본 레이아웃 관리자이며, 컨테이너의 컴포넌트를 페이지상의 단어처럼 왼쪽에서 오른쪽으로, 위에서 아래로 배열한다. 이 클래스는 한 행에 컴포넌트를 최대한 채워 넣은 후 그 다음 행으로 넘어간다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ BorderLayout - Window, Dialog, Frame클래스의 기본 레이아웃 관리자이며, &quot;North&quot;, &quot;South&quot;, &quot;East&quot;, &quot;West&quot;, &quot;Center&quot; 등의 이름으로 컨테이너에 추가된 컴포넌트를 배열한다. 지정된 컴포넌트는 컨테이너의 위, 아래, 오른쪽, 왼쪽 그리고 중앙에 배열된다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ GridLayout - 컨테이너를 지정된 수의 행과 열로 나눈 다음 그 행과 열에 왼쪽에서 오른쪽, 위에서 아래로 컴포넌트를 배치시킨다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ CardLayout - 컴포넌트의 크기를 컨테이너 크기와 같게 한 번에 한 컴포넌트만 나타나게 한다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ GridBagLayout - java.awt 패키지에서 가장 복잡하면서도 가장 강력한 레이아웃 관리자이다. 이 클래스는 컨테이너를 눈금모양의 행과 열로 나눈 다음 눈금 안에 넣고 필요하면 눈금의 크기를 조절하여 컴포넌트가 서로 겹쳐지지 않게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.1 FlowLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">FlowLayout 관리자는 Panel의 기본 레이아웃 관리자로서 컨테이너 내의 컴포넌트를 왼쪽에서 오른쪽, 위에서 아래로 차례대로 배치한다. 즉, 문서 편집기에서 텍스트를 입력할 때 왼쪽에서 오른쪽으로 글이 입력되고, 한 줄이되면 다음 줄로 넘어가는 방식처럼 컴포넌트를 차례대로 왼쪽에서 오른쪽을 배치하고, 한 줄이 넘어가면 새 줄을 시작하는 방식이다.</FONT>
<BR>
<P ALIGN=CENTER>  
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=515 HEIGHT=125>
<TD VALIGN=TOP WIDTH=39%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV173.GIF" BORDER=0 WIDTH=153 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=60%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV175.GIF" BORDER=0 WIDTH=263 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=39%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=60%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">다른 레이아웃 관리자와 달리 FlowLayout은 자신이 관리하는 컴포넌트의 크기를 제한하지 않고 컴포넌트의 크기가 최적이 되도록한다. 또 관리하는 영역의 크기가 변경되면 포함된 컴포넌트의 배치도 재설정된다. 옵션을 사용하면 기본값인 중앙정렬을 왼쪽정렬이나 오른쪽정렬 방식으로 배열할 수 있다. 또 Inset을 지정하여 컴포넌트 사이의 테두리 영역을 더 크게 만들 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 setLayout() 메소드를 이용하여 FlowLayout 관리자를 생성하는 예제 코드를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=573 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">setLayout(new FlowLayout(FlowLayout.RIGHT, 20, 40));</FONT>
<P><FONT FACE="Courier New">setLayout(new FlowLayout(FlowLayout.LEFT));</FONT>
<P><FONT FACE="Courier New">setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">매개변수 FlowLayout.RIGHT는 컴포넌트를 오른쪽정렬 방식으로 설정하고, FlowLayout.LEFT는 왼쪽정렬방식으로 설정한다. 매개변수 20과 40은 컴포넌트 사이의 수평 여백(20)과 수직 여백(40)을 나타내는데, 여백을 주지 않으면 기본 간격이 5픽셀로 설정된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 FlowLayout관리자를 지정한 Frame에 버튼을 배열하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=563>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FlowLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FlowLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FlowLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;FlowLayout Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;Button 1&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;Button 2&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;Button 3&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.setSize(150, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setTitle(&quot;FlowLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">FlowLayoutExample fl = new FlowLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">fl.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(new FlowLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setLayout() 메소드를 이용하여 레이아웃 관리자를 플로우레이아웃으로 지정한다.</FONT>
<BR>
<P><FONT FACE="바탕">플로우레이아웃 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 필드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ static int LEFT : 플로우레이아웃 관리자의 왼쪽정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int CENTER : 플로우레이아웃 관리자의 가운데정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int RIGHT : 플로우레이아웃 관리자의 오른쪽정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int LEADING : 플로우레이아웃 관리자의 리딩에지(leading edge) 정렬 값을 나타낸다.</FONT>
<P>  <FONT FACE="돋움">∘ static int TRAILING : 플로우레이아웃 관리자의 트레일링 에지(trailing edge) 정렬 값을 나타낸다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ FlowLayout() : 디폴트로 중앙정렬을 하고, 수평과 수직 간격이 5인 플로우레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ FlowLayout(int align) : 주어진 정렬을 하고, 수평과 수직 간격이 5인 플로우 레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ FlowLayout(int align, int hgap, int vgap) : 주어진 정렬을 하고, 수평과 수직 간격이 각각 hgap과 vgap인 플로우레이아웃 관리자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void addLayoutComponent(String name, Component comp) : 주어진 이름으로 컴포넌트를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getAlignment() : 정렬 방식의 값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setAlignment(int align) : 정렬 방식을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void layoutContainer(Container target) : 컨테이너에 대한 레이아웃을 행한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 수평 간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 수직 간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 수평 간격을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 수직 간격을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.2 BorderLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">BorderLayout 관리자는 Window, Frame, Dialog의 기본 레이아웃 관리자이다. 컨테이너에 포함된 컴포넌트는 North, South, East, West 및 Center 중에서 하나의 영역에 배치될 수 있다. North는 위를 차지하며, East는 오른쪽을 차지하고, Center영역은 North, South, East, West 등의 영역이 채워진 후에 남는 영역 전체이다. 이들 영역에는 각각 하나의 컴포넌트만 추가할 수 있으며, 하나 이상의 컴포넌트를 추가해도 하나만 나타난다. 만약 한 영역을 사용하지 않으면 그 영역의 최적크기는 0&times;0이 된다. 따라서 컴포넌트를 하나도 넣지 않으면 가운데 영역은 배경으로 나타나고, 주위영역은 0(Zero) 상태로 줄어들어 보이지 않게 된다.</FONT>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=621 HEIGHT=227>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV177.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV179.GIF" BORDER=0 WIDTH=340 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">가로방향 크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=621 HEIGHT=324>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV177.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV183.GIF" BORDER=0 WIDTH=204 HEIGHT=295 HSPACE=2 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=38%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=61%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">세로방향 크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">BorderLayout 관리자를 사용할 때는 &quot;North&quot;, &quot;South&quot;, &quot;East&quot;, &quot;West&quot;, &quot;Center&quot; 등과 같은 문자열의 영역이름을 지정한다. 이러한 영역은 미리 정의된 상수인 BorderLayout.NORTH, BorderLayout. SOUTH, BorderLayout.EAST,  BorderLayout.WEST, BorderLayout.CENTER 등을 이용한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 BorderLayout을 만드는 예이다. 실행 후 창의 크기를 변경하여 BorderLayout 관리자가 어떻게 반응하는지 살펴보기 바란다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BorderLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class BorderLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	
<P>	<FONT FACE="Courier New">public BorderLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;BorderLayout Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BorderLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">f.setLayout(new BorderLayout());</FONT>
<P>		
<P>		<FONT FACE="Courier New">f.add(&quot;East&quot;, new Button(&quot;East&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;West&quot;, new Button(&quot;West&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;North&quot;, new Button(&quot;North&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;Center&quot;, new Button(&quot;Center&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;South&quot;, new Button(&quot;South&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setTitle(&quot;BorderLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">BorderLayoutExample ble = new BorderLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">ble.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">setLayout(new BorderLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">주석처리하여 레이아웃관리자를 지정하지 않았는데 그 이유는 프레임 클래스의 레이아웃관리자가 BorderLayout관리자이기 때문이다. 즉, 여기서는 6번째 줄이 주석 처리되건 그렇지 않건 상관없다.</FONT>
<BR>
<P><FONT FACE="바탕">BorderLayout 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ BorderLayout() : 컴포넌트간의 수평간격과 수직간격이 0인 Border 레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ BorderLayout(int hgap, int vgap) : 컴포넌트간의 수평간격(hgap)과 수직간격(vgap)을 갖는 Border 레이아웃 관리자를 생성한다. 
</FONT><BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 컴포넌트간의 수평간격(hgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 컴포넌트간의 수직간격(vgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 컴포넌트간의 수평간격(hgap)을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 컴포넌트간의 수직간격(vgap)을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.3 GridLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">GridLayout 관리자는 컨테이너의 영역을 주어진 행과 열 크기로 나누고, 같은 크기의 셀에 컴포넌트를 배치시키는 레이아웃 관리자이다. 예를 들어 new GridLayout(3, 2)문으로 Grid 레이아웃을 만들면 아래 그림처럼 여섯 개의 셀(3개의 행과 2개의 열)이 나타난다. 이 때 모든 셀의 폭은 동일하며 사용 가능한 폭을 셀 수로 나누는 간단한 방식으로 결정된다. 셀 높이도 동일하며, 사용 가능한 높이를 행  수로 나누어 간단하게 결정할 수 있다. 나눈 셀의 수보다 더 많거나 적게 컴포넌트를 삽입하면 먼저 행은 고정되고, 열 수가 변한다.</FONT>
<BR>
<P ALIGN=CENTER>  
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=500 HEIGHT=168>
<TD VALIGN=TOP WIDTH=37%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV185.GIF" BORDER=0 WIDTH=114 HEIGHT=97 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=62%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV187.GIF" BORDER=0 WIDTH=234 HEIGHT=144 HSPACE=3 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=37%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 전</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=62%>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">크기 변경 후</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">BorderLayout관리자와 마찬가지로 컨테이너 크기를 변경해도 컴포넌트의 상대적 위치는 변함이 없고, 컴포넌트의 크기만 변경된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞 그림의 GridLayout 관리자에 대한 사용 예를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class GridLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public GridLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;GridLayout Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(new GridLayout(3, 2));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;1&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;2&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;3&quot;)); </FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;4&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;5&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.add(new Button(&quot;6&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.pack();</FONT>
<P>		<FONT FACE="Courier New">f.setTitle(&quot;GridLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">GridLayoutExample gle = new GridLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">gle.launchFrame();</FONT>
<P>   <FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(new GridLayout(3, 2));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">3행 2열의 Grid 레이아웃을 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.pack();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">pack() 메소드 호출은 프레임의 크기를 그 프레임 내에 포함된 모든 컴포넌트의 최적 크기와 일치되게 설정한다. 따라서, 프레임이 적절한 크기로 설정된다. 
</FONT><BR>
<P><FONT FACE="바탕">GridLayout 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ GridLayout() : 하나의 행을 갖고 각 컴포넌트가 하나의 열을 차지하도록 Grid 레이아웃관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ GridLayout(int rows, int cols) : 주어진 행과 열을 갖는 Grid 레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ GridLayout(int rows, int cols, int hgap, int vgap) : 주어진 행과 열을 갖고 수평과 수직 간격이 각각 hgap과 vgap인 Grid 레이아웃 관리자를 생성한다.</FONT>
<P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void addLayoutComponent(String name, Component comp) : 주어진 이름으로 컴포넌트를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ int getColumns() : 열의 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 수평간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getRows() : 행의 크기를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 수직간격을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void layoutContainer(Container parent) : 컨테이너를 레이아웃 한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 주어진 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setColumns(int cols) : 열의 크기를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 수평간격을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setRows(int rows) : 행의 크기를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 수직간격을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.4 CardLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스를 한 번에 한 장씩 나타나는 카드처럼 다룰 수 있다. 즉, 여러 장의 카드를 겹쳐 배치하는 식으로 관리하여 컨테이너가 포함한 컴포넌트를 한 장씩 볼 수 있게 한다. 윈도우에서 탭 대화상자와 유사하다. 여러장으로 겹쳐진 경우 맨 처음 등록된 컴포넌트를 디폴트로 보여준다.</FONT>
<BR>
<P ALIGN=CENTER>  
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=515 HEIGHT=106>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV189.GIF" BORDER=0 WIDTH=204 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV191.GIF" BORDER=0 WIDTH=204 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림처럼 마우스를 클릭 할 때마다 두 개의 Panel을 번갈아 보여주는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CardLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CardLayoutExample implements MouseListener {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Panel cardPanel, p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private CardLayout myCardLayout;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CardLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;CardLayout Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myCardLayout = new CardLayout();</FONT>
<P>		<FONT FACE="Courier New">cardPanel = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=651>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CardLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">cardPanel.setLayout(myCardLayout);</FONT>
<BR>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">p2.setBackground(Color.red);</FONT>
<P>		<FONT FACE="Courier New">p1.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">p2.addMouseListener(this);</FONT>
<BR>
<P>		<FONT FACE="Courier New">cardPanel.add(p1, &quot;First&quot;);</FONT>
<P>		<FONT FACE="Courier New">cardPanel.add(p2, &quot;Second&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(cardPanel);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CardLayoutExample cle = new CardLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">cle.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mousePressed(MouseEvent me) {</FONT>
<P>		<FONT FACE="Courier New">myCardLayout.next(cardPanel);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseReleased(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseEntered(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseExited(MouseEvent me) {}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class CardLayoutExample implements MouseListener {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">마우스 이벤트를 사용하기 위해 MouseListener 인터페이스를 구현한 것이다. 이벤트에 대한 자세한 내용은 뒤에서 자세히 다루기로 한다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Panel cardPanel, p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private CardLayout myCardLayout;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체와 CardLayout객체를 선언한다. 선언된 Panel객체 중 cardPanel객체는 또 다른 Panel 객체인 p1과 p2객체를 포함시킬 패널이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myCardLayout = new CardLayout();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">7번째 줄에서 선언한 CardLayout 객체의 인스턴스를 생성한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">cardPanel = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6번째 줄에서 선언한 Panel의 인스턴스를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">cardPanel.setLayout(myCardLayout);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">CardLayout객체의 인스턴스인 myCardLayout을 이용하여 cardPanel객체의 레이아웃 관리자를 CardLayout으로 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">p2.setBackground(Color.red);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체 p1의 배경색은 노란색으로, p2의 배경색은 빨간색으로 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">p2.addMouseListener(this);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체 p1과 p2에 마우스 이벤트 처리 객체를 등록시켜 p1과 p2를 이벤트 발생시키는 객체로 만든다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">cardPanel.add(p1, &quot;First&quot;);</FONT>
<P>		<FONT FACE="Courier New">cardPanel.add(p2, &quot;Second&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Panel객체 p1과 p2를 6번째 줄에서 선언된 Panel객체인 cardPanel에 부착한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(cardPanel);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">cardPanel객체를 프레임에 부착한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void mousePressed(MouseEvent me) {</FONT>
<P>		<FONT FACE="Courier New">myCardLayout.next(cardPanel);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이벤트 처리 루틴을 구현하는 부분이다. 
</FONT><P><FONT FACE="바탕">39 : 다음 컴포넌트를 보여준다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="바탕">∼</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent me) {}</FONT>
<P>	<FONT FACE="Courier New">...</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">41 : ∼ 44 : 인터페이스를 사용했을 때는 사용하지 않더라도 인터페이스 내에 선언되어있는 모든 메소드를 프로그램 내에서 모두 구현해야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">CardLayout 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ CardLayout() : 컴포넌트 간의 수평간격과 수직간격이 0인 카드레이아웃 관리자를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ CardLayout(int hgap, int vgap) : 컴포넌트간의 수평간격이 hgap이고, 수직간격이 vgap인 카드레이아웃 관리자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void addLayoutComponent(Component comp, Object constraints) : 주어진 컴포넌트를 카드레이아웃 관리자의 내부 이름테이블에 삽입한다.</FONT>
<P>  <FONT FACE="돋움">∘ void first(Container parent) : 주어진 컨테이너에 포함된 첫 번째 카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void last(Container parent) : 주어진 컨테이너에 포함된 마지막 카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void next(Container parent) : 주어진 컨테이너에 포함된 다음카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void previous(Container parent) : 주어진 컨테이너에 포함된 이전카드를 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void show(Container parent, String name) : 주어진 컨테이너에 포함된 컴포넌트 중 주어진 이름을 가진 컴포넌트로 전환하여 보여준다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 주어진 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void layoutContainer(Container parent) : 이 카드 레이아웃 관리자를 이용하여 주어진 컨테이너에 포함된 컴포넌트를 레이아웃 시킨다.</FONT>
<P>  <FONT FACE="돋움">∘ int getHgap() : 컴포넌트간의 수평간격(hgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getVgap() : 컴포넌트간의 수직간격(vgap)을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHgap(int hgap) : 컴포넌트간의 수평간격(hgap)을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setVgap(int vgap) : 컴포넌트간의 수직간격(vgap)을 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.5 GridBagLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">GridBagLayout는 레이아웃 관리자 중에서 가장 복잡하면서도 다양한 형태를 가지고있다. 이 레이아웃 관리자는 각 컴포넌트를 격자나 셀을 기준으로 배치한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV193.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">GridBagLayout 관리자는 컴포넌트를 출력할 때 각 컴포넌트가 차지하는 셀의 위치(수평크기, 수직크기) 등을 설정할 때 GridBagConstraints 클래스를 이용한다. 
</FONT><BR>
<P><FONT FACE="바탕">GridBagConstraints 클래스의 기능은 다음과 같다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.gridx, GridBagConstraints.gridy : 컴포넌트가 위치할 셀의 x 값과 y 값을 나타낸다.</FONT>
<P><FONT FACE="바탕">- 맨 왼쪽 위 셀의 gridx과 gridy 값은 0이다.</FONT>
<P><FONT FACE="바탕">- 컴포넌트를 순서대로 배치할 때는 GridBagConstraints.RELATIVE를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=650 HEIGHT=118>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV194.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=49%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV196.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 5의 gridx 값 : 1</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=49%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 5의 gridx 값 : 2</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.gridwidth, GridBagConstraints.gridheight : 컴포넌트가 차지할 폭과 높이를 나타내는 셀의 개수를 나타낸다.</FONT>
<P><FONT FACE="바탕">- 디폴트값은 1이다.</FONT>
<P><FONT FACE="바탕">- gridwidth를 GridBagConstraints.REMAINDER 값으로 설정하면 현재 행의 마지막 셀이된다.</FONT>
<P><FONT FACE="바탕">- gridheight를 GridBagConstraints.REMAINDER 값으로 설정하면 현재 열의 마지막 셀이된다.</FONT>
<P><FONT FACE="바탕">- gridwidth를 GridBagConstraints.RELATIVE 값으로 설정하면 현재 행의 다음 셀부터 마지막 셀까지 차지하도록 한다.</FONT>
<P><FONT FACE="바탕">- gridheight 를 GridBagConstraints.RELATIVE 값으로 설정하면 현재 열의 다음 셀부터 마지막 셀까지 차지하도록 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=479 HEIGHT=118>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV198.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 4의 gridwidth 값 : GridBagConstraints.REMAINDER</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.fill : 컴포넌트 영역이 요청한 크기보다 클 때, 크기설정을 다시 할 것인가를 결정한다. GridBagConstraints 클래스는 다음과 같은 값을 가능한 값으로 제공한다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NONE : 디폴트값.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.HORIZONTAL : 수평방향으로 확장하고 수직방향으로는 확장하지 않는다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.VERTICAL : 수직방향으로 확장하고 수평방향으로는 확장하지 않는다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.BOTH : 수평 및 수직으로 확장한다. 
</FONT><P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=383 HEIGHT=118>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV200.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 5의 fill 값 : GridBagConstraints.BOTH</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.ipadx, GridBagConstraints.ipady : 컴포넌트 폭의 최소값에 (ipadx * 2) 픽셀을 더하고, 높이의 최소값에 (ipady * 2) 픽셀을 더한다. 
</FONT><BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=486 HEIGHT=197>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV202.GIF" BORDER=0 WIDTH=204 HEIGHT=153 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV204.GIF" BORDER=0 WIDTH=204 HEIGHT=153 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipadx 값 : 10</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipady 값 : 50</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipadx 값 : 50</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> ipady 값 : 10</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.insets : 컴포넌트와 디스플레이 영역의 경계선 사이 공간크기를 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ GridBagConstraints.anchor : 컴포넌트가 디스플레이 영역보다 작을 때, 컴포넌트가 위치할 값을 나타낸다.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.CENTER : 디폴트 값.</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NORTH</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NORTHEAST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.EAST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.SOUTHEAST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.SOUTH</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.SOUTHWEST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.WEST</FONT>
<P><FONT FACE="바탕">- GridBagConstraints.NORTHWEST</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=421 HEIGHT=138>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV206.GIF" BORDER=0 WIDTH=277 HEIGHT=94 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button5의 anchor값은 GridBagConstraints.WEST</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P> <FONT FACE="돋움">∘ GridBagConstraints.weightx, GridBagConstraints.weighty : 컴포넌트 영역이 요청한 크기보다 클 때 남는 영역을 각 컴포넌트에게 배분해 주어야 하는데, 이 때 컴포넌트가 차지할 폭(weightx)과 높이(weighty)에 대한 가중값(weight)을 나타낸다. 가중값은 컴포넌트마다 다르게 줄 수 있으며, 가중값이 0이면 디스플레이 영역이 커지더라도(사용자가 윈도우의 창을 키울 때) 각 컴포넌트에 할당되는 영역이 없으므로 모든 컴포넌트가 한군데 위치하게 되고 남는 영역은 빈 공간으로 나타나게 된다.</FONT>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=640 HEIGHT=212>
<TD VALIGN=TOP WIDTH=43%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV208.GIF" BORDER=0 WIDTH=277 HEIGHT=61 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP COLSPAN=2 WIDTH=28%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 1, 2, 3</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weightx값 : 0</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weighty값 : 0</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=27%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> Button 4</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weightx값 : 1</FONT></SPAN></FONT>
<P ALIGN=CENTER>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- weighty값 : 0</FONT></SPAN></FONT></TD>
    </tr>
<TR>
<TD VALIGN=TOP COLSPAN=2 WIDTH=58%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV210.GIF" BORDER=0 WIDTH=369 HEIGHT=61 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP COLSPAN=2 WIDTH=41%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> 윈도우를 가로로 확대한 모습</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=640 HEIGHT=127>
<TD VALIGN=TOP WIDTH=58%>
<P>
<IMG SRC="FYXIV212.GIF" BORDER=0 WIDTH=277 HEIGHT=122 ALIGN=BOTTOM></TD>
<TD VALIGN=TOP WIDTH=41%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;">&gt;<FONT FACE="바탕"> 윈도우를 세로로 확대한 보습</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 GridBagConstraints 객체값을 적당하게 설정하여 각 컴포넌트를 컨테이너에 등록한 후, 그리드백 레이아웃 관리자를 이용하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridBagLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class GridBagLayoutExample {</FONT>		<FONT FACE="Courier New">//extends Frame {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private GridBagLayout gridbag;</FONT>
<P>	<FONT FACE="Courier New">private GridBagConstraints c;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public GridBagLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;GridBagLayout&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag = new GridBagLayout();</FONT>
<P>		<FONT FACE="Courier New">c = new GridBagConstraints();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=978>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridBagLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(gridbag);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.ipadx = 8;</FONT>
<P>		<FONT FACE="Courier New">c.ipadx = 8;</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.fill = GridBagConstraints.BOTH;</FONT>
<P>		<FONT FACE="Courier New">c.weightx = 1.0; c.weighty = 1.0;</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button1 = new Button(&quot;Button1&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button1, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button1);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button2 = new Button(&quot;Button2&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button2, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button3 = new Button(&quot;Button3&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button3, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button3);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.REMAINDER;</FONT>
<P>		<FONT FACE="Courier New">//end row</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button4 = new Button(&quot;Button4&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button4, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button4);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.fill = GridBagConstraints.BOTH;</FONT>
<P>		<FONT FACE="Courier New">c.weightx = 0.0;  c.weighty = 0.0;</FONT>
<P>		<FONT FACE="Courier New">//reset to the default</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button5 = new Button(&quot;Button5&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button5, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button5);</FONT>
<P>		<FONT FACE="Courier New">//another row</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.RELATIVE;</FONT>
<P>		<FONT FACE="Courier New">//next-to-last in row</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button6 = new Button(&quot;Button6&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button6, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button6);</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=916>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GridBagLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.REMAINDER;</FONT>
<P>		<FONT FACE="Courier New">//end row</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.weightx = 0.75; c.weighty = 0.75;</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button7 = new Button(&quot;Button7&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button7, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button7);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = 1; 		//reset to the default</FONT>
<P>		<FONT FACE="Courier New">c.gridheight = 2;</FONT>
<P>		<FONT FACE="Courier New">c.weightx = 0.25; c.weighty = 0.25;</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button8 = new Button(&quot;Button8&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button8, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button8);</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.weighty = 0.0; 		//reset to the default</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridwidth = GridBagConstraints.REMAINDER;</FONT>
<P>		<FONT FACE="Courier New">//end row</FONT>
<BR>
<P>		<FONT FACE="Courier New">c.gridheight = 1; 		//reset to the default</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button9 = new Button(&quot;Button9&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button9, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button9);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Button button10 = new Button(&quot;Button10&quot;);</FONT>
<P>		<FONT FACE="Courier New">gridbag.setConstraints(button10, c);</FONT>
<P>		<FONT FACE="Courier New">f.add(button10);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">GridBagLayoutExample gbl = new GridBagLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">gbl.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램을 실행한 후, 윈도우 크기를 적당하게 조절해 보면, 주어진 가중값에  따라 남는 영역이 분배되므로 가중값에 따라 각 컴포넌트의 크기가 변하는 것을 알 수 있다. 
</FONT><P><FONT FACE="바탕">그리고, GridBagConstraints.REMAINDER와 GridBagConstraints.RELATIVE의 차이점도 알 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">GridBagLayout 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ GridBagLayout() : 그리드백 레이아웃 관리자를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ void addLayoutComponent(Component comp, Object constraints) : 주어진 컴포넌트를 주어진 constraints 객체를 이용하여 추가한다.</FONT>
<P> <FONT FACE="돋움">∘ void addLayoutComponent(String name, Component comp) : 주어진 이름으로 컴포넌트를 추가한다.</FONT>
<P> <FONT FACE="돋움">∘ GridBagConstraints getConstraints(Component comp) : 주어진 컴포넌트에 연결된 GridBagConstraints 객체를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ Point getLayoutOrigin() : 레이아웃 그리드의 시작 위치값을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ double[][] getLayoutWeights() : 레이아웃 그리드의 행과 열이 갖는 가중값 배열을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ void invalidateLayout(Container target) : 레이아웃을 무효화시킨다.</FONT>
<P> <FONT FACE="돋움">∘ void layoutContainer(Container parent) : 그리드백 레이아웃 관리자를 이용하여 주어진 컨테이너를 레이아웃 시킨다.</FONT>
<P> <FONT FACE="돋움">∘ void removeLayoutComponent(Component comp) : 주어진 컴포넌트를 제거한다.</FONT>
<P> <FONT FACE="돋움">∘ void setConstraints(Component comp, GridBagConstraints constraints) : 주어진 컴포넌트에 대한 constraints를 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.6 </FONT><FONT FACE="바탕">복합</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">레이아웃</FONT><FONT FACE="HY부활M">(Complex Layout)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">프레임과 패널은 AWT에서 필수 컨테이너라고 할 수 있다. 
</FONT><P><FONT FACE="바탕">프레임은 제목, 테두리, 크기조절용 모서리 등이 있는 &quot;최상위 레벨&quot; 창이다. 창의 모양과 동작 방식은 사용하는 플랫폼에 따라 다르며, setLayout() 메소드를 사용하여 레이아웃 관리자를 지정하지 않으면 BorderLayout이 프레임의 기본 레이아웃 관리자가 된다. 일반적으로 GUI 환경으로 프로그램을 작성할 때는 적어도 하나의 프레임을 사용하게 되지만 하나의 코드 내에서 여러 프레임을 사용할 수도 있다. 프레임의 상위 클래스인 Window도 BorderLayout을 기본 레이아웃 관리자로 한다.</FONT>
<P><FONT FACE="바탕">패널에서 setLayout() 메소드를 명시적으로 사용하지 않으면 FlowLayout 관리자가 사용된다. 패널은 독립적인 모양도 없고 독립적인 창으로 사용할 수도 없지만, 컴포넌트(버튼, 레이블 등) 뿐만 아니라 다른 컨테이너(패널, 프레임 등)를 넣을 수 있다. 패널을 컨테이너에 넣으면 독립적으로 다른 레이아웃 관리자를 사용할 수 있다. 패널 클래스의 하위 클래스인 Applet도 FlowLayout을 기본 관리자로 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV214.GIF" BORDER=0 WIDTH=275 HEIGHT=138 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">앞의 그림에서 &quot;버튼 1&quot;과 &quot;버튼 2&quot;가 있는 패널은 FlowLayout관리자가 적용되었고, &quot;버튼 3&quot;과 &quot;버튼 4&quot;가 있는 패널에는 BorderLayout관리자가 적용되었다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 ComplexLayoutExample에 대한 결과를 출력하는 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=746>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ComplexLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ComplexLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Panel p1, p2;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2, b3, b4;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ComplexLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;ComplexLayout Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 1&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 2&quot;);</FONT>
<P>		<FONT FACE="Courier New">b3 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 3&quot;);</FONT>
<P>		<FONT FACE="Courier New">b4 = new Button(&quot;</FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> 4&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">p1.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT>
<BR>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT>
<P>		<FONT FACE="Courier New">p1.add(b2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">p2.add(&quot;West&quot;, b3);</FONT>
<P>		<FONT FACE="Courier New">p2.add(&quot;Center&quot;,b4);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(&quot;North&quot;, p1);</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;Center&quot;, p2);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 150);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ComplexLayoutExample cl = new ComplexLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">cl.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Panel p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">Panel p2 = new Panel();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">두 개의 패널 객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">10번째 줄과 11번째 줄에서 생성된 패널객체 p1은 FlowLayout을 레이아웃 관리자로 하고, p2는 BorderLayout을 레이아웃 관리자로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p1.add(b1);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">11번째 줄에서 만들어진 버튼 객체를 p1에 포함시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p2.add(&quot;West&quot;, b3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">16번째 줄에서 만들어진 버튼 객체를 p2에 포함시킨다. p2패널의 레이아웃 관리자가 BorderLayout이므로 add() 메소드에 위치를 명시해준다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(&quot;North&quot;, p1);</FONT>
<P>		<FONT FACE="Courier New">f.add(&quot;Center&quot;, p2);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">21번째 줄과 22번째 줄은 패널 객체 p1과 p2를 프레임에 부착한다. 프레임의 기본 레이아웃 관리자는 BorderLayout이므로 위치를 명시한 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.2.7 </FONT><FONT FACE="바탕">레이아웃</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">관리자를</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용하지</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">않는</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">레이아웃</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">원하는 곳에 직접 컴포넌트를 배치하려면 먼저 레이아웃을 사용하지 않아야 하므로 레이아웃 관리자를 null(setLayout(null))로 설정한다. 그리고 각 컴포넌트의 크기와 위치 결정은 setSize(), setLocation() 메소드 또는 setBounds() 메소드 등을 이용하여 결정한다. 레이아웃 관리자를 지정하지 않을 경우 플랫폼에 따라 의도한 것과 다르게 나타날 수 있으므로 주의해야 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV215.GIF" BORDER=0 WIDTH=221 HEIGHT=112 HSPACE=3 ALIGN=BOTTOM>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 앞의 NoLayoutExample을 출력하기 위한 예를 보인 것으로 레이아웃 관리자를 사용하지 않고, 컴포넌트의 위치를 직접 설정해 주는 방법을 보여주는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=784>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">NoLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class NoLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button b1, b2, b3;</FONT>
<P>	<FONT FACE="Courier New">private Insets insets;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public NoLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;NoLayout Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">b1 = new Button(&quot;one&quot;);</FONT>
<P>		<FONT FACE="Courier New">b2 = new Button(&quot;two&quot;);</FONT>
<P>		<FONT FACE="Courier New">b3 = new Button(&quot;three&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setLayout(null);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<BR>
<P>		<FONT FACE="Courier New">insets = f.getInsets();</FONT>
<P>		<FONT FACE="Courier New">b1.setBounds(50 + insets.left, 5 + insets.top, 50, 20);</FONT>
<P>		<FONT FACE="Courier New">b2.setLocation(new 	Point(70 + insets.left, 35 + insets.top));</FONT>
<P>		<FONT FACE="Courier New">b2.setSize(new Dimension(50, 20));</FONT>
<P>		<FONT FACE="Courier New">b3.setLocation(130 + insets.left, 15 + insets.top);</FONT>
<P>		<FONT FACE="Courier New">b3.setSize(50, 30);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(b1);  f.add(b2);  f.add(b3);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">NoLayoutExample nt = new NoLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">nt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Insets insets;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Insets 객체를 이용해 프레임 경계선의 두께를 얻는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setLayout(null);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">레이아웃 관리자를 사용하지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임 윈도우의 크기를 가로 200픽셀 세로 100픽셀로 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">자바에서 테두리를 구하려면 먼저 컴포넌트가 보이는(visible) 상태여야 한다. 그렇지 않으면 테두리(inset) 값은 모두 0이 된다. 따라서, 이 부분을 20번째 줄 이후로 옮겨 실행시키면 다음과 같은 결과를 얻을 수 있다.</FONT>
<P>  
<P ALIGN=CENTER>
<IMG SRC="FYXIV216.GIF" BORDER=0 WIDTH=204 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">insets = getInsets();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임의 경계선 두께를 얻는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b1.setBounds(50 + insets.left, 5 + insets.top, 50, 20);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setBound()는 컴포넌트의 크기와 위치를 동시에 지정할 수 있으므로 가로 50픽셀, 세로 20픽셀로 크기를 지정하고, 위치는 원점(0, 0)에서 (50, 5) 부분에 컴포넌트의 왼쪽 상단 모서리를 배치한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b2.setLocation(new 	Point(70 + insets.left, 35 + insets.top));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setLocation() 메소드는 컴포넌트의 위치를 지정해 주는 메소드로 좌표(70, 35)에 배치한다. 여기서는 Point클래스(Point클래스는 x좌표와 y좌표를 가지고 있다.)를 이용하여 위치를 지정했지만 23번째 줄처럼 Point클래스를 사용하지 않아도 된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">b2.setSize(new Dimension(50, 20));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setSize() 메소드는 컴포넌트의 크기를 지정해 주는 메소드이다. 가로 50픽셀, 세로 20픽셀 크기의 컴포넌트를 생성한다. 여기서는 Dimension 클래스를 이용했지만 24번째 줄처럼 Dimension 클래스를 사용하지 않아도 된다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.add(b1);  f.add(b2);  f.add(b3);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼 컴포넌트를 프레임에 부착시킨다.</FONT>
<P><FONT FACE="바탕">컴포넌트의 크기와 위치에 관련된 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ void setLocation(int x, int y) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P> <FONT FACE="돋움">∘ void setLocation(Point p) : 컴포넌트를 새로운 위치로 옮긴다.</FONT>
<P> <FONT FACE="돋움">∘ void setSize(Dimension d) : 컴포넌트의 폭과 높이를 각각 d.width와 d.height로 설정한다.</FONT>
<P> <FONT FACE="돋움">∘ void setSize(int width, int height) : 컴포넌트의 폭과 높이를 각각 width와 height로 설정한다.</FONT>
<P> <FONT FACE="돋움">∘ void setBounds(int x, int y, int width, int height) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P> <FONT FACE="돋움">∘ void setBounds(Rectangle r) : 컴포넌트를 주어진 위치로 옮기고 크기를 변경한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=439>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">Inset 클래스</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• </FONT><FONT FACE="바탕">컨테이너에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">테두리를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">나타내는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">클래스로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">레이아웃을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">지정할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">때</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">유용하다</FONT><FONT FACE="Courier New">. </FONT><FONT FACE="바탕">즉</FONT><FONT FACE="Courier New">, </FONT><FONT FACE="바탕">컨테이너</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">영역</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실제</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">컴포넌트를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표현하거나</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">작업할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">영역은</FONT><FONT FACE="Courier New"> inset</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">가리키는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">테두리</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">영역이라</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있다</FONT><FONT FACE="Courier New">. 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">Inset 클래스는 다음과 같은 변수와 메소드를 제공한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 변수</FONT>
<P>    <FONT FACE="바탕">∘ int bottom : 테두리 아래쪽크기를 나타낸다.</FONT>
<P>    <FONT FACE="바탕">∘ int left : 테두리 왼쪽크기를 나타낸다.</FONT>
<P>    <FONT FACE="바탕">∘ int right : 테두리 오른쪽크기를 나타낸다.</FONT>
<P>    <FONT FACE="바탕">∘ int top : 테두리 위쪽크기를 나타낸다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 생성자</FONT>
<P>    <FONT FACE="바탕">∘ Insets(int top, int left, int bottom, int right) : 주어진 크기의 inset을 생성한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 메소드</FONT>
<P>    <FONT FACE="바탕">∘ String toString() : inset 객체를 문자열로 표현하여 되돌려준다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P ALIGN=CENTER>
<IMG SRC="FYXIV217.GIF" BORDER=0 WIDTH=360 HEIGHT=233 ALIGN=BOTTOM>
<P>
<IMG SRC="FYXIV218.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.3  </FONT><FONT FACE="바탕">메뉴</FONT><FONT FACE="Bookman Old Style">(Menu)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT에서 메뉴는 몇 개의 클래스에서 제공하는데, 자바 어플리케이션 또는 애플릿에서 원하는 형태의 메뉴를 구성할 수 있도록 해준다. 윈도우는 몇 개의 메뉴를 갖고 각 메뉴는 다시 하나 이상의 메뉴, 메뉴 아이템, 메뉴 분리자 등을 갖는다.</FONT>
<P><FONT FACE="바탕">메뉴는 다른 컴포넌트(Button, TextField 등)처럼 흔히 사용하는 컨테이너에 추가할 수 없을 뿐만 아니라 레이아웃 관리자를 사용할 수도 없으며, 메뉴 컨테이너(Menu container)에만 추가할 수 있다. 이때 사용하는 메소드가 setMenuBar()이며, setMenuBar()를 이용하여 메뉴 표시줄을 만들면 메뉴 &quot;트리&quot;가 만들어진다. 다시 메뉴에는 메뉴 항목뿐만 아니라 또 다른 메뉴가 추가될 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 AWT에서 제공되는 메뉴 컴포넌트 클래스의 계층 구조를 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV219.GIF" BORDER=0 WIDTH=491 HEIGHT=160 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.1 MenuComponent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">맨 위 클래스인 MenuComponent는 메뉴를 제공하기 위한 기본적인 기능을 정의하며 실제 클래스 자체를 사용하지는 않는다. 다른 메뉴 관련 클래스는 이 클래스를 상속받는 하위클래스이다.</FONT>
<BR>
<P><FONT FACE="바탕">MenuComponent 클래스가 제공하는 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuComponent() : MenuComponent 객체를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Font getFont() : 메뉴 컴포넌트에 사용된 폰트를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ String getName() : 메뉴 컴포넌트의 이름을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuContainer getParent() : 메뉴 컴포넌트의 부모 컨테이너를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setFont(Font f) : 메뉴 컴포넌트가 사용할 폰트를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setName(String name) : 주어진 문자열로 메뉴 컴포넌트의 이름을 설정한다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.2 MenuBar</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">MenuBar 컴포넌트는 수평 메뉴로서 프레임 객체에만 추가할 수 있으며, 발생하는 모든 이벤트가 정상적인 메뉴 동작의 일부로 처리되기 때문에 리스너(Listener)를 지원하지 않는다. setHelpMenu(Menu) 메소드를 이용하면 [Help]메뉴를 지정할 수 있다. 
</FONT><P><FONT FACE="바탕">MenuBar 클래스가 제공하는 객체 생성자와  메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuBar() : 메뉴바를 생성한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Menu add(Menu m) : 메뉴바에 주어진 메뉴를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void deleteShortcut(MenuShortcut s) : 주어진 메뉴단축키를 삭제한다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu getHelpMenu() : 메뉴바의 도움말 메뉴를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu getMenu(int i) : 주어진 번호의 메뉴를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getMenuCount() : 메뉴바에 있는 메뉴의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem getShortcutMenuItem(MenuShortcut s) : 주어진 메뉴 단축키에 연결된 메뉴 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int index) : 주어진 인덱스에 해당하는 메뉴를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(MenuComponent m) : 주어진 메뉴 컴포넌트를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setHelpMenu(Menu m) : 도움말 메뉴를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ Enumeration shortcuts() : 메뉴바에 등록된 메뉴단축키를 얻는다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.3 Menu</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Menu 컴포넌트는 기본적인 풀다운 메뉴를 만드는데 사용하며, MenuItem클래스의 하위 클래스이기 때문에 메뉴를 다른 메뉴에 추가하면 새로운 메뉴를 생성할 수 있다. 즉, MenuBar에 추가하여 메뉴를 나타내거나, 다른 Menu에 추가하여 서브 메뉴를 구성할 수 있다. 다음 그림은 두 개의 Menu객체를 추가한 예이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV220.GIF" BORDER=0 WIDTH=268 HEIGHT=134 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림과 같이 윈도우의 프레임에 메뉴를 붙이는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=629>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MenuExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, editMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MenuExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Menu Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>
<P>		<FONT FACE="Courier New">mb.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MenuExample mt = new MenuExample();</FONT>
<P>		<FONT FACE="Courier New">mt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">MenuBar 클래스의 인스턴스를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">MenuBar에 들어갈 Menu 클래스의 인스턴스를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">setMenuBar() 메소드를 사용하여 MenuBar를 프레임에 추가한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 Menu를 MenuBar에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">Menu 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<P>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ Menu() : 레이블이 없는 메뉴를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu(String label) : 주어진 레이블을 갖는 메뉴를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ Menu(String label, boolean tearOff) : 주어진 레이블을 갖고, 메뉴가 tear-off 될 수 있는지 여부를 설정하여 메뉴를 생성한다.</FONT>
<P> 
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuItem add(MenuItem mi) : 메뉴 아이템을 추가한다. 
</FONT><P>  <FONT FACE="돋움">∘ void add(String label) : 주어진 이름의 메뉴 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void addSeparator() : 메뉴 분리자를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem getItem(int index) : 주어진 인덱스에 해당하는 메뉴 아이템을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ int getItemCount() : 메뉴에 추가된 메뉴 아이템의 개수를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(MenuItem menuitem, int index) : 주어진 인덱스에 메뉴 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void insert(String label, int index) : 주어진 인덱스에 주어진 이름의 메뉴 아이템을 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ void insertSeparator(int index) : 주어진 인덱스에 메뉴 분리자를 추가한다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isTearOff() : 이 메뉴가 tear-off 메뉴인지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(int index) : 주어진 인덱스에 해당하는 메뉴 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void remove(MenuComponent item) : 주어진 메뉴 아이템을 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ void removeAll() : 등록된 모든 메뉴 아이템을 제거한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.4 MenuItem</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">MenuItem 클래스는 Menu에 추가된 각 아이템을 만드는 클래스이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV222.GIF" BORDER=0 WIDTH=288 HEIGHT=192 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림과 같은 결과를 얻도록 메뉴에 메뉴항목을 붙이는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=784>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuItemExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MenuItemExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, editMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MenuItemExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;MenuItem Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">저장하기</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.addSeparator();</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">출력</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">mb.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MenuItemExample mt = new MenuItemExample();</FONT>
<P>		<FONT FACE="Courier New">mt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">18 : ∼ 23 : 까지는 Menu에 MenuItem을 포함시키는 부분으로 이 줄에서는 &quot;새글&quot;이라는 명칭의 메뉴항목을 &quot;파일&quot; 메뉴에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.addSeparator();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">메뉴 항목을 분리하기 위해 addSeparator() 메소드를 이용하여 메뉴 분리자를 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">MenuItem 클래스의 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuItem() : 레이블이 없고, 메뉴단축키가 없는 메뉴 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem(String label) : 주어진 레이블을 갖고, 연결된 메뉴단축키가 없는 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuItem(String label, MenuShortcut s) : 주어진 레이블을 갖고, 주어진 메뉴단축키가 연결된 메뉴 아이템을 생성한다.</FONT>
<P> 
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void deleteShortcut() : 연결된 메뉴단축키를 제거한다.</FONT>
<P>  <FONT FACE="돋움">∘ String getLabel() : 메뉴 아이템의 레이블을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuShortcut getShortcut() : 메뉴 아이템에 연결된 메뉴단축키 객체를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isEnabled() : 아이템이 활성화되어 있는지를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setEnabled(boolean b) : 메뉴 아이템을 활성화 또는 비활성화 되도록 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setLabel(String label) : 메뉴 아이템의 레이블을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ void setShortcut(MenuShortcut s) : 메뉴 아이템의 메뉴단축키 객체를 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.5 CheckboxMenuItem</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">CheckboxMenuItem는 체크박스를 포함하고 있는 메뉴 아이템을 만드는데 사용하며 선택 항목은 메뉴에 나열된다. CheckboxMenuItem은 ItemListener 인터페이스를 통해 제어가 이루어지기 때문에 상태가 바뀌면 itemStateChanged() 메소드가 호출된다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV223.GIF" BORDER=0 WIDTH=306 HEIGHT=163 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 CheckboxMenuItem을 구현하는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=762>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CheckboxMenuItemExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class CheckboxMenuItemExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, viewMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public CheckboxMenuItemExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;CheckboxMenuItem Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">viewMenu = new Menu(&quot;</FONT><FONT FACE="바탕">보기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<BR>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>
<P>		<FONT FACE="Courier New">mb.add(viewMenu);</FONT>
<P>	
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">표준</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단추</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">주소</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표시줄</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">상태</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">표시줄</FONT><FONT FACE="Courier New">&quot;));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 160);</FONT>	
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">CheckboxMenuItemExample ct = new CheckboxMenuItemExample();</FONT>
<P>		<FONT FACE="Courier New">ct.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">viewMenu.add(new CheckboxMenuItem(&quot;</FONT><FONT FACE="바탕">표준</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단추</FONT><FONT FACE="Courier New">&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">체크박스를 포함한 메뉴항목을 만들고 이를 메뉴(viewMenu)에 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">CheckboxMenuItem의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ CheckboxMenuItem() : 레이블이 없는 체크박스 메뉴 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ CheckboxMenuItem(String label) : 주어진 레이블을 갖는 체크박스 메뉴 아이템을 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ CheckboxMenuItem(String label, boolean state) : 주어진 레이블과 선택 상태를 갖는 체크박스 메뉴 아이템을 생성한다.</FONT>
<P>   
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ boolean getState() : 체크박스 메뉴 아이템의 선택 상태를 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ void setState(boolean b) : 체크박스 메뉴 아이템을 주어진 상태로 설정한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.6 PopupMenu</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">PopupMenu는 독립형 메뉴를 만드는데 사용하며 메뉴(Menu)나 메뉴항목(MenuItem)을 추가할 수 있다.</FONT>
<P><FONT FACE="바탕">이것은 컨테이너에 일반적인 컴포넌트를 넣는 것과는 달리 반드시 상위 컴포넌트에 붙여야 한다. PopupMenu를 화면에 나타나게 하려면 show() 메소드를 호출해야 하고, 팝업메뉴가 나타날 x좌표와, y좌표의 위치를 지정해야 한다. 위치지정은 동작을 시작시키는 컴포넌트를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV224.GIF" BORDER=0 WIDTH=255 HEIGHT=163 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 PopupMenu를 만드는 예제이다. 마우스 오른쪽 버튼을 누르면 팝업 메뉴가 나타나고, 이를 위해 이벤트를 적용하였다. 이벤트에 대한 자세한 내용은 뒤에서 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PopupMenuExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class PopupMenuExample </FONT>
<P>		<FONT FACE="Courier New">extends MouseAdapter </FONT>
<P>		<FONT FACE="Courier New">implements ActionListener {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<B><FONT FACE="Courier New">private PopupMenu popupMenu;</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=1022>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PopupMenuExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Menu editMenu;</FONT>
<P>	<FONT FACE="Courier New">private MenuItem cancelItem, redoItem, quitItem;</FONT>
<P>	<FONT FACE="Courier New">private MenuItem copyItem, pasteItem;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public PopupMenuExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;PopupMenu Example&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">popupMenu = new PopupMenu();</FONT></B>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">cancelItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">취소</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">redoItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">재</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">copyItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">복사하기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">pasteItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">붙여넣기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">quitItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">popupMenu.add(cancelItem);</FONT>
<P>		<FONT FACE="Courier New">redoItem.setEnabled(false);</FONT>
<P>		<FONT FACE="Courier New">popupMenu.add(redoItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">popupMenu.addSeparator();</FONT>
<BR>
<P>		<FONT FACE="Courier New">editMenu.add(copyItem);</FONT>
<P>		<FONT FACE="Courier New">editMenu.add(pasteItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">popupMenu.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">popupMenu.addSeparator();</FONT>
<BR>
<P>		<FONT FACE="Courier New">popupMenu.add(quitItem);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">f.add(popupMenu);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(250, 160);</FONT>
<BR>
<P>		<FONT FACE="Courier New">copyItem.addActionListener(this);</FONT>
<P>		<FONT FACE="Courier New">pasteItem.addActionListener(this);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( new WindowAdapter() {</FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT>
<P>				<FONT FACE="Courier New">System.exit(0);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">} );</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PopupMenuExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">PopupMenuExample pme = new PopupMenuExample();</FONT>
<P>		<FONT FACE="Courier New">pme.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent e) {</FONT>
<P>		<FONT FACE="Courier New">if(e.getModifiers() == MouseEvent.BUTTON3_MASK) {</FONT>
<P>			<B><FONT FACE="Courier New">popupMenu.show(f, e.getX(), e.getY());</FONT></B>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) {</FONT>
<P>		<FONT FACE="Courier New">if(e.getSource().equals(copyItem)) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Selected copy item&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else if(e.getSource().equals(pasteItem)) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Selected paste item&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Menu 클래스를 상속받아 메뉴를 생성하므로 사용법은 메뉴 컴포넌트에서와 같다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">popupMenu = new PopupMenu();</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">PopupMenu객체를 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">40:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">f.add(popupMenu);</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프레임에 팝업메뉴를 붙인다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">62:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<B><FONT FACE="Courier New">popupMenu.show(f, e.getX(), e.getY());</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">팝업메뉴를 이벤트가 발생한 위치에 나타나게 한다.</FONT>
<BR>
<P><FONT FACE="바탕">PopupMenu가 제공하는 객체 생성자와 주요 메소드는 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ PopupMenu() : 팝업메뉴를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ PopupMenu(String label) : 주어진 이름을 갖는 팝업메뉴를 생성한다.</FONT>
<P> 
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ void show(Component origin, int x, int y) : 팝업 메뉴를 주어진 컴포넌트의 해당 위치에 나타나게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.3.7 MenuShortcut</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">MenuShortcut 클래스는 메뉴에 단축키 기능을 제공하는 기능을 한다. 단축키를 등록하려면 해당키의 문자를 직접 입력할 수도 있고, 'KeyEvent.VK_'와 키값을 입력하면 되는데 만약, 'A' 키라면 KeyEvent.VK_A라고 기술한다. 이렇게 하면, CTRL 키와 조합되어 메뉴단축키를 생성한다. SHIFT 키와 함께 누르는 단축키로 지정하려면 useShiftModifier 값을 true로 설정한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV225.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 MenuShortcut 클래스를 익히기 위한 예제이다. 여기서는 이벤트 처리를 하지 않았으므로 실제 단축키를 눌러도 아무 반응도 나타나지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=348>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuShortcutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MenuShortcutExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu, editMenu;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MenuShortcutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;MenuShortcut Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">editMenu = new Menu(&quot;</FONT><FONT FACE="바탕">편집</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=629>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MenuShortcutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<BR>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>			<FONT FACE="Courier New">mb.add(editMenu);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut('N')));</FONT>
<BR>
<P>		<FONT FACE="Courier New">MenuItem openItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">openItem.setShortcut(new  MenuShortcut('O'));</FONT>
<BR>
<P>		<FONT FACE="Courier New">fileMenu.add(openItem);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">저장하기</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut(KeyEvent.VK_S)));</FONT>
<P>		
<P>		<FONT FACE="Courier New">MenuShortcut saveAsShortcut = new MenuShortcut('A', true);</FONT>
<P>		<FONT FACE="Courier New">MenuItem saveAsItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">다른</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">저장</FONT><FONT FACE="Courier New">&quot;, saveAsShortcut);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(saveAsItem);</FONT>
<P>		
<P>		<FONT FACE="Courier New">fileMenu.addSeparator();</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut('X')));</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MenuShortcutExample mt = new MenuShortcutExample();</FONT>
<P>		<FONT FACE="Courier New">mt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">새글</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut('N')));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Ctrl+N을 단축키로 갖는 메뉴항목(MenuItem)을 생성하여 메뉴에 추가한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">MenuItem openItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">열기</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">openItem.setShortcut(new  MenuShortcut('O'));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">MenuItem 객체를 생성하고 setShortcut() 메소드를 이용하여 Ctrl+O를 단축키로 설정한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">fileMenu.add(new MenuItem(&quot;</FONT><FONT FACE="바탕">저장하기</FONT><FONT FACE="Courier New">&quot;, new MenuShortcut(KeyEvent.VK_S)));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">java.awt.event.KeyEvent 클래스의 필드(VK_S)를 사용하여 Ctrl+S를 단축키로 지정한다. KeyEvent 클래스의 필드를 사용하려면 java.awt.event 패키지를 import한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">MenuShortcut saveAsShortcut = new MenuShortcut('A', true);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">단축키로 Shift키와 함께 사용하는 MenuShortcut 객체를 생성한다. 단축키는 Ctrl+Shift+A를 갖게 된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=29>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">MenuItem saveAsItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">다른</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">저장</FONT><FONT FACE="Courier New">&quot;, saveAsShortcut);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">28번째 줄에서 생성된 MenuShortcut객체를 이용하여 MenuItem의 단축키를 지정한다.</FONT>
<BR>
<P><FONT FACE="바탕">MenuShortcut 클래스의 객체 생성자와 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 생성자</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ MenuShortcut(int key) : 주어진 키에 대한 메뉴단축키 객체를 생성한다.</FONT>
<P>  <FONT FACE="돋움">∘ MenuShortcut(int key, boolean useShiftModifier) : 주어진 키에 대한 메뉴단축키 객체를 생성한다. Shift키를 함께 사용할것인지의 여부를 결정할 수 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 메소드</FONT></SPAN></FONT>
<P>  <FONT FACE="돋움">∘ int getKey() : 키 코드값을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean usesShiftModifier() : 메뉴단축키 객체가 Shift키를 사용할지 여부를 설정한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV226.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">4.4  </FONT><FONT FACE="바탕">색상과</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">글꼴</FONT><FONT FACE="Bookman Old Style">(Font)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 부분에서는 AWT가 제공하는 색상과 글꼴의 사용법 및 기능에 대해 설명하기로 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.4.1 </FONT><FONT FACE="바탕">색상</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">색을 변경하려면 setForeground(Color c)메소드와 setBackground(Color c) 메소드를 이용한다. 이 메소드는 모두 java.awt.Color 클래스의 인스턴스를 인수로 갖는다. Color 클래스의 인스턴스는 자주 사용되는 색에 대해서는 상수로 지정된 Color.red, Color.blue 등의 static 멤버변수를 사용할 수도 있고, Color 클래스의 생성자를 통해 R(빨강), G(초록), B(파랑)에 0∼255사이의 값을 주어 고유한 색을 만들 수도 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=549 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">public Color(int red, int green, int blue)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P ALIGN=CENTER>
<IMG SRC="FYXIV227.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞 그림의 버튼 배경색과 전경색을 바꾸는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=673>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ColorExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ColorExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ColorExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">btn = new Button(&quot;</FONT><FONT FACE="바탕">버</FONT><FONT FACE="Courier New">  </FONT><FONT FACE="바탕">튼</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.add(btn, BorderLayout.SOUTH);</FONT>
<BR>
<P>		<FONT FACE="Courier New">btn.setBackground(</FONT><B><FONT FACE="Courier New">Color.blue</FONT></B><FONT FACE="Courier New">);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Color yellow = new Color(255, 255, 0);</FONT></B>
<P>		<FONT FACE="Courier New">btn.setForeground(</FONT><B><FONT FACE="Courier New">yellow</FONT></B><FONT FACE="Courier New">);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ColorExample win = new ColorExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">4.4.2 </FONT><FONT FACE="바탕">글꼴</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT에서 문자를 표시하는데 사용하는 글꼴은 setFont(Font f) 메소드를 이용하여 지정할 수 있으며, 이 메소드는 java.awt.Font 클래스의 인스턴스를 인자로 갖는다. Color 클래스와는 달리 글꼴을 직접 지정하는 상수는 없지만, 글꼴이름, 스타일, 포인트 크기 등을 지정할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=549 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">public Font(String name, int style, int size)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">- name에는 Dialog, Helvetica, TimesRoman, Curier 등의 글꼴 명을 사용한다. 
</FONT><P><FONT FACE="바탕">- 스타일 상수는 int값으로 다음중 하나를 갖는다.</FONT>
<BR>
<P>	<FONT FACE="바탕">Font.BOLD</FONT>
<P>	<FONT FACE="바탕">Font.ITALIC</FONT>
<P>	<FONT FACE="바탕">Font.PLAIN</FONT>
<P>	<FONT FACE="바탕">Font.BOLD + Font.ITALIC</FONT>
<BR>
<P><FONT FACE="바탕">- 폰트의 기본값은 10이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV228.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림과 같은 글꼴을 출력시키는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=740>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FontExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FontExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn;</FONT>
<P>	<FONT FACE="Courier New">private TextArea output;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FontExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">btn = new Button(&quot;</FONT><FONT FACE="바탕">버</FONT><FONT FACE="Courier New">  </FONT><FONT FACE="바탕">튼</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">output = new TextArea();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.add(btn, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.add(output, BorderLayout.CENTER);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Font myFont = new Font(&quot;Curier&quot;, Font.ITALIC, 20);</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">btn.setFont(myFont);</FONT></B>
<P>		<B><FONT FACE="Courier New">output.setFont(myFont);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">FontExample win = new FontExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P>
<IMG SRC="FYXIV229.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV230.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV231.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[이벤트 프로그래밍]</FONT></SPAN></FONT>
<P>
<IMG SRC="FYXIV232.GIF" BORDER=0 ALIGN=LEFT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이벤트란 사용자 인터페이스를 통한 행위나, 어떤 객체가 활동하여 발생하는 모든 행위를 말하는데, 예를 들어 사용자가 버튼을 클릭 하거나 특정키를 누르는 행위 등을 말한다. 이벤트는 AWT 컴포넌트에 대한 동작의 결과를 나타내는데, 예를 들어 버튼 위에서 마우스를 누르면 마우스 이벤트의 발생 원인이 되는 것이다. 이벤트가 발생하면 동작 대상인 컴포넌트(버튼, 텍스트 필드 등)가 그 이벤트를 받게되는데 이처럼 이벤트 객체를 받는 메소드를 이벤트핸들러(Event Handler)라고 한다.</FONT></SPAN></FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이벤트 처리 방식은 JDK 1.0의 계층형 이벤트 모델(Hierarchical event model)과 JDK 1.1 이후의 위임형 이벤트모델(Delegation event model)방식이 있다.</FONT></SPAN></FONT>
<BR>
<BR>
<P>
<BR>
<P>
<IMG SRC="FYXIV234.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">5.1   </FONT><FONT FACE="바탕">계층형</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">이벤트</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">모델</FONT><FONT FACE="Bookman Old Style"> - JDK 1.0</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">상속 이벤트모델 또는 drill-up/drill-down 방식이라고도 하며 JDK 1.02버전 모델로 지금은 권장하지 않는 방법이다. 계층형 이벤트 모델은 포함(containment)이라는 개념에 기초한 것으로 컴포넌트에 이벤트가 발생하면 시스템 안에서 이벤트 객체를 생성시킨 다음 프로그램의 최하위 컨테이너로부터 최상위 컴포넌트까지 이벤트를 전달한다. 이렇게 전달된 이벤트는 컴포넌트에 의해 사용 여부가 결정되고 처리가 되면 true를 반환한다. 만약 false를 반환하면 이벤트가 처리되지 않고 컨테이너에게 전달된다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV235.GIF" BORDER=0 WIDTH=548 HEIGHT=159 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">예를 들어 앞의 그림처럼 프레임에 패널이 포함되어 있고 그 안에 버튼 컴포넌트가 있을 때, 버튼을 누르면 이벤트 제어기는 버튼행위에 대한 이벤트를 처리할 제어기를 찾게된다. 만약 버튼의 실행이벤트가 처리되지 않으면 바로 위의 패널 객체로 전달되어 패널에서 이벤트 제어기를 찾게되고, 여기서도 이벤트가 처리되지 않으면 다시 상위 계층인 프레임으로 이벤트가 전달되는 방식이다. 이러한 작업은 이벤트를 받아 처리할 제어기를 찾거나 맨 위 계층에 이를 때까지 계속되는데, 이런 형태의 이벤트 처리 방식은 순수 객체지향 프로그래밍 방식에 위배될 뿐만 아니라 이벤트 처리와 관계없는 객체까지 체크동작을 함으로써 시스템 자원의 낭비를 초래하는 단점을 안고 있다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV236.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">5.2  </FONT><FONT FACE="바탕">위임형</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">이벤트모델</FONT><FONT FACE="Bookman Old Style"> - JDK 1.1+</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDK 1.0의 문제점을 해결하기 위해 JDK 1.1에서는 새로운 모델을 채택하였는데 바로 위임형 이벤트모델(delegation event model) 방식이다. 이 모델은 컴포넌트를 기반으로 한 자바 빈즈(Beans)와의 호환을 위해 자바 빈즈에 적용된 방식을 자바에서도 채택한 것이다.</FONT>
<P><FONT FACE="바탕">위임형 이벤트모델 방식은 이벤트 발생 객체가 이벤트를 생성하여 이벤트 처리객체(혹은 이벤트 리스너)에게 위임하는 방식이다. 이벤트 발생 객체는 각 이벤트 처리 객체를 명시하여 등록하고 이벤트 처리객체는 리스너 인터페이스를 구현하여 이벤트 처리를 책임지게 된다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV237.GIF" BORDER=0 WIDTH=699 HEIGHT=188 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">JDK 1.1에서는 다양한 이벤트 타입을 지원하며 이벤트 리스너 인터페이스와 연관되어 있다. 자바에서는 이벤트 자체도 클래스이며, 모든 이벤트는 계층을 이룬다.</FONT>
<P><FONT FACE="바탕">이벤트객체는 java.util.EventObject에서 상속되며, java.util.EventObject 가 최상위 클래스로 이벤트를 발생시킨 객체(Event Object)를 저장하고 있다. 이 객체를 얻으려면 이벤트를 발생시킨 객체를 반환하는 getSource() 메소드를 사용한다.</FONT>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 자바에서 제공하는 이벤트 클래스의 계층 구조를 나타낸 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV238.GIF" BORDER=0 WIDTH=510 HEIGHT=305 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">EventObject의 하위클래스인 java.awt.AWTEvent 클래스는 위임형 이벤트 모델의 최상위 클래스가 된다. 이 클래스는 이벤트의 정확한 특성을 정의한 정수형 이벤트 ID값을 갖게되는데, 예를 들어 키를 누르는 이벤트가 발생하였을 때 어떤 키인지를 상수로 표현한 것이다. 이 이벤트 ID값을 얻기 위해서는 java. awt.AWTEvent 클래스 안의 getID() 메소드를 이용한다.</FONT>
<BR>
<P><FONT FACE="바탕">AWTEvent 클래스를 상속받은 이벤트 타입은 낮은 등급 이벤트 클래스와 시멘틱(Semantic) 이벤트 클래스로 구분된다. 낮은 등급 이벤트란 키 누름, 마우스 누름, 마우스 이동, 포커스 변화 등의 컴포넌트에서 발생하는 사용자 입력이나 시스템 레벨의 이벤트를 말하며, 시멘틱 이벤트는 보다 고수준의 이벤트로 특정 컴포넌트에 의해서 만들어진다. 
</FONT><BR>
<P><FONT FACE="바탕">다음은 낮은 등급 이벤트와 시멘틱 이벤트를 분류한 것이다. 하지만 모두 동일한 처리 기법을 사용하므로 등급을 구별하는 것은 의미가 없다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=689 HEIGHT=234>
<TD VALIGN=MIDDLE WIDTH=4%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">이벤트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">이벤트가 발생할 경우</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=7 WIDTH=4%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">저수준</FONT></SPAN></FONT>
<BR>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">이벤트</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ComponentEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 크기변경, 이동 등 컴포넌트에 변화가 있을 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ContainerEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트를 추가하거나 삭제할 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FocusEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트가 포커스를 잃거나 얻었을 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">KeyEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">키보드의 키를 누르거나 놓을 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=2 WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">MouseEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">마우스를 누르거나 뗄 때, 누를 때, 마우스 포인터가 컴포넌트 영역으로 들어가거나 밖으로 나왔을 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">마우스 포인터를 이동하거나 끌(drag) 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">WindowEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">윈도우가 열리거나 닫힐 때, 아이콘을 표시하거나 복구할 때</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=689 HEIGHT=322>
<TD VALIGN=MIDDLE WIDTH=4%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">이벤트 이름</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">이벤트가 발생할 경우</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=4 WIDTH=4%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">시멘틱</FONT></SPAN></FONT>
<BR>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">이벤트</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ActionEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">컴포넌트 특유의 동작이 일어날 때</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- Button : 클릭</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- List : 아이템 선택</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- MenuItem : 클릭하거나 Enter키를 눌러 선택했을 때</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- TextField : Enter키를 누를 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">AdjustmentEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">스크롤 바 값이 변경되었을 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ItemEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">아이템을 갖는 컴포넌트의 아이템을 선택하였을 때</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- Choice : 아이템이 선택되었을 때</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- List : 아이템을 누르거나 방향키로 선택했을 때</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- Checkbox : 체크박스가 체크되거나 해제될 때</FONT></SPAN></FONT>
<P>  <FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">- CheckboxMenuItem : 체크박스 메뉴 아이템이 체크되거나 해제될 때</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=73%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextField나 TextArea 컴포넌트의 텍스트를 변경할 때</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.2.1 EventListener</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이벤트 리스너(Event Listener)는 특정 이벤트를 처리하는 인터페이스로, 프로그래머가 사용자 이벤트에 응답할 프로그램 고유의 코드를 구현하는 곳이다. 
</FONT><BR>
<P><FONT FACE="바탕">이벤트 전달은 처리할 이벤트를 등록시켜 리스너로 전달할 준비가 끝난 다음 이벤트가 발생하면 객체화하여 상태를 저장하고, 리스너 인터페이스에 정의된 응답 메소드에 상태객체를 넘김으로써 이벤트를 처리하게 된다. 따라서 이벤트 리스너는 가장 중요한 역할을 하고 있는 것이다. 리스너의 이름은 &quot;이벤트_이름+Listener&quot;의 형태로 java.awt.event 패키지에 포함되어 있다. 예를 들어 ActionEvent의 리스너 인터페이스 이름은 ActionListener가 되고, WindowEvent의 리스너 인터페이스 이름은 WindowListener가 된다.</FONT>
<P><FONT FACE="바탕">리스너를 이용하여 컴포넌트로부터 이벤트 클래스를 받기 위해 리스너를 등록하려면 컴포넌트에 &quot;add+이벤트_이름+Listener()&quot;의 형식으로 리스너를 등록할 수 있는데, ActionEvent 객체를 등록시키려면 addActionListener() 메소드를 이용한다. 
</FONT><BR>
<P><FONT FACE="바탕">등록된 리스너를 제거하려면 &quot;remove+이벤트_이름+Listener&quot; 메소드를 이용한다. 컴포넌트는 여러 리스너를 가질 수 있지만 등록된 순서에 따라 처리되지는 않는다.</FONT>
<P><FONT FACE="바탕">다음 프로그램은 &quot;종료&quot; 버튼을 누르면 윈도우가 종료되는 예를 보인 것으로  ActionListener 인터페이스를 이용하여 구현하였다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=695>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListenerExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListenerExample implements ActionListener {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListenerExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">리스너</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이벤트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">처리</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">예제</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">btn = new Button(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">btn.addActionListener(this);</FONT>
<P>		<FONT FACE="Courier New">f.add(btn, &quot;South&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListenerExample lt = new ListenerExample();</FONT>
<P>		<FONT FACE="Courier New">lt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent evt) {</FONT>
<P>		<FONT FACE="Courier New">String str = evt.getActionCommand();</FONT>
<P>		<FONT FACE="Courier New">if(str.equals(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;))</FONT>
<P>			<FONT FACE="Courier New">System.exit(0);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ListenerExample implements ActionListener {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Frame클래스는 윈도우 창을 만들기 위해  상속받고, 액션 이벤트(ActionEvent)를 사용하기 위해 Listener 인터페이스(ActionListener)를 구현하였다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">btn.addActionListener(this);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼을 누를 때 이벤트가 발생하도록 버튼 객체 btn에 액션 리스너를 등록한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent evt) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">실제 이벤트가 수행될 내용을 구현한 부분이다. actionPerformed() 메소드는 ActionListener 인터페이스 내에 이미 정의가 되어있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">String str = evt.getActionCommand();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이벤트가 발생하는 객체의 레이블(여기에서는 버튼의 title)을 받아서 스트링형 변수에 저장한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">System.exit(0);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">exit() 메소드의 인자값으로 0을 주면 윈도우를 정상적으로 종료시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">앞의 예에서처럼 이벤트 리스너를 이용할 경우 인터페이스로 정의되어 있어 사용하지 않는 메소드까지도 처리 메소드를 구현해 주어야 한다. 그렇지 않으면 abstract로 선언되어야 한다. 또 이벤트를 처리할 메소드는 모두 public으로 선언해야하며, void형이어야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 윈도우 종료를 MouseListener 인터페이스를 이용하여 구현한 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=546>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MouseListenerExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MouseListenerExample implements MouseListener {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MouseListenerExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;</FONT><FONT FACE="바탕">마우스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이벤트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">처리</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">예제</FONT><FONT FACE="Courier New">&quot;)</FONT>
<P>		<FONT FACE="Courier New">btn = new Button(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">btn.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">f.add(btn, &quot;South&quot;);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MouseListenerExample mt = new MouseListenerExample();</FONT>
<P>		<FONT FACE="Courier New">mt.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=232>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MouseListenerExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent ae) {</FONT>
<P>		<FONT FACE="Courier New">System.exit(0);</FONT>			
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mouseEntered (MouseEvent evt) { }</FONT>
<P>	<FONT FACE="Courier New">public void mouseExited (MouseEvent evt) { }</FONT>
<P>	<FONT FACE="Courier New">public void mousePressed (MouseEvent evt) { }</FONT>
<P>	<FONT FACE="Courier New">public void mouseReleased (MouseEvent evt) { }</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MouseListenerExample implements MouseListener {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">마우스 이벤트를 사용하기 위한 기능이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">btn.addMouseListener(this);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">버튼 객체에 마우스 이벤트 리스너를 등록시킨다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent ae) {</FONT>			
<P>		<FONT FACE="Courier New">System.exit(0);</FONT>
<P>	<FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">마우스를 누를 때 수행될 내용이다. 17번째 줄은 윈도우를 종료시키는 명령이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void mouseEntered (MouseEvent evt) { }</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">28 : ∼ 31 : 실제 사용하지 않는 메소드를 구현한 것으로 리스너 인터페이스를 구현했을 때의 단점이다. 이처럼 사용되지 않는 메소드도 구현해야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">이벤트 처리 순서는 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="바탕">1) 이벤트가 발생될 컴포넌트에 대해 이벤트 소스와 이벤트를 선택한다.</FONT>
<P>  <FONT FACE="바탕">2) 선택한 이벤트의 처리를 위해 이벤트 핸들러를 작성한다.</FONT>
<P>  <FONT FACE="바탕">3) addXxxListener() 메소드를 이용하여 이벤트 핸들러를 추가한다.</FONT>
<BR>
<P><FONT FACE="바탕">이벤트를 처리하기 위해 만드는 핸들러는 메소드를 어떤 클래스에 구현하느냐에 따라 다음과 같은 5가지로 나눌 수 있다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ 이벤트 발생 클래스와 동일 클래스 : 이벤트가 발생하는 클래스에서 Listener 인터페이스를 만든다.</FONT>
<P>  <FONT FACE="돋움">∘ 이벤트가 발생하는 클래스와 별개의 클래스 : 별도로 클래스를 만들어 Listener 인터페이스를 구현한다.</FONT>
<P>  <FONT FACE="돋움">∘ Inner 클래스 : 클래스 안에 클래스를 선언하여 핸들러로 사용한다.</FONT>
<P>  <FONT FACE="돋움">∘ Local 클래스 : 메소드 안에 Local 클래스를 선언하여 핸들러로 사용한다.</FONT>
<P>  <FONT FACE="돋움">∘ Anonymous 클래스 : addXxxListener() 메소드 인자로 직접 핸들러를 구현한다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 이벤트가 발생하는 클래스와 동일 클래스에서 핸들러를 만든 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=820>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListenerExample1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListenerExample1 </FONT><B><FONT FACE="Courier New">implements WindowListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListenerExample1() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Listener</FONT><FONT FACE="바탕">인터페이스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">this</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListenerExample1 lt1 = new ListenerExample1();</FONT>
<P>		<FONT FACE="Courier New">lt1.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>		<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<P>	<B><FONT FACE="Courier New">public void windowOpened(WindowEvent e){}</FONT></B>
<P>	<B><FONT FACE="Courier New">public void windowClosed(WindowEvent e){}</FONT></B>
<P>	<B><FONT FACE="Courier New">public void windowIconified(WindowEvent e){}</FONT></B>
<P>	<B><FONT FACE="Courier New">public void windowDeiconified(WindowEvent e){}</FONT></B>
<P>	<B><FONT FACE="Courier New">public void windowActivated(WindowEvent e){}</FONT></B>
<P>	<B><FONT FACE="Courier New">public void windowDeactivated(WindowEvent e){}</FONT></B>	
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 이벤트가 발생하는 클래스와 별도의 클래스로 핸들러를 만든 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=507>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListenerExample2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListenerExample2 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListenerExample2() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Listener</FONT><FONT FACE="바탕">인터페이스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyWindowHandler() </FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListenerExample2 lt2 = new ListenerExample2();</FONT>
<P>		<FONT FACE="Courier New">lt2.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=388>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyWindowHandler.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><B><FONT FACE="Courier New">public class MyWindowHandler implements WindowListener {</FONT></B>
<BR>
<P>	<FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT>
<P>		<FONT FACE="Courier New">System.exit(0);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void windowOpened(WindowEvent e){}</FONT>
<P>	<FONT FACE="Courier New">public void windowClosed(WindowEvent e){}</FONT>
<P>	<FONT FACE="Courier New">public void windowIconified(WindowEvent e){}</FONT>
<P>	<FONT FACE="Courier New">public void windowDeiconified(WindowEvent e){}</FONT>
<P>	<FONT FACE="Courier New">public void windowActivated(WindowEvent e){}</FONT>
<P>	<FONT FACE="Courier New">public void windowDeactivated(WindowEvent e){}</FONT>	
<P><B><FONT FACE="Courier New">}</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 이벤트가 발생하는 클래스 안의 클래스인 Inner 클래스로 핸들러를 만든 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=894>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListenerExample3.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListenerExample3 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListenerExample3() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Listener</FONT><FONT FACE="바탕">인터페이스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyInnerHandler()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListenerExample3 lt3 = new ListenerExample3();</FONT>
<P>		<FONT FACE="Courier New">lt3.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">private class MyInnerHandler implements WindowListener {</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>			<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>		<B><FONT FACE="Courier New">}</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">public void windowOpened(WindowEvent e){}</FONT></B>
<P>		<B><FONT FACE="Courier New">public void windowClosed(WindowEvent e){}</FONT></B>
<P>		<B><FONT FACE="Courier New">public void windowIconified(WindowEvent e){}</FONT></B>
<P>		<B><FONT FACE="Courier New">public void windowDeiconified(WindowEvent e){}</FONT></B>
<P>		<B><FONT FACE="Courier New">public void windowActivated(WindowEvent e){}</FONT></B>
<P>		<B><FONT FACE="Courier New">public void windowDeactivated(WindowEvent e){}</FONT></B>	
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 핸들러 객체를 사용하는 메소드 안에 Local 클래스로 선언한 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=871>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListenerExample4.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListenerExample4 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListenerExample4() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Listener</FONT><FONT FACE="바탕">인터페이스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">class MyInnerHandler implements WindowListener {</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>				<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>			<B><FONT FACE="Courier New">}</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowOpened(WindowEvent e){}</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowClosed(WindowEvent e){}</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowIconified(WindowEvent e){}</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowDeiconified(WindowEvent e){}</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowActivated(WindowEvent e){}</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowDeactivated(WindowEvent e){}</FONT></B>	
<P>		<B><FONT FACE="Courier New">}</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyInnerHandler() </FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListenerExample4 lt4 = new ListenerExample4();</FONT>
<P>		<FONT FACE="Courier New">lt4.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Anonymous 클래스로 핸들러를 만든 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=869>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListenerExample5.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListenerExample5 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ListenerExample5() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Listener</FONT><FONT FACE="바탕">인터페이스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new WindowListener() {</FONT></B>
<P>				<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>					<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>				<B><FONT FACE="Courier New">}</FONT></B>
<BR>
<P>				<B><FONT FACE="Courier New">public void windowOpened(WindowEvent e){}</FONT></B>
<P>				<B><FONT FACE="Courier New">public void windowClosed(WindowEvent e){}</FONT></B>
<P>				<B><FONT FACE="Courier New">public void windowIconified(WindowEvent e){}</FONT></B>
<P>				<B><FONT FACE="Courier New">public void windowDeiconified(WindowEvent e){}</FONT></B>
<P>				<B><FONT FACE="Courier New">public void windowActivated(WindowEvent e){}</FONT></B>
<P>				<B><FONT FACE="Courier New">public void windowDeactivated(WindowEvent e){}</FONT></B>	
<P>			<B><FONT FACE="Courier New">}</FONT></B>
<P>		<FONT FACE="Courier New">);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ListenerExample5 lt5 = new ListenerExample5();</FONT>
<P>		<FONT FACE="Courier New">lt5.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 표는 11개의 이벤트 처리를 위한 각각의 리스너 인터페이스와 인터페이스 메소드 그리고 add 메소드를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=776 HEIGHT=906>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Event</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Listener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Interface Method</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Add Method</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ActionEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ActionListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">actionPerformed(ActionEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addActionListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">AdjustmentEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">AdjustmentListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:9pt;"><FONT FACE="바탕">adjustmentValueChanged(AdjustmentEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addAdjustmentListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ComponentEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ComponentListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">componentHidden(ComponentEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">componentMoved(ComponentEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">componentResized(ComponentEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">componentShown(ComponentEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addComponentListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ContainerEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ContainerListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">componentAdded(ComponentEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">componentRemoved(ComponentEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FocusEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FocusListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">focusGained(FocusEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">focusLost(FocusEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addFocusListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ItemEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ItemListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">itemStateChanged(ItemEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addItemListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">KeyEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">KeyListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">keyPressed(KeyEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">keyReleased(KeyEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">keyTyped(KeyEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addKeyListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=2 WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">MouseEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">MouseListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mouseClicked(MouseEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mouseEntered(MouseEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mouseExited(MouseEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mousePressed(MouseEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mouseReleased(MouseEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addMouseListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:9pt;"><FONT FACE="바탕">MouseMotionListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mouseDragged(MouseEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mouseMoved(MouseEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addMouseMotionListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:9pt;"><FONT FACE="바탕">MouseWheelEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">MouseWheelListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">mouseWheelMoved(MouseWheelEvent e) </FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addMouseWheelListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">textValueChanged(TextEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addTextListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=3 WIDTH=16%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">WindowEvent</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">WindowListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowActivated(WindowEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowClosed(WindowEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowClosing(WindowEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowDeactivated(WindowEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowDeiconified(WindowEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowIconified(WindowEvent e)</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowOpened(WindowEvent e)</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addWindowListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:9pt;"><FONT FACE="바탕">WindowFocusListener </FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowGainedFocus(WindowEvent e) </FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowLostFocus(WindowEvent e) </FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addWindowFocusListener()</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:9pt;"><FONT FACE="바탕">WindowStateListener</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=39%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">windowStateChanged(WindowEvent e) </FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">addWindowStateListener()</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 표는 컴포넌트 타입에 따라 발생할 수 있는 이벤트를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=740 HEIGHT=505>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Component Type</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Act</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Adj</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Cmp</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Cnt</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Foc</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Itm</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Key</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Mou</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">MM</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">MW</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Txt</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Win</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Button</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Canvas</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Checkbox</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">CheckboxMenuItem</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Choice</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Component</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Container</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Dialog</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Frame</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Label</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">List</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">MenuItem</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Panel</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Scrollbar</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ScrollPane</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextArea</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">TextField</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=23%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Window</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=6%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">◹</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=741 HEIGHT=200>
<TD VALIGN=TOP WIDTH=50%>
<P><B><FONT FACE="Courier New">Act</FONT></B><FONT FACE="Courier New"> - ActionListener</FONT>
<P><B><FONT FACE="Courier New">Adj</FONT></B><FONT FACE="Courier New"> - AdjustmentListener</FONT>
<P><B><FONT FACE="Courier New">Cmp</FONT></B><FONT FACE="Courier New"> - ComponentListener</FONT>
<P><B><FONT FACE="Courier New">Cnt</FONT></B><FONT FACE="Courier New"> - ContainerListener</FONT>
<P><B><FONT FACE="Courier New">Foc</FONT></B><FONT FACE="Courier New"> - FocusListener</FONT>
<P><B><FONT FACE="Courier New">Itm</FONT></B><FONT FACE="Courier New"> - ItemListener</FONT></TD>
<TD VALIGN=TOP WIDTH=49%>
<P><B><FONT FACE="Courier New">Key</FONT></B><FONT FACE="Courier New"> - KeyListener</FONT>
<P><B><FONT FACE="Courier New">Mou</FONT></B><FONT FACE="Courier New"> - MouseListener</FONT>
<P><B><FONT FACE="Courier New">MM </FONT></B><FONT FACE="Courier New">- MouseMotionListener</FONT>
<P><B><FONT FACE="Courier New">MW </FONT></B><FONT FACE="Courier New">- MouseWheelListener</FONT>
<P><B><FONT FACE="Courier New">Txt</FONT></B><FONT FACE="Courier New"> - TextListener</FONT>
<P><B><FONT FACE="Courier New">Win</FONT></B><FONT FACE="Courier New"> - WindowListener</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.2.2 Adapter </FONT><FONT FACE="바탕">클래스</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">시멘틱 리스너는 하나의 메소드만 갖는 반면 저수준(Low-Level)리스너는 2개 이상의 메소드를 갖는다. 특히 앞의 WindowListener 경우 최대 7개의 메소드를 가지고 있는데, 이 리스너가 인터페이스로 선언되면 윈도우가 닫히는 단 하나의 처리를 위해 6개의 불필요한 메소드까지 구현해 주어야 한다. 
</FONT><P><FONT FACE="바탕">이와 같은 문제점을 해소하기 위해 어댑터 클래스를 이용한다. 어댑터 클래스는 리스너 인터페이스의 모든 메소드를 사용하지 않는 디폴트 메소드로 정의해 주는 추상 클래스이다. 이 어댑터 클래스를 상속받아 이벤트처리 객체로 등록하고, 원하는 메소드를 재정의 하여 사용하면 불필요한 메소드까지 선언하는 수고를 덜 수 있다.</FONT>
<P><FONT FACE="바탕">어댑터 클래스의 이름은 &quot;이벤트_이름+Adapter&quot;형태인데 예를 들어 WindowListener의 경우에는 WindowAdapter가 있다. 하지만 메소드가 하나만 존재하는 인터페이스는 어댑터 클래스가 존재하지 않는다. MouseMotionListener의 경우 이벤트 이름이 MouseEvent이지만 어댑터 이름은 MouseMotion -Adapter이다.</FONT>
<BR>
<P><FONT FACE="바탕">어댑터 클래스를 상속받아 핸들러를 만들 경우 여러 가지 클래스로 만들 수가 있는데, 다음 프로그램은 이벤트가 발생하는 클래스와 동일 클래스에서 어댑터클래스를 상속받아 핸들러를 구현하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=626>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdapterExample1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class AdapterExample1 </FONT><B><FONT FACE="Courier New">extends WindowAdapter</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public AdapterExample1() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Adapter</FONT><FONT FACE="바탕">클래스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">this</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">AdapterExample1 at1 = new AdapterExample1();</FONT>
<P>		<FONT FACE="Courier New">at1.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>		<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 이벤트가 발생하는 클래스와 별도의 클래스로 핸들러를 만든 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=459>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdapterExample2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class AdapterExample2 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public AdapterExample2() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Adapter</FONT><FONT FACE="바탕">클래스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyWindowAdapterHandler()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">AdapterExample2 at2 = new AdapterExample2();</FONT>
<P>		<FONT FACE="Courier New">at2.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=225>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyWindowAdapterHandler.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><B><FONT FACE="Courier New">public class MyWindowAdapterHandler extends WindowAdapter {</FONT></B>
<BR>
<P>	<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>		<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<BR>
<P><B><FONT FACE="Courier New">}</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 이벤트가 발생하는 클래스 안에 Inner 클래스로 핸들러를 만든 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=182>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdapterExample3.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class AdapterExample3 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public AdapterExample3() {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=480>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdapterExample3.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Adapter</FONT><FONT FACE="바탕">클래스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyInnerHandler()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">AdapterExample3 at3 = new AdapterExample3();</FONT>
<P>		<FONT FACE="Courier New">at3.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">private class MyInnerHandler extends WindowAdapter {</FONT></B>
<P>		<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>			<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>		<B><FONT FACE="Courier New">}</FONT></B>
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<BR>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 메소드 안에 Local클래스로 핸들러를 구현한 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=416>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdapterExample4.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class AdapterExample4 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public AdapterExample4() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Adapter</FONT><FONT FACE="바탕">클래스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">class MyInnerHandler extends WindowAdapter {</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>				<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>			<B><FONT FACE="Courier New">}</FONT></B>
<P>		<B><FONT FACE="Courier New">}</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyInnerHandler()</FONT></B><FONT FACE="Courier New"> );</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdapterExample4.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">AdapterExample4 at4 = new AdapterExample4();</FONT>
<P>		<FONT FACE="Courier New">at4.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Anonymous 클래스로 핸들러를 만든 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=629>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdapterExample5.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class AdapterExample5 {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public AdapterExample5() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Adapter</FONT><FONT FACE="바탕">클래스를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new WindowAdapter() {</FONT></B>
<P>				<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>					<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>				<B><FONT FACE="Courier New">}</FONT></B>
<P>			<B><FONT FACE="Courier New">}</FONT></B>
<P>		<FONT FACE="Courier New">);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">AdapterExample5 at5 = new AdapterExample5();</FONT>
<P>		<FONT FACE="Courier New">at5.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="FYXIV239.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">5.3  </FONT><FONT FACE="바탕">주요</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">이벤트</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">클래스</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">여기서는 각 이벤트별 리스너 인터페이스와 어댑터 클래스에 대해 설명하고 발생할 수 있는 메소드에 대해 구체적으로 언급하기로 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.1. ActionEvent</FONT></SPAN></FONT>
<P> 
<P><FONT FACE="바탕">Action 이벤트는 Button, List, MenuItem, TextField가 다음과 같은 상황일 때 발생된다.</FONT>
<BR>
<P><FONT FACE="바탕">- Button : 마우스를 누를 때</FONT>
<P><FONT FACE="바탕">- List : 아이템을 선택하거나 선택을 해제했을 때</FONT>
<P><FONT FACE="바탕">- MenuItem : 메뉴아이템을 선택했을 때</FONT>
<P><FONT FACE="바탕">- TextField : 텍스트필드에서 엔터 키를 눌렀을 때</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.1.1 ActionListener</FONT></SPAN></FONT>
<P> 
<P><FONT FACE="바탕">동작(Action) 이벤트를 처리할 리스너의 기능을 정의하는 인터페이스이다. 따라서, 동작 이벤트를 처리하려면 이 인터페이스를 구현해야 하고, 객체를 생성한 후 컴포넌트의 addActionListener() 메소드를 이용하여 컴포넌트에 등록한다. 동작이 일어나면 해당 ActionListener의 actionPerformed() 메소드가 호출된다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.1.2 ActionListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void actionPerformed(ActionEvent e) : 동작이 발생할 때 호출된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Action 이벤트의 사용 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ActionExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ActionExample </FONT><B><FONT FACE="Courier New">implements ActionListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private MenuBar mb;</FONT>
<P>	<FONT FACE="Courier New">private Menu fileMenu;</FONT>
<P>	<FONT FACE="Courier New">private MenuItem exitItem;</FONT>
<P>	<FONT FACE="Courier New">private TextField inputField;</FONT>
<P>	<FONT FACE="Courier New">private Button sendButton;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1010>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ActionExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">private Panel p = new Panel();</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ActionExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Action Event&quot;);</FONT>
<P>		<FONT FACE="Courier New">mb = new MenuBar();</FONT>
<P>		<FONT FACE="Courier New">fileMenu = new Menu(&quot;</FONT><FONT FACE="바탕">파일</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">exitItem = new MenuItem(&quot;</FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">p = new Panel();</FONT>
<P>		<FONT FACE="Courier New">inputField = new TextField();</FONT>
<P>		<FONT FACE="Courier New">sendButton = new Button(&quot;Send&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.setMenuBar(mb);</FONT>
<P>		<FONT FACE="Courier New">mb.add(fileMenu);</FONT>
<P>		<FONT FACE="Courier New">fileMenu.add(exitItem);</FONT>
<P>		<FONT FACE="Courier New">p.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">p.add(inputField, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">p.add(sendButton, BorderLayout.EAST);</FONT>
<P>		<FONT FACE="Courier New">f.add(p, BorderLayout.SOUTH);</FONT>
<P>		<B><FONT FACE="Courier New">exitItem.addActionListener(this);</FONT></B>
<P>		<B><FONT FACE="Courier New">inputField.addActionListener(this);</FONT></B>
<P>		<B><FONT FACE="Courier New">sendButton.addActionListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ActionExample win = new ActionExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void actionPerformed(ActionEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">if(</FONT><B><FONT FACE="Courier New">e.getSource() == exitItem</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">종료메뉴가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선택되었습니다</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.exit(0);</FONT>
<P>		<FONT FACE="Courier New">}else if(</FONT><B><FONT FACE="Courier New">e.getSource() == inputField</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">텍스트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">필드에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">엔터</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(inputField.getText() + &quot;</FONT><FONT FACE="바탕">입력</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">inputField.setText(&quot;&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if(</FONT><B><FONT FACE="Courier New">e.getSource() == sendButton</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">버튼이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">클릭되었습니다</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(inputField.getText() + &quot;</FONT><FONT FACE="바탕">입력</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">inputField.setText(&quot;&quot;);</FONT>
<P>			<FONT FACE="Courier New">inputField.requestFocus();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.2 AdjustmentEvent</FONT></SPAN></FONT>
<P> 
<P><FONT FACE="바탕">스크롤바의 값이 변경되었을 때 발생한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.2.1 AdjustmentListener 
</FONT></SPAN></FONT><P> 
<P><FONT FACE="바탕">리스너가 구현해야할 기능을 정의하고 있는 인터페이스로 Adjustment 이벤트를 처리하려면 이 인터페이스를 구현해야 한다.</FONT>
<P><FONT FACE="바탕">AdjustmentListener를 사용하면 스크롤바 컴포넌트에 등록하기 위해 다음과 같은 메소드를 사용한다.</FONT>
<P> 
<P> <FONT FACE="돋움">∘ void addAdjustmentListener(AdjustmentListener l) : Adjustment Listener를 추가한다.</FONT>
<P> <FONT FACE="돋움">∘ void removeAdjustmentListener(AdjustmentListener l) : 주어진 Listener를 제거한다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.2.2 AdjustmentListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void adjustmentValueChanged(AdjustmentEvent e) : 스크롤바 컴포넌트의 값이 변할 때 호출된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Adjustment 이벤트를 사용하는 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdjustmentExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class AdjustmentExample </FONT><B><FONT FACE="Courier New">implements AdjustmentListener </FONT></B><FONT FACE="Courier New">{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Scrollbar mySlider;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public AdjustmentExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Adjustment Event&quot;);</FONT>
<P>		<FONT FACE="Courier New">mySlider = new Scrollbar(Scrollbar.HORIZONTAL, 100, 20, 0, 255);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.add(mySlider, BorderLayout.SOUTH);</FONT>
<P>		<B><FONT FACE="Courier New">mySlider.addAdjustmentListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdjustmentExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">AdjustmentExample win = new AdjustmentExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void adjustmentValueChanged(AdjustmentEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(</FONT><B><FONT FACE="Courier New">e.getValue()</FONT></B><FONT FACE="Courier New"> + &quot;</FONT><FONT FACE="바탕">으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변경됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">} </FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.3 ComponentEvent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">MenuItem과 CheckboxMenuItem을 제외한 모든 컴포넌트에서 발생하는 이벤트이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.3.1 ComponentListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">Component 이벤트의 리스너를 정의한 인터페이스이며, 이벤트를 처리하려면 이 ComponentListener 인터페이스를 implements하여 메소드를 구현하거나 ComponentAdapter 클래스를 상속받아야 한다.</FONT>
<P><FONT FACE="바탕">컴포넌트의 addComponentListener() 메소드에 의해 등록되며, 컴포넌트 크기나  위치 또는 가시화(Visibility) 등의 변화가 일어날 때 Component 이벤트가 발생한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.3.2 ComponentAdapter 
</FONT></SPAN></FONT><P> 
<P><FONT FACE="바탕">Component 이벤트 처리를 위한 abstract adapter 클래스를 제공한다. 이 클래스는 ComponentListener 인터페이스가 정의하고 있는 메소드를 구현하고 있지만, 메소드의 몸체 부분은 비어 있기 때문에 처리하고자 하는 이벤트의 메소드만 재정의 해주면 된다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.3.3 ComponentListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void componentMoved(ComponentEvent e) : 컴포넌트 위치 변경시 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void componentResized(ComponentEvent e) : 컴포넌트 크기 변경시 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void componentShown(ComponentEvent e) : 컴포넌트를 보이게 할 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void componentHidden(ComponentEvent e) : 컴포넌트를 보이지 않게 할 때 호출된다.</FONT>
<P> 
<BR>
<P>  <FONT FACE="바탕">다음 프로그램은 Component 이벤트의 사용 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=859>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AdjustmentExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ComponentExample </FONT><B><FONT FACE="Courier New">implements ComponentListener </FONT></B><FONT FACE="Courier New">{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ComponentExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Component Event&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">f.addComponentListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ComponentExample win = new ComponentExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void componentMoved(ComponentEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource() + &quot; </FONT><FONT FACE="바탕">위치</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변경</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void componentResized(ComponentEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource() + &quot; </FONT><FONT FACE="바탕">크기</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변경</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void componentShown(ComponentEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource() + &quot;</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">보여짐</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void componentHidden(ComponentEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource() + &quot;</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">없어짐</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.4 ContainerEvent</FONT></SPAN></FONT>
<P> 
<P><FONT FACE="바탕">컨테이너에서 컴포넌트의 이동이나 크기 변경 또는 보이거나 보이지 않게 할 때 발생하는 저수준 이벤트이며, 단순하게 알려주는 목적으로 사용된다. AWT에서는 컴포넌트의 크기 변경 및 이동이 자동으로 처리되며, 이 이벤트 처리 여부에 상관없이 레이아웃을 수행하게 하는데 사용된다.</FONT>
<P><FONT FACE="바탕">컴포넌트를 컨테이너에 추가하거나 삭제하면 컨테이너 이벤트가 발생되고 ContainerListener 또는 ContainerAdatper에 전달된다.</FONT>
<P> 
<P> <FONT FACE="돋움">∘ static int COMPONENT_ADDED : 컴포넌트 추가.</FONT>
<P> <FONT FACE="돋움">∘ static int COMPONENT_REMOVED : 컴포넌트 제거.</FONT>
<P> <FONT FACE="돋움">∘ static int CONTAINER_FIRST : 컨테이너 이벤트 id의 시작번호.</FONT>
<P> <FONT FACE="돋움">∘ static int CONTAINER_LAST : 컨테이너 이벤트 id의 마지막번호.</FONT>
<P> <FONT FACE="돋움">∘ Component getChild() : 이벤트에 영향을 받는 컴포넌트를 구한다.</FONT>
<P> <FONT FACE="돋움">∘ Container getContainer() : 이벤트가 발생한 컴포넌트를 구한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.4.1 ContainerListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">Container 이벤트를 처리할 수 있는 기능을 정의하는 인터페이스로 이벤트를 처리할 클래스는 ContainerListener 인터페이스가 정의한 모든 메소드를 구현하거나, ContainerAdapter 클래스의 관련 메소드를 재정의 하여 상속받아야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.4.2 ContainerAdapter 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">컨테이너 이벤트를 처리할 추상 클래스를 제공한다. ContainerListener 인터페이스가 정의한 메소드를 구현하고 있지만 메소드의 몸체 부분은 비어 있다. 따라서, ContainerAdapter의 메소드 중 처리하고자 하는 메소드만 재 정의해준다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.4.3 ContainerListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void componentAdded(ContainerEvent e) : 컴포넌트가 컨테이너에 추가될 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void componentRemoved(ContainerEvent e) : 컴포넌트가 컨테이너에서 제거될 때 호출된다.</FONT>
<P> 
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<P>  <FONT FACE="바탕">다음 프로그램은 Container 이벤트의 사용 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=740>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ContainerExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ContainerExample </FONT><B><FONT FACE="Courier New">implements ContainerListener </FONT></B><FONT FACE="Courier New">{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn1;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ContainerExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Container Event&quot;);</FONT>
<P>		<FONT FACE="Courier New">btn1 = new Button(&quot;Button&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">f.addContainerListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.add(btn1, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ContainerExample win = new ContainerExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void componentAdded(ContainerEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">컴포넌트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">추가됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void componentRemoved(ContainerEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">컴포넌트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">삭제됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.5 FocusEvent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">컴포넌트가 키보드 포커스를 얻거나 잃을 때 발생하는 저수준 이벤트이다. 이러한 이벤트는 MenuItem컴포넌트를 제외한 거의 모든 컴포넌트에서 발생하며, FocusListener 또는 FocusAdapter에 전달되고, 컴포넌트 클래스의 addFocusListener() 메소드를 이용하여 등록할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">이 때, 포커스의 변화는 다음과 같은 두 가지 수준이 있다.</FONT>
<P><FONT FACE="바탕">일시적인 포커스 변화 : requestFocus() 메소드를 호출하거나 탭 키로 컴포넌트간에 포커스를 이동시킬 때 발생하는 이벤트이다.</FONT>
<P><FONT FACE="바탕">영구적인 포커스 변화 : 윈도우의 비활성화 또는 스크롤바의 끌기와 같이 다른 동작의 간접적인 결과로 발생하여, 일시적으로 포커스를 얻거나 잃을 때 발생하는 이벤트이다. 이런 경우 윈도우가 다시 활성화되거나 해당 동작이 끝나면 포커스는 자동으로 전 상태로 복구된다.</FONT>
<BR>
<P><FONT FACE="바탕">위의 두 가지 포커스 이벤트 모두 FOCUS_GAINED와 FOCUS_LOST 이벤트 id를 발생시키며, 이 때 isTemporary() 메소드를 이용하여 이벤트 종류를 얻을 수 있다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ static int FOCUS_FIRST : 포커스 이벤트 id의 시작번호.</FONT>
<P> <FONT FACE="돋움">∘ static int FOCUS_LAST : 포커스 이벤트 id의 마지막번호.</FONT>
<P> <FONT FACE="돋움">∘ static int FOCUS_GAINED : 포커스를 얻었음을 표시.</FONT>
<P> <FONT FACE="돋움">∘ static int FOCUS_LOST : 포커스를 잃었음을 표시.</FONT>
<P> <FONT FACE="돋움">∘ boolean isTemporary() : 포커스 변화 이벤트가 일시적인지 영구적인지를 구한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.5.1 FocusListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">포커스 이벤트를 처리할 기능을 정의하는 인터페이스이며, 처리할 클래스는 FocusListener가 정의한 모든 메소드를 구현하거나, 추상 클래스인 FocusAdapter 메소드를 재정의하여 상속받아야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.5.2 FocusAdapter 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">이 클래스는 FocusListener가 정의하고 있는 메소드를 구현하고 있지만, 몸체 부분은 비어 있어 FocusAdapter의 메소드 중 자신이 처리하고자 하는 메소드만 재정의 해주면 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.5.3 FocusListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void focusGained(FocusEvent e) : 컴포넌트가 키보드 포커스를 얻었을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void focusLost(FocusEvent e) : 컴포넌트가 키보드 포커스를 잃었을 때 호출된다.</FONT>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Focus 이벤트의 사용 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=888>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FocusExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FocusExample </FONT><B><FONT FACE="Courier New">implements FocusListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private Button btn1;</FONT>
<P>	<FONT FACE="Courier New">private TextField textField;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public FocusExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Focus Event&quot;);</FONT>
<P>		<FONT FACE="Courier New">btn1 = new Button(&quot;Button1&quot;);</FONT>
<P>		<FONT FACE="Courier New">textField = new TextField();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">btn1.addFocusListener(this);</FONT></B>
<P>		<B><FONT FACE="Courier New">textField.addFocusListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.add(btn1, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.add(textField, BorderLayout.NORTH);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">FocusExample win = new FocusExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void focusGained(FocusEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource() + &quot;</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">포커스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">얻음</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void focusLost(FocusEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource() + &quot;</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">포커스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">잃음</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.6 KeyEvent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Input의 하위클래스로 컴포넌트 내에서 발생한 키 입력에 대한 기능을 제공해 준다. 텍스트필드류의 컴포넌트에서 발생할 수 있는 저수준 이벤트로, 키를 누르거나 놓거나 칠(타이프 pressed and released) 때 이벤트가 발생된다. 컴포넌트 클래스의 addKeyListener() 메소드에 의해 KeyListener 또는 KeyAdapter 객체에 전달된다.</FONT>
<BR>
<P><FONT FACE="바탕">&quot;Key typed&quot;는 고수준 이벤트로 플랫폼이나 키보드 레이아웃에 독립적이며, 문자가 입력되면 발생하고 문자를 정확하게 알 수 있는 방법을 제공해준다.</FONT>
<P><FONT FACE="바탕">가장 간단한 경우 &quot;Key typed&quot;는 키의 눌림(pressed)과 놓임(released) 이벤트의 조합으로 만들어지며, 키를 계속 누르고 있을 때도 연속적인 &quot;Key typed&quot; 이벤트가 발생한다. 그러나, F1과 같은 동작 키 또는 Shift 키에 대해서는 이벤트가 발생하지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">getKeyChar()는 키에 해당하는 유니코드나 CHAR_UNDEFINED를 반환해준다. 키를 누르거나 놓을 경우 getKeyCode()가 키의 코드값을 반환하고, 키를 칠 때는 VK_UNDEFINED를 반환한다. &quot;Key pressed&quot;와 &quot;Key released&quot;는 저수준 이벤트로 플랫폼과 키보드 레이아웃에 의존한다. 이 이벤트는 키를 누르거나(눌려있는 상태) 놓을 때마다 생성되고, 문자 입력이 없는 F1 키와 Shift 키 등은 modifier 키가 눌렸는지를 알 수 있다. 
</FONT><BR>
<P><FONT FACE="바탕">getKeyCode()를 이용하면 해당키에 대한 가상 키값을 알 수 있는데 예를 들어, Shift 키를 누르면 VK_SHIFT 코드를 갖는 KEY_PRESSED 이벤트가 발생하고, 'a'를 누르면 VK_A 코드를 갖는 KEY_PRESSED 이벤트가 발생한다. 또, 'a' 키를 놓으면 VK_A 코드를 갖는 KEY_RELEASED 이벤트가 발생한다. 물론, 이 때 KEY_TYPED 이벤트가 발생하고 그 때의 키문자는 'A'가 된다.</FONT>
<P><FONT FACE="바탕">F1 키와 같이 문자로 나타나지 않는 키는 KEY_TYPED 이벤트를 발생시키지 못한다. 또 모든 키가 가상 키코드를 생성할 수 있는 것은 아니다. 
</FONT><BR>
<P><FONT FACE="바탕">KeyEvent 클래스가 제공하는 기능을 살펴보면 다음과 같다.</FONT>
<P> 
<P> <FONT FACE="돋움">∘ static char CHAR_UNDEFINED : 유효하지 않은 유니코드 문자.</FONT>
<P> <FONT FACE="돋움">∘ static int KEY_FIRST : 키 이벤트 id의 시작번호.</FONT>
<P> <FONT FACE="돋움">∘ static int KEY_LAST : 키 이벤트 id의 마지막번호.</FONT>
<P> <FONT FACE="돋움">∘ static int KEY_PRESSED : &quot;Key pressed&quot; 이벤트가 발생했음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int KEY_RELEASED : &quot;Key released&quot; 이벤트가 발생했음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int KEY_TYPED : &quot;Key typed&quot; 이벤트가 발생했음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int VK_ : 가상 키코드 상수.</FONT>
<P> <FONT FACE="돋움">∘ char getKeyChar() : 이벤트 내의 키와 관련된 문자를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ int getKeyCode() : 이벤트 내의 키와 관련된 정수 키코드를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ static String getKeyModifiersText(int modifiers) : &quot;Shift&quot; 또는 &quot;Ctrl+Shift&quot; 와 같은 문자열을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ static String getKeyText(intkeyCode) : &quot;HOME&quot;, &quot;F1&quot; 또는 &quot;A&quot;와 같은 문자열을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ boolean isActionKey() : 이벤트 내의 키가 동작키인지를 얻는다</FONT>
<P> <FONT FACE="돋움">∘ String paramString() : 이벤트를 구분할 수 있는 매개변수 문자열을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ void setKeyChar(char keyChar) : logical character를 나타내는 keyChar 값을 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ void setKeyCode(int keyCode) : physical key를 가리키는 keyCode 값을 설정한다.</FONT>
<P> <FONT FACE="돋움">∘ void setModifiers(int modifiers) : shift, ctrl, alt, meta 등과 같은 추가적인 키를 나타내는 modifier를 설정한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.6.1 KeyListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">키 이벤트를 처리하는 기능을 가지고 있는 인터페이스이다. 처리하려는 클래스는 KeyListener가 정의한 모든 메소드를 구현하거나, KeyAdapter 클래스의 관련 메소드를 재정의하여 상속받아야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.6.2 KeyAdapter</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">키 이벤트를 처리하는 추상 클래스로 KeyListener의 메소드를 구현하지만 메소드의 몸체 부분은 비어 있다. 처리하려는 이벤트의 메소드를 재정의해주면 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.6.3 KeyListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void keyPressed(KeyEvent e) : 키를 누를 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void keyReleased(KeyEvent e) : 키를 놓았을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void keyTyped(KeyEvent e) : 키를 칠(눌렀다 놓음) 때 호출된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 키 이벤트의 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">KeyExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class KeyExample </FONT><B><FONT FACE="Courier New">implements KeyListener </FONT></B><FONT FACE="Courier New">{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TextField textField;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public KeyExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Key Event&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=585>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">KeyExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">textField = new TextField();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">textField.addKeyListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.add(textField, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">KeyExample win = new KeyExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void keyPressed(KeyEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getKeyChar() + &quot; Pressed&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void keyReleased(KeyEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getKeyChar() + &quot; Released&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void keyTyped(KeyEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getKeyChar() + &quot; Typed&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.7 MouseEvent</FONT></SPAN></FONT>
<P> 
<P><FONT FACE="바탕">마우스 이벤트는 두 가지가 있는데 먼저 click, enter, exit 등과 같은 이벤트와 moves, drag 등의 동작 이벤트이다.</FONT>
<P><FONT FACE="바탕">마우스 이벤트 객체는 컴포넌트 클래스의 MouseListener나 MouseAdapter 객체에 전달된다. Mouse- Event 객체는 컴포넌트 클래스의 addMouseMotionListener() 메소드를 이용하여 MouseMotion- Listener나 MouseMotionAdapter 객체에 전달된다. 마우스를 누르면 이벤트가 발생하고 modifier 필드에 저장된 후  MouseListeners 객체에 보내진다.</FONT>
<P> 
<P> <FONT FACE="돋움">∘ static int MOUSE_FIRST : 마우스 이벤트 id의 시작번호.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_LAST : 마우스 이벤트 id의 마지막번호.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_PRESSED : 마우스 버튼의 누른 상태를 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_RELEASED : 마우스의 버튼이 놓였음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_CLICKED : 마우스의 버튼이 클릭 되었음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_ENTERED : 마우스가 컴포넌트의 영역 내로 들어왔음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_EXITED : 마우스가 컴포넌트의 영역 밖으로 나갔음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_MOVED : 마우스가 움직였음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int MOUSE_DRAGGED : 마우스가 드래그 되었음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ int getClickCount() : 마우스가 클릭 된 수를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ Point getPoint() : 이벤트 소스 컴포넌트에 상대적인 마우스 커서의 좌표를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ int getX() : 이벤트 소스 컴포넌트에 상대적인 마우스 커서의 x 좌표를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ int getY() : 이벤트 소스 컴포넌트에 상대적인 마우스 커서의 y 좌표를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ boolean isPopupTrigger() : 플랫폼을 위한 팝업 메뉴를 나타나게 할 이벤트인지를 얻는다.</FONT>
<P> <FONT FACE="돋움">∘ void translatePoint(int x, int y) : 이벤트가 발생한 좌표를 현 좌표에서 수평으로 x값만큼, 수직으로 y값만큼 더한 새로운 위치로 옮긴다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.7.1 MouseListener</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">마우스 이벤트를 처리할 기능을 정의한 인터페이스이다. 마우스 이벤트를 처리하려면 MouseListener 인터페이스의 모든 메소드를 구현하거나, MouseAdapter 클래스의 관련 메소드를 재 정의하여 상속받아야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.7.2 MouseAdapter</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">마우스 이벤트를 처리하는 abstract adapter 클래스로 MouseListener 인터페이스의 메소드를 구현해야하지만 메소드의 몸체 부분은 비어있다. 구현은 처리하고자 하는 이벤트의 메소드만 재정의해주면 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.7.3 MouseListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void mouseClicked(MouseEvent e) : 컴포넌트에서 마우스를 클릭하면 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void mouseEntered(MouseEvent e) : 마우스가 컴포넌트 영역 안으로 들어왔을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void mouseExited(MouseEvent e) : 마우스가 컴포넌트 영역 밖으로 나갈 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void mousePressed(MouseEvent e) : 컴포넌트에서 마우스 버튼를 누르면 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void mouseReleased(MouseEvent e) : 컴포넌트에서 마우스 버튼을 놓으면 호출된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.7.4 MouseMotionListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">마우스 동작 이벤트를 처리할 수 있는 기능을 가지고 있는 인터페이스로 MouseMotionListener 인터페이스의 모든 메소드를 구현하거나, MouseMotionAdapter의 관련 메소드를 재정의하여 상속받아야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.7.5 MouseMotionAdapter 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">마우스 동작 이벤트를 처리하는 클래스로 MouseMotionListener 인터페이스의 메소드를 구현하고 있지만, 메소드의 몸체 부분은 비어있다. 구현은 처리하고자 하는 이벤트의 메소드를 재정의해주면 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.7.6 MouseMotionListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void mouseDragged(MouseEvent e) : 컴포넌트에서 마우스 버튼이 눌려진 상태로 드래그 될 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void mouseMoved(MouseEvent e) : 컴포넌트에서 마우스가 움직일 때 호출된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 마우스 이벤트의 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=651>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MouseExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MouseExample </FONT><B><FONT FACE="Courier New">implements MouseListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MouseExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Mouse Event&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addMouseListener(this);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MouseExample win = new MouseExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void mouseClicked(MouseEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">if(</FONT><B><FONT FACE="Courier New">e.getModifiers()</FONT></B><FONT FACE="Courier New"> == </FONT><B><FONT FACE="Courier New">MouseEvent.BUTTON1_MASK</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Left button clicked&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if(e.getModifiers() == </FONT><B><FONT FACE="Courier New">MouseEvent.BUTTON2_MASK</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Center button clicked&quot;);</FONT>
<P>		<FONT FACE="Courier New">}else if(e.getModifiers() == </FONT><B><FONT FACE="Courier New">MouseEvent.BUTTON3_MASK</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Right button clicked&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MouseExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">public void mousePressed(MouseEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;mousePressed&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void mouseReleased(MouseEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;mouseReleased&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void mouseEntered(MouseEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;mouseEntered&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void mouseExited(MouseEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;mouseExited&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=626>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MouseMotionExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MouseMotionExample </FONT><B><FONT FACE="Courier New">implements MouseMotionListener </FONT></B><FONT FACE="Courier New">{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MouseMotionExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Mouse Event&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addMouseMotionListener(this);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MouseMotionExample win = new MouseMotionExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void mouseDragged(MouseEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;mouseDragged&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void mouseMoved(MouseEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;mouseMoved&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.8 ItemEvent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">아이템의 선택과 선택해제 여부를 나타내는 시멘틱 이벤트이다. 리스트 컴포넌트처럼 ItemSelectable 객체가 생성하는 고수준 이벤트로, ItemSelectable 객체가 포함한 아이템이 선택되거나 선택해제된 경우 발생한다. 이 이벤트는 컴포넌트 클래스의 addItemListener() 메소드를 이용하여 모든 ItemListener 객체에 전달된다. 이 때, 리스너(Listener)는 마우스의 움직임이나 클릭 같은 개개의 이벤트는 알 필요가 없고 아이템이 선택되거나 선택해제되는 등의 의미 있는 이벤트만 인지하면 된다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ static int ITEM_FIRST : 아이템 이벤트 id의 시작번호를 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int ITEM_LAST : 아이템 이벤트 id의 마지막번호를 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int SELECTED : 선택 해제된 아이템이 다시 선택된 경우와 같이 상태변화를 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int DESELECTED : 선택된 아이템이 선택해제된 경우의 상태변화를 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ static int ITEM_STATE_CHANGED : 아이템의 상태가 변했음을 나타낸다.</FONT>
<P> <FONT FACE="돋움">∘ Object getItem() : 이벤트가 발생한 아이템 객체를 얻는다</FONT>
<P> <FONT FACE="돋움">∘ ItemSelectable getItemSelectable() : 이벤트가 발생한 소스 컴포넌트를 얻는다</FONT>
<P> <FONT FACE="돋움">∘ int getStateChange() : 상태 변화의 종류를 얻는다</FONT>
<BR>
<P><FONT FACE="바탕">ItemSelectable 인터페이스는 선택 가능한 아이템을 갖는 컴포넌트의 기능을 정의하며 구체적인 기능을 살펴보면 다음과 같다.</FONT>
<BR>
<P> <FONT FACE="돋움">∘ void addItemListener(ItemListener l) : 아이템 Listener를 추가한다.</FONT>
<P> <FONT FACE="돋움">∘ void removeItemListener(ItemListener l) : 주어진 아이템 Listener를 삭제한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.8.1 ItemListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">아이템 이벤트를 처리할 수 있는 기능을 가진 인터페이스로, 처리하려면 메소드를 구현해야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.8.2 ItemListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void itemStateChanged(ItemEvent e) : 아이템 상태가 변했을 때 호출된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 아이템 이벤트의 기능을 이해할 수 있는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ItemExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ItemExample </FONT><B><FONT FACE="Courier New">implements ItemListener </FONT></B><FONT FACE="Courier New">{</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=673>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ItemExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private List list;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ItemExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Item Event&quot;);</FONT>
<P>		<FONT FACE="Courier New">list = new List();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">list.add(&quot;Solaris&quot;);</FONT>
<P>		<FONT FACE="Courier New">list.add(&quot;Windows&quot;);</FONT>
<P>		<FONT FACE="Courier New">list.add(&quot;Mac&quot;);</FONT>
<P>		<FONT FACE="Courier New">list.add(&quot;MS-DOS&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">list.addItemListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.add(list, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">f.pack();</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ItemExample win = new ItemExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void itemStateChanged(ItemEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(list.getSelectedItem() + &quot;Selected&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.9 TextEvent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">텍스트의 변화 유무를 나타내는 이벤트로 TextComponent 같은 객체에 의해 생성되는 고수준 이벤트이다. 객체에 포함된 텍스트가 변경되었 때 발생하며, TextComponent 클래스의 addTextListener() 메소드를 이용하여 TextListener 객체에 전달된다. 
</FONT><P> <FONT FACE="돋움">∘ static int TEXT_FIRST : 텍스트 이벤트 id의 시작번호.</FONT>
<P> <FONT FACE="돋움">∘ static int TEXT_LAST : 텍스트 이벤트 id의 마지막번호.</FONT>
<P> <FONT FACE="돋움">∘ static int TEXT_VALUE_CHANGED : 텍스트가 변했음을 나타낸다.</FONT>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.9.1 TextListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">아이템 이벤트를 처리할 수 있는 인터페이스로 메소드를 구현해주면 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.9.2 TextListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void textValueChanged(TextEvent e) : 텍스트의 내용이 변했을 때 호출된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 텍스트 이벤트를 이해할 수 있는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=678>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TextExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TextExample </FONT><B><FONT FACE="Courier New">implements TextListener </FONT></B><FONT FACE="Courier New">{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	<FONT FACE="Courier New">private TextField textField;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public TextExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Text Event&quot;);</FONT>
<P>		<FONT FACE="Courier New">textField = new TextField();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">textField.addTextListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.add(textField, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TextExample win = new TextExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void textValueChanged(TextEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Text Changed&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.10 WindowEvent</FONT></SPAN></FONT>
<P> 
<P><FONT FACE="바탕">윈도우 상태의 변화를 나타내는 저수준 이벤트로, 윈도우가 열리거나, 닫히거나, 닫히는 중이거나, 활성화/비활성화 되었거나, 아이콘화/정상화되었을 경우 윈도우 객체에 의해 발생된다. 이 이벤트는 윈도우 클래스의 addWindowListener() 메소드를 이용하여 WindowListener 또는 WindowAdapter 객체에 전달된다. 
</FONT><P> 
<P> <FONT FACE="돋움">∘ static int WINDOW_ACTIVATED : 윈도우가 활성화되었음.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_CLOSED : 윈도우가 닫혔음.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_CLOSING : 윈도우가 닫히고 있음.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_DEACTIVATED : 윈도우가 비활성화 되었음.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_DEICONIFIED : 윈도우가 정상화 되었음.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_FIRST : 윈도우 이벤트 id의 시작번호.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_ICONIFIED : 윈도우가 아이콘화 되었음.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_LAST : 윈도우 이벤트 id의 마지막번호.</FONT>
<P> <FONT FACE="돋움">∘ static int WINDOW_OPENED : 윈도우가 열렸음.</FONT>
<P> <FONT FACE="돋움">∘ Window getWindow() : 이벤트가 발생한 이벤트 소스 컴포넌트를 얻는다.</FONT>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.10.1 WindowListener 
</FONT></SPAN></FONT><P> 
<P><FONT FACE="바탕">윈도우 이벤트를 처리하는 인터페이스로 메소드를 구현하거나, WindowAdapter 클래스의 관련 메소드를 재정의하여 상속받아야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.10.2 WindowFocusListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">JDK 1.4에 추가된 인터페이스로 윈도우 포커스 변화 이벤트를 받는 인터페이스이다. 윈도우가 활성창이되어 포커스를 얻었을 때 호출되는 windowGainedFocus(WindowEvent) 메소드와  윈도우가 비 활성화 되어 포커스를 잃었을 때 호출되는 windowLostFocus(WindowEvent) 메소드를 가지고 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.10.3 WindowStateListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">JDK 1.4에 추가된 인터페이스로 윈도우 상태 이벤트를 받기 위한 인터페이스이다. 윈도우가 아이콘화 되거나, 최대크기, 원래크기로의 상태가 변했을 때 호출되는 windowStateChanged(WindowEvent) 메소드를 가지고 있다.</FONT>
<BR>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.10.4 WindowAdapter 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">윈도우 이벤트를 처리하는 클래스로 WindowFocusListener, WindowListener, WindowState Listener 인터페이스를 정의하고 메소드를 구현한다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.10.5 WindowListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void windowActivated(WindowEvent e) : 윈도우가 활성화되었을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void windowClosed(WindowEvent e) : 윈도우가 닫혔을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void windowClosing(WindowEvent e) : 윈도우가 닫히고 있을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void windowDeactivated(WindowEvent e) : 윈도우가 비활성화 되었을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void windowDeiconified(WindowEvent e) : 윈도우가 정상 상태로 되었을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void windowIconified(WindowEvent e) : 윈도우가 아이콘화 되었을 때 호출된다.</FONT>
<P> <FONT FACE="돋움">∘ void windowOpened(WindowEvent e) : 윈도우가 열렸을 때 호출된다.</FONT>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 윈도우 이벤트의 사용 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=756 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class WindowExample </FONT><B><FONT FACE="Courier New">implements WindowListener </FONT></B><FONT FACE="Courier New">{</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public WindowExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Key Event&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">f.addWindowListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">WindowExample win = new WindowExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void windowOpened(WindowEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;windowOpened&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=427>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;windowClosing&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.exit(0);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void windowClosed(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;windowClosed&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void windowIconified(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;windowIconified&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void windowDeiconified(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;windowDeiconified&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void windowActivated(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;windowActivated&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void windowDeactivated(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;windowDeactivated&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=564>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowFocusExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class WindowFocusExample </FONT><B><FONT FACE="Courier New">implements WindowFocusListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public WindowFocusExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Key Event&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowFocusListener(this);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">WindowFocusExample win = new WindowFocusExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void windowGainedFocus(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">포커스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">얻음</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public void windowLostFocus(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">포커스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">잃음</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=568>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WindowFocusExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class WindowStateExample </FONT><B><FONT FACE="Courier New">implements WindowStateListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public WindowStateExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Key Event&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">f.addWindowStateListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">WindowStateExample win = new WindowStateExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void windowStateChanged(WindowEvent e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">윈도우</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">상태</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">변화</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">5.3.11 MouseWheelEvent</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDK 1.4에 추가되었으며 휠마우스를 사용하기 위한 이벤트이다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.11.1 MouseWheelListener 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">휠마우스 이벤트를 처리하려면 mouseWheelMoved() 메소드를 구현한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">5.3.11.2 MouseWheelListener </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P> <FONT FACE="돋움">∘ void mouseWheelMoved(MouseWheelEvent e) : 휠마우스의 휠을 움직였을 때 호출된다.</FONT>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 MouseWheel 이벤트의 사용 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=607>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MouseWheelExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class MouseWheelExample </FONT><B><FONT FACE="Courier New">implements MouseWheelListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MouseWheelExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;MouseWheel Event&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">f.addMouseWheelListener(this);</FONT></B>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MouseWheelExample win = new MouseWheelExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void mouseWheelMoved(MouseWheelEvent e) </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Mouse Wheel Changed&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이 외에도 여러 가지 이벤트가 있지만 본 교재에서 모두 언급할 수는 없으므로 API Document를 참고하기 바란다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV240.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV241.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV242.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT>
<IMG SRC="FYXIV243.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[애플릿 프로그래밍]</FONT></SPAN></FONT>
<P>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이 장에서는 웹브라우저에서 실행되는 애플릿 프로그래밍에 대해 설명하기로 한다. 자바를 사용하는 이유중의 하나가 애플릿 때문이기도 하지만 많이 사용되지는 않는다. 애플릿클래스를 상속받아 클래스를 만들고 웹브라우저를 통해 실행되며, 라이프사이클을 가지고 있는 등의 몇 가지를 제외하고는 일반 어플리케이션 프로그램과 비슷하다.</FONT></SPAN></FONT>
<BR>
<P>
<P>
<IMG SRC="FYXIV245.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">6.1   </FONT><FONT FACE="바탕">애플릿의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">개념</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿(Applet)이란 HTML 내의 &lt;applet&gt; 태그에 의해, 서버에서 내려받은 내용이 웹브라우저에서 수행되는 자바 클래스를 말한다. 즉 애플릿은 웹 페이지 안에서 동적으로 사용자의 입력에 반응하거나 실시간으로 변하는 프로그램이 모두 애플릿이며, 일반 프로그램과 같이 독자적으로 실행되는 프로그램은 모두 자바 어플리케이션이다. 자바가 웹프로그래밍의 표준언어로 등장하게 된 이유는 무엇보다 자바 애플릿이 큰 영향을 주었다고 볼 수 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.1.1 </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY부활M">(Hello World! )</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 웹 브라우저 화면에 &quot;Hello, World!&quot;라는 문자열을 표시하는 애플릿 프로그램의 예이다. 단순히 화면에 &quot;Hello, World!&quot;라는 문자열만 출력하는 어플리케이션에 비해 웹브라우저 안에서 표현하는 애플릿은 그래픽으로 문자열을 그려야 한다는 점에서 좀 더 복잡하다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldApplet.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT>
<P><FONT FACE="Courier New">public class HelloWorldApplet extends Applet {</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World!&quot; , 100, 100);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.1.2 </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">분석</FONT><FONT FACE="HY부활M">(HelloWorldApplet)</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">1 : ∼ 2 : 프로그램에서 사용할 클래스파일을 포함하는 패키지를 import한다. C언어의 include문과 유사하며, 여기서는 그래픽에 관련된 java.awt.Graphics  클래스를 import하였고, 애플릿 프로그램을 작성하기 위해 java.awt.Applet 클래스를 import하였다. 이 부분은 좀더 쉽게 표현하면, Graphics 클래스는 java.awt 패키지내에 있고, Applet 클래스는 java.awt 패키지 내에 있으므로 다음과 같이 기술해도 결과는 동일하다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class HelloWorldApplet extends Applet {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">클래스 선언부로 Applet 클래스를 상속받았다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">화면에 무언가를 그리는 paint() 메소드를 선언하였다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World!&quot; , 100, 100);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">g라는 그래픽 객체를 애플릿 화면의 (100, 100) 위치에 Hello, World!라는 문자열을 출력한다.</FONT>
<BR>
<P><FONT FACE="바탕">앞의 프로그램과 같은 애플릿은 독자적으로 실행되지 않고, 앞서 언급한 것처럼 다음과 같은 HTML 코드를 필요로 한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.1.3 HTML </FONT><FONT FACE="바탕">프로그램</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿 프로그램도 어플리케이션의 경우 처럼 저장 및 컴파일 방법은 같지만, 웹브라우저에서 실행되므로 반드시 웹브라우저가 있어야 실행시킬 수 있지만 애플릿뷰어(appletviewer)를 이용하면 웹브라우저 없이도 실행시킬 수 있다. 앞의 애플릿을 다음 프로그램처럼 HTML 문서 안에 포함시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldApplet.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><B><FONT FACE="Courier New">4:</FONT></B>
<P><B><FONT FACE="Courier New">5:</FONT></B>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">HTML&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">HEAD&gt;&lt;TITLE&gt;Hello Applet&lt;/TITLE&gt;&lt;/HEAD&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">BODY&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=</FONT><B><FONT FACE="Courier New">HelloWorldApplet.class</FONT></B><FONT FACE="Courier New"> width=300 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/BODY&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/HTML&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">applet code=</FONT><B><FONT FACE="Courier New">HelloWorldApplet.class</FONT></B><FONT FACE="Courier New"> width=300 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">4 : ∼ 5 : HTML 안에 애플릿 프로그램을 포함시키는 구문이다. 컴파일 후 생성된 클래스파일을 HTML 문서 내에서 지시할 때 &lt;applet&gt;태그가 사용된다. 이 태그에서 code 와 width 그리고 height는 반드시 기술해야하는 기본 옵션이다. width와 height는 애플릿의 가로와 세로 크기를 지정하고, code는 실행될 애플릿 프로그램을 지정하는 부분으로, 컴파일 후 생성된 클래스파일을 지정한다. HTML 문서는 대문자와 소문자를 구분하지 않지만 code 옵션에서 지정하는 클래스파일의 이름은 대문자와 소문자를 구분한다. HTML 문서이름은 어느 것을 지정해도 관계없다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.1.4 </FONT><FONT FACE="바탕">애플릿의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">실행</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">웹브라우저로 클래스파일을 지정한 HTML파일을 불러오거나 다음과 같이 애플릿뷰어(appletviewer.exe)를 이용하여 실행시킬 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">appletviewer</FONT></B><FONT FACE="Courier New"> HelloWorld.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=397 HEIGHT=249>
<TD VALIGN=MIDDLE WIDTH=100%>
<P ALIGN=CENTER>
<IMG SRC="FYXIV018.GIF" BORDER=0 WIDTH=235 HEIGHT=205 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿뷰어로 실행시킨 결과화면.</FONT></SPAN></FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<P ALIGN=CENTER>
<CENTER>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=595 HEIGHT=354>
<TD VALIGN=MIDDLE WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">.</FONT></SPAN></FONT>
<IMG SRC="FYXIV019.GIF" BORDER=0 WIDTH=420 HEIGHT=328 ALIGN=BOTTOM></TD>
    </tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">웹브라우저로 실행시킨 결과화면.</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

    </tr>
</TABLE>
</CENTER>
<BR>
<BR>
<P>
<IMG SRC="FYXIV250.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">6.2   </FONT><FONT FACE="바탕">애플릿의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">이해</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿은 웹브라우저에서 수행되므로 실행할 내용을 서버에서 내 컴퓨터로 내려받아 웹브라우저에서 실행된다. 애플릿이 실행되려면 반드시 JVM(Java Virtual Machine) 또는 JRE(Java Runtime Environment)가 필요한데, JVM은 웹브라우저 내에 이미 설치되어 있다. 이 때 JVM의 버전은 Netscape 4.X와, Explorer 5.X는 모두 1.1.X버전까지만 지원하지만 Netscape 6.0의 경우는 Java2(1.3)까지를 내장하고 있으며 Netscape 6.0을 설치할 때 JRE가 같이 설치된다. 이 사실은 매우 중요한데, 최근에 발표된 java 2 즉, JDK 1.2이상에서 추가된 새로운 기능을 애플릿에서 사용해도 현재 사용중인 브라우저가 그 애플릿을 수행 할 수 없다는 점이다. 다시 말해 웹브라우저가 가지고 있는 JDK의 버전이 너무 낮아서 java2를 지원하지 않는다는 것이다. 실제로, 스윙(AWT를 토대로 향상된 GUI 프로그래밍을 도와주는 Java2의 핵심 API 중의 하나)을 이용하여 애플릿을 만들어도 브라우저가 지원하지 않기 때문에 사용할 수가 없다. 
</FONT><P><FONT FACE="바탕">이에 대한 해결방법은 다음과 같다. 즉, JDK1.2를 설치하면 자동으로 JDK1.2가 웹브라우저에 플러그인 되며, 그때부터 JDK1.2의 기능을 가진 애플릿도 수행할 수 있다. 그러나, JDK1.2의 설치를 강요할 수 없으므로 웹브라우저가 JDK1.2이상의 버전을 가지고 출시되기를 기다리거나, HTML 변환기를 이용하여 &lt;APPLET&gt; 태그를 &lt;OBJECT&gt; 태그 또는 &lt;EMBED&gt; 태그로 변환해서 실행시켜야 한다. HTML 변환기는 다음 사이트에서 얻을 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=597 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">http://java.sun.com/products/plugin/</FONT>
<P><FONT FACE="Courier New">http://java.sun.com/products/plugin/1.3/converter.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P ALIGN=CENTER>
<IMG SRC="FYXIV251.GIF" BORDER=0 WIDTH=505 HEIGHT=227 HSPACE=3 VSPACE=4 ALIGN=BOTTOM>
<P><FONT FACE="바탕">애플릿은 다른 컴퓨터에서 내려받아 실행되기 때문에 보안을 위해 다음과 같은 작업을 금지하고 있다.</FONT>
<BR>
<P><FONT FACE="바탕">- 클라이언트 컴퓨터의 어떤 프로그램도 실행할 수 없다.</FONT>
<P><FONT FACE="바탕">- 클라이언트 컴퓨터의 파일을 읽거나 쓸 수 없다.</FONT>
<P><FONT FACE="바탕">- 운영체제의 Native 메소드를 수행할 수 없다.</FONT>
<P><FONT FACE="바탕">- 애플릿은 자신을 보내준 서버와만 통신할 수 있다. 즉, 애플릿은 내려받은 서버를 제외한 다른 컴퓨터와 네트워크연결을 할 수 없다.</FONT>
<BR>
<P><FONT FACE="바탕">그러나 항상 이상의 작업을 못하는건 아니고 Signed 애플릿을 이용하면 할 수도 있다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.2.1 </FONT><FONT FACE="바탕">애플릿의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">라이프사이클</FONT><FONT FACE="HY부활M">(init(), start(), stop(), destroy())</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">어플리케이션 프로그램의 시작부분은 main() 메소드인데 애플릿은 어플리케이션과는 다르기 때문에 다음 내용을 반드시 기억해야 한다. 설명하려는 메소드는 이미 애플릿에 정의되어있는 메소드이므로 재정의 해서 사용해야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.1.1 init()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 메소드는 애플릿을 실행시킬 때, 브라우저가 가장먼저 실행시키는 메소드이다. 물론 애플릿의 해당 생성자가 있으면 먼저 실행되지만 애플릿에서는 생성자 대신 init() 메소드를 주로 이용한다.</FONT>
<P><FONT FACE="바탕">init() 메소드의 주된 기능은 생성자가 하는 일을 하는데, 멤버변수의 초기화나 기타 애플릿이 본격적으로 수행되기 전의 초기화 작업을 담당하며, 단 한번만 수행된다.  즉, 애플릿이 있는 A 웹페이지를 보고 나서 B 웹페이지로 이동하면 애플릿 수행이 중단되고 새로운 웹페이지가 화면에 나타나는데 다시 A 웹페이지로 이동해도 내려 받기를 한번 더 수행하지 않고 이미 메모리에 저장되어 있던 A의 애플릿이 재 수행된다. 이때 init() 메소드는 수행되지 않는다. init() 메소드는 처음 애플릿을 내려 받았을 때만 수행되며, 웹브라우저를 종료시키면 애플릿은 메모리에서 없어진다.</FONT>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.1.2 start()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">start() 메소드는 init() 수행 후 웹브라우저가 수행하는데, 애플릿이 화면에서 재 수행될 때 호출된다. A 웹페이지에서 B 웹페이지로 갔다가 다시 A 웹페이지로 오면 A 웹페이지의 애플릿이 재 수행되는데 이때, init() 메소드부터 실행하지 않고 바로 start() 메소드가 수행된다. 또, 웹브라우저가 아이콘화 되었다가 다시 화면에 나타날 때도 애플릿이 다시 실행되어야 하므로 start() 메소드가 수행된다. 따라서, 이 메소드가 어플리케이션 프로그램의 main() 메소드와 유사함을 알 수 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.1.3 stop()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">stop() 메소드는 start() 메소드의 반대 기능을 한다. 브라우저가 아이콘화 되거나, 다른 URL로 이동할 때 stop() 메소드를 호출한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.1.4 destroy()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">destroy() 메소드는 애플릿이 확보한 자원을 반납할 때 주로 사용된다. 애플릿은 한번 내려받으면 메모리에 남아있는데, 브라우저가 이를 삭제할 때 이 메소드가 수행된다. 특별한 경우가 아니면 구현할 필요는 없고, 다만 애플릿이 init() 메소드 안에서 여러 쓰레드(Thread)를 수행시켰을 경우에 쓰레드를 종료시키거나 웹브라우저가 종료될 때에 구현해준다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.1.5 </FONT><FONT FACE="바탕">예제프로그램</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 init(), start(), stop() 메소드의 사용 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AppletExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.applet.*;</FONT>
<P><FONT FACE="Courier New">public class AppletExample extends Applet {</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">init</FONT></B><FONT FACE="Courier New">() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;init() </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">start</FONT></B><FONT FACE="Courier New">() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;start() </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">stop</FONT></B><FONT FACE="Courier New">() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;stop() </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 프로그램을 컴파일 한 후 실행시키려면 다음과 같은 HTML파일을 만들어야 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AppletExample.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><B><FONT FACE="Courier New">5:</FONT></B>
<P><B><FONT FACE="Courier New">6:</FONT></B>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">head&gt;&lt;title&gt;</FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">태스트&lt;</FONT><FONT FACE="Courier New">/title&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/head&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">body&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=AppletExample.class width=500 height=500&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/body&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : &lt;applet&gt; 태그의 code 속성에 생성된 클래스파일명을 입력하고, width와 height는 애플릿의 크기를 지정한다. 이렇게 .class 파일과 .html 파일이 만들어지면 브라우저를 통해서 실행시킨다.</FONT>
<BR>
<P><FONT FACE="바탕">한가지 주의할 사항으로 이 예제는 단지 init(), start(), stop() 메소드가 언제 수행되는지를 나타낸 예제일 뿐이므로 앞의 프로그램을 웹브라우저로 실행시키면 아무것도 나타나지 않는다. 따라서, 웹브라우저에서 결과를 보려면 콘솔창을 띄워야 하는데, 익스플로러의 경우 &quot;도구&quot; 메뉴의 &quot;인터넷 옵션&quot;을 선택한 후 다음과 같은 &quot;인터넷 옵션&quot; 창이 나타나면 고급 탭에서 &quot;Java 콘솔 사용&quot;을 선택한 후 시스템을 재 시작한다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV252.GIF" BORDER=0 WIDTH=374 HEIGHT=340 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">시스템이 재 시작된 후 다시 익스플로러를 실행시켜 &quot;보기&quot; 메뉴에서 &quot;Java 콘솔&quot;을 선택하면 다음과 같은 자바 콘솔 창이 나타난다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV253.GIF" BORDER=0 WIDTH=393 HEIGHT=349 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">웹 브라우저에서 위와 같은 콘솔 창이 나타난 후 앞의 AppletExample.html파일을 실행시키면 결과를 확인할 수 있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.2.2 </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">디스플레이</FONT><FONT FACE="HY부활M">(paint(), repaint(), update())</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿은 그래픽 환경에서 수행되기 때문에 println() 메소드는 사용할 필요가 없다. 애플릿에서는 글을 쓰는 것이 아니라 글을 그리는 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.2.1 paint()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">먼저 다음 프로그램을 보면서 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorld.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT>
<P><FONT FACE="Courier New">public class HelloWorld extends Applet {</FONT>
<P>	<FONT FACE="Courier New">int paintCount = 0;</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">paint</FONT></B><FONT FACE="Courier New">(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello World!&quot;, 25, 25);</FONT>
<P>		<FONT FACE="Courier New">paintCount++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(paintCount);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 프로그램을 실행시키기 위해 HTML 파일을 만들고 appletviewer로 실행시키면 아래와 같은 화면이 생성된다. (HTML 파일에서 applet 태그의 width와 height 값은 각각 100으로 주었다고 가정)</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV254.GIF" BORDER=0 WIDTH=175 HEIGHT=172 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">화면에 &quot;Hello World&quot;라는 문자가 나타나는데 사용한 메소드는 paint()이다. 이 메소드도 Applet 클래스에 정의되어 있는데, 정확히 말하면 부모 클래스인 Component 클래스에 정의되어 있다.</FONT>
<P><FONT FACE="바탕">paint() 메소드가 수행되는 시점은 start() 메소드와 비슷하여 애플릿이 화면에 다시 그려질 때 호출된다. 예를 들어 다음 그림을 보자.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV255.GIF" BORDER=0 WIDTH=317 HEIGHT=282 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">이 그림을 잘 보면, 애플릿의 일부 영역이 탐색기 창에 가려져 있다. 만약 애플릿 창을 마우스로 클릭하면 애플릿 창이 탐색기 창 위로 올라오고 이때 탐색기에 가려졌던 부분이 다시 화면에 그려지게 된다. 이렇게 애플릿이 다시 그려질 필요가 있을 때 paint() 메소드가 브라우저에 의해 자동 호출된다. 물론 이전에 가려졌던 부분만 다시 그려지게 된다. 이처럼 애플릿의 화면 일부가 깨져서 다시 그리는 것을 Exposure라고 한다.</FONT>
<P><FONT FACE="바탕">paint() 메소드의 인자는 Graphics 객체에서 넘어오며, Graphics 객체를 통해서 컴포넌트에 여러 가지 형태를 그릴 수 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.2.2 repaint()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">repaint() 메소드는 인자가 없으며 다른 메소드와 달리 사용자가 직접 호출하여 사용한다. 만약 주식정보 그래프를 그리는 애플릿을 개발할 때 실시간으로 정보를 갱신해야한다. 이처럼 화면에 무언가를 그릴 때는 paint() 메소드 안에 있거나 관련이 있어야 하는데 브라우저가 paint() 메소드를 자동으로 호출해 주기 때문에 일반적으로 직접 호출하지 못하므로 대신 repaint() 메소드를 사용하게 된다. 이 메소드를 직접 호출하면 자동으로 paint() 메소드를 호출해 준다. 정확히 말하면 repaint() 메소드는 update() 메소드를 호출하고, update() 메소드는 화면을 한번 지운 후 다시 paint() 메소드를 호출한다.</FONT>
<P><FONT FACE="바탕">이 내용을 그림으로 표현하면 다음과 같다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV256.GIF" BORDER=0 WIDTH=457 HEIGHT=305 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P> 
<P><FONT FACE="바탕">여기서 참고할 사항은 update() 메소드가 화면을 한번씩 지우면 화면이 깜박거릴 수 있는데 이를 방지하려면 update() 메소드를 다음과 같이 재정의(overriding)하여 사용한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=75>
<TD VALIGN=TOP WIDTH=9%>
<BR></TD>
<TD VALIGN=TOP WIDTH=90%>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">update</FONT></B><FONT FACE="Courier New">(Graphics g) {</FONT>
<P>		<B><FONT FACE="Courier New">paint</FONT></B><FONT FACE="Courier New">(g);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.2.3 &lt;applet&gt; </FONT><FONT FACE="바탕">태그와</FONT><FONT FACE="HY부활M"> &lt;param&gt; </FONT><FONT FACE="바탕">태그</FONT></SPAN></FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.3.1 &lt;applet&gt; </FONT><FONT FACE="바탕">태그</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿을 홈페이지에 설치하려면 &lt;applet&gt; 태그의 정확한 이해가 필요하다. 핫자바 1.0 알파 버전이 지원하던 JDK 1.0에서는 HTML 태그가 &lt;applet&gt;이 아니라 &lt;app&gt;였다. &lt;app&gt; 태그는 다음과 같이 하나의 태그 안에 모든 속성을 기술하는 형식을 사용하는데 현재 웹브라우저는 &lt;app&gt; 태그를 지원하지 않기 때문에 관심을 둘 필요는 없다. 
</FONT><P><FONT FACE="바탕">이와는 달리 &lt;applet&gt; 태그는 HTML 명령의 규격을 준수하여 &lt;applet&gt;으로 시작해서 &lt;/applet&gt;으로 끝나며, 속성은 &lt;param&gt; 태그를 이용하여 값을 주게된다.</FONT>
<BR>
<P>&lt;<FONT FACE="바탕">applet&gt; 태그의 형식은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=636 HEIGHT=416>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P>&lt;<FONT FACE="Courier New">applet [ archive=&quot;</FONT><FONT FACE="바탕">압축파일</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">리스트</FONT><FONT FACE="Courier New">&quot; ]</FONT>
<P>	<FONT FACE="Courier New">code=&quot;</FONT><I><FONT FACE="바탕">클래스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	<FONT FACE="Courier New">width=&quot;</FONT><I><FONT FACE="바탕">픽셀</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단위의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">폭</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	<FONT FACE="Courier New">height=&quot;</FONT><I><FONT FACE="바탕">픽셀</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단위의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">높이</FONT></I><FONT FACE="Courier New">&quot; </FONT>
<P>	<FONT FACE="Courier New">[ codebase=&quot;</FONT><I><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">존재하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">기반</FONT><FONT FACE="Courier New"> URL</FONT></I><FONT FACE="Courier New">&quot; ]</FONT>
<P>	<FONT FACE="Courier New">[ alt=&quot;</FONT><I><FONT FACE="바탕">텍스트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">전용</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">브라우저에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대신</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">텍스트</FONT></I><FONT FACE="Courier New">&quot; ]</FONT>
<P>	<FONT FACE="Courier New">[ name=&quot;</FONT><I><FONT FACE="바탕">별명</FONT><FONT FACE="Courier New">-</FONT><FONT FACE="바탕">같은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문서에서는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있다</FONT></I><FONT FACE="Courier New">&quot; ]</FONT>
<P>	<FONT FACE="Courier New">[ align=&quot;</FONT><I><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">정렬</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방식</FONT></I><FONT FACE="Courier New">&quot; ]</FONT>
<P>	<FONT FACE="Courier New">[ vspace=&quot;</FONT><I><FONT FACE="바탕">세로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방향의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">여백</FONT></I><FONT FACE="Courier New">&quot; ]</FONT>
<P>	<FONT FACE="Courier New">[ hspace=&quot;</FONT><I><FONT FACE="바탕">가로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방향의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">여백</FONT></I><FONT FACE="Courier New">&quot; ]</FONT>
<P>&gt;
<BR>
<P><FONT FACE="Courier New">[ &lt;param name=&quot;</FONT><I><FONT FACE="바탕">속성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT></I><FONT FACE="Courier New">&quot; value=&quot;</FONT><I><FONT FACE="바탕">속성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT></I><FONT FACE="Courier New">&quot;&gt; ]</FONT>
<P><FONT FACE="Courier New">[ &lt;param ...&gt; ]</FONT>
<P><FONT FACE="Courier New">[ ... ]</FONT>
<BR>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I><FONT FACE="바탕">[ ] 안의 부분은 생략이 가능하다.</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 &lt;applet&gt; 태그의 속성에 대한 설명이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=733 HEIGHT=379>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">[archive]</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿이 여러 클래스와 함께 수행될 때, 필요한 클래스를 jar, zip 형태로 압축해서 내려받을 때 사용한다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">code</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">실제 수행할 애플릿 클래스이다. class확장자를 붙인다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">width</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿의 폭을 픽셀단위로 지정한다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">height</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿의 길이(높이)를 픽셀단위로 지정한다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">[codebase]</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿 파일이 있는 URL을 지정한다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">[alt]</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿을 지원하지 않는 브라우저일 경우 애플릿을 대치할 글을 지정한다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">[name]</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">HTML 상에서 애플릿 이름을 지정한다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">[align]</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿의 정렬방식을 결정한다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">[vspace]</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿과 다른 태그나 글 사이의 높이 간격을 나타낸다.</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=15%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">[hspace]</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=84%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">애플릿과 다른 태그나 글 사이의 넓이 간격을 나타낸다.</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">6.2.3.2 &lt;param&gt; </FONT><FONT FACE="바탕">태그</FONT></SPAN></FONT>
<BR>
<P>&lt;<FONT FACE="바탕">param&gt; 태그를 설명하기 전에 어플리케이션 프로그램에 대해 잠깐 설명하기로 한다. 먼저, 다음 예를 보면,</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">&gt;java Test 10 20</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Test.class를 수행하는 문장이다. 여기서 10과 20은 인자값으로 main(String[] args) 메소드의 인자로 넘어가는 값이다. 이와 같이 애플릿에서 클래스에 인자값을 전달할 때 &lt;param&gt; 태그를 이용한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 HTML 파일이 ParamExample.class 파일을 호출하면서 &lt;param&gt; 태그를 사용하고 있다. 즉 애플릿을 호출하면서 인자를 넘기고 있는데, 이름은 pValue이고 값은 &quot;Hello, Java&quot; 이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ParamExample.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=ParamExample.class width=200 height=200&gt;</FONT>
<P><B>&lt;<FONT FACE="Courier New">param name=pValue value=&quot;Hello, Java&quot;&gt;</FONT></B>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ParamExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ParamExample extends Applet</FONT>
<P>	<FONT FACE="Courier New">public void init(){</FONT>
<P>		<FONT FACE="Courier New">String s = </FONT><B><FONT FACE="Courier New">getParameter</FONT></B><FONT FACE="Courier New">(&quot;pValue&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(s, 50, 50);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">HTML 파일에서 넘겨준 인자값을 읽을 때는 getParameter() 메소드를 이용한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.2.4 </FONT><FONT FACE="바탕">그림</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">그리기</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">화면에 그림을 그리는 예를 알아보기로 하자. 
</FONT><BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 서버에서 그림을 내려받아 화면에 그려주는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DrawImageExample.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=DrawImageExample.class width=200 height=150&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DrawImageExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT>
<P><FONT FACE="Courier New">public class DrawImageExample extends Applet {</FONT>
<P>	<B><FONT FACE="Courier New">Image</FONT></B><FONT FACE="Courier New"> logoImage;</FONT>
<P>	<FONT FACE="Courier New">public void init() {</FONT>
<P>		<FONT FACE="Courier New">logoImage = </FONT><B><FONT FACE="Courier New">getImage</FONT></B><FONT FACE="Courier New">(</FONT><B><FONT FACE="Courier New">getDocumentBase</FONT></B><FONT FACE="Courier New">(), &quot;images/duke.gif&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.</FONT><B><FONT FACE="Courier New">drawImage</FONT></B><FONT FACE="Courier New">(logoImage, 25, 25, this);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">4 : Image 객체를 가리킬 reference를 만들고 있다.</FONT>
<P><FONT FACE="바탕">6 : getImage() 메소드를 이용해 실제 이미지를 지정한다. getImage() 메소드의 첫 번째 인자 값으로 이미지의 정확한 위치를 URL 방식으로 지정한다. 이를 위해 getDocumentBase() 메소드를 이용하는데 이는 클래스 파일을 지정하는 HTML의 URL을 알려주는 메소드이다. 두 번째 인자 값으로는 그림의 이름을 스트링형으로 지정해 준다. 즉, HTML 파일이 있는 곳에 images 디렉토리가 있고, 그 안에 duke.gif 파일을 지정함을 나타낸다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV257.GIF" BORDER=0 WIDTH=556 HEIGHT=223 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">9 : 실제 그림을 화면에 나타낸다. 이때 서버에서 내려받게 된다. getImage() 메소드는 그림이 있는 곳을 알려준다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV258.GIF" BORDER=0 WIDTH=163 HEIGHT=211 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 &lt;param&gt; 태그를 이용하여 그림파일을 HTML 파일 내에서 지정하게 한 예인데, 앞의 프로그램은 그림 이름을 자바 소스코드 내에 지정했기 때문에 다른 그림을 부르고 싶으면 그때마다 코드를 수정한 후 다시 컴파일을 해야 하는 불편함이 있다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DrawImageExample.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=DrawImageExample.class width=200 height=200&gt;</FONT>
<P><B>&lt;<FONT FACE="Courier New">param name=logo value=&quot;duke.gif&quot;&gt;</FONT></B>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DrawImageExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT>
<P><FONT FACE="Courier New">public class DrawImageExample extends Applet {</FONT>
<P>	<FONT FACE="Courier New">Image logo;</FONT>
<P>	<FONT FACE="Courier New">public void init() {</FONT>
<P>		<FONT FACE="Courier New">String imageName = </FONT><B><FONT FACE="Courier New">getParameter</FONT></B><FONT FACE="Courier New">(&quot;logo&quot;);</FONT>
<P>		<FONT FACE="Courier New">logo = getImage(getDocumentBase(), imageName);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawImage(logo, 0, 0, this);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.2.5 </FONT><FONT FACE="바탕">오디오</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">클립</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 오디오 클립을 사용하는 예제이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PlayAudio.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=PlayAudio.class width=200 height=100&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">PlayAudio.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT>
<P><FONT FACE="Courier New">public class PlayAudio extends Applet {</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;</FONT><FONT FACE="바탕">야</FONT><FONT FACE="Courier New">~ </FONT><FONT FACE="바탕">소리가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">들린다</FONT><FONT FACE="Courier New">.&quot;, 25, 25);</FONT>
<P>		<B><FONT FACE="Courier New">play</FONT></B><FONT FACE="Courier New">(</FONT><B><FONT FACE="Courier New">getCodeBase</FONT></B><FONT FACE="Courier New">(), &quot;etca.mid&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6 : play()는 소리를 내는 메소드이다. getCodeBase()는 바로 앞 예제의 getDocumentBase() 메소드와 유사하며 HTML 파일이 있는 곳을 나타내지만, getCodeBase()는 class 파일이 있는 곳을 나타낸다. 이 줄의 전체적인 의미는 class 파일의 디렉토리에 있는 anytime.mid 파일을 읽어서 클라이언트에서 연주한다. 지원하는 파일 형식은 .au, .wav, .mid 등 흔히 접할 수 있는 대부분의 형태를 연주할 수 있다. (JDK 1.3 의 기준이다. 그 이전의 JDK에서는 지원하지 않는 형태가 있을 수 있다.) 
</FONT><P><FONT FACE="바탕">이 예제에서는 소리를 내는 play() 메소드가 paint() 메소드 안에 있기 때문에 paint() 메소드가 호출될 때마다 음악이 연주된다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV259.GIF" BORDER=0 WIDTH=212 HEIGHT=172 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 음악을 반복해서 연주하기 위해 loop() 메소드를 이용하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">LoopPlayAudio.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=LoopPlayAudio.class width=200 height=100&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">LoopPlayAudio.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT>
<P><FONT FACE="Courier New">public class LoopPlayAudio extends Applet {</FONT>
<P>	<FONT FACE="Courier New">AudioClip sound;</FONT>
<P>	<FONT FACE="Courier New">public void init() {</FONT>
<P>		<FONT FACE="Courier New">sound = </FONT><B><FONT FACE="Courier New">getAudioClip</FONT></B><FONT FACE="Courier New">(getCodeBase(), &quot;etca.mid&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">paint</FONT></B><FONT FACE="Courier New">(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;</FONT><FONT FACE="바탕">아름다운</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">소리입니까</FONT><FONT FACE="Courier New">?&quot;, 25, 25);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void start() {</FONT>
<P>		<FONT FACE="Courier New">sound.</FONT><B><FONT FACE="Courier New">loop</FONT></B><FONT FACE="Courier New">();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void stop() {</FONT>
<P>		<FONT FACE="Courier New">sound.</FONT><B><FONT FACE="Courier New">stop</FONT></B><FONT FACE="Courier New">();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이 예제는 애플릿이 화면에 나타나면서 계속 연주하게 된다. 
</FONT><P><FONT FACE="바탕">5 : init() 메소드에서 getAudioClip()를 통해 오디오파일을 지정한다.</FONT>
<P><FONT FACE="바탕">11 : start() 메소드에서 loop() 메소드를 호출한다. 이는 오디오 파일을 반복시키는 기능이다. 그런데, 다른 URL로 이동을 하면 stop() 메소드가 호출되어(15번째 줄) 음악을 멈춘다. 이렇게 지정하지 않으면 브라우저를 닫을 때까지 계속 연주하게 된다. 애플릿을 아이콘화 시켜켜 확인하기 바란다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV260.GIF" BORDER=0 WIDTH=212 HEIGHT=172 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.2.6 </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">이벤트</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">모델</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">여기서는 애플릿에서 사용자가 발생시킨 이벤트를 다루는 방법에 대해 설명하기로 한다. 다음과 같은 애플릿을 만들어 애플릿 위에서 마우스를 클릭하면 그 자리에 &quot;클릭&quot;이라는 글자가 출력되게 한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ClickHere.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=ClickHere.class width=200 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=523>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ClickHere.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT>
<P><FONT FACE="Courier New">public class ClickHere extends Applet </FONT><B><FONT FACE="Courier New">implements MouseListener</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">int mouseX = -1;</FONT>
<P>	<FONT FACE="Courier New">int mouseY = -1;</FONT>
<P>	<FONT FACE="Courier New">public void init() {</FONT>
<P>		<FONT FACE="Courier New">addMouseListener(this); 	// Applet</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> MouseListener</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">붙임</FONT><FONT FACE="Courier New">.</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">if (mouseX != -1 &amp;&amp; mouseY != -1)</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;</FONT><FONT FACE="바탕">클릭</FONT><FONT FACE="Courier New">&quot;, mouseX, mouseY);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">mousePressed</FONT></B><FONT FACE="Courier New">(MouseEvent evt) {</FONT>
<P>		<FONT FACE="Courier New">mouseX = evt.getX();</FONT>
<P>		<FONT FACE="Courier New">mouseY = evt.getY();</FONT>
<P>		<B><FONT FACE="Courier New">repaint</FONT></B><FONT FACE="Courier New">();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent e) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseEntered(MouseEvent e) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseExited(MouseEvent e) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseReleased(MouseEvent e) {}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">4 : 애플릿을 상속받으면서 MouseListener까지 implements하고있다. 즉 ClickHere라는 클래스는 애플릿이면서 이벤트 핸들러이다.</FONT>
<P><FONT FACE="바탕">7 : init() 메소드 안에 8번째 줄의 addMouseListener(this);가 있다. 즉 애플릿에 이벤트리스너(EventListener)를 붙였기 때문에 이 애플릿에서 일어나는 마우스와 관련된 이벤트를 처리할 수 있다.</FONT>
<P><FONT FACE="바탕">10 : paint() 메소드에서는 mouseX, mouseY 값을 이용 화면에 &quot;클릭&quot;이라는 문자열을 출력한다. mouseX와 mouseY값은  15번째와 16번째 줄에서 얻는다.</FONT>
<P><FONT FACE="바탕">14 : mousePressed() 메소드는 사용자가 애플릿에서 마우스를 누를 때 호출되며, mouseX, mouseY 변수값을 지정한다. evt.getX(), evt.getY()에서 evt는 이 메소드에 전달된 Event 객체인데, getX()와 gety() 메소드를 호출하여 클릭한 곳의 x,y 좌표를 얻는다.</FONT>
<P><FONT FACE="바탕">17 : repaint() 메소드를 호출한다. repaint()는 update() 메소드를 호출하고, update() 메소드는 화면을 한번 지우고 다시 paint() 메소드를 호출한다. 
</FONT><P ALIGN=CENTER>
<IMG SRC="FYXIV261.GIF" BORDER=0 WIDTH=212 HEIGHT=274 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞 예제의 22번째 줄 다음에 아래의 메소드를 추가하여 실행시킨 후 결과를 확인하기 바란다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=75>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">update</FONT></B><FONT FACE="Courier New">(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">paint(g);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV262.GIF" BORDER=0 WIDTH=212 HEIGHT=274 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 앞에서 만든 ClickHere 애플릿을 변형하여 애플릿 위에서 마우스를 드래그(drag)하며 &quot;끌기&quot;라는 문자열을 끌고 다니는 예제이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=119>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=DragHere.class width=200 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>  
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=767>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<BR>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT>
<P><FONT FACE="Courier New">public class DragHear extends Applet </FONT>
<P>	<B><FONT FACE="Courier New">implements MouseListener, MouseMotionListener </FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">int mouseX = -1;</FONT>
<P>	<FONT FACE="Courier New">int mouseY = -1;</FONT>
<P>	<FONT FACE="Courier New">public void init() {</FONT>
<P>		<FONT FACE="Courier New">addMouseListener(this); 	// Applet</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> MouseListener</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">붙임</FONT><FONT FACE="Courier New">.</FONT>
<P>		<FONT FACE="Courier New">addMouseMotionListener(this);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">if (mouseX != -1 &amp;&amp; mouseY != -1)</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;</FONT><FONT FACE="바탕">끌기</FONT><FONT FACE="Courier New">&quot;, mouseX, mouseY);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">mousePressed</FONT></B><FONT FACE="Courier New">(MouseEvent evt) {</FONT>
<P>		<FONT FACE="Courier New">mouseX = evt.getX();</FONT>
<P>		<FONT FACE="Courier New">mouseY = evt.getY();</FONT>
<P>		<B><FONT FACE="Courier New">repaint</FONT></B><FONT FACE="Courier New">();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mouseClicked(MouseEvent e) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseEntered(MouseEvent e) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseExited(MouseEvent e) {}</FONT>
<P>	<FONT FACE="Courier New">public void mouseReleased(MouseEvent e) {}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">mouseDragged</FONT></B><FONT FACE="Courier New">(MouseEvent evt) {</FONT>
<P>		<FONT FACE="Courier New">mouseX = evt.getX();</FONT>
<P>		<FONT FACE="Courier New">mouseY = evt.getY();</FONT>
<P>		<B><FONT FACE="Courier New">repaint</FONT></B><FONT FACE="Courier New">();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void mouseMoved(MouseEvent e) {}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">5 : MouseMotionListener를 implements하였다. 
</FONT><P><FONT FACE="바탕">10 : 애플릿에 이 Listener를 붙인다.</FONT>
<P><FONT FACE="바탕">26 : ∼부터는 mouseDragged() 메소드를 구현하고 있다.</FONT>
<P><FONT FACE="바탕">이 프로그램을 실행하면 다음 결과화면처럼 마우스를 드래그할 때 &quot;끌기&quot;라는 문자열이 따라다닌다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV263.GIF" BORDER=0 WIDTH=183 HEIGHT=237 ALIGN=BOTTOM>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">6.2.7 Dual Purpose Code</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 하나의 코드로 애플릿으로도 사용하고 어플리케이션으로도 사용할 수 있는 예제이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DualPurposeExample.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">html&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=DualPurposeExample.class width=250 height=100&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/html&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=485>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">DualPurposeExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<P><FONT FACE="Courier New">public class DualPurposeExample </FONT><B><FONT FACE="Courier New">extends Applet</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">Date d;</FONT>
<P>	<FONT FACE="Courier New">public static void </FONT><B><FONT FACE="Courier New">main</FONT></B><FONT FACE="Courier New">(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Frame f = new Frame(&quot;Java Application&quot;);</FONT>
<P>		<FONT FACE="Courier New">DualPurposeExample m = new DualPurposeExample(); </FONT>
<P>		<FONT FACE="Courier New">f.add(m, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">f.setSize (250, 150);</FONT>
<P>		<B><FONT FACE="Courier New">m.init();</FONT></B>
<P>		<B><FONT FACE="Courier New">m.start();</FONT></B>
<P>		<FONT FACE="Courier New">f.</FONT><B><FONT FACE="Courier New">setVisible</FONT></B><FONT FACE="Courier New">(true); // paint() </FONT><FONT FACE="바탕">수행</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">init</FONT></B><FONT FACE="Courier New">() {</FONT>
<P>		<FONT FACE="Courier New">d = new Date();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">paint</FONT></B><FONT FACE="Courier New">(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;</FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">시간</FONT><FONT FACE="Courier New"> : &quot;, 25, 25);</FONT>
<P>		<FONT FACE="Courier New">g.drawString(d.toString(), 25, 60);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">먼저 애플릿의 관점에서 설명하면 이 클래스는 분명히 애플릿이며 애플릿은 Panel임을 기억해야 한다. 실행될 때 제일먼저 16번째 줄의 init() 메소드가 처리되는데, 여기서는 현재 시간을 알아내서 저장한다. 그리고 브라우저에 의해 19번째 줄의 paint() 메소드가 수행되면 화면에 시간이 표시된다. 7번째 줄에서 main() 메소드가 있지만, 애플릿에서는 무시된다. 결과화면은 다음 그림과 같다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV264.GIF" BORDER=0 WIDTH=263 HEIGHT=172 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P> 
<P><FONT FACE="바탕">두 번째로 어플리케이션의 관점에서 보자. 이 어플리케이션 프로그램의 시작점은 당연히 main() 메소드이다. DualPurposeExample 클래스는 패널(Applet은 Panel의 하위 클래스)임으로 독립적으로 화면에 출력되지 않고 프레임같은 컨테이너가 필요하다. 그래서 8번째 줄에서 프레임을 생성하고, 9번째 줄에서 패널을 생성하고, 10번째 줄에서 프레임에 패널을 붙인다. 12번째 줄에서 애플릿이라면 웹브라우저가 init() 메소드를 자동으로 호출하지만, 어플리케이션에서는 직접 호출하여 현재 시간을 저장한다. 그리고 13번째 줄에서 start() 메소드를 호출하는데 어플리케이션에서는 필요없다. 14번째 줄에서 setVisible(true)메소드를 호출하는데, 이때 paint() 메소드가 호출된다. paint() 메소드는 화면에 그림을 그릴 때 자동으로 호출된다. setVisible() 메소드는 프레임과 그 안의 컴포넌트를 나타낼 때 사용되므로 setVisible() 메소드를 호출하는 시점이 paint()가 호출되는 시점이다. 결과화면은 다음과 같다. 
</FONT><BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV265.GIF" BORDER=0 WIDTH=255 HEIGHT=153 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P>
<IMG SRC="FYXIV266.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV267.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV268.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV269.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[프로그래밍 기법]</FONT></SPAN></FONT>
<P>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이 장에서는 클래스 안의 클래스인 내부 클래스, 예외처리, 쓰레드 제어 그리고 객체를 저장하는 컬렉션(Collection) 등 프로그램에서 부가적으로 사용할 수 있는 몇 가지 기능에 대해 설명하기로 한다.</FONT></SPAN></FONT>
<BR>
<P>
<P>
<BR>
<P>
<IMG SRC="FYXIV271.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">7.1   </FONT><FONT FACE="바탕">내부</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">클래스</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스 내의 클래스로 JDK 1.1에서 포함되었으며 내포(nested) 클래스라고도 한다. 내부 클래스는 존재 위치에 따른 멤버클래스, 메소드 안의 이름이 있는 내부클래스, 메소드 안의 이름이 없는 내부클래스 3가지로 나뉘어진다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.1.1 </FONT><FONT FACE="바탕">멤버</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">클래스</FONT><FONT FACE="HY부활M">(Inner Class)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스의 멤버로 필드나 메소드가 아닌 클래스가 올 수 있는데, 이를 내부(Inner) 클래스라고 한다. 필드나 메소드처럼 public, private, protected, static, final 등의 접근 제한자가 올 수 있으며, 클래스 선언부를 주 클래스 안으로 옮겨 놓으면 된다. 내부클래스는 컴파일시 주 클래스 이름과 내부클래스 이름을 &quot;$&quot;　문자로 연결한 파일을 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=197>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">InnerExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class InnerExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<P>	
<P>	<FONT FACE="Courier New">public InnerExample() {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=463>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">InnerExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><B><FONT FACE="Courier New">11:</FONT></B>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><B><FONT FACE="Courier New">19:</FONT></B>
<P><B><FONT FACE="Courier New">20:</FONT></B>
<P><B><FONT FACE="Courier New">21:</FONT></B>
<P><B><FONT FACE="Courier New">22:</FONT></B>
<P><B><FONT FACE="Courier New">23:</FONT></B>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Inner </FONT><FONT FACE="바탕">클래스</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyWindowAdapter()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">InnerExample ie = new InnerExample();</FONT>
<P>		<FONT FACE="Courier New">ie.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">private class MyWindowAdapter extends WindowAdapter {</FONT></B>
<P>		<B><FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT></B>
<P>			<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>		<B><FONT FACE="Courier New">}</FONT></B>
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램을 컴파일하면 클래스인 InnerExample.class파일과 내부 클래스인 InnerExample $MyWindowAdapter.class파일이 생성된다.</FONT>
<P><FONT FACE="바탕">Inner클래스는 static멤버를 가질 수 없으나, static으로 선언하면 Top-Level클래스가 되어 static멤버를 가질 수 있다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.1.2 </FONT><FONT FACE="바탕">지역</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">클래스</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">메소드나 해당 블록 내에서만 유효하다. 클래스의 영역 범위가 블록의 영역 범위와 같으므로 다른 접근제한자가 없다. 컴파일하면 주 클래스 이름과 블록번호, 그리고 내부 클래스 이름을　&quot;$&quot;　문자로 연결한 파일을 생성한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 메소드 내에서 이름을 부여하여 클래스를 정의한 것으로 컴파일 하면 Top-Level 클래스인 InnerLocalExample.class파일과 내부 클래스인 InnerLocalExample$1$MyWindowAdapter.class파일을 생성하는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=607>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">InnerLocalExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><B><FONT FACE="Courier New">12:</FONT></B>
<P><B><FONT FACE="Courier New">13:</FONT></B>
<P><B><FONT FACE="Courier New">14:</FONT></B>
<P><B><FONT FACE="Courier New">15:</FONT></B>
<P><B><FONT FACE="Courier New">16:</FONT></B>
<P><B><FONT FACE="Courier New">17:</FONT></B>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class InnerLocalExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public InnerLocalExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Local Class&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">class MyWindowAdapter extends WindowAdapter {</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowClosing(WindowEvent we){</FONT></B>
<P>				<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>			<B><FONT FACE="Courier New">}</FONT></B>
<P>		<B><FONT FACE="Courier New">}</FONT></B>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new MyWindowAdapter() </FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">InnerLocalExample ile = new InnerLocalExample();</FONT>
<P>		<FONT FACE="Courier New">ile.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.1.3 </FONT><FONT FACE="바탕">익명</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">클래스</FONT><FONT FACE="HY부활M">(Anonymous Class)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">블록 내부에 존재하는 지역 클래스에서 이름을 생략한 것이다. 이름을 생략한 지역 클래스는 new 키워드로 클래스를 생성하는 부분에서 메소드를 구현한다. 주 클래스 이름에 지역 클래스의 번호를 &quot;$&quot; 문자로 연결한 파일을 생성한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 메소드 내에서 이름 없는 클래스를 정의한 것으로 컴파일하면 Anonymous Example.class파일과 AnonymousExample$1.class파일을 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=602>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AnonymousExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><B><FONT FACE="Courier New">12:</FONT></B>
<P><B><FONT FACE="Courier New">13:</FONT></B>
<P><B><FONT FACE="Courier New">14:</FONT></B>
<P><B><FONT FACE="Courier New">15:</FONT></B>
<P><B><FONT FACE="Courier New">16:</FONT></B>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class AnonymousExample {</FONT>
<P>	<FONT FACE="Courier New">private Frame f;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public AnonymousExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new Frame(&quot;Anonymous Class&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">f.addWindowListener( </FONT><B><FONT FACE="Courier New">new WindowAdapter() {</FONT></B>
<P>			<B><FONT FACE="Courier New">public void windowClosing(WindowEvent we){</FONT></B>
<P>				<B><FONT FACE="Courier New">System.exit(0);</FONT></B>
<P>			<B><FONT FACE="Courier New">}</FONT></B>
<P>		<B><FONT FACE="Courier New">}</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">AnonymousExample ae = new AnonymousExample();</FONT>
<P>		<FONT FACE="Courier New">ae.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.1.4 Inner </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">내부 클래스의 사용법을 익히기 위해 다음 프로그램을 살펴보기로 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 testTheInner()메소드에서 Inner1 클래스를 참조하는 예이다. Inner1클래스와 testTheInner()메소드는 모두 Outer1이라는 동일한 클래스의 범위 안에 있다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=497>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Outer1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">public class Outer1 {</FONT></B>
<P>	<FONT FACE="Courier New">private int data;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public class MyInner1 {</FONT></B>
<P>		<FONT FACE="Courier New">public void doIt() {</FONT>
<P>			<FONT FACE="Courier New">data++;</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Inner </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">호출됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;data : &quot; + data);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void testTheInner() {</FONT>
<P>		<B><FONT FACE="Courier New">MyInner1 in = new MyInner1();</FONT></B>
<P>		<B><FONT FACE="Courier New">in.doIt();</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Outer1 out = new Outer1();</FONT>
<P>		<FONT FACE="Courier New">out.testTheInner();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV272.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV273.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Inner </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">호출됨</FONT></B>
<P>		<B><FONT FACE="Courier New">data : 1</FONT></B>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 내부클래스를 별도의 클래스에서 참조하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Outer2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">public class Outer2 {</FONT></B>
<P>	<FONT FACE="Courier New">private int data;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public class MyInner2 {</FONT></B>
<P>		<FONT FACE="Courier New">public void doIt() {</FONT>
<P>			<FONT FACE="Courier New">data++;</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Inner </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">호출됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;data : &quot; + data);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInner2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInner2 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Outer2 out = new Outer2();</FONT></B>
<P>		<B><FONT FACE="Courier New">Outer2.MyInner2 in = out.new MyInner2();</FONT></B>
<P>		<FONT FACE="Courier New">in.doIt();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV274.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV275.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Inner </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">호출됨</FONT></B>
<P>		<B><FONT FACE="Courier New">data : 1</FONT></B>
<BR>
<P><FONT FACE="바탕">앞의 예에서처럼 다른 클래스에서 내부 클래스를 참조하려면 외부클래스를 이용한다. 4번째와 5번째 줄은 다음과 같이 표현해도 된다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Outer2.MyInner2 in = new Outer2().new MyInner2();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.1.5 Inner </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">변수참조</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 내부클래스에서 변수를 참조하는 예를 보인 것이다. 내부클래스를 포함한 클래스의 멤버변수와 내부클래스의 멤버변수 이름이 같으면 어느 변수를 참조하는지를 구분해야 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Outer3.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Outer3 {</FONT>
<P>	<FONT FACE="Courier New">private int data=10;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public class MyInner3 {</FONT>
<P>		<FONT FACE="Courier New">private int data=20;</FONT>
<BR>
<P>		<FONT FACE="Courier New">public void doIt(int data) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println( </FONT><B><FONT FACE="Courier New">data</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>			<FONT FACE="Courier New">System.out.println( </FONT><B><FONT FACE="Courier New">this.data</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>			<FONT FACE="Courier New">System.out.println( </FONT><B><FONT FACE="Courier New">Outer3.this.data</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=170>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInner3.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInner3 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Outer3.MyInner3 in = new Outer3().new MyInner3();</FONT>
<P>		<FONT FACE="Courier New">in.doIt(30);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV276.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV277.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">30</FONT></B>
<P>		<B><FONT FACE="Courier New">20</FONT></B>
<P>		<B><FONT FACE="Courier New">10</FONT></B>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 내부클래스가 메소드 안에 선언된 경우 변수 참조 예를 보인 예이다. 메소드 내에 클래스가 선언되면 지역클래스(Local class)라고 하는데, 지역클래스에서는 자신을 포함하는 메소드의 변수들 중에서 지역클래스 내부에 선언된 변수가 아니면 final변수를 제외한 어떤 변수도 참조할 수 없다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=497>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Outer4.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">9-1:</FONT>
<P><FONT FACE="Courier New">9-2:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Outer4 {</FONT>
<P>	<B><FONT FACE="Courier New">private int data=10;</FONT></B>
<BR>
<P>	<FONT FACE="Courier New">public Object makeTheInner(</FONT><B><FONT FACE="Courier New">int localData</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>		<B><FONT FACE="Courier New">final int FINAL_LOCAL_DATA=20;</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">class MyInner4 {</FONT></B>
<P>			<FONT FACE="Courier New">public String toString() {</FONT>
<P>				<FONT FACE="Courier New">return ( &quot;data=&quot; + data +</FONT>
<P><FONT FACE="Courier New">//</FONT>					<FONT FACE="Courier New">&quot;\nlocalData=&quot; + localData + //Error</FONT>
<P>					<FONT FACE="Courier New">&quot;\nFINAL_LOCAL_DATA=&quot; + FINAL_LOCAL_DATA );</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">return new MyInner4();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Outer4 out = new Outer4();</FONT>
<P>		<FONT FACE="Courier New">Object in = out.makeTheInner(30);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(in);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">내부클래스는 모든 접근제한 모드를 사용할 수 있으며, abstract로 선언하여 사용할 수도 있다. 또, static 멤버를 가질 수 없지만 static으로 선언하면 top-level 클래스가 되어 static 멤버를 가질 수 있다. 즉, static 멤버를 갖는 내부클래스를 선언하려면 그 내부클래스도 static으로 선언해야 한다.</FONT>
<P>
<IMG SRC="FYXIV278.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">7.2  </FONT><FONT FACE="바탕">예외</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">처리</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">예외처리(Exception Handling)는 오류발생에 대한 대처 방법 중의 하나로 시스템 스스로 오류를 복구하는게 아니고 오류발생 가능성이 있는 부분에 대한 처리를 미리 프로그램 해주는 것이다. 오류의 종류는 강한오류(serious error)와 약한오류(mild error)로 나눌 수 있다.</FONT>
<P><FONT FACE="바탕">강한오류는 메모리가 부족할 때 발생하는 OutOfMemouyError 등으로 오류를 복구할 수 없으며 프로그램은 중지된다. 자바에서는 이런 경우만 오류라고 한다.</FONT>
<P><FONT FACE="바탕">약한오류는 일종의 오류로 취급되지만 프로그램이 중지되지는 않는 오류를 말한다. 예를 들면 없는 파일을 읽을 때 발생하는 FileNotFoundException 오류 등이다. 파일이 없어도 프로그램은 멈추지 않고 파일이 없음을 알리는 오류 메시지를 출력하고 계속 진행되는 것이다. 
</FONT><P><FONT FACE="바탕">이와 같은 오류 방생에 대한 조치 사항을 예외처리라고 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 오류를 발생하도록 만든 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ExceptionProblem.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ExceptionProblem {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int i = 0;</FONT>
<P>		<FONT FACE="Courier New">String[] greetings = {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;};</FONT>
<P>		<FONT FACE="Courier New">while (i &lt; 4) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println (greetings[i]);</FONT>
<P>			<FONT FACE="Courier New">i++;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이 프로그램은 오류가 발생하는데 컴파일 오류가 아니고 실행오류이다. 5번째 줄에서 i값이 3이 될 때까지 while문을 수행하면 6번째 줄에서 greetings[3]까지 출력한다. 그러나 4번째 줄을 자세히 보면, 배열 greetings는 greetings[2]까지(greeting[0]=&quot;One&quot;, greeting[1]=&quot;Two&quot;, greeting[2]=&quot;Three&quot;)만  지정했기 때문에 배열의 범위를 넘었다. 이와같은 경우 C언어에서는 오류가 발생하지 않지만, 자바에서는 발생한다.</FONT>
<BR>
<P><FONT FACE="바탕">프로그램의 실행결과는 다음과 같다. 
</FONT><P>
<IMG SRC="FYXIV279.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV280.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">One</FONT></B>
<P>		<B><FONT FACE="Courier New">Two</FONT></B>
<P>		<B><FONT FACE="Courier New">Three</FONT></B>
<P>		<B><FONT FACE="Courier New">Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException</FONT></B>
<P>		        <B><FONT FACE="Courier New">at ExceptionProblem.main(ExceptionProblem.java:6)</FONT></B>
<P><FONT FACE="바탕">실행 결과를 보면, greetings[2](Three)까지 출력하고 greetings[3]을 실행하다 ArrayIndexOutOf BoundsException이 발생했음을 알 수 있다. 예외처리는 자바 프로그램을 개발하는 도중에 종종 만나게된다.</FONT>
<P> 
<P><FONT FACE="바탕">앞의 프로그램을 수정하여 오류가 발생하지 않게하려면 5번째 줄을 다음과 같이 기술한다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">while (i &lt; 3) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">예외처리가 발생하는 이유는 대부분 프로그램을 잘못 작성했기 때문인데 이를 자세하게 설명하면 다음과 같다. 
</FONT><P><FONT FACE="바탕">예외처리는 예외사항을 찾아내 이를 처리한 다음 계속 프로그램이 진행되도록 하는 것이다. 예외 상황을 처리하기 위해 받아들이는 것을 예외를 잡는다(catch)라고 표현하고, 예외 처리를 자신을 부른 메소드로 넘기는 것을 예외를 던진다(throw)고 표현한다. 
</FONT><P><FONT FACE="바탕">예외처리 방법은 크게 두 가지로 나눌 수 있는데, 첫 번째는 try ∼ catch 문을 사용하는 방법과, 두 번째는 throws 선언을 통하여 처리하는 방식이다. 예외 처리에서 기억해야할 점은 예외처리를 사용하면 오류가 발생했을 때 프로그램의 오류처리 루틴을 자동적으로 호출해 주지만 이러한 루틴은 프로그래머가 직접 작성해야 한다는 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.2.1 try </FONT><FONT FACE="바탕">∼</FONT><FONT FACE="HY부활M"> catch</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">try∼catch 문을 이용하여 예외를 처리해 보자. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 try∼catch문을 이용하여 앞에서 설명한 예외처리 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=410>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ExceptionTryCatch.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><B><FONT FACE="Courier New">6:</FONT></B>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><B><FONT FACE="Courier New">9:</FONT></B>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><B><FONT FACE="Courier New">14:</FONT></B>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ExceptionTryCatch {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int i = 0;</FONT>
<P>		<FONT FACE="Courier New">String[] greetings = {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;};</FONT>
<P>		<FONT FACE="Courier New">while (i &lt; 4) {</FONT>
<P>			<B><FONT FACE="Courier New">try </FONT></B><FONT FACE="Courier New">{</FONT>
<P>				<FONT FACE="Courier New">System.out.println(greetings[i]);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<B><FONT FACE="Courier New">catch</FONT></B><FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">(ArrayIndexOutOfBoundsException e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">예외</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>				<FONT FACE="Courier New">i = -1;</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">예외</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">처리</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">완료됨</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<B><FONT FACE="Courier New">finally</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">항상</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">i++;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">try∼catch문은 크게 3부분(try, catch, finally)으로 나눌 수 있다.</FONT>
<P><FONT FACE="바탕">첫 번째 부분은 try 블록으로 예외상황이 발생할 만한 문장을 적으면 된다. 7번째 줄에서 greeting[3]을 출력하다 예외상황이 발생할 것이다. try 블록은 단독으로 사용할 수 없고, catch나 finally블록과 함께 사용한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><B><FONT FACE="Courier New">6:</FONT></B>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<B><FONT FACE="Courier New">try </FONT></B><FONT FACE="Courier New">{</FONT>
<P>				<FONT FACE="Courier New">System.out.println(greetings[i]);</FONT>
<P>			<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">두 번째 부분은 catch 블록으로 발생한 예외상황을 감지하여 적절한 조치를 취하기 위해 사용한다. 실행 시점은 예외가 발생했을 때인데 예외가 발생하지 않으면 catch 블록은 실행되지 않는다. 만약 기술한 예외와 다른 상황이 발생하면 무시된다. 이 프로그램에서는 ArrayIndexOutOfBoundsException이 발생하면 catch 블록이 실행된다. 만약 NullPointerException과 같이 다른 예외상황이 발생하면 catch 블록은 실행되지 않는다. 예외 상황이 많을 경우에는 catch블록을 중복해서 사용할 수도 있다. 일반적인 예외가 먼저 처리될 수 없는데 예를 들면 Exception 계층 구조에서 상위 클래스가 하위 클래스보다 먼저 catch블록의 인자값으로 선언되어서는 안된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<P><B><FONT FACE="Courier New">9:</FONT></B>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<B><FONT FACE="Courier New">catch</FONT></B><FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">(ArrayIndexOutOfBoundsException e)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">예외</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>				<FONT FACE="Courier New">i = -1;</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">예외</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">처리</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">완료됨</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">세 번째는 finally 블록이 있는데, 이 블록은 catch 블록과는 다르게 예외상황의 발생여부에 관계없이 무조건 실행된다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=75>
<TD VALIGN=TOP WIDTH=7%>
<P><B><FONT FACE="Courier New">14:</FONT></B>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<B><FONT FACE="Courier New">finally</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">항상</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">finally는 try 블록 또는 catch 블록에서 return문을 만나더라도 무조건 실행된다. 다음의 경우에만 finally 블록이 실행되지 않는다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ System.exit()를 호출했을 때.</FONT>
<P>  <FONT FACE="돋움">∘ 전원이 꺼져 시스템이 멈추었을 때.</FONT>
<P>  <FONT FACE="돋움">∘ finally 블록 내부에서 예외상황이 발생했을 때.</FONT>
<P>  <FONT FACE="돋움">∘ 쓰레드가 죽었을 때.</FONT>
<BR>
<P><FONT FACE="바탕">앞의 예제는 ArrayIndexOutOfBoundsException라는 예외 상황이 방생한다. 모든 예외상황의 부모 클래스는 Exception이며 ArrayIndexOutOfBoundsException도 역시 Exception 클래스의 자손 클래스이다. 이렇게 try블록 안에서 예외상황이 발생하면 catch 블록이 수행되며, 발생한 예외는 ArrayIndexOut OfBoundsException 타입의 인스턴스(instance)라는 사실이다. 따라서 e 라는 변수를 이용해 생성된 인스턴스를 가리킨 것이다. 그 다음 화면에 &quot;예외 처리 완료됨&quot;을 출력한 후, i를 -1로 바꾼다. 물론 try 문이 실행되면 finally 블록은 무조건 수행됨으로 이미 화면에 &quot;항상 실행됨&quot;이 계속 출력된다. 이렇게 i가 -1로 바뀌면 while 조건이 true임으로 무한 loop를 수행하게 되므로 프로그램은 멈추지 않고 진행된다. 이렇게 오류가 발생해도 프로그램이 계속 실행되는 이유는 프로그래머가 예외상황을 직접 다룰 수 있기 때문이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 예외상황의 종류를 도식한 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV281.GIF" BORDER=0 WIDTH=603 HEIGHT=287 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 그림은 개략적인 형태로 전부 클래스 이름이다. 여기에 나타나 있지 않은 클래드도 많이 있으므로 API문서를 참조하면 된다. 이 중 Error클래스의 자손이 발생하면 치명적인 오류이므로 프로그램이 종료되는 것이 당연하다. 그 밑에 Exception이 있는데 바로 이것들이 예외 처리의 대상이다. 보통 예외가 발생하면 오류 메시지를 내보내고 종료하지만 예외 상황이 발생하는 대부분의 이유가 프로그램을 잘못 작성하였기 때문이므로 이러한 예외상황이 발생하지 않게 작성해야하고, 부득이하게 발생하는 경우라면 예외 처리 부분을 기술해 주어야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">RuntimeException은 설계상의 문제 또는 구현 코드 문제를 가리킨다. 즉, 프로그램이 정상적으로 실행되고 있으면 발생해서는 안 되는 실행 중 상태를 알려준다. 예를 들어, 한계 값을 벗어난 배열이나 null 변수의 레퍼런스 해제를 들 수 있다. 올바르게 설계되어 구현된 프로그램에서는 절대로 이런 종류의 예외가 발생하지 않으므로 처리하지 않고 그대로 두는 것이 보통이다. 이 예외가 발생하면 실행 중에 메시지가 나오므로 오류를 수정할 수 있다. 
</FONT><BR>
<P><FONT FACE="바탕">이 외의 Exception은 실행환경에 따라 발생할 수 있고 또 처리할 수 있다. 예를 들면 파일을 찾을 수 없거나 URL을 잘못 지정한 경우가 있다. 이런 것은 사용자가 잘못 입력할 때 발생하며 프로그래머가 처리해야 한다. 
</FONT><P><FONT FACE="바탕">위의 예외 중에서 IOException과 하위 클래스들인 EOFException 그리고, FileNotFoundException은 오류메시지 없이 프로그램이 중단되므로 반드시 예외 처리를 해 주어야 한다. API에서 제공되는 메소드를 사용할 때는 그 메소드가 throws 되어 있는지 확인하고 throws할 경우에는 반드시 예외 처리를 해 주어야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 자바 언어에서 미리 정의된 몇 가지 예외 중에서 발생빈도가 높은 항목을 설명한 것이다. 
</FONT><BR>
<P>  <FONT FACE="돋움">∘ ArithmeticException</FONT>
<P><FONT FACE="바탕">- 일반적으로 정수를 0(zero)로 나눗셈을 할 때 발생한다.</FONT>
<P>  <FONT FACE="돋움">∘ NullPointerException</FONT>
<P><FONT FACE="바탕">- 인스턴스를 만들기 전에 객체나 메소드를 액세스하면 발생한다.</FONT>
<P><FONT FACE="바탕">- Image[] in = new Image[4];</FONT>
<P>  <FONT FACE="바탕">System.out.println(im[0].toString());</FONT>
<P>  <FONT FACE="돋움">∘ NegativeArraySizeException</FONT>
<P><FONT FACE="바탕">- 음수로 배열크기를 지정할 때 발생한다.</FONT>
<P>  <FONT FACE="돋움">∘ ArrayIndexOutOfBoundException</FONT>
<P><FONT FACE="바탕">- 배열의 크기를 벗어난 배열의 구성요소를 액세스할 때 발생한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.2.2 throws</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">예외 상황을 다루는 방법으로 try∼catch문 외에 throws이 있다. 예외상황이 여러 개 있을 때는 &quot;,&quot;(comma)로 구분하여 나열한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=612 HEIGHT=65>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">modifier return-type </FONT><I><FONT FACE="Courier New">methodName</FONT></I><FONT FACE="Courier New">() </FONT><B><FONT FACE="Courier New">throws</FONT></B><FONT FACE="Courier New"> </FONT><I><FONT FACE="Courier New">Exception1, Exception2</FONT></I><FONT FACE="Courier New"> ...{</FONT>
<P>	<I><FONT FACE="Courier New">method-body;</FONT></I>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">먼저 다음의 예제를 보자.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=636 HEIGHT=70>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="Courier New">public void exceptionOccur() throws ArrayIndexOutOfBoundsException {</FONT>
<P>	<FONT FACE="Courier New">... // </FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">안에서</FONT><FONT FACE="Courier New"> Exception</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생했다고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">가정</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">exceptionOccur() 메소드 안에서 ArrayIndexOutOfBoundsException이 발생하면, try∼catch문을 처리할 수 있지만 try∼catch문을 사용하지 않고 메소드의 선언부에 throws를 사용해도 처리 가능하다. 이 경우는 exceptionOccur()를 호출한 메소드에게 발생한 예외를 던지는 것이다.</FONT>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 예외상황을 처리하는 방법을 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=519>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ExceptionThrows.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><B><FONT FACE="Courier New">5:</FONT></B>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><B><FONT FACE="Courier New">14:</FONT></B>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ExceptionThrows {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ExceptionThrows et = new ExceptionThrows();</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">et.go();</FONT></B>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">catch (ArrayIndexOutOfBoundsException e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">예외가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">finally {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">항상</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">void go() throws  ArrayIndexOutOfBoundsException {</FONT></B>
<P>		<FONT FACE="Courier New">int i = 0;</FONT>
<P>		<FONT FACE="Courier New">String[] greetings = {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;};</FONT>
<P>		<FONT FACE="Courier New">while (i &lt; 4) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println (greetings[i]);</FONT>
<P>			<FONT FACE="Courier New">i++;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">프로그램을 보면 main() 메소드에서 go() 메소드를 호출했는데 go() 메소드의 18번째 줄에서 예외가 발생한다. 그런데, go() 메소드의 선언부인 14번째 줄에서 throws를 사용하고 있으므로 ArrayIndexOutOf BoundsException이 발생할 경우, 자신을 호출한 메소드에게 이 예외를 던져버려라(throws)라는 의미이다. 따라서 이 경우, go()를 호출한 main() 메소드의 5번째 줄로 예외가 던져지게 된다. main() 메소드의 입장에서는 결국, 5번째 줄에서 예외가 발생한 것이고, 이를 try∼catch를 이용해서 해결할 수 있다. 
</FONT><BR>
<P><FONT FACE="바탕">throws로 선언된 메소드를 재정의 할 때 throws되는 예외가 다르면 예외 수가 더 적어지거나 하위클래스의 예외가 올 경우만 가능하다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.2.3 </FONT><FONT FACE="바탕">사용자</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">정의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">예외</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">앞에서 살펴본 바와 같이 예외는 시스템에서 자동으로 발생시켜주기 때문에 발생된 예외를 try∼catch 혹은 throws를 이용해 처리하면 된다. 반대로 우리가 직접 예외를 만들 수 있고, 이를 원하는 시점에 발생시킬 수도 있다. 이를 보고 사용자 정의 예외(user defined exception)라고 한다.</FONT>
<P><FONT FACE="바탕">먼저 예외를 만드는 것부터 살펴보자. 예외는 클래스이므로 예외를 만든다는 것은 클래스를 만드는 것과 동일하다. 하지만 유의할 점은 반드시 예외 클래스를 상속받아서 만들어야 한다는 점이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 예외 클래스를 직접 만들어 사용하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=258>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ServerTimedOutException.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><B><FONT FACE="Courier New">1:</FONT></B>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ServerTimedOutException </FONT><B><FONT FACE="Courier New">extends Exception</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">private int port;</FONT>
<P>	<FONT FACE="Courier New">public ServerTimedOutException(String reason, int port) {</FONT>
<P>		<FONT FACE="Courier New">super(reason);</FONT>
<P>		<FONT FACE="Courier New">this.port = port;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public int getPort() {</FONT>
<P>		<FONT FACE="Courier New">return port;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">1 : Exception 클래스를 상속받은 후 ServerTimedOutException 클래스를 정의하고, 나머지는 일반적인 클래스선언과 동일하다. 
</FONT><P><FONT FACE="바탕">2 : 멤버 변수를 나타낸다. 
</FONT><P><FONT FACE="바탕">3 : 생성자를 나타낸다.</FONT>
<P><FONT FACE="바탕">7 : 멤버 메소드를 나타낸다.</FONT>
<BR>
<P><FONT FACE="바탕">이처럼 사용자가 직접 선언한 예외 클래스를 가지고 예외를 발생시키려면 다음과 같이 Exception 클래스의 인스턴스를 만든 후, &quot;throw&quot;(throws가 아니라 throw이다.) 키워드를 이용해 던지면 된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=597 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><B><FONT FACE="Courier New">throw </FONT></B><FONT FACE="Courier New">new ServerTimedOutException(&quot;Could not connect&quot;, 80);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">사용자가 자신의 예외를 정의하고 발생시키는 것은 간단하다. 이제 이를 이용한 예제를 보도록 하자.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 사용자가 예외를 정의하고 발생시키는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=126>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestUserException.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestUserException {</FONT>
<P>	<FONT FACE="Courier New">String defaultServer = &quot;my_server&quot;;</FONT>
<P>	<FONT FACE="Courier New">String alternativeServer = &quot;your_server&quot;;</FONT>
<P>	<FONT FACE="Courier New">public void connectMe(String serverName) throws ServerTimedOutException {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=695>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestUserException.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><B><FONT FACE="Courier New">9:</FONT></B>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<BR>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">int success;</FONT>
<P>		<FONT FACE="Courier New">int portToConnect = 80;</FONT>
<P>		<FONT FACE="Courier New">success = open(serverName, portToConnect);</FONT>
<P>		<FONT FACE="Courier New">if (success == -1) {</FONT>
<P>			<B><FONT FACE="Courier New">throw</FONT></B><FONT FACE="Courier New"> new ServerTimedOutException(&quot;Could not connect&quot;, 80);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void findServer() {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">connectMe(defaultServer);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">catch (ServerTimedOutException e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println( &quot;Server timed out, trying alternative...&quot;);</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">connectMe(alternativeServer);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">catch (ServerTimedOutException e1) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println( &quot;Error : &quot; + e1.getMessage() + </FONT>
<P>					<FONT FACE="Courier New">&quot;connecting to port &quot; + e1.getPort());</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public int open (String serverName, int port) {</FONT>
<P>		<FONT FACE="Courier New">return -1;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TestUserException tue = new TestUserException();</FONT>
<P>		<FONT FACE="Courier New">tue.findServer();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞 예제의 시작점은 29번째 줄의 main()이다. 이 예제는 서버에 접속을 시도하다 접속에 문제가 발생하면 이미 정의한 ServerTimedOutException을 발생시킨다. 
</FONT><BR>
<P><FONT FACE="바탕">유의할 부분은 4번째 줄인데 connectMe() 메소드는 7번째 줄의 open() 메소드를 통해 접속을 시도한다. 접속에 실패하여 -1을 반환하면 9번째 줄에서 예외를 만들고 이를 throw한다. 그러면 connectMe()를 호출한 메소드로 가서 16번째 줄의 catch문을 이용 예외상황을 처리하게 된다.</FONT>
<BR>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.2.4 Assertion</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">프로그래머가 자신의 프로그램에 대한 가정을 확신시키는 문장으로 boolean 수식을 가지고 주어진 조건을 만족하지 않으면, 즉 수식의 결과가 false이면 예외를 발생시키는 키워드이다. 이는 프로그래머가 오류에 대해 좀더 자유롭게 프로그램을 작성하도록 해준다. assertion 문장은 assert 키워드를 이용하며 다음과 같은 두 가지 사용법이 있다. 이 기능은 JDK 1.4 버전에서 추가되었다.</FONT>
<BR>
<P><FONT FACE="바탕">다음과 같은 형태에서 </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">1</FONT></SUB></I><FONT FACE="바탕">의 결과는 boolean형이며, </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">1</FONT></SUB></I><FONT FACE="바탕">의 결과 값이 false이면 실행시 메시지가 없는 AssertionError를 발생시킨다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=370 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">assert </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">1</FONT></SUB></I><SUB><FONT FACE="Courier New"> </FONT></SUB><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음과 같은 형태 즉, 두 개의 Expression을 가질 때는 먼저 </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">1</FONT></SUB></I><FONT FACE="바탕">의 결과는 boolean형이어야 하며, </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">1</FONT></SUB></I><FONT FACE="바탕">의 결과 값이 false이면 실행시에 </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">2</FONT></SUB></I><FONT FACE="바탕">의 결과를 메시지로 갖는 AssertionError를 발생시킨다. 여기서 주의해야 할 점은 </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">2</FONT></SUB></I><FONT FACE="바탕">에는 void형 메소드 호출이 올 수 없다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=370 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="Courier New">assert </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">1</FONT></SUB></I><FONT FACE="Courier New"> : </FONT><I><FONT FACE="Courier New">Expression</FONT><SUB><FONT FACE="Courier New">2 </FONT></SUB></I><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.2.4.1 assertion </FONT><FONT FACE="바탕">코드</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">컴파일</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">assert문이 있는 프로그램은 버전이 1.4임을 알려주기 위해 컴파일시 다음과 같이 옵션을 넣어서 컴파일 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">javac</FONT></B><FONT FACE="Courier New"> -source 1.4 </FONT><I><FONT FACE="Courier New">FileName.java</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.2.4.2 assertion </FONT><FONT FACE="바탕">코드</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">실행</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">실행시킬 때 -enableassertions 또는 -ea 옵션을 사용한다. 해제하려면 -disableassertion 또는 -da 옵션을 사용한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> -ea </FONT><I><FONT FACE="Courier New">FileName</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.2.4.3 assertion </FONT><FONT FACE="바탕">코드</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">예</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 assert키워드의 사용법을 익히기 위한 예제이다. 먼저 assert 키워드가 사용되지 않은 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AssertionExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class AssertionExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int i = Integer.parseInt(args[0]);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">넘어온</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New"> : &quot; + doIt(i));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static int doIt(int a) {</FONT>
<P>		<FONT FACE="Courier New">switch(a) {</FONT>
<P>			<FONT FACE="Courier New">case 1:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;1</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 2:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;2</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 3:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;3</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">return a;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 프로그램에서 switch문이 사용되었는데 조건을 만족하는 case문이 없으면 실행되는 문장이 없다. 따라서 프로그램을 작성하면서 처리할 문장이 없음을 간과할 수 있는데, 이럴 경우 해당 메소드가 예외를 발생시키고 프로그램 실행을 멈추게 하려면 다음과 같은 프로그램을 작성한다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 예제에서 조건을 만족하지 않으면 실행되는 문장이 없는 예외상황을 처리하기 위한 기능을 부여한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AssertionExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class AssertionExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int i = Integer.parseInt(args[0]);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">넘어온</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New"> : &quot; + doIt(i));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static int doIt(int a) {</FONT>
<P>		<FONT FACE="Courier New">switch(a) {</FONT>
<P>			<FONT FACE="Courier New">case 1:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;1</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AssertionExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><B><FONT FACE="Courier New">17:</FONT></B>
<P><B><FONT FACE="Courier New">18:</FONT></B>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">case 2:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;2</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 3:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;3</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">default:</FONT>
<P>				<B><FONT FACE="Courier New">assert false : a;</FONT></B>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">return a;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 프로그램에서는 assert문이 사용되었다. 실행할 때 입력 값이 case문의 값과 일치하는 값이 없을 경우에는 실행시의 옵션에 따라 예외를 발생시킬 수도 있고,  그렇지 않을 수도 있다. 이렇게 하면 사용자가 메소드 호출시 예외 상황에 대하여 좀더 자유롭게 프로그램을 작성할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 예제를 컴파일하고 실행한 결과를 나타낸 것이다.</FONT>
<P>
<IMG SRC="FYXIV282.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV283.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">컴파일</FONT></B>	      <B><FONT FACE="Courier New">(javac -source 1.4 AssertExample.java)</FONT></B>
<P>
<IMG SRC="FYXIV284.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT><FONT FACE="Courier New"> 1   (java -ea AssertExample 5)</FONT></B>
<P>		<B><FONT FACE="Courier New">Exception in thread &quot;main&quot; java.lang.AssertionError: 5</FONT></B>
<P>		        <B><FONT FACE="Courier New">at AssertExample.doIt(AssertExample.java:18)</FONT></B>
<P>		        <B><FONT FACE="Courier New">at AssertExample.main(AssertExample.java:4)</FONT></B>
<P>
<IMG SRC="FYXIV285.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT><FONT FACE="Courier New">2    (java AssertExample 5)</FONT></B>
<P>		<B><FONT FACE="바탕">넘어온</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New"> : 5</FONT></B>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 assertion문장을 throw문으로 수정한 예이다. 이렇게 throw문을 이용하면 값이 없을 경우 예외가 발생하여 더 이상 수행되지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AssertionExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class AssertionExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">int i = Integer.parseInt(args[0]);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">넘어온</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New"> : &quot; + doIt(i));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static int doIt(int a) {</FONT>
<P>		<FONT FACE="Courier New">switch(a) {</FONT>
<P>			<FONT FACE="Courier New">case 1:</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">AssertionExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>				<FONT FACE="Courier New">System.out.println(&quot;1</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 2:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;2</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 3:</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;3</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력되었습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">default:</FONT>
<P>		<FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">assert false : a;</FONT>
<P>				<B><FONT FACE="Courier New">throw new AssertionError(a);</FONT></B>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">return a;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV286.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV287.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Exception in thread &quot;main&quot; java.lang.AssertionError: 5</FONT></B>
<P>		        <B><FONT FACE="Courier New">at AssertionExample.doIt(AssertionExample.java:19)</FONT></B>
<P>		        <B><FONT FACE="Courier New">at AssertionExample.main(AssertionExample.java:4)</FONT></B>
<BR>
<P><FONT FACE="바탕">Assertion에 대한 자세한 내용은 썬사의 자바 웹사이트 
</FONT><P><FONT FACE="바탕">http://java.sun.com/j2se/1.4/docs/guide/lang/assert.html을 참고하기 바란다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV288.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">7.3  </FONT><FONT FACE="바탕">쓰레드</FONT><FONT FACE="Bookman Old Style">(Thread)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">쓰레드는 가장작은 실행단위를 말한다. 하나의 프로세스는 여러 개의 쓰레드로 구성되며 운영체제가 멀티 쓰레드를 지원한다. 다수의 쓰레드가 실행될 경우 시분할 방식에 따라 실행되지만 쓰레드에 할당된 CPU 사용시간 간격이 매우 작기 때문에 사용자는 동시에 진행되는 것처럼 느껴진다. 
</FONT><P><FONT FACE="바탕">이 장에서는 용어 정의를 &quot;쓰레드&quot;는 실행환경을 의미하고, &quot;실행환경(execution context)&quot;은 프로그램과 데이터에 가상(Virtual) CPU를 함께 내장하고 있음을 나타내기로 한다. &quot;Thread&quot;는 java.lang. Thread 클래스를 의미한다.</FONT>
<P><FONT FACE="바탕">쓰레드는 플랫폼에 따라 약간씩의 차이가 있기 때문에 프로그래머가 이를 조정해 주어야 하며, 운영체제에 따라서도 처리방식의 차이가 있다. 프로세스는 각각 하나의 CPU 자원을 가지지만, 쓰레드는 하나의 자원을 공유한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.3.1 </FONT><FONT FACE="바탕">쓰레드</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">생성</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">쓰레드를 실행환경이라고 하였는데, 하나의 작업이 수행되기 위해서는 다음 그림에 보는 것처럼 3가지 요소를 필요로 한다. 먼저 수행할 작업을 run() 메소드에 구현해야 하는데 다음 그림의 HelloRunner 클래스가 여기에 해당한다. 그 다음 &quot;Data&quot;부분이 있는데 HelloRunner 클래스의 인스턴스에 해당한다. 마지막으로 &quot;Cpu&quot;에 해당하는 부분으로 HelloRunner 클래스의 인스턴스를 인자로 쓰레드 객체를 만든다. 이처럼 하나의 쓰레드를 만들려면 Runner 클래스, Runner 객체, 그리고 Thread 객체가 필요하다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV289.GIF" BORDER=0 WIDTH=505 HEIGHT=306 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 쓰레드를 이용하여 화면에 숫자를 출력하는 간단한 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloRunner.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class HelloRunner </FONT><B><FONT FACE="Courier New">implements Runnable </FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">int i;</FONT>
<P>	<B><FONT FACE="Courier New">public void run() </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">i = 0;</FONT>
<P>		<FONT FACE="Courier New">while (true) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Hello : &quot; + i++);</FONT>
<P>			<FONT FACE="Courier New">if ( i == 10 ) {</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class HelloRunner </FONT><B><FONT FACE="Courier New">implements Runnable </FONT></B><FONT FACE="Courier New">{</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">1 : Runnable인터페이스를 implements한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">public void run() </FONT></B><FONT FACE="Courier New">{</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE> 
<P><FONT FACE="바탕">실제 쓰레드가 수행할 부분으로 run() 메소드는 abstract 메소드로 Runnable인터페이스를 implements하는 클래스에서는 반드시 run() 메소드를 구현해야 한다. run() 메소드에 인자가 없는 것을 주의 깊게 보길 바란다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestThread {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<B><FONT FACE="Courier New">HelloRunner r = new HelloRunner();</FONT></B>
<P>		<B><FONT FACE="Courier New">Thread t = new Thread(r);</FONT></B>
<P>		<B><FONT FACE="Courier New">t.start();</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">HelloRunner r = new HelloRunner();</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">HelloRunner 클래스의 객체를 생성한다. 8번째 줄에서 Runnable인터페이스를 implements하고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">Thread t = new Thread(r);</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Thread 클래스의 객체를 생성하고 있는데, 생성자의 인자로 3번째 줄에서 생성된 Runnable인터페이스를 implements한 HelloRunner 클래스의 객체를 넘기고 있다. 이제 쓰레드가 생성된다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">t.start();</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">생성된 쓰레드를 실행시킨다. 이처럼 start() 메소드를 호출하면 자동적으로 HelloRunner 클래스의 run() 메소드가 호출된다. 
</FONT><BR>
<P><FONT FACE="바탕">간단하지만 쓰레드의 핵심을 보여주는 좋은 예제이다. 일반적으로 쓰레드를 만드는 방법은 Runnable인터페이스를 구현하여 사용하는 방법과 Thread 클래스를 상속받아 구현하는 방법이 있는데, 앞의 예제와 같이 Runnable인터페이스를 구현하는 방법이 많이 사용된다. 쓰레드 클래스는 java.lang 패키지에 있는 클래스이므로 import문이 필요 없다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 예제가 쓰레드의 특징을 알 수 없는 점을 보완하여 작성한 예이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloRunner2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class HelloRunner2 </FONT><B><FONT FACE="Courier New">implements Runnable </FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">int i;</FONT>
<P>	<B><FONT FACE="Courier New">public void run()</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">i = 0;</FONT>
<P>		<FONT FACE="Courier New">while (true) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">숫자</FONT><FONT FACE="Courier New"> : &quot; + i++);</FONT>
<P>			<FONT FACE="Courier New">if ( i == 10 ) {</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestThreadSleep.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestThreadSleep {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<B><FONT FACE="Courier New">HelloRunner2 r = new HelloRunner2();</FONT></B>
<P>		<B><FONT FACE="Courier New">Thread t = new Thread(r);</FONT></B>
<P>		<B><FONT FACE="Courier New">t.start();</FONT></B>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">Thread.sleep(10);</FONT></B>
<P>		<FONT FACE="Courier New">} catch(InterruptedException e) {</FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<B><FONT FACE="Courier New">System.out.println(&quot;main()</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">끝</FONT><FONT FACE="Courier New">&quot;);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이 예제가 이 전 프로그램과 다른 점은 TestThreadSleep.java 파일의 6라인에서 11라인까지이다. 먼저 7라인을 보면 Thread.sleep() 메소드를 호출하는데 sleep() 메소드는 InterruptedException을 throws하기 때문에 try~catch블록으로 예외처리를 해 주었다. 이 메소드는 1밀리초(1/1000초)동안 쓰레드를 지연시키는데 여기에서는 10/1000 초 동안 정지시켰다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">Thread t = new Thread(r);</FONT></B>
<P>		<B><FONT FACE="Courier New">t.start();</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE> 
<P><FONT FACE="바탕">4 : 새로운 쓰레드가 생성된다. 
</FONT><P><FONT FACE="바탕">5 : t.start()이 생성한 쓰레드의 run() 메소드가 호출되면서 새로운 쓰레드가 실행된다. 이때, t.start()가 run() 메소드를 호출했기 때문에 run() 메소드가 끝날 때까지, t.start()는 대기상태에 있을 것 같지만 쓰레드를 사용하고 있기 때문에, 계속 수행된다. 따라서 t.start()가 run() 메소드를 호출한 다음, t.start() 이후로 계속 실행이 되는 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=88>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">Thread.sleep(10);</FONT></B>
<P>		<FONT FACE="Courier New">} catch(InterruptedException e) {</FONT>
<P>		<FONT FACE="바탕">...</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE> 
<P><FONT FACE="바탕">7라인의 Thread.sleep(10)은 기본 쓰레드의 수행을 잠깐 멈추게 한 다음, 11라인에서 화면에 &quot;main()의 끝&quot;라는 문자열을 출력한다. 이때 새로 생성된 쓰레드도 화면에 무언가를 출력하고, 기본 쓰레드에서도 화면에 무언가를 출력한다. 즉 동시에 두 쓰레드에서 화면에 출력을 하고 있다. 이때 어떤 쓰레드가 먼저 화면에 출력될지는 아무도 모른다. 다만 CPU의 결정에 따른 결과가 출력된다. 실행시키면 &quot;main()의 끝&quot;라는 문자열이 실행될 때마다 다른 위치에 출력된다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 그림은 쓰레드의 기본적인 상태도를 나타낸 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV290.GIF" BORDER=0 WIDTH=575 HEIGHT=152 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">위의 그림을 살펴보면 먼저 하나의 쓰레드가 생성된 후 start() 메소드를 호출하면 곧바로 실행되지 않고 실행 가능한 상태가 된다. 이 상태로 대기하다가 쓰레드 스케줄러에 의해 CPU 시간을 할당받으면 쓰레드가 실행된다. 쓰레드가 할당받은 CPU 시간 내에 일을 끝내면 쓰레드는 종료되고, 끝내지 못하면 대기상태로 돌아가 실행 가능한 상태로 기다리게 된다. 또 쓰레드가 실행도중에 sleep(), join(), yield() 등과 같은 특정한 메소드의 Blocking 이벤트가 발생하면 봉쇄(Blocked)상태가 될 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">앞에서 언급했지만 쓰레드를 생성하는 방법은 두 가지가 있는데 첫 번째 방법은 앞에서 설명한 것과 같이 Runnable 인터페이스를 implements하는 방법이고, 이제 두 번째 방법에 대해 알아보기로 한다. 이 방법은 쓰레드 클래스를 직접 상속받아 구현하는 것이다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 예제를 쓰레드 클래스를 상속받아 구현한 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=190>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyThread </FONT><B><FONT FACE="Courier New">extends Thread</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) throws Exception {</FONT>
<P>		<B><FONT FACE="Courier New">Thread t = new MyThread();</FONT></B>
<P>		<FONT FACE="Courier New">t.start();</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">Thread.sleep(10);</FONT></B>
<P>		<FONT FACE="Courier New">} catch(InterruptedException e) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyThread.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;main()</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">끝</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">int i = 0;</FONT>
<P>		<FONT FACE="Courier New">while (true) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">숫자</FONT><FONT FACE="Courier New"> : &quot; + i++);</FONT>
<P>				<FONT FACE="Courier New">if ( i == 10 ) {</FONT>
<P>					<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이 예제는 앞의 프로그램보다 짧아 졌는데, 앞의 예제가 Runnable 인터페이스를 implements하는 클래스를 만들어 쓰레드화 시켰지만, 이 예제는 Thread 클래스를 상속받아서 쓰레드를 만들었다.</FONT>
<P><FONT FACE="바탕">쓰래드를 생성할 때 어떤 방식을 사용해도 관계없지만 일반적으로 Runnable 인터페이스를 구현하는 첫 번째 방식이 애용된다. 그 이유는 더 객체지향적이고, 단일 상속의 문제를 해결할 수 있으며, 반드시 run() 메소드를 구현해야 하므로 일관성을 갖기 때문이다. 
</FONT><P> 
<P><FONT FACE="바탕">다음 프로그램은 쓰레드를 이용하여 시계를 만드는 예제이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestThreadClock.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestThreadClock {</FONT>
<P>   <FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>      <FONT FACE="Courier New">WorldClock seoul = new WorldClock(&quot;</FONT><FONT FACE="바탕">서울</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>      <FONT FACE="Courier New">WorldClock tokyo = new WorldClock(&quot;</FONT><FONT FACE="바탕">도쿄</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>      <FONT FACE="Courier New">WorldClock la = new WorldClock(&quot;LA&quot;);</FONT>
<P>      <FONT FACE="Courier New">WorldClock newyork = new WorldClock(&quot;</FONT><FONT FACE="바탕">뉴욕</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>      <FONT FACE="Courier New">seoul.start();</FONT>
<P>      <FONT FACE="Courier New">tokyo.start();</FONT>
<P>      <FONT FACE="Courier New">newyork.start();</FONT>
<P>      <FONT FACE="Courier New">la.start();</FONT>
<P>   <FONT FACE="Courier New">} </FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=1027>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WorldClock.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<BR>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<P><FONT FACE="Courier New">import java.lang.Thread;</FONT>
<BR>
<P><FONT FACE="Courier New">class WorldClock extends Thread {</FONT>
<P>	<FONT FACE="Courier New">Calendar calendar;</FONT>
<P>	<FONT FACE="Courier New">String location;</FONT>
<P>	<FONT FACE="Courier New">public WorldClock(String city) {</FONT>
<P>		<FONT FACE="Courier New">this.location = city;</FONT>
<P>   <FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">while (true) {</FONT>
<P>			<FONT FACE="Courier New">this.displayDate( );</FONT>
<P>			<FONT FACE="Courier New">try { </FONT>
<P>				<FONT FACE="Courier New">sleep(1000);</FONT>
<P>			<FONT FACE="Courier New">} catch (InterruptedException e) {</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void displayDate() {</FONT>
<P>		<FONT FACE="Courier New">String[] ids;</FONT>
<P>		<FONT FACE="Courier New">SimpleTimeZone pdt = null;</FONT>
<BR>
<P>		<FONT FACE="Courier New">if (this.location == &quot;</FONT><FONT FACE="바탕">서울</FONT><FONT FACE="Courier New">&quot;) {</FONT>
<P>			<FONT FACE="Courier New">ids = TimeZone.getAvailableIDs(9*60*60*1000);</FONT>
<P>			<FONT FACE="Courier New">if (ids.length == 0) System.exit(0);</FONT>
<P>			<FONT FACE="Courier New">pdt = new SimpleTimeZone(9*60*60*1000, ids[0]);</FONT>
<P>		<FONT FACE="Courier New">} else if (this.location == &quot;</FONT><FONT FACE="바탕">도쿄</FONT><FONT FACE="Courier New">&quot;) {</FONT>
<P>			<FONT FACE="Courier New">ids = TimeZone.getAvailableIDs(9*60*60*1000);</FONT>
<P>			<FONT FACE="Courier New">if (ids.length == 0) System.exit(0);</FONT>
<P>			<FONT FACE="Courier New">pdt = new SimpleTimeZone(9*60*60*1000, ids[0]);</FONT>
<P>		<FONT FACE="Courier New">} else if (this.location == &quot;LA&quot;) {</FONT>
<P>			<FONT FACE="Courier New">ids = TimeZone.getAvailableIDs(-8*60*60*1000);</FONT>
<P>			<FONT FACE="Courier New">if (ids.length == 0) System.exit(0);</FONT>
<P>			<FONT FACE="Courier New">pdt = new SimpleTimeZone(-8*60*60*1000, ids[0]);</FONT>
<P>		<FONT FACE="Courier New">} else if (this.location == &quot;</FONT><FONT FACE="바탕">뉴욕</FONT><FONT FACE="Courier New">&quot;) {</FONT>
<P>			<FONT FACE="Courier New">ids = TimeZone.getAvailableIDs(-5*60*60*1000);</FONT>
<P>			<FONT FACE="Courier New">if (ids.length == 0) System.exit(0);</FONT>
<P>			<FONT FACE="Courier New">pdt = new SimpleTimeZone(-5*60*60*1000, ids[0]);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">calendar = new GregorianCalendar(pdt);</FONT>
<P>		<FONT FACE="Courier New">calendar.setTime(new Date());</FONT>
<P>		<FONT FACE="Courier New">System.out.print(&quot;</FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> &quot; + location + &quot;</FONT><FONT FACE="바탕">시각</FONT><FONT FACE="Courier New"> :&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.print(calendar.get(Calendar.YEAR)+&quot;</FONT><FONT FACE="바탕">년</FONT><FONT FACE="Courier New"> &quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.print((calendar.get(Calendar.MONTH)+1)+&quot;</FONT><FONT FACE="바탕">월</FONT><FONT FACE="Courier New"> &quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.print(calendar.get(Calendar.DATE)+&quot;</FONT><FONT FACE="바탕">일</FONT><FONT FACE="Courier New"> :&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.print(calendar.get(Calendar.HOUR_OF_DAY)+&quot;</FONT><FONT FACE="바탕">시</FONT><FONT FACE="Courier New"> &quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.print(calendar.get(Calendar.MINUTE)+&quot;</FONT><FONT FACE="바탕">분</FONT><FONT FACE="Courier New"> &quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.print(calendar.get(Calendar.SECOND)+&quot;</FONT><FONT FACE="바탕">초</FONT><FONT FACE="Courier New"> &quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot; ZONE_OFFSET: &quot; + (calendar.get(Calendar.ZONE_OFFSET)/(60*60*1000)));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.3.2 </FONT><FONT FACE="바탕">쓰레드</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">메소드</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 구구단의 출력부분을 쓰레드로 만들어 동시에 여러개의 쓰레드가 실행된 후 출력하는 예제이다. 이를 통해 쓰레드 클래스가 제공하는 몇몇 메소드에 대해 언급하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=296>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GuGuRunner.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class GuGuRunner implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">private int dan;</FONT>
<P>	<FONT FACE="Courier New">public GuGuRunner(int init_dan) {</FONT>
<P>		<FONT FACE="Courier New">dan = init_dan;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;10; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(dan + &quot;</FONT><FONT FACE="바탕">단</FONT><FONT FACE="Courier New">: &quot; + dan + &quot;*&quot; + i + &quot;=&quot; + dan*i);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=495>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestGuGuThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestGuGuThread {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Thread t2 = new Thread(new GuGuRunner(2));</FONT>
<P>		<FONT FACE="Courier New">Thread t3 = new Thread(new GuGuRunner(3));</FONT>
<P>		<FONT FACE="Courier New">Thread t4 = new Thread(new GuGuRunner(4));</FONT>
<P>		<FONT FACE="Courier New">Thread t5 = new Thread(new GuGuRunner(5));</FONT>
<P>		<FONT FACE="Courier New">Thread t6 = new Thread(new GuGuRunner(6));</FONT>
<P>		<FONT FACE="Courier New">Thread t7 = new Thread(new GuGuRunner(7));</FONT>
<P>		<FONT FACE="Courier New">Thread t8 = new Thread(new GuGuRunner(8));</FONT>
<P>		<FONT FACE="Courier New">Thread t9 = new Thread(new GuGuRunner(9));</FONT>
<BR>
<P>		<FONT FACE="Courier New">t2.start();</FONT>
<P>		<FONT FACE="Courier New">t3.start();</FONT>
<P>		<FONT FACE="Courier New">t4.start();</FONT>
<P>		<FONT FACE="Courier New">t5.start();</FONT>
<P>		<FONT FACE="Courier New">t6.start();</FONT>
<P>		<FONT FACE="Courier New">t7.start();</FONT>
<P>		<FONT FACE="Courier New">t8.start();</FONT>
<P>		<FONT FACE="Courier New">t9.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램을 실행시키면 쓰레드 t2부터 t9까지 서로 경쟁하며 실행되는 것을 알 수 있다. 한순간에는 하나의 쓰레드만 수행되며 할당된 시간동안 쓰레드가 수행되다가, 다른 쓰레드에게 CPU 사용권한이 넘어간다. 자바에서는 우선순위 값을 각 쓰레드에 배정하고, 우선순위가 높은 쓰레드가 CPU 사용권한을 할당받는 선점형(Preemptive) 방식을 사용한다. 따라서 임의의 쓰레드가 우선순위를 배정 받은 후, 우선순위가 바뀌지 않으면 계속 수행된다. 우선순위 값의 할당은 쓰레드 Scheduler가 담당하게 된다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.3.2.1 getPriority() / setPriority()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 setPriority() 메소드를 이용하여 쓰레드의 우선 순위를 변경하고, getPriority() 메소드를 이용하여 쓰레드의 우선 순위를 알아내는 예제이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=296>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GuGuRunner.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class GuGuRunner implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">private int dan;</FONT>
<P>	<FONT FACE="Courier New">public GuGuRunner(int init_dan) {</FONT>
<P>		<FONT FACE="Courier New">dan = init_dan;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;10; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(dan + &quot;</FONT><FONT FACE="바탕">단</FONT><FONT FACE="Courier New">: &quot; + dan + &quot;*&quot; + i + &quot;=&quot; + dan*i);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=384>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestGuGuThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestGuGuThread {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Thread t2 = new Thread(new GuGuRunner(2));</FONT>
<P>		<FONT FACE="Courier New">Thread t3 = new Thread(new GuGuRunner(3));</FONT>
<P>		<FONT FACE="Courier New">Thread t4 = new Thread(new GuGuRunner(4));</FONT>
<P>		<FONT FACE="Courier New">Thread t5 = new Thread(new GuGuRunner(5));</FONT>
<BR>
<P>		<FONT FACE="Courier New">t2.</FONT><B><FONT FACE="Courier New">setPriority(4)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( t3.</FONT><B><FONT FACE="Courier New">getPriority()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">t2.start();</FONT>
<P>		<FONT FACE="Courier New">t3.start();</FONT>
<P>		<FONT FACE="Courier New">t4.start();</FONT>
<P>		<FONT FACE="Courier New">t5.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.3.2.2 sleep()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 sleep() 메소드를 이용하여 해당하는 쓰레드를 지정한 시간(mille second)동안 정지시키는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=407>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GuGuRunner.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class GuGuRunner implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">private int dan;</FONT>
<P>	<FONT FACE="Courier New">public GuGuRunner(int init_dan) {</FONT>
<P>		<FONT FACE="Courier New">dan = init_dan;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">long sleepTime = (long)(Math.random() * 500);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(dan + &quot;</FONT><FONT FACE="바탕">단이</FONT><FONT FACE="Courier New">&quot; + sleepTime + &quot;</FONT><FONT FACE="바탕">만큼</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">쉼</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">try{</FONT>
<P>			<B><FONT FACE="Courier New">Thread.sleep(sleepTime);</FONT></B>
<P>		<FONT FACE="Courier New">}catch (InterruptedException e){</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;10; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(dan + &quot;</FONT><FONT FACE="바탕">단</FONT><FONT FACE="Courier New">: &quot; + dan + &quot;*&quot; + i + &quot;=&quot; + dan*i);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=358>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestGuGuThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestGuGuThread {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Thread t2 = new Thread(new GuGuRunner(2));</FONT>
<P>		<FONT FACE="Courier New">Thread t3 = new Thread(new GuGuRunner(3));</FONT>
<P>		<FONT FACE="Courier New">Thread t4 = new Thread(new GuGuRunner(4));</FONT>
<P>		<FONT FACE="Courier New">Thread t5 = new Thread(new GuGuRunner(5));</FONT>
<P>		<FONT FACE="Courier New">Thread t6 = new Thread(new GuGuRunner(6));</FONT>
<BR>
<P>		<FONT FACE="Courier New">t2.start();</FONT>
<P>		<FONT FACE="Courier New">t3.start();</FONT>
<P>		<FONT FACE="Courier New">t4.start();</FONT>
<P>		<FONT FACE="Courier New">t5.start();</FONT>
<P>		<FONT FACE="Courier New">t6.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.3.2.3 join()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 join() 메소드에 관한 예제로 join()은 이후에 수행되는 쓰레드가 join이 걸린 쓰레드가 수행된 다음 수행되게 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=274>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GuGuRunner.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class GuGuRunner implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">private int dan;</FONT>
<P>	<FONT FACE="Courier New">public GuGuRunner(int init_dan) {</FONT>
<P>		<FONT FACE="Courier New">dan = init_dan;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;10; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(dan + &quot;</FONT><FONT FACE="바탕">단</FONT><FONT FACE="Courier New">: &quot; + dan + &quot;*&quot; + i + &quot;=&quot; + dan*i);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=556>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestGuGuThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestGuGuThread {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Thread t2 = new Thread(new GuGuRunner(2));</FONT>
<P>		<FONT FACE="Courier New">Thread t3 = new Thread(new GuGuRunner(3));</FONT>
<P>		<FONT FACE="Courier New">Thread t4 = new Thread(new GuGuRunner(4));</FONT>
<P>		<FONT FACE="Courier New">Thread t5 = new Thread(new GuGuRunner(5));</FONT>
<P>		<FONT FACE="Courier New">Thread t6 = new Thread(new GuGuRunner(6));</FONT>
<P>		<FONT FACE="Courier New">t2.setPriority(4);</FONT>
<P>		<FONT FACE="Courier New">t3.setPriority(4);</FONT>
<P>		<FONT FACE="Courier New">t4.setPriority(4);</FONT>
<P>		<FONT FACE="Courier New">t5.setPriority(4);</FONT>
<P>		<FONT FACE="Courier New">t6.setPriority(4);</FONT>
<BR>
<P>		<FONT FACE="Courier New">t2.start();</FONT>
<P>		<FONT FACE="Courier New">t3.start();</FONT>
<P>		<FONT FACE="Courier New">t4.start();</FONT>
<P>		<FONT FACE="Courier New">try{</FONT>
<P>			<B><FONT FACE="Courier New">t4.join();</FONT></B>
<P>		<FONT FACE="Courier New">}catch(InterruptedException e) { </FONT>		
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">t5.start();</FONT>
<P>		<FONT FACE="Courier New">t6.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.3.2.4 yield()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 yield() 메소드에 관한 예제로 yield()는 동일순위의 쓰레드에게 양보하는 기능을 가지고 있다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=362>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GuGuRunner.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class GuGuRunner implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">private int dan;</FONT>
<P>	<FONT FACE="Courier New">public GuGuRunner(int init_dan) {</FONT>
<P>		<FONT FACE="Courier New">dan = init_dan;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">if(dan == 8) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;8</FONT><FONT FACE="바탕">단이</FONT><FONT FACE="Courier New"> 9</FONT><FONT FACE="바탕">단에게</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">양보</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<B><FONT FACE="Courier New">Thread.yield();</FONT></B>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;10; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(dan + &quot;</FONT><FONT FACE="바탕">단</FONT><FONT FACE="Courier New">: &quot; + dan + &quot;*&quot; + i + &quot;=&quot; + dan*i);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=446>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestGuGuThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestGuGuThread {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Thread t6 = new Thread(new GuGuRunner(6));</FONT>
<P>		<FONT FACE="Courier New">Thread t7 = new Thread(new GuGuRunner(7));</FONT>
<P>		<FONT FACE="Courier New">Thread t8 = new Thread(new GuGuRunner(8));</FONT>
<P>		<FONT FACE="Courier New">Thread t9 = new Thread(new GuGuRunner(9));</FONT>
<BR>
<P>		<FONT FACE="Courier New">t6.setPriority(4);</FONT>
<P>		<FONT FACE="Courier New">t7.setPriority(4);</FONT>
<P>		<FONT FACE="Courier New">t8.setPriority(5);</FONT>
<P>		<FONT FACE="Courier New">t9.setPriority(5);</FONT>
<BR>
<P>		<FONT FACE="Courier New">t6.start();</FONT>
<P>		<FONT FACE="Courier New">t7.start();</FONT>
<P>		<FONT FACE="Courier New">t8.start();</FONT>
<P>		<FONT FACE="Courier New">t9.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.3.3 </FONT><FONT FACE="바탕">공유데이터</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">접근</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">현 시점에서 여러 쓰레드 중 어떤 쓰레드가 수행될지 알 수 없고, 선정된 쓰레드가 얼마동안 수행될지 또 이 쓰레드가 끝난 후 다음에 어떤 쓰레드가 수행될지 알 수 가 없다. 따라서 프로그래머가 쓰레드 관리를 할 필요가 있는데 특히 여러 쓰레드가 공유 데이터(Shared Data)에 접근할 때는 더욱 필요하다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.3.3.1 </FONT><FONT FACE="바탕">공유데이터의</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">문제점</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 예제는 반드시 이해해야하므로 충분한 시간을 가지고 공부하기 바란다. 먼저 이해를 돕기 위해 다음의 그림을 보자.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV291.GIF" BORDER=0 WIDTH=466 HEIGHT=304 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 그림에서 오른쪽 공유데이터 클래스를 살펴보면 push()와 pop() 메소드가 있는데, 이 메소드는 스택에 데이터를 넣거(push)나 빼내(pop)는 일을 한다. push() 메소드와 pop() 메소드의 구현은 중요한 부분으로 먼저 push() 메소드부터 살펴보자. 첫 번째 쓰레드(t1)에서 스택에 데이터를 넣기 위해 push() 메소드를 호출한다. 데이터를 받은 push() 메소드는 스택에 데이터를 넣는다(①부분). 그리고 나서 스택 데이터를 가리키는 포인터를 하나 증가시켜야 하는데, 그 전에 시간이 걸리는 작업(longJob())을 수행한다고 가정하면 중요한 문제가 발생할 수 있다. 즉, 첫 번째 쓰레드(t1) 수행 중에 우선 순위가 낮아져 두 번째 쓰레드(t2)로 우선권이 넘어가게 되었다. 즉, 시간이 오래 걸리는 일을 수행하는 도중에(아직 포인터를 증가시키지 않았는데), 우선권이 다른 쓰레드에게 넘어가고 만 것이다. 우선권을 받은 두 번째 쓰레드(t2)는 첫 번째 쓰레드에서 포인터가 증가하지 않았는데도 push() 메소드를 호출하게 되는데, 이때 포인터가 가리키는 곳에 데이터를 넣게 되는 것이다. 따라서 첫 번째 쓰레드가 넣은 데이터에 덮어쓰게 되는 것이다. 이렇게 되면 스택은 손실을 입게된다. 
</FONT><BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 지금까지 설명한 내용을 이해할 수 있도록 작성한 예이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyStack.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyStack {</FONT>
<P>	<FONT FACE="Courier New">int index=0;</FONT>
<P>	<FONT FACE="Courier New">char[] stack = new char[6];</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void push(char c) {</FONT>
<P>		<FONT FACE="Courier New">stack[index] = c;</FONT>
<P>		<FONT FACE="Courier New">longJob();</FONT>
<P>		<FONT FACE="Courier New">index++;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public char pop() {</FONT>
<P>		<FONT FACE="Courier New">index--;</FONT>
<P>		<FONT FACE="Courier New">longJob();</FONT>
<P>		<FONT FACE="Courier New">return stack[index];</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void longJob() {</FONT>
<P>		<FONT FACE="Courier New">for(long i=0; i&lt;5000000L; i++) {}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">StackRunner.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class StackRunner implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">String name;</FONT>
<P>	<FONT FACE="Courier New">MyStack ms;</FONT>
<P>	<FONT FACE="Courier New">StackRunner(String name, MyStack ms) {</FONT>
<P>		<FONT FACE="Courier New">this.name = name;</FONT>
<P>		<FONT FACE="Courier New">this.ms = ms;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">ms.push('A');</FONT>
<P>		<FONT FACE="Courier New">ms.push('B');</FONT>
<P>		<FONT FACE="Courier New">ms.push('C');</FONT>
<P>		<FONT FACE="Courier New">System.out.println(name + ms.pop());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(name + ms.pop());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(name + ms.pop());</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyStack.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestMyStack {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MyStack ms = new MyStack();</FONT>
<P>		<FONT FACE="Courier New">StackRunner r1 = new StackRunner(&quot;1 : &quot;, ms);</FONT>
<P>		<FONT FACE="Courier New">StackRunner r2 = new StackRunner(&quot;2 : &quot;, ms);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Thread t1 = new Thread(r1);</FONT>
<P>		<FONT FACE="Courier New">Thread t2 = new Thread(r2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">t1.start();</FONT>
<P>		<FONT FACE="Courier New">t2.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램을 실행시켰을 때 참고할 사항은 프로그램을 반복 실행시켜도 스택이 손상되지 않는다는 점이다. 따라서, 강조하고 싶은 내용은 스택이 손상될 수 있는 가능성이 있다는 사실이다. 특히 불특정 다수가 사용하는 인터넷 환경에서 공유데이터의 손상은 매우 높은 확률을 갖게되는 것이다. 지금까지의 상황에 대한 결론은 공유 데이터를 가지고 작업하는 쓰레드는 예측할 수 없는 순간에 제어권이 다른 쓰레드로 양도되어 데이터파손이나 손상을 일으킬 수 있음을 명심해야한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">7.3.3.2 </FONT><FONT FACE="바탕">공유데이터</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">문제점의</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">해결</FONT><FONT FACE="HY울릉도M">(synchronized)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이와 같은 공유데이터 문제는 매우 심각하기 때문에 해결방안을 모색해야 하는데 문제의 심각성에 비해 그렇게 어렵지만은 않다. 먼저 첫 번째 쓰레드가 push() 메소드나 pop() 메소드를 호출하여 수행되는 동안 두 번째 쓰레드로 제어권이 넘어가지 않게해야 한다. 또 다른 방법은 제어권이 두 번째 쓰레드로 넘어갔더라도, 첫 번째 쓰레드가 메소드를 완전히 수행하지 않은 상태라면, 제어권을 첫 번째 쓰레드에게 다시 넘겨주면 된다. 자바에서는 두 번째 방법을 사용하는데 이때 사용하는 키워드가 synchronized이다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 예제 프로그램에 synchronized를 추가하여 공유데이터의 손상을 막은 것이다. 프로그램에서 5번째 줄의 push() 메소드와 11번째 줄의 pop() 메소드에서 synchronized를 사용했다. 이 키워드는 두 메소드에서 서로 다르게 사용되었는데, push()에서처럼 사용하는 것을 synchronized method라하고, pop() 메소드에서처럼 사용하는 것을 synchronized block이라고 한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=497>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyStack.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyStack {</FONT>
<P>	<FONT FACE="Courier New">int index=0;</FONT>
<P>	<FONT FACE="Courier New">char[] stack = new char[6];</FONT>
<BR>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">synchronized</FONT></B><FONT FACE="Courier New"> void push(char c) {</FONT>
<P>		<FONT FACE="Courier New">stack[index] = c;</FONT>
<P>		<FONT FACE="Courier New">longJob();</FONT>
<P>		<FONT FACE="Courier New">index++;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public char pop() {</FONT>
<P>		<B><FONT FACE="Courier New">synchronized(this) {</FONT></B>
<P>			<FONT FACE="Courier New">index--;</FONT>
<P>			<FONT FACE="Courier New">longJob();</FONT>
<P>			<FONT FACE="Courier New">return stack[index];</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void longJob() {</FONT>
<P>		<FONT FACE="Courier New">for(long i=0; i&lt;5000000L; i++) {}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">synchronized를 설명하기 전에 Object Lock Flag부터 설명하기로 한다. 생성된 모든 객체는 lock flag를 가지고 있는데 synchronized 메소드나 블록을 수행하려면 자신의 lock flag를 가지고 있어야한다. 다음 그림을 살펴보자.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV292.GIF" BORDER=0 WIDTH=466 HEIGHT=304 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">앞의 그림에서처럼 push() 메소드를 호출하면 자신의 객체에 lock flag가 있는지 확인하고, 있으면 lock flag를 가져간 후에 수행된다. 이렇게 lock flag를 소유한 push() 메소드가 수행되다가 다른 쓰레드에게 제어권이 넘어가면 첫 번째 쓰레드는 대기(block) 상태가 되고, 두 번째 쓰레드가 활동하기 시작한다. 두 번째 쓰레드에서도 push() 메소드를 호출하면 synchronized메소드이므로 lock flag를 가져와야 수행된다. 그런데, lock flag는 이미 첫 번째 쓰레드에서 소유하고 있기 때문에 push() 메소드가 수행될 수가 없고. 두 번째 쓰레드는 대기 상태가 된다. 따라서 제어권은 다시 첫 번째 쓰레드로 넘어오게 되고, 멈춰있던 push() 메소드는 계속 수행하게 된다. push() 메소드가 수행된 후에는 lock flag를 반납하고, 비로소  lock flag가 없어졌기 때문에 대기하고 있던 두 번째 쓰레드가 제어권을 넘겨받아 수행된다. 
</FONT><P><FONT FACE="바탕">부언하면 synchronized 메소드나 블록은 공유데이터를 여러 쓰레드가 사용할 때 손상을 입지 않도록 해준다. 따라서 쓰레드를 이용해 공유데이터를 조작하려면 반드시 synchronized를 사용해야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 기본적인 쓰레드 상태도에 공유데이터 처리 부분을 추가한 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV293.GIF" BORDER=0 WIDTH=647 HEIGHT=310 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 그림을 보면 쓰레드 synchronized 메소드를 수행하면 lock flag를 받을 때까지 Lock pool에서 대기하게 되는 것을 볼 수 있다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.3.4 wait()</FONT><FONT FACE="바탕">와</FONT><FONT FACE="HY부활M"> notify()</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">synchronized로 쓰레드의 기본적인 문제는 처리되었지만 해결해야할 문제가 더 남아있다. 앞에서 설명한 스택 예제 프로그램을 다시한번 살펴보기로 하자. 만약 스택이 비어있는 상태에서 pop() 메소드가 수행된다면 synchronized로도 해결할 수가 없다. 
</FONT><P><FONT FACE="바탕">이 문제를 해결하기 위해 다음과 같은 예를 들어보자. 누군가가 서울역에서 잠실까지 가려고 택시를 탔는데 가는 동안 5분마다 운전기사에게 &quot;여기 잠실이에요?&quot;라고 묻지않고 택시를 타면서 &quot;잠실 갑니다.&quot;라고 말한 후 잠을 자거나 다른 일을 할 것이다. 잠실에 도착하면 기사가 이 사실을 알려준다. 
</FONT><P><FONT FACE="바탕">이 예를 스택에 적용해보자. 어떤 쓰레드가 스택에서 pop을 했는데, 스택이 비어있으면 봉쇄(block)상태가 되고 스택에 데이터가 push될 때까지 기다린다. 이것은 잠실에 도착할 때까지 손님이 잠을 자는 것과 같은 이치이다. 시간이 지난 후 스택에 데이터가 들어오면, 봉쇄(blocked)되었던 쓰레드에게 데이터가 왔음을 알려준다. 이것은 운전기사가 잠자고 있는 손님에게 잠실에 다 왔다는 신호를 보내는 것과 같다. 그러면 대기중인 쓰레드는 스택에서 데이터를 pop할 수 있는 상태가 되는 것이다.</FONT>
<P><FONT FACE="바탕">자바의 쓰레드에서도 지금 설명한 방식이 사용되는데 이 때 사용되는 메소드가 wait() 메소드와 notify() 메소드이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 쓰레드의 상태도에 wait() 메소드와 notify() 메소드를 추가한 결과를 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV294.GIF" BORDER=0 WIDTH=647 HEIGHT=309 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">API문서를 살펴보면 stop(), resume(), suspend() 등의 메소드가 deprecation되어있는 것을 볼 수 있는데, 잠금키를 가지고 있는 상태에서 봉쇄되면 쓰레드가 죽었을 때 데드락(Deaklock)이 발생할 수 있기 때문이다. 따라서 권장할 만한 방법이 아니기 때문에 대신 wait()와 notify()를 사용하는 것이다. 위의 그림에서 wait()와 notify()를 따로 분리한 이유는 봉쇄될 때 잠금키를 반납하고 봉쇄되기 때문이다.</FONT>
<BR>
<P><FONT FACE="바탕">이러한 문제를 생산자와 소비자간의 관계로 예를 들어 설명하기로 한다. 예제를 살펴보기 전에 예제에 대한 전반적인 사항을 설명하기 위해 다음 그림을 보면, 
</FONT><BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV295.GIF" BORDER=0 WIDTH=510 HEIGHT=192 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">생성할 쓰레드의 수는 모두 6개(빵 생산자 3개, 소비자 3개)인데, 각각의 쓰레드가 공유데이터 영역(BakeStack)을 공유하고 있다. 3군데의 빵집에서 빵을 만들어 내놓으며, 3명의 손님이 빵을 가져간다. 만약 빵을 굽기전에 손님이 오면 손님을 기다리게 한다. 빵이 나오면 기다리던 손님에게 알려준다(notify).</FONT>
<P><FONT FACE="바탕">이제 6개의 쓰레드가 서로 경쟁하면서 실행되다가 어느 순간에 임의의 쓰레드가 처리된다. 이러한 사실은 아무도 모르며 다만 공유데이터 영역인 스택을 깨뜨리지 않고, 또 빵이 없어도 나올 때까지 기다렸다가 모든 빵을 소비해야 한다. 
</FONT><P> 
<P><FONT FACE="바탕">먼저 시작 클래스부터 보자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WaitNotifyExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class WaitNotifyExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<B><FONT FACE="Courier New">BakeStack bakeStack = new BakeStack();</FONT></B>
<P>		<B><FONT FACE="Courier New">Baker m1 = new Baker(bakeStack);</FONT></B>
<P>		<B><FONT FACE="Courier New">Thread maker1 = new Thread (m1);</FONT></B>
<P>		<B><FONT FACE="Courier New">maker1.start();</FONT></B>
<P>		<FONT FACE="Courier New">Baker m2 = new Baker(bakeStack);</FONT>
<P>		<FONT FACE="Courier New">Thread maker2 = new Thread (m2);</FONT>
<P>		<FONT FACE="Courier New">maker2.start();</FONT>
<P>		<FONT FACE="Courier New">Baker m3 = new Baker(bakeStack);</FONT>
<P>		<FONT FACE="Courier New">Thread maker3 = new Thread (m3);</FONT>
<P>		<FONT FACE="Courier New">maker3.start();</FONT>
<P> 		<B><FONT FACE="Courier New">Customer c1 = new Customer(bakeStack);</FONT></B>
<P>		<B><FONT FACE="Courier New">Thread customer1 = new Thread (c1);</FONT></B>
<P>		<B><FONT FACE="Courier New">customer1.start();</FONT></B>
<P>		<FONT FACE="Courier New">Customer c2 = new Customer(bakeStack);</FONT>
<P>		<FONT FACE="Courier New">Thread customer2 = new Thread (c2);</FONT>
<P>		<FONT FACE="Courier New">customer2.start();</FONT>
<P>		<FONT FACE="Courier New">Customer c3 = new Customer(bakeStack);</FONT>
<P>		<FONT FACE="Courier New">Thread customer3 = new Thread (c3);</FONT>
<P>		<FONT FACE="Courier New">customer3.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">3 : 공유데이터인 BakeStack 클래스의 객체(instance)를 만든다.</FONT>
<P><FONT FACE="바탕">4 : ∼ 12 : 3개의 Baker 클래스 객체를 만들고 이를 쓰레드화하여 실행시킨다. 
</FONT><P><FONT FACE="바탕">14 : ∼ 22 : 3개의 Customer 클래스 객체를 만들고 이를 쓰레드화하여 실행시킨다. 따라서 모두 6개의 쓰레드가 하나의 공유데이터(BakeStack)를 사용하고 있는 것이다.</FONT>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">이제 공유데이터인 BakeStack을 살펴보자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BakeStack.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.util.Vector;</FONT>
<P><FONT FACE="Courier New">public class BakeStack {</FONT>
<P>	<B><FONT FACE="Courier New">private Vector buff = new Vector(300, 300);</FONT></B>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">synchronized</FONT></B><FONT FACE="Courier New"> String pop() {</FONT>
<P>		<FONT FACE="Courier New">String bread;</FONT>
<P>		<FONT FACE="Courier New">while (</FONT><B><FONT FACE="Courier New">buff.size()</FONT></B><FONT FACE="Courier New"> == 0) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<B><FONT FACE="Courier New">this.wait();</FONT></B>
<P>			<FONT FACE="Courier New">} catch (InterruptedException e) {</FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">bread = (String)</FONT><B><FONT FACE="Courier New">buff.remove(buff.size() - 1);</FONT></B>
<P>		<FONT FACE="Courier New">return bread;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">synchronized</FONT></B><FONT FACE="Courier New"> void push(String bread) {</FONT>
<P>		<B><FONT FACE="Courier New">this.notify();</FONT></B>
<P>		<FONT FACE="Courier New">buff.</FONT><B><FONT FACE="Courier New">addElement(bread);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">3 : 스택을 좀더 쉽게 구현하기 위해 Vector클래스를 사용했다.</FONT>
<P><FONT FACE="바탕">6 : buff.size()가 0 이면 while문을 수행하는데 이는 스택이 비어 있음을 의미이다. while문안에 wait() 메소드가 있는데 누군가 깨워줄 때까지 수행을 멈추겠다는 의미이다. 여기서 synchronized를 사용해서 lock flag를 가져왔으나, wait()이 호출되면 lock flag는 자동 반납된다. 그래야 다른 쓰레드가 pop()를 호출할 수 있기 때문이다. 
</FONT><P><FONT FACE="바탕">13 : 스택이 비어있지 않으면remove() 메소드를 만나 나중에 들어온 빵을 스택에서 꺼내 넘겨준다.</FONT>
<P><FONT FACE="바탕">16 : push() 메소드에서 바로 notify() 메소드를 호출한다. notify() 메소드는 대기중인 쓰레드 중에서 하나를 임의로 선택하여 빵이 도착했다는 신호를 준다. 그러면 신호를 받은 쓰레드는 빵을 가져가데 된다. 이때 유의할 점은 notify() 메소드가 대기중인 쓰레드에게 신호를 보내면 곧바로 대기중인 쓰레드가 동작하지는 않는다. 물론 동작할 수도 있지만, 결정은 쓰레드 Scheduler에게 달려있으므로 push()가 몇 번 더 수행된 후에 대기중인 쓰레드가 수행될 수 도 있다.</FONT>
<P><FONT FACE="바탕">18 : 그 다음 addElement() 메소드가 호출되어 스택에 빵을 가져다 놓는 것이다. 여기서의 의문사항은 addElement()보다 notify()를 먼저 수행한 점이다. 즉, 빵을 가져다 놓기 전에 빵이 왔다는 신호를 한것인데 이는 synchronized와 연관시켜 생각하면 쉽게 알 수 있다.</FONT>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">이제 마지막으로 각각의 쓰레드에 대해서 알아보기로 한다. 먼저 push()를 수행할 Baker 클래스이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=850>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Baker.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Baker implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">private BakeStack bakeStack;</FONT>
<P>	<FONT FACE="Courier New">private int num;</FONT>
<P>	<FONT FACE="Courier New">private static int counter = 1;</FONT>
<P>	<FONT FACE="Courier New">public Baker (BakeStack s) {</FONT>
<P>		<FONT FACE="Courier New">bakeStack = s;</FONT>
<P>		<FONT FACE="Courier New">num = counter++;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">String bread;</FONT>
<P>		<FONT FACE="Courier New">for (int i = 0; i &lt; 10; i++) {</FONT>
<P>			<FONT FACE="Courier New">bread = getBread();</FONT>
<P>			<FONT FACE="Courier New">bakeStack.push(bread);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">빵집</FONT><FONT FACE="Courier New">&quot; + num + &quot; : &quot; + bread);</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">Thread.sleep((int)(Math.random()*300));</FONT>
<P>			<FONT FACE="Courier New">} catch (InterruptedException e) {</FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public String getBread() {</FONT>
<P>		<FONT FACE="Courier New">String bread = null;</FONT>
<P>		<FONT FACE="Courier New">switch ((int)(Math.random() * 3)) {</FONT>
<P>			<FONT FACE="Courier New">case 0 :</FONT>
<P>				<FONT FACE="Courier New">bread = &quot;</FONT><FONT FACE="바탕">생크림</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">케</FONT><FONT FACE="Courier New">랺&quot;;</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 1:</FONT>
<P>				<FONT FACE="Courier New">bread = &quot;</FONT><FONT FACE="바탕">식빵</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>			<FONT FACE="Courier New">case 2:</FONT>
<P>				<FONT FACE="Courier New">bread = &quot;</FONT><FONT FACE="바탕">고로케</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>				<FONT FACE="Courier New">break;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">return bread;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Runnable인터페이스를 implements한 전형적인 쓰레드 클래스이며, 
</FONT><P><FONT FACE="바탕">9 : run() 메소드가 수행된다. 생성자를 통해서 공유데이터인 BakeStack를 참조한다. 
</FONT><P><FONT FACE="바탕">12 : getBread() 메소드를 호출하여 3개의 빵 중 하나를 반환한다. 총 10 개의 빵을 만들어 낸다. 
</FONT><P><FONT FACE="바탕">16 : sleep() 메소드를 이용하여 쓰레드를 잠깐 정지시켰는데 컴퓨터 속도가 너무 빨라 순간적으로 처리되기 때문에 일부러 다른 쓰레드에게 기회를 주기 위해서 잠깐 쉬는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 Customer클래스이다. 이 클래스도 위의 Baker클래스와 거의 유사하다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=463>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Customer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Customer implements Runnable {</FONT>
<P>	<FONT FACE="Courier New">private BakeStack bakeStack;</FONT>
<P>	<FONT FACE="Courier New">private int num;</FONT>
<P>	<FONT FACE="Courier New">private static int counter = 1;</FONT>
<P>	<FONT FACE="Courier New">public Customer (BakeStack s) {</FONT>
<P>		<FONT FACE="Courier New">bakeStack = s;</FONT>
<P>		<FONT FACE="Courier New">num = counter++;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">String bread;</FONT>
<P>		<FONT FACE="Courier New">for (int i = 0; i &lt; 10; i++) {</FONT>
<P>			<B><FONT FACE="Courier New">bread = bakeStack.pop();</FONT></B>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">손님</FONT><FONT FACE="Courier New">&quot; + num + &quot; : &quot; + bread);</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>			   <FONT FACE="Courier New">Thread.sleep((int)(Math.random()*300));</FONT>
<P>			<FONT FACE="Courier New">} catch (InterruptedException e) {</FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 클래스는 공유 스택에서 빵을 10번 가져와 화면에 보여준다. Baker클래스와 같은 내용이므로 설명은 생략한다.</FONT>
<BR>
<P><FONT FACE="바탕">위의 예를 이해하기 위해 모두 4개의 클래스(WaitNotifyExample, BakeStack, Baker, Customer)를 작성하였으며, 실행은 WaitNotifyExample 클래스를 이용한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV296.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">7.4   Collections</FONT></B></SPAN></FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.4.1 Collection</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">객체를 저장할 수 있는 클래스는 모두 Collection계열이다. 이 계열에는 Collection, Set, List 등의 인터페이스가 있으며 이를 구현한 클래스를 이용하면 객체를 저장할 수 있다. 저장된 객체를 Element라 부르며 Set과 List는 각각 Collection인터페이스를 상속받는다.</FONT>
<P><FONT FACE="바탕">Collection 인터페이스는 순서가 없고 중복은 허락하며, Set 인터페이스는 순서도 없고, 중복도 허락하지 않는 구조를 갖는다. List는 Element 사이에 순서가 있으며, 중복도 허락한다.</FONT>
<P><FONT FACE="바탕">이들은 모두 인터페이스이기 때문에 객체를 생성하지 못하며 클래스를 이용하여 객체를 생성한다. Set은 HashSet클래스가 있고, List는 ArrayList와 LinkedList가 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=529 HEIGHT=147>
<TD VALIGN=MIDDLE WIDTH=27%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">인터페이스</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">순서</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">중복</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">구현된 클래스</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=27%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Collection</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=32%>
<BR></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=27%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Set</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">HashSet</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=27%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">List</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=20%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=32%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ArrayList</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">LinkedList</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Collection 인터페이스의 주요 메소드는 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ public boolean add(Object element)</FONT>
<P>  <FONT FACE="돋움">∘ public boolean remove(Object element)</FONT>
<P>  <FONT FACE="돋움">∘ public int size()</FONT>
<P>  <FONT FACE="돋움">∘ public boolean isEmpty()</FONT>
<P>  <FONT FACE="돋움">∘ public boolean contains(Object element)</FONT>
<P>  <FONT FACE="돋움">∘ public Iterator iterator()</FONT>
<BR>
<P><FONT FACE="바탕">List 인터페이스의 주요 메소드는 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ public void add(int index, Object element)</FONT>
<P>  <FONT FACE="돋움">∘ public Object remove(int index)</FONT>
<P>  <FONT FACE="돋움">∘ public Object get(int index)</FONT>
<P>  <FONT FACE="돋움">∘ public void set(int index, Object element)</FONT>
<P>  <FONT FACE="돋움">∘ public int indexOf(Object element)</FONT>
<P>  <FONT FACE="돋움">∘ public ListIterator iterator()</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Set의 사용 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=769>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SetExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class SetExample {</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">boolean b = true;</FONT>
<P>		<FONT FACE="Courier New">Set set = new HashSet();</FONT>
<P>		
<P>		<FONT FACE="Courier New">set.add(&quot;three&quot;);</FONT>
<P>		<FONT FACE="Courier New">b = set.add(&quot;one&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(&quot;two&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(&quot;four&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(&quot;five&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(new Integer(4));</FONT>
<P>		<FONT FACE="Courier New">b = set.add(&quot;five&quot;);</FONT>
<P>		
<P>		<FONT FACE="Courier New">System.out.println(set);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">// Method Test : size()</FONT>
<P>		<FONT FACE="Courier New">System.out.println(set.size());</FONT>
<BR>
<P>		<FONT FACE="Courier New">// Method Test : remove(obj)</FONT>
<P>		<FONT FACE="Courier New">set.remove(&quot;two&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(set);</FONT>
<BR>
<P>		<FONT FACE="Courier New">// Method Test : clear()</FONT>
<P>		<FONT FACE="Courier New">set.clear();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(set);</FONT>
<BR>
<P>		<FONT FACE="Courier New">// Method Test : isEmpty()</FONT>
<P>		<FONT FACE="Courier New">if (set.isEmpty()) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;set is Empty&quot;);</FONT>		
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>	
<P><FONT FACE="Courier New">} </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV297.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV298.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">[three, two, four, one, 4, five]</FONT></B>
<P>		<B><FONT FACE="Courier New">false</FONT></B>
<P>		<B><FONT FACE="Courier New">6</FONT></B>
<P>		<B><FONT FACE="Courier New">[three, four, one, 4, five]</FONT></B>
<P>		<B><FONT FACE="Courier New">[]</FONT></B>
<P>		<B><FONT FACE="Courier New">set is Empty</FONT></B>
<P><FONT FACE="바탕">다음 프로그램은 List의 사용 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=747 HEIGHT=905>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ListExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ListExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">List list=new ArrayList();</FONT>
<P>		
<P>		<FONT FACE="Courier New">list.add(&quot;one&quot;);</FONT>
<P>		<FONT FACE="Courier New">boolean a=list.add(&quot;second&quot;);</FONT>
<P>		<FONT FACE="Courier New">list.add(&quot;3rd&quot;);</FONT>
<P>		<FONT FACE="Courier New">list.add(new Integer(4));</FONT>
<P>		<FONT FACE="Courier New">list.add(new Float(5.0f));</FONT>
<P>		<FONT FACE="Courier New">boolean b=list.add(&quot;second&quot;);</FONT>
<P>		<FONT FACE="Courier New">list.add(new Integer(4));</FONT>
<P>		<FONT FACE="Courier New">list.add(&quot;SECOND&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(b);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(list);</FONT>
<P>        
<P>		<FONT FACE="Courier New">// Method Test : remove()</FONT>
<P>		<FONT FACE="Courier New">list.remove(0);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(list);</FONT>
<BR>
<P>		<FONT FACE="Courier New">// Method Test : get()</FONT>
<P>		<FONT FACE="Courier New">Object o=list.get(1);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(o);</FONT>
<BR>
<P>		<FONT FACE="Courier New">// Method Test : indexOf()</FONT>
<P>		<FONT FACE="Courier New">int i=list.indexOf(&quot;second&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;second = &quot;+i);</FONT>
<BR>
<P>		<FONT FACE="Courier New">// Method Test : clear()</FONT>
<P>		<FONT FACE="Courier New">list.clear();</FONT>
<P>		<FONT FACE="Courier New">if (list.isEmpty())</FONT>		<FONT FACE="Courier New">{</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;list is Empty&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV299.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV300.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">true</FONT></B>
<P>		<B><FONT FACE="Courier New">true</FONT></B>
<P>		<B><FONT FACE="Courier New">[one, second, 3rd, 4, 5.0, second, 4, SECOND]</FONT></B>
<P>		<B><FONT FACE="Courier New">[second, 3rd, 4, 5.0, second, 4, SECOND]</FONT></B>
<P>		<B><FONT FACE="Courier New">3rd</FONT></B>
<P>		<B><FONT FACE="Courier New">second = 0</FONT></B>
<P>		<B><FONT FACE="Courier New">list is Empty</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.4.2 Iterator</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Collection에 저장되어 있는 Element를 검색하는 절차를 Iteration이라 한다.</FONT>
<P><FONT FACE="바탕">Set을 사용했을 때는 Collection인터페이스 내의 Iterator를 사용하며, List를 사용했을 때는 List- Iterator를 사용하여 Element를 앞 또는 뒤의 원하는 방향으로 검색할 수 있다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 Iterator를 사용하여 Set으로부터 데이터를 검색하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IteratorExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class IteratorExample {</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Set set = new HashSet();</FONT>
<P>		<FONT FACE="Courier New">set.add(&quot;three&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(&quot;two&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(&quot;four&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(&quot;five&quot;);</FONT>
<P>		<FONT FACE="Courier New">set.add(new Integer(4));</FONT>
<BR>
<P>		<FONT FACE="Courier New">Iterator it = set.iterator();</FONT>
<P>		<FONT FACE="Courier New">while( it.hasNext() ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(it.next());</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV301.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="FYXIV302.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">three</FONT></B>
<P>		<B><FONT FACE="Courier New">two</FONT></B>
<P>		<B><FONT FACE="Courier New">four</FONT></B>
<P>		<B><FONT FACE="Courier New">4</FONT></B>
<P>		<B><FONT FACE="Courier New">five</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">7.4.3 JDK 1.1</FONT><FONT FACE="바탕">의</FONT><FONT FACE="HY부활M"> Collections 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">다음과 같은 클래스가 있는데, 이들은 Thread-safe(single thread)하기 때문에 사용을 권장하지는 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">Vector : List 인터페이스를 구현.</FONT>
<P><FONT FACE="바탕">Stack : Vector클래스의 하위클래스, push(), pop(), peek() 메소드를 지원.</FONT>
<P><FONT FACE="바탕">Hashtable : Map인터페이스를 구현한 클래스.</FONT>
<P><FONT FACE="바탕">Enumeration : Vector, Stack, Hashtable에서 Element를 검색</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Person객체를 Vector클래스에 저장한 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">VectorExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class VectorExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P>		<FONT FACE="Courier New">Vector v = new Vector();</FONT>
<BR>
<P>		<FONT FACE="Courier New">v.addElement(new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 29));</FONT>
<P>		<FONT FACE="Courier New">v.addElement(new Person(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30));</FONT>
<P>		<FONT FACE="Courier New">v.addElement(new Person(&quot;</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">&quot;, 65));</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(v);</FONT>
<P>		<FONT FACE="Courier New">Person p = (Person)v.elementAt(2);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(p.getName());</FONT>
<P>		<FONT FACE="Courier New">v.remove(1);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(v);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(v.size());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(v);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>		
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String name, int age){</FONT>
<P>		<FONT FACE="Courier New">this.name = name;</FONT>
<P>		<FONT FACE="Courier New">this.age = age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getName(){</FONT>
<P>		<FONT FACE="Courier New">return name;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public int getAge(){</FONT>
<P>		<FONT FACE="Courier New">return age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV303.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV304.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">[Person@ad3ba4, Person@26b249, Person@82f0db]</FONT></B>
<P>		<B><FONT FACE="바탕">박승규</FONT></B>
<P>		<B><FONT FACE="Courier New">[Person@ad3ba4, Person@82f0db]</FONT></B>
<P>		<B><FONT FACE="Courier New">2</FONT></B>
<P>		<B><FONT FACE="Courier New">[Person@ad3ba4, Person@82f0db]</FONT></B>
<BR>
<P>
<IMG SRC="FYXIV305.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV306.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV307.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT>
<IMG SRC="FYXIV308.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[입출력(I/O) 프로그래밍]</FONT></SPAN></FONT>
<BR>
<P>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">일반적으로 입출력은 파일을 읽어오거나 쓰는 작업을 말하는데, 자바에서 입출력은 이와 같은 파일 입출력은 물론이고 인터넷에 있는 URL도 파일처럼 입출력할 수 있는 강력한 API를 제공한다. 그러나 기능이 뛰어난 만큼 다루기 어려운 점도 있다. 따라서 많은 사람들이 입출력 관련 API를 사용할 때 어려움을 겪는 것이 사실이다. 입출력을 이용한 프로그램을 개발할 때, 무엇보다도 API문서를 잘 살펴보는 것이 매우 중요하다.</FONT></SPAN></FONT>
<BR>
<BR>
<P>
<BR>
<P>
<IMG SRC="FYXIV310.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">8.1   </FONT><FONT FACE="바탕">스트림</FONT><FONT FACE="Bookman Old Style">(Streams)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">먼저 입출력을 이해하기 전에 스트림이라는 용어부터 알아보자. 스트림은 source에서, sink로의 데이터 흐름을 말한다. source는 데이터 흐름의 출발점으로 입력 스트림이라고도 하며, sink는 데이터 흐름이 끝나는 지점으로 출력 스트림이라고 한다. 예를 들어 c:\temp\in.txt 파일을 읽어들이는 프로그램을 개발하려면 in.txt 파일이 입력 스트림이 되고, 반대로 out.txt 파일에 무언가를 쓰려고 하면 이 파일이 출력 스트림이 되는 것이다. source와 sink를 합해서 노드라고 하는데, 노드의 종류로는 디스크상의 파일, 메모리, 또는 쓰레드나 프로세스 사이에서 채널역할을 하는 파이프 등이 있다. 이 같은 디스크 파일이나 메모리 영역과 같은 노드에서 읽거나 쓰는 스트림을 노드 스트림(Node Stream)이라 한다. 일단 스트림에서 데이터를 읽으려면 노드 스트림이 필요한데, 노드 스트림을 통해서만 노드로부터 데이터를 읽거나 쓸 수 있기 때문이다.</FONT>
<BR>
<P><FONT FACE="바탕">자바는 입출력을 수행할 때 문자단위 스트림과 바이트단위 스트림 형식을 지원하는데 다음 표와 같이 문자자료의 입출력은 Reader와 Writer에 의해 이루어지고, 바이트자료의 입출력은 InputStream과 OutputStream에 의해 이루어진다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=86>
<TD VALIGN=MIDDLE WIDTH=30%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=34%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Byte Streams</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=34%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Character Streams</FONT></B></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=30%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Source Streams</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=34%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">InputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=34%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Reader</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=30%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Sink Streams</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=34%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">OutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=34%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Writer</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.1.1 </FONT><FONT FACE="바탕">노드스트림</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">앞에서도 잠깐 언급한바와 같이 자바에서는 3가지 종류의 노드(파일, 메모리, 파이프)를 지원하는데 각 노드와 연결될 수 있는 클래스는 다음 표와 같다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=636 HEIGHT=224>
<TD VALIGN=MIDDLE WIDTH=25%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Byte Streams</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Character Streams</FONT></B></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">File</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FileInputStream</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FileOutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FileReader</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FileWriter</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Memory : Array</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ByteArrayInputStream</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ByteArrayOutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">CharArrayReader</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">CharArrayWriter</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Memory : String</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">-</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">StringReader</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">StringWriter</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Pipe</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PipedInputStream</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PipedOutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PipedReader</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PipedWriter</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">입출력 수행을 위해 노드와 연결하려면 앞의 표에있는 클래스의 객체를 생성하면 된다. 그 다음 각 클래스에 정의되어 있는 메소드를 이용하여 원하는 작업을 수행한다. 
</FONT><BR>
<P><FONT FACE="바탕">다음은 노드스트림의 사용 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=660 HEIGHT=48>
<TD VALIGN=TOP WIDTH=2%>
<BR></TD>
<TD VALIGN=TOP WIDTH=97%>
<P><B><FONT FACE="Courier New">FileReader</FONT></B><FONT FACE="Courier New"> input = new FileReader(&quot;c:\in.txt&quot;);</FONT>
<P><FONT FACE="Courier New">input.</FONT><B><FONT FACE="Courier New">read()</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 예를 보면 &quot;c:\in.txt&quot; 파일을 읽기 위해 노드스트림인 FileReader객체를 생성했는데 이 객체를 통해 파일에서 데이터를 읽을 수 있다. 예를 들어 FileReader 클래스에는 read() 메소드가 있는데, 이를 호출하면 한 문자를 읽어올 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 첫 번째 명령행 인자로 입력된 이름의 파일에서 문자를 읽어들여 두 번째 명령행 인자로 입력된 파일에 문자를 쓰는 예제이다. 즉, 파일을 복사하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">NodeStreamExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class NodeStreamExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">FileReader</FONT></B><FONT FACE="Courier New"> input = new FileReader(args[0]);</FONT>
<P>			<B><FONT FACE="Courier New">FileWriter </FONT></B><FONT FACE="Courier New">output = new FileWriter(args[1]);</FONT>
<P>			<FONT FACE="Courier New">char[] buffer = new char[128];</FONT>
<P>			<FONT FACE="Courier New">int charsRead;</FONT>
<P>			<FONT FACE="Courier New">charsRead = input.</FONT><B><FONT FACE="Courier New">read(buffer)</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">NodeStreamExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">while ( charsRead != -1 ) {</FONT>
<P>				<FONT FACE="Courier New">output.</FONT><B><FONT FACE="Courier New">write(buffer, 0, charsRead)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<FONT FACE="Courier New">charsRead = input.read(buffer);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">input.close();</FONT>
<P>			<FONT FACE="Courier New">output.close();</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.1.2 </FONT><FONT FACE="바탕">필터스트림</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">필터스트림(Filter Stream)은 처리스트림(Processing Stream)이라고도 하며 다른 객체를 둘러싸는 역할을 한다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV311.GIF" BORDER=0 WIDTH=548 HEIGHT=106 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">필터스트림들을 사용하는 이유는 노드스트림의 부족한 기능을 보완하여 좀더 정밀한 입출력을 하기 위해서다. 예들 들어 FileReader클래스의 노드스트림은 파일에서 텍스트를 읽어올 때 한 문자씩 읽는 낮은 수준의 메소드(read() 메소드)만 가지고 있는 반면, BufferedReader클래스 등의 필터스트림은 줄 단위로 읽어 String으로 반환하는 고급 메소드(readLine() 메소드)를 포함하고 있기 때문에 좀더 편리하게 입출력 작업을 할 수 있는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 표는 필터스트림 클래스를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=636 HEIGHT=175>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Type</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Byte Streams</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Character Streams</FONT></B></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Buffering</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">BufferedInputStream</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">BufferedOutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">BufferedReader</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">BufferedWriter</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Filtering</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FilterInputStream</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FilterOutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FilterReader</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">FilterWriter</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Converting </FONT></B></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">bytes↔character</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">-</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">InputStreamReader</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">OutputStreamWriter</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=636 HEIGHT=213>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Type</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Byte Streams</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Character Streams</FONT></B></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Object</FONT></B></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Serialization</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ObjectInputStream</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">ObjectOutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">-</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Data conversion</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">DataInputStream</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">DataOutputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">-</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Counting</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">LineNumberInputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">LineNumberReader</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Peeking ahead</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PushbackInputStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PushbackReader</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=25%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><B><FONT FACE="바탕">Printing</FONT></B></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PrintStream</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=37%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">PrintWriter</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> FilterXxx 클래스는 abstract클래스로 사용자가 임의의 필터스트림을 만들 때 사용한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 필터 스트림의 사용 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=660 HEIGHT=70>
<TD VALIGN=TOP WIDTH=2%>
<BR></TD>
<TD VALIGN=TOP WIDTH=97%>
<P><FONT FACE="Courier New">FileReader input = new FileReader(&quot;c:\in.txt&quot;);</FONT>
<P><B><FONT FACE="Courier New">BufferedReader</FONT></B><FONT FACE="Courier New"> bufInput = new BufferedReader(input);</FONT>
<P><FONT FACE="Courier New">bufInput.</FONT><B><FONT FACE="Courier New">readLine()</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 예에서 BufferedReader클래스의 인자로 FileReader클래스의 객체가 사용되었다. 이렇게 Buffered -Reader클래스를 사용하면 readLine() 메소드를 이용하여  데이터를 줄 단위로 읽어들일 수가 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 예제와 같이 파일을 복사하는 프로그램이다. 앞 프로그램과 다른 점은 문자단위로 읽지않고, BufferedStream을 이용하여 줄 단위로 처리한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=447>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FilterStreamExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class FilterStreamExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">FileReader input = new FileReader(args[0]);</FONT>
<P>			<B><FONT FACE="Courier New">BufferedReader</FONT></B><FONT FACE="Courier New"> bufInput = new BufferedReader(input);</FONT>
<P>			<FONT FACE="Courier New">FileWriter output = new FileWriter(args[1]);</FONT>
<P>			<B><FONT FACE="Courier New">BufferedWriter </FONT></B><FONT FACE="Courier New">bufOutput = new BufferedWriter(output);</FONT>
<P>			<FONT FACE="Courier New">String line;</FONT>
<P>			<FONT FACE="Courier New">line = bufInput.</FONT><B><FONT FACE="Courier New">readLine()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>			<FONT FACE="Courier New">while ( line != null ) {</FONT>
<P>				<FONT FACE="Courier New">bufOutput.</FONT><B><FONT FACE="Courier New">write(line, 0, line.length())</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<FONT FACE="Courier New">bufOutput.newLine();</FONT>
<P>				<FONT FACE="Courier New">line = bufInput.readLine();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">bufInput.close();</FONT>
<P>			<FONT FACE="Courier New">bufOutput.close();</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 예제에서는 FileReader와 FileWriter클래스 외에 BufferedReader와 BufferedWriter클래스가 사용되었는데 BufferedReader와 BufferedWriter클래스가 필터스트림이다.</FONT>
<BR>
<P><FONT FACE="바탕">사용자가 원하는 필터스트림 클래스를 만들려면 FilterXxx(예 : FilterReader)형식의 abstract 클래스를 상속받아 구현한다.</FONT>
<P><FONT FACE="바탕">자바에서의 입출력은 노드스트림이나 필터스트림 중에서 상황에 맞는 스트림을 선택하여 사용한다. 특히 자바에서는 다양한 입출력 API를 제공하기 때문에 자주 API 문서를 참고해야 한다. 또, 어떤 클래스가 노드스트림이고 어떤 클래스가 필터스트림인지 암기할 필요는 없고 API문서에서 사용할 클래스 생성자가 노드스트림 역할을 하는지 필터스트림 역할을 하는지를 구별하면 된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 표는 두 생성자의 특징을 요약한 것이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=261>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">생성자 요약 </FONT></SPAN></FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">FileInputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">File</FONT></U></SPAN></FONT><FONT FACE="바탕"> file)</FONT>
<P>          <FONT FACE="바탕">Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system.</FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">FileInputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">FileDescriptor</FONT></U></SPAN></FONT><FONT FACE="바탕"> fdobj)</FONT>
<P>          <FONT FACE="바탕">Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system.</FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">FileInputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">String</FONT></U></SPAN></FONT><FONT FACE="바탕"> name)</FONT>
<P>          <FONT FACE="바탕">Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system.</FONT></TD>
    <td>FileInputStream<FONT FACE="바탕">클래스의 생성자</FONT></CAPTION></td>
<CAPTION ALIGN=BOTTOM>
<P ALIGN=LEFT><FONT FACE="Courier New">
</tr>


</TABLE> 
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=108>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">생성자 요약 </FONT></SPAN></FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">DataInputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> in)</FONT>
<P>          <FONT FACE="바탕">Creates a FilterInputStream and saves its argument, the input stream in, for later use.</FONT></TD>
    <td>DataInputStream<FONT FACE="바탕">클래스의 생성자</FONT></CAPTION></td>
<CAPTION ALIGN=BOTTOM>
<P ALIGN=LEFT><FONT FACE="Courier New">
</tr>


</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 FileInputStrem클래스의 경우 3개의 생성자가 있는데, 첫 번째와 두 번째 생성자에서 파일을 접근할 수 있으므로 노드스트림임을 알 수 있다. 그러나 DataInputStream클래스의 생성자는 필터스트림임을 쉽게 알 수 있다. 생성자의 인자로 노드스트림인 InputStream클래스의 객체가 사용되었는데, 이렇게 필터스트림의 생성인자로 올 수 있는 것은 노드스트림이나 또 다른 필터스트림 만이 가능하고, 파일 같은 스트림은 지정할 수 없다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV312.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">8.2   </FONT><FONT FACE="바탕">스트림</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">클래스의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">개요</FONT></B></SPAN></FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.2.1 </FONT><FONT FACE="바탕">바이트스트림</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">클래스</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 자주 사용되는 바이트스트림을 나타낸 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV313.GIF" BORDER=0 WIDTH=555 HEIGHT=238 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P ALIGN=CENTER>
<IMG SRC="FYXIV314.GIF" BORDER=0 WIDTH=556 HEIGHT=171 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> FileInputStream과 FileOutputStream</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이들 클래스는 노드스트림으로 디스크 파일에 사용된다. 객체를 생성할 때 FileInputStream클래스는 파일이 읽기 가능한 상태여야하며, FileOutputStream클래스는 파일이 없으면 파일을 생성하고, 있으면 겹쳐 Tm게 된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=631 HEIGHT=43>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">FileInputStream infile = new FileInputStream(&quot;in.txt&quot;);</FONT>
<P><FONT FACE="Courier New">FileOutputStream outfile = new FileOutputStream(&quot;out.txt&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> BufferedInputStream과 BufferedOutputStream</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이 클래스는 필터스트림으로 입출력 효율을 증대시켜준다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> DataInputStream과 DataOutputStream</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이 클래스는 필터스트림으로 Primitive 형 데이터를 읽거나 쓸 때 사용한다. 또, 서로 다른 Primitive 형 데이터 처리를 위해 많은 메소드를 가지고 있다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 파일복사 예제를 FileInpuStream과 FileOutPutStream 클래스를 사용하여 작성한 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">CopyFile.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class CopyFile {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String [] args) throws Exception {</FONT>
<P>		<FONT FACE="Courier New">if (args.length &lt; 2) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java CopyFile </FONT><I><FONT FACE="Courier New">file1 file2</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">FileInputStream fis = new </FONT><B><FONT FACE="Courier New">FileInputStream</FONT></B><FONT FACE="Courier New">(args[0]);</FONT>
<P>		<FONT FACE="Courier New">FileOutputStream fos = new </FONT><B><FONT FACE="Courier New">FileOutputStream</FONT></B><FONT FACE="Courier New">(args[1]);</FONT>
<P>		<FONT FACE="Courier New">int readByte = 0;</FONT>
<P>		<FONT FACE="Courier New">while ((readByte = </FONT><B><FONT FACE="Courier New">fis.read()</FONT></B><FONT FACE="Courier New">) != -1) {</FONT>
<P>			<B><FONT FACE="Courier New">fos.write(readByte)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">fis.close();</FONT>
<P>		<FONT FACE="Courier New">fos.close();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(args[0] + &quot; copied to &quot; + args[1]);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT FACE="바탕">이 예제 프로그램은 노드스트림인 FileInputStream과 FileOuputStream만을 사용하고 있는데, read()와 write() 메소드는 1 바이트를 읽고 쓰는 메소드이다. (여기서 read()와 write() 메소드는 int형을 사용하지만 내부적으로는 바이트 단위로 읽고 쓴다.)</FONT>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 DataInputStream클래스를 이용하여 파일에 &quot;이름&quot;, &quot;사번&quot;, &quot;나이&quot;를 읽고 쓰는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=585>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileIOExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class FileIOExample {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String [] args) throws Exception {</FONT>
<P>		<FONT FACE="Courier New">if (args.length &lt; 1 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java FielIOExample </FONT><I><FONT FACE="Courier New">file</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<B><FONT FACE="Courier New">FileOutputStream fos = new FileOutputStream(args[0]);</FONT></B>
<P>		<B><FONT FACE="Courier New">DataOutputStream dos = new DataOutputStream(fos);</FONT></B>
<P>		<FONT FACE="Courier New">dos.</FONT><B><FONT FACE="Courier New">writeUTF(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">dos.writeUTF(&quot;41456&quot;);</FONT>
<P>		<FONT FACE="Courier New">dos.</FONT><B><FONT FACE="Courier New">writeInt(30)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">dos.writeUTF(&quot;</FONT><FONT FACE="바탕">이기동</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">dos.writeUTF(&quot;41457&quot;);</FONT>
<P>		<FONT FACE="Courier New">dos.writeInt(31);</FONT>
<P>		<FONT FACE="Courier New">dos.close();</FONT>
<P>		<B><FONT FACE="Courier New">FileInputStream fis = new FileInputStream(args[0]);</FONT></B>
<P>		<B><FONT FACE="Courier New">DataInputStream dis = new DataInputStream(fis);</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New"> : &quot; + </FONT><B><FONT FACE="Courier New">dis.readUTF()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">사번</FONT><FONT FACE="Courier New"> : &quot; + dis.readUTF());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + </FONT><B><FONT FACE="Courier New">dis.readInt()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New"> : &quot; + dis.readUTF());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">사번</FONT><FONT FACE="Courier New"> : &quot; + dis.readUTF());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + dis.readInt());</FONT>
<P>		<FONT FACE="Courier New">dis.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 예제 프로그램은 DataInputStream클래스와 DataOutputStream클래스의 사용형태를 잘 보여주고 있다. 이처럼 기본자료의 입출력에는 주로 DataInputStream클래스와 DataOutputStream클래스이다.</FONT>
<P><FONT FACE="바탕">앞에서 설명한 InputStream, OutputStream은 바이트 단위로 입출력 동작을 수행하지만 한글의 경우 2바이트이기 때문에 글자가 깨질 위험이 있다. 따라서 이러한 문제점을 없애기 위해 자바에서는 문자나 문자열을 다룰 때, 유니코드(16bit-Unicode)방식을 제공한다. 유니코드를 사용하는 입출력 클래스를 Reader와 Writer라고 부르며, 이렇게 하면 자동으로 바이트가 유니코드화 되므로 한글같은 2 바이트 문자도 깨지지 않는다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.2.2 </FONT><FONT FACE="바탕">문자</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">스트림</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">클래스</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 그림은 자주 사용되는 문자 스트림 클래스를 나타낸 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV315.GIF" BORDER=0 WIDTH=554 HEIGHT=202 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P ALIGN=CENTER>
<IMG SRC="FYXIV316.GIF" BORDER=0 WIDTH=556 HEIGHT=239 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> InputStreamReader와 OutputStreamWriter</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이 클래스는 바이트 스트림과 Character reader/writer 사이의 인터페이스 역할을 한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> FileReader와 FileWriter</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이 클래스는 노드스트림으로 FileInputStream이나 FileOutputStream과 같은 역할을 하는데, 바이트단위가 아닌 유니코드 문자단위로 처리한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> BufferedReader와 BufferedWriter</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이 클래스는 필터스트림으로 입출력 효율을 증대시켜준다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> StringReader와 StringWriter</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이 클래스는 노드스트림으로 문자열객체를 읽고 쓰는데 사용한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> PipedReader와 PipedWriter</FONT></SPAN></FONT>
<P><FONT FACE="바탕">- 이 클래스는 쓰래드 사이의 통신을 위한 연결 통로로 사용된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 키보드에서 문자열을 입력받아 파일에 저장하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">StringInput.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class StringInput {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String [] args) throws Exception {</FONT>
<P>		<FONT FACE="Courier New">if (args.length &lt; 1 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java StringInput </FONT><I><FONT FACE="Courier New">file</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">String inputString;</FONT>
<P>		<FONT FACE="Courier New">InputStreamReader isr = new </FONT><B><FONT FACE="Courier New">InputStreamReader(System.in)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">BufferedReader br = new </FONT><B><FONT FACE="Courier New">BufferedReader(isr)</FONT></B><FONT FACE="Courier New">;</FONT>
<P> 		<FONT FACE="Courier New">FileOutputStream fos = new </FONT><B><FONT FACE="Courier New">FileOutputStream(args[0])</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">OutputStreamWriter osr = new </FONT><B><FONT FACE="Courier New">OutputStreamWriter(fos)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">BufferedWriter bw = 			new </FONT><B><FONT FACE="Courier New">BufferedWriter(osr)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">while((inputString = </FONT><B><FONT FACE="Courier New">br.readLine()</FONT></B><FONT FACE="Courier New">) != null) {</FONT>
<P>			<B><FONT FACE="Courier New">bw.write(inputString + &quot;\n&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">bw.close();</FONT>
<P>		<FONT FACE="Courier New">br.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이 프로그램이 실행될 때 저장할 문장을 입력한 다음 유닉스에서는 Ctrl+D를 누르고 윈도우에서는 Ctrl+Z를 눌러 스트림의 끝을 알려준다.</FONT>
<P><FONT FACE="바탕">9 : InputStreamReader가 사용되었는데, 다음 그림을 통하여 이 클래스의 생성자를 살펴보자.</FONT>
<BR>
<P>  
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=248>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">Constructor Summary</FONT></SPAN></FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStreamReader</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> in)</FONT>
<P>          <FONT FACE="바탕">Create an InputStreamReader that uses the default charset.</FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStreamReader</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> in, </FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">Charset</FONT></U></SPAN></FONT><FONT FACE="바탕"> cs)</FONT>
<P>          <FONT FACE="바탕">Create an InputStreamReader that uses the given charset.</FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStreamReader</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> in, </FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">CharsetDecoder</FONT></U></SPAN></FONT><FONT FACE="바탕"> dec)</FONT>
<P>          <FONT FACE="바탕">Create an InputStreamReader that uses the given charset decoder.</FONT></TD>
    <td></td>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStreamReader</FONT></U></SPAN></FONT><FONT FACE="바탕"> (</FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">InputStream</FONT></U></SPAN></FONT><FONT FACE="바탕"> in, </FONT><FONT COLOR=BLUE><SPAN STYLE="font-size:11pt;"><U><FONT FACE="바탕">String</FONT></U></SPAN></FONT><FONT FACE="바탕"> caarsetName)</FONT>
<P>          <FONT FACE="바탕">Create an InputStreamReader that uses the named charset.</FONT></TD>
    <td>InputStreamReader<FONT FACE="바탕">클래스의 생성자</FONT></CAPTION></td>
<CAPTION ALIGN=BOTTOM>
<P ALIGN=LEFT><FONT FACE="Courier New">
</tr>


</TABLE>
<BR>
<P><FONT FACE="바탕">이 클래스는 필터스트림이다. 따라서 InputStreamReader의 인자로 System.in을 넘겼다. API문서를 살펴보면 System.in이 InputStream임을 알 수 있다.(앞에서 설명했지만, InputStream은 노드스트림이다.)</FONT>
<BR>
<P><FONT FACE="바탕">10 : BufferedReader클래스는 내부적으로 버퍼를 이용해서 입출력의 성능을 극대화시킨다. 
</FONT><P><FONT FACE="바탕">14 : readLine() 메소드는 엔터키를 누르기 전까지 사용자가 입력한 내용을 한꺼번에 읽어오는 메소드인데, 사용자의 입력을 한번에 읽어오고 입출력 성능을 높이기 위해 BufferedReader클래스를 사용한다. 
</FONT><P><FONT FACE="바탕">11 : ∼ 13 : 이 부분은 다음과 같이 표현할 수도 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=660 HEIGHT=48>
<TD VALIGN=TOP WIDTH=2%>
<BR></TD>
<TD VALIGN=TOP WIDTH=97%>
<P><FONT FACE="Courier New">BufferedWriter bw = new </FONT><B><FONT FACE="Courier New">BufferedWriter</FONT></B><FONT FACE="Courier New">(new </FONT>
<P>	<B><FONT FACE="Courier New">OutputStreamWriter</FONT></B><FONT FACE="Courier New">(new </FONT><B><FONT FACE="Courier New">FileOutputStream</FONT></B><FONT FACE="Courier New">(args[0])));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">입력한 문자열을 파일에 저장하기 위해 파일을 open한다. (C언어에서는 open()같은 메소드를 사용해서 입출력 동작을 실행시키지만 자바에서는 필요한 객체를 생성함으로써 입출력 동작이 이루어진다. 
</FONT><P><FONT FACE="바탕">17 : ∼ 18 : close() 메소드는 open된 파일을 닫아준다. (11번째 줄과 12번째 줄에서 생성한 모든 스트림 객체를 close할 필요는 없고, 스트림 객체만 close하면 된다.)</FONT>
<P> 
<P><FONT FACE="바탕">이 외에도 많은 입/출력 API들이 있으나, 사용방법은 위에서 설명한 내용과 크게 다르지 않다. 
</FONT><BR>
<BR>
<P>
<IMG SRC="FYXIV317.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">8.3   </FONT><FONT FACE="바탕">파일과</FONT><FONT FACE="Bookman Old Style"> URL </FONT><FONT FACE="바탕">객체</FONT></B></SPAN></FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.3.1 </FONT><FONT FACE="바탕">파일객체</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이제 구체적으로 지역 pc의 파일을 다루는 법에 대해서 알아보자.</FONT>
<P><FONT FACE="바탕">앞의 예에서는 파일을 지정할 때, 파일이름을 문자열 형태로 주었다. 물론 그런 방법으로 파일을 지정할 수도 있지만, 자바에서 제공하는 File클래스를 이용할 수도 있다.</FONT>
<P><FONT FACE="바탕">파일클래스는 단순하게 파일을 지정하는 목적으로만 사용되는 것은 아니고 매우 다양한 API가 있는데, 이를 이용하면 파일과 관련된 대부분 작업을 수행할 수 있다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 예제는 File객체를 생성하는 방법을 기술한 것이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=660 HEIGHT=97>
<TD VALIGN=TOP WIDTH=2%>
<BR></TD>
<TD VALIGN=TOP WIDTH=97%>
<P><B><FONT FACE="Courier New">File </FONT></B><FONT FACE="Courier New">someFile, someDir, otherFile;</FONT>
<P><FONT FACE="Courier New">someFile = new </FONT><B><FONT FACE="Courier New">File</FONT></B><FONT FACE="Courier New">(&quot;c:\autoexec.bat&quot;);</FONT>
<P><FONT FACE="Courier New">someDir = new </FONT><B><FONT FACE="Courier New">File</FONT></B><FONT FACE="Courier New">(&quot;c:\&quot;);</FONT>
<P><FONT FACE="Courier New">otherFile = new </FONT><B><FONT FACE="Courier New">File</FONT></B><FONT FACE="Courier New">(someDir, &quot;config.sys&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">파일객체가 파일만 가리키는 것은 아니고 위와 같이 디렉토리도 지칭할 수 있음을 기억하기 바란다. 파일클래스에 있는 많은 유용한 API는 API 문서를 통해 직접 찾아보기 바란다.</FONT>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 C드라이브의 루트 디렉토리 내에 있는 파일 및 디렉토리 목록을 보여주는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileList.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class FileList {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">File myFile = new File(&quot;c:/&quot;);</FONT>
<P>		<FONT FACE="Courier New">String[] listing = myFile.list();</FONT>
<BR>
<P>		<FONT FACE="Courier New">for (int i=0; i&lt;listing.length ;i++ ) 		{</FONT>
<P>			<FONT FACE="Courier New">System.out.println(listing[i]);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 파일클래스의 유용한 메소드를 나타낸 것이다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 파일이름과 관련된 메소드</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ String getName() : 파일이름을 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ String getPath() : 파일경로를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ String getAbsolutePath() : 파일의 절대경로를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ String getParent() : 파일이 속한 경로를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ boolean renameTo(File newName) : 파일명을 변경한다. 변경하고자 하는 파일이 이미 존재할 경우나, 접근권한 등의 이유로 파일명이 변경되지 않으면 false를 반환한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 파일정보를 알아내는 메소드</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ long lastModified() : 마지막으로 수정된 날짜를 long형으로 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ long length() : 파일길이를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ boolean delete() : 파일을 삭제한다. 삭제되지 않으면 false를 반환한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 파일을 테스트하는 메소드</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ boolean exist() : 파일의 존재여부를 알아낸다. 파일이 있으면 true, 없으면 false를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ boolean canWrite() : 쓰기 권한을 가졌는지 알아본다. 쓰기 가능하면 true를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ boolean canRead() : 읽을 권한이 있는지를 알아본다.</FONT>
<P> <FONT FACE="돋움">∘ boolean isFile() : 파일인지 알아본다. 파일이면 true를 반환하고, 디렉토리 폴더이면 false를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ boolean isDirectory() : 디렉토리인지 알아본다. 디렉토리이면 true를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ boolean isAbsolute() : 절대경로를 가졌는지 알아본다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 디렉토리 관련 메소드</FONT></SPAN></FONT>
<P> <FONT FACE="돋움">∘ boolean mkdir() : 새로운 디렉토리를 만든다. 디렉토리 생성에 실패하면 false를 반환한다.</FONT>
<P> <FONT FACE="돋움">∘ String[] list() : 디렉토리 내의 파일 또는 디렉토리를 반환한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.3.2 URL </FONT><FONT FACE="바탕">객체</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">파일클래스가 로컬컴퓨터에 있는 파일을 참조한다면 인터넷상에 있는 주소(URL)를 참조할 수 있는 클래스도 있는데 바로 URL 클래스이다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 URL 클래스를 이용하여 인터넷상의 원하는 페이지를 읽어오는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">GetIndexHtml.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">public class GetIndexHtml {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String [] args) throws Exception {</FONT>
<P>		<FONT FACE="Courier New">if (args.length &lt; 2 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java GetIndexHtml </FONT><I><FONT FACE="Courier New">URL file</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">byte [] inputString = new byte[1024];</FONT>
<P>		<B><FONT FACE="Courier New">InputStream is = (new URL(args[0])).openStream();</FONT></B>
<P>		<FONT FACE="Courier New">FileOutputStream fos = new FileOutputStream(args[1]);</FONT>
<P>		<FONT FACE="Courier New">while(is.read(inputString,0,inputString.length) != -1) {</FONT>
<P>			<FONT FACE="Courier New">fos.write(inputString);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">fos.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">10 : URL 클래스의 객체를 생성한다. 생성된 객체의 openStream() 메소드를 호출하면 InputStream객체가 반환된다. 따라서, 인터넷상의 URL을 마치 로컬 컴퓨터의 파일처럼 다룰 수 있다. 
</FONT><BR>
<P><FONT FACE="바탕">앞의 프로그램을 실행시키는 방법은 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=39>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="바탕">&gt; java GetIndexHtml  http://java.sun.com  index.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV318.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">8.4   RandomAccessFile</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">지금까지 살펴본 입출력 클래스는 순차적으로 데이터를 읽어들인다. 즉, 데이터를 읽다가 다시 앞으로 돌아가서 같은 데이터를 읽는 등의 작업을 할 수 없다. 그런데 이러한 방법을 제공하는 입출력 클래스가 바로 RandomAccessFile이다. 사용법은 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=2%>
<BR></TD>
<TD VALIGN=TOP WIDTH=97%>
<P><FONT FACE="Courier New">RandomAccessFile raf = new RandomAccessFile(&quot;c:\config.sys&quot;, &quot;rw&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">생성자의 첫 번째 인자는 열고자하는 파일명이다. 이때 파일이름은 문자열형태로 사용할 수도 있지만, 앞에서 설명한 파일객체 형태로 사용할 수도 있다. 두 번째 인자는 open한 파일을 어떻게 접근할 것인가 하는 접근모드를 나타낸다. &quot;r&quot;과 &quot;rw&quot;를 사용할 수 있으며 &quot;r&quot;은 읽기 전용, &quot;rw&quot;는 읽기와 쓰기가 가능한 형태를 나타낸다. 
</FONT><BR>
<P><FONT FACE="바탕">RandomAccessFile가 제공하는 유용한 메소드는 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=75>
<TD VALIGN=TOP WIDTH=2%>
<BR></TD>
<TD VALIGN=TOP WIDTH=97%>
<P><FONT FACE="Courier New">long getFilePointer()  // </FONT><FONT FACE="바탕">현재의</FONT><FONT FACE="Courier New"> file pointer</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">위치를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">알아냄</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">void seek(long pos)    // </FONT><FONT FACE="바탕">원하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">위치로</FONT><FONT FACE="Courier New"> file pointer</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">움직임</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">long length()          // file</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> size</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">알아냄</FONT><FONT FACE="Courier New">.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 순차파일이 아닌 임의의 파일관리를 위한 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WriteLog.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<P><FONT FACE="Courier New">public class WriteLog {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String [] args) throws Exception {</FONT>
<P>		<B><FONT FACE="Courier New">RandomAccessFile</FONT></B><FONT FACE="Courier New"> raf = 				new </FONT><B><FONT FACE="Courier New">RandomAccessFile(&quot;myLog.log&quot;, &quot;rw&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">raf.</FONT><B><FONT FACE="Courier New">seek</FONT></B><FONT FACE="Courier New">(raf.</FONT><B><FONT FACE="Courier New">length()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">raf.</FONT><B><FONT FACE="Courier New">writeUTF</FONT></B><FONT FACE="Courier New">(new Date().toString());</FONT>
<P>		<FONT FACE="Courier New">raf.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : RandomAccessFile객체를 만든다. 접근 모드는 &quot;rw&quot;이다. 
</FONT><P><FONT FACE="바탕">6 : 파일포인터를 파일의 맨 뒤로 보낸다. 파일이름에서 알 수 있듯이, 이 파일은 로그(log) 파일이다. 즉, 파일의 뒷부분에 데이터가 계속 기록되는 형태이다. 
</FONT><P><FONT FACE="바탕">8 : 현재시간을 알아내서 그 시간을 파일에 저장한다. writeUTF() 메소드는 16 비트 유니코드 문자를 8 비트 문자로 변경하여 저장하는 메소드로, 메모장에서 열면 내용을 알 수 없으나 한글 등의 문서 편집기를 이용하여 한글 완성형으로 열면 그 내용을 확인할 수 있다.</FONT>
<P>
<IMG SRC="FYXIV319.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">8.5   Serialization</FONT></B></SPAN></FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.5.1 Serializable </FONT><FONT FACE="바탕">인터페이스</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이제 파일입출력의 마지막 부분에 대해 설명하기로 한다. 많이 사용되는 Serialization은 생성된 객체가 스트림을 통해 이동하는 것을 말한다. 특히 객체가 스트림을 통해 기억장치에 저장되는 것을 영속성(persistent)이라고 한다. 부언하면 메모리에서 생성된 객체를 파일에 저장하는 것을 영속성(일종의 serialization임)라고 한다. 중요한 점은, 이렇게 Serialization되는 클래스는 Serializable이라는 인터페이스를 반드시 implements해야 하지만 이 인터페이스에는 구현할 메소드가 하나도 없다. 따라서 Serializable을 implements하는 것은, 이 클래스가 Serialization이 가능함을 나타내는 표시일 뿐이다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 Person클래스의 객체를 저장하기 위해 Serializable인터페이스를 구현한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class Person </FONT><B><FONT FACE="Courier New">implements Serializable</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">String name;</FONT>
<P>	<FONT FACE="Courier New">int age;</FONT>
<P>	<FONT FACE="Courier New">String password;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String name, int age, String password) {</FONT>
<P>		<FONT FACE="Courier New">this.name = name;</FONT>
<P>		<FONT FACE="Courier New">this.age = age;</FONT>
<P>		<FONT FACE="Courier New">this.password = password;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">중요한 점은 실제 객체가 Serialization될 때, 데이터부분만 Serialization된다는 것이다. 즉, 앞의 Person클래스 객체를 파일로 저장할 때, 실제로 저장되는 것은 멤버 변수 name, age, password같은 데이터만 저장되고, Person()같은 생성자나 메소드코드는 저장되지 않는다는 점이다.</FONT>
<P><FONT FACE="바탕">좀더 구체적인 예를 통해 Serialization에 대해서 알아보자. 앞에서 언급한 Person클래스의 객체를 파일에 저장하는 예제와 다시 파일로부터 읽는 예제를 살펴보자.</FONT>
<BR>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 SerialExample클래스의 객체를 생성하여 파일에 저장하는 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">WriteMyObject.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class WriteMyObject {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String [] args) throws Exception {</FONT>
<P>		<FONT FACE="Courier New">Person p1 = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 32, &quot;hongkd&quot;);</FONT>
<P>		<FONT FACE="Courier New">Person p2 = new Person(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 54, &quot;lss5402&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">FileOutputStream fos = new FileOutputStream(&quot;myObject.ser&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">ObjectOutputStream oos = new ObjectOutputStream(fos);</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">oos.writeObject(p1)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<B><FONT FACE="Courier New">oos.writeObject(p2)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">oos.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Person p1 = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 32, &quot;hongkd&quot;);</FONT>
<P>		<FONT FACE="Courier New">Person p2 = new Person(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 54, &quot;lss5402&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Person클래스의 객체를 선언하고 생성한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">FileOutputStream fos = new FileOutputStream(&quot;myObject.ser&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">ObjectOutputStream oos = new ObjectOutputStream(fos);</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">8 : 파일에 출력하기 위해 FileOutputStream객체를 생성한다. 
</FONT><P><FONT FACE="바탕">9 : 객체를 저장하기 위해 필터스트림인 ObjectOutputStream객체를 생성한다. 
</FONT><P><FONT FACE="바탕">11 : 객체를 저장할 수 있는 writeObject() 메소드는 필터스트림인 ObjectOutputStream에 있다. 따라서 메소드를 사용하려면 필터스트림을 적용할 수밖에 없다. (입출력 클래스의 적용은 대부분 이런 방법으로 이루어진다.)</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">oos.writeObject(p1);</FONT>
<P>		<FONT FACE="Courier New">oos.writeObject(p2);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">ObjectOutputStream에 Person클래스의 객체인 p1과 p2를 저장한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">oos.close();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">출력 스트림을 닫아준다.</FONT>
<P><FONT FACE="바탕">다음 프로그램은 앞의 WriteMyObject 프로그램을 실행했을 때 나타나는 myObject.ser파일에 저장되어 있는 Person클래스 객체를 읽어들이는 예제이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ReadMyObject.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class ReadMyObject {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String [] args) throws Exception {</FONT>
<P>		<FONT FACE="Courier New">FileInputStream fis = new FileInputStream(&quot;myObject.ser&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">ObjectInputStream ois = new ObjectInputStream(fis);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">Person p1 = (Person)</FONT><B><FONT FACE="Courier New">ois.readObject()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">Person p2 = (Person)</FONT><B><FONT FACE="Courier New">ois.readObject()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(p1.name + &quot;\t&quot; + p1.age + &quot;\t&quot; + p1.password);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(p2.name + &quot;\t&quot; + p2.age + &quot;\t&quot; + p2.password);</FONT>
<BR>
<P>		<FONT FACE="Courier New">ois.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">FileInputStream fis = new FileInputStream(&quot;myObject.ser&quot;)</FONT>
<P>		<B><FONT FACE="Courier New">ObjectInputStream ois = new ObjectInputStream(fis);</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : 파일로부터 읽기 위해 FileInputStream객체를 생성한다. 
</FONT><P><FONT FACE="바탕">6 : 객체를 읽기 위해 필터스트림인 ObjectInputStream객체를 생성하나. 객체를 읽을 수 있는 메소드인 8번째 줄과 9번째 줄의 readObject() 메소드는 필터스트림인 ObjectInputStream에 있다. 따라서 메소드를 사용하려면 필터스트림을 적용해야 한다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Person p1 = (Person)</FONT><B><FONT FACE="Courier New">ois.readObject()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">Person p2 = (Person)</FONT><B><FONT FACE="Courier New">ois.readObject()</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">8 : ∼ 9 : Person 객체에 myObject.ser파일의 객체를 불러들인다. Person형으로 형 변환하고 있는데, 이는 readObject() 메소드의 반환형이 Object형이기 때문에 실제 객체형인 Person형으로 형 변환이 필요한 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">ois.close();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">입력 스트림을 닫아준다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">8.5.2 transient</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 키워드는 Serializable과 함께 알아 두면 유용하다. 3장에서 잠깐 언급했지만 쓰레드 클래스 객체처럼 serialization 되지 않는 객체변수를 포함한 클래스를 serialization시킬 때나 특정변수를 serialization에서 제외시키고자 할 때 사용하는 제한자이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=114>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass implements Serializable {</FONT>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">transient</FONT></B><FONT FACE="Courier New"> Thread myThread;</FONT>
<P>	<FONT FACE="Courier New">private String customerID;</FONT>
<P>	<FONT FACE="Courier New">private int total;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 예에서 쓰레드 객체는 원래 serialization이 불가능하므로 transient키워드로 선언한 것이다. 만일 transient가 빠지면 MyClass 클래스는 serialization 되지 않는다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=114>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass implements Serializable {</FONT>
<P>	<FONT FACE="Courier New">public transient Thread myThread;</FONT>
<P>	<FONT FACE="Courier New">private</FONT><B><FONT FACE="Courier New"> transient </FONT></B><FONT FACE="Courier New">String customerID;</FONT>
<P>	<FONT FACE="Courier New">private int total;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 예에서는 MyClass의 객체를 serialization시킬 때 customerID는 serialization에서 제외한다는 뜻이다. String클래스는 원래 serialization이 가능하므로 transient를 제외시켜도 MyClass는 serialization이 된다.</FONT>
<BR>
<P>
<IMG SRC="FYXIV320.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV321.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV322.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[네트워크 프로그래밍]</FONT></SPAN></FONT>
<P>
<P>
<BR>
<P><FONT FACE="바탕">네트워크에는 소켓(Socket)이 있는데 소켓은 다음 그림에서처럼 어떤 프로그래밍 모델에서 프로세스 사이의 통신 종단점을 가리킨다. 
</FONT><P ALIGN=CENTER>
<IMG SRC="FYXIV324.GIF" BORDER=0 WIDTH=528 HEIGHT=169 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">통신이 이루어지려면 먼저 연결설정을 하고 주소를 지정해야 한다. 연결을 설정하려면 한쪽 컴퓨터(서버)는 연결을 대기하는 프로그램을 실행해야 하고, 다른 쪽 컴퓨터(클라이언트)는 서버로 연결을 시도해야 한다. 이때 클라이언트가 서버에 연결되려면 서버주소와 포트번호를 알아야 한다(포트 : 하나의 서버에서 다른 네트워크 서비스를 제공하기 위해서 사용). 포트번호는 TCP/IP시스템에서는 16비트 크기를 가지며 범위는 0∼65535이지만 1023번 이하의 포트(0∼1023) 번호는 시스템이 미리 지정된 서비스용(http : 80, ftp : 21 등)으로 사용하기 때문에 1023번 이하의 포트번호는 사용하지 않는 것이 좋다.</FONT>
<P><FONT FACE="바탕">통신방법은 여러 가지가 있지만 자바에서는 크게 TCP 통신과 UDP통신으로 나눈다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV325.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.1   TCP </FONT><FONT FACE="바탕">네트워크</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP 통신은 가장 많이 이용하는 통신 방식으로 &quot;양방향의 스트림 통신을 제공하는, 신뢰성 있는 연결 지향형 통신방식&quot;을 말하며, 양방향은 &quot;클라이언트와 서버가 동시에 존재해야만 통신이 이루어짐&quot;을 의미하고, 신뢰성은 &quot;양단에서 데이터를 주고받을 때 데이터의 손실없이 정확히 주고받을 수 있음&quot;을 의미한다. 연결 지향형은 &quot;클라이언트와 서버가 상호 연결되야 비로소 통신이 이루어짐&quot;을 나타내는 말이다. 
</FONT><P><FONT FACE="바탕">TCP 통신을 이해하기 위한 예로, 전화연결이 있다. 누군가에게 전화를 걸려면 상대가 있어야 하고(양방향이 존재), 상대방이 전화를 받아야 말을 한다(연결이 되면 정보교환이 이루어짐). 그리고 상대방의 말을 잘 못 들었을 때, 다시 말하라고 요청하여 정확한 내용을 다시 듣고자 한다. 이런 면에서 TCP 통신은 전화통신과 매우 유사하다.</FONT>
<P><FONT FACE="바탕">TCP/IP 소켓 연결은 java.net 패키지의 클래스를 사용하여 구현한다.</FONT>
<P><FONT FACE="바탕">다음 그림은 서버와 클라이언트에서 어떤 일이 일어나는 지를 보여주는 예이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV326.GIF" BORDER=0 WIDTH=503 HEIGHT=177 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">앞의 그림에서 서버는 java.net 패키지의 ServerSocket클래스를 이용하여 포트 번호를 할당한다. 클라이언트가 소켓객체를 생성하여 연결을 요청하면 서버는 accept() 메소드를 사용하여 소켓을 열어주고, 클라이언트는 서버주소의 포트번호로 연결한다.</FONT>
<P><FONT FACE="바탕">서버와 클라이언트의 프로세스가 정보를 교환할 때 스트림모델을 사용하는데, 이 때 소켓에는 두 개의 스트림 즉, 입력스트림(InputStream)과 출력스트림(OutputStream)이 들어 있다. 임의의 프로세스가 다른 프로세스에게 데이터를 보내려면 소켓과 연관된 출력스트림에 기록하면 된다. 상대측 프로세서가 데이터를 읽을 때도 소켓과 연관된 입력 스트림을 읽기만하면 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.1.1 TCP </FONT><FONT FACE="바탕">서버</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP/IP 서버 응용 프로그램은 ServerSocket과 Socket 네트워크 클래스를 이용한다. ServerSocket클래스는 서버를 설정하는 일을 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 통신에 필요한 서버의 역할을 작성한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SimpleServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class SimpleServer {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<B><FONT FACE="Courier New">ServerSocket serverSocket = null</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">serverSocket = new ServerSocket(5432)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SimpleServer.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">while (true) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">클라이언트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대기중</FONT><FONT FACE="Courier New">...&quot;);</FONT>
<P>				<B><FONT FACE="Courier New">Socket newSocket = serverSocket.accept()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">클라이언트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>				<FONT FACE="Courier New">OutputStream os = </FONT><B><FONT FACE="Courier New">newSocket.getOutputStream()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<FONT FACE="Courier New">DataOutputStream dos = 					new DataOutputStream(os);</FONT>
<P>				<FONT FACE="Courier New">dos.</FONT><B><FONT FACE="Courier New">writeUTF</FONT></B><FONT FACE="Courier New">(&quot;Hello Net World!&quot;);</FONT>
<P>				<B><FONT FACE="Courier New">dos.close()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>				<B><FONT FACE="Courier New">newSocket.close()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : 소켓을 선언한다(ServerSocket). 앞에서 언급했듯이 자바에서 통신을 하려면 소켓을 만들어야 하는데 이런 통식 방식을 소켓통신이라고 한다. 
</FONT><P><FONT FACE="바탕">13 : 소켓을 선언했는데 선언한 소켓의 이름이 다르다. 이렇게 서버에서 다른 두개의 소켓을 선언한 이유를 알아보기 위해 다음 그림을 참고로 설명하기로 한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV327.GIF" BORDER=0 WIDTH=488 HEIGHT=172 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">서버는 동시에 여러 클라이언트를 수용할 수 있어야 한다. 따라서 앞의 그림처럼 여러 클라이언트가 서버에 접속하고 이를 처리할 있도록 ServerSocket를 둔다. 이것은 일종의 Listener역할을 한다.(접수창구정도로 이해하면 된다.) 
</FONT><BR>
<P>  <FONT FACE="바탕">① 부분 : ServerSocket은 클라이언트의 접속을 기다리고 있고 클라이언트는 ServerSocket으로 접속을 시도한다. 
</FONT><P>  <FONT FACE="바탕">② 부분 : ServerSocket과 클라이언트 Socket의 접속이 이루어지면, ServerSocket은 새로운 Socket을 생성해서 클라이언트의 요청을 그쪽으로 돌린다. 그리고 나서 ServerSocket은 다른 클라이언트의 요청을 기다린다. 
</FONT><BR>
<P><FONT FACE="바탕">이러한 방식을 이용하기 때문에 서버에서는 여러 클라이언트의 요청을 처리할 수 있는 것이다. 15번째 줄에서 ServerSocket을 만들고, ServerSocket생성자의 인자는 포트번호를 준다. 즉, &quot;서버가 5432번 포트를 열고 클라이언트의 접속을 기다린다.&quot;</FONT>
<BR>
<P><FONT FACE="바탕">11 : while 문이 무한 반복을 하는데, 이는 서버 프로그램을 계속 수행시키겠다는 의미이고, 
</FONT><P><FONT FACE="바탕">13 : serverSocket.accept()를 호출했는데, 클라이언트가 접속할 때까지 프로그램을 멈추겠다는 의도이다. 이렇게 프로그램을 잠시 멈추는 것을 block 혹은 blocking이라한다. 이때 서버는 클라이언트의 접속을 실제로 기다린다. 클라이언트가 접속하게 되면, 앞의 그림에서 설명한 것처럼 새로운 소켓이 생성되어 newSocket이라는 reference 변수에 저장된다. 
</FONT><P><FONT FACE="바탕">14 : 화면에 누군가가 접속했다는 내용을 출력하고, 
</FONT><P><FONT FACE="바탕">15 : 소켓의 OutputStream을 얻어낸다. 
</FONT><P><FONT FACE="바탕">16 : 필터스트림인 DataOutputStream을 생성하고, 
</FONT><P><FONT FACE="바탕">17 : DataOutpuStream의 writeUTF() 메소드를 호출해 &quot;Hello Net world!&quot;라는 문자열을 저장한다. 
</FONT><BR>
<P><FONT FACE="바탕">이렇게 저장한 문자열은 다음그림의 경로를 따라 클라이언트로 전송된다. 
</FONT><P ALIGN=CENTER>
<IMG SRC="FYXIV328.GIF" BORDER=0 WIDTH=607 HEIGHT=234 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">18 : 서버는 클라이언트가 접속한 소켓을 일방적으로 끊는다.</FONT>
<P> 
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.1.2 TCP </FONT><FONT FACE="바탕">클라이언트</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클라이언트 프로그램은 위의 서버처럼 복잡하지 않다. 그리고 서버에 접속하면 문자열이 전송된다는 사실을 기억하고 프로그래밍 해야 한다. (이를 프로토콜이라고 하며 일종의 서버와 클라이언트간의 통신규약 즉, 약속을 말한다.)</FONT>
<P><FONT FACE="바탕">다음 프로그램은 통신에 필요한 클라이언트의 역할을 작성한 예이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SimpleClient.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">public class SimpleClient {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<B><FONT FACE="Courier New">Socket newSocket = new Socket(&quot;127.0.0.1&quot;, 5432);</FONT></B>
<P>			<FONT FACE="Courier New">InputStream is = </FONT><B><FONT FACE="Courier New">newSocket.getInputStream()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>			<FONT FACE="Courier New">DataInputStream dis = new DataInputStream(is);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(</FONT><B><FONT FACE="Courier New">dis.readUTF()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>			<FONT FACE="Courier New">dis.close();</FONT>
<P>			<B><FONT FACE="Courier New">newSocket.close();</FONT></B>
<P>		<FONT FACE="Courier New">} catch (ConnectException connExc) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">서버연결</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실패</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6 : 클라이언트도 소켓을 생성해야하므로 Socket객체를 만들었다. 이때 생성자의 인자로 서버의 IP 주소와 포트번호를 주고있다. 127.0.0.1은 loopback 주소를 말하는데 자기 컴퓨터의 IP 주소를 가리킬 때 사용한다(이렇게 지정한 이유는 자기 컴퓨터에서 수행되기 때문이다.). 포트번호 5432를 기술한 이유는 서버에서 그 포트를 열어놓았기 때문이다. 만약 다른 포트로 접속하면 접속되지 않는다. 이 부분이 실행되면 바로 서버에 접속된다. 서버에 접속했기 때문에 접속과 동시에 서버는 &quot;Hello Net World&quot; 문자열을 클라이언트 소켓으로 보낸다. 즉, 접속하는 순간 서버는 문자열을 보내고 클라이언트는 이 문자열을 소켓에서 읽기만 하면 된다. 
</FONT><P><FONT FACE="바탕">7 : 소켓에서 InputStream을 얻고, DataInputStream을 통해 문자열을 읽는다.</FONT>
<P><FONT FACE="바탕">9 : readUTF() 메소드를 통해 문자열을 읽어들여 화면에 출력한다.</FONT>
<BR>
<P><FONT FACE="바탕">앞의 예제 프로그램을 실행시키려면 도스상태로 나가서 서버용 프로그램을 실행시킨 다음 도스창을 열어 클라이언트를 실행하면 결과를 볼 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> SimpleServer</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> SimpleClient</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV329.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.2   UDP </FONT><FONT FACE="바탕">네트워크</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP/IP가 연결 중심의 프로토콜이라면 UDP(User Datagram Protocol) 통신방식은 &quot;비 신뢰적, 비 연결지향형 통신&quot;이라고 할 수 있다. TCP 통신과는 달리 우편 엽서와 유사하다. TCP에서는 전화를 사용하는 것처럼 메시지를 순서대로 보내고 받을 수 있지만 UDP는 보낸 순서와 받는 순서가 다를 수 있다. 또 상대방의 주소가 잘못되면 데이터가 잘못 전달되거나 아예 데이터를 읽지 못할 수도 있다.</FONT>
<P><FONT FACE="바탕">UDP는 DatagramSocket과 DatagramPacket이라는 두 개의 클래스를 지원한다. 패킷은 송신자의 정보와 메시지길이, 메시지 등으로 구성되는 독립적인 메시지 단위이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.2.1 DatagramPacket</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">DatagramPacket에는 다음 네 가지의 생성자가 있는데, 2개는 데이터를 수신하는데 사용하고 나머지 2개는 데이터를 보내는데 사용된다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> </FONT></SPAN></FONT><FONT FACE="바탕">DatagramPacket(byte[] buf, int length)</FONT>
<P>   <FONT FACE="바탕">DatagramPacket(byte[] buf, int offset, int length) 
</FONT><P><FONT FACE="바탕">- UDP 패킷을 수신할 수 있도록 바이트 배열을 설정한다. 생성자로 사용되는 바이트 배열은 비워두고, 읽을 바이트의 크기를 설정한다. 이때 배열의 크기보다 작게 지정한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> </FONT></SPAN></FONT><FONT FACE="바탕">DatagramPacket(byte[] buf, int length, InetAddress address, int port) 
</FONT><P>   <FONT FACE="바탕">DatagramPacket(byte[] buf, int offset, int length, InetAddress address, int port)</FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 전송할 수 있도록 UDP 패킷을 설정하는 데 사용된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.2.2 DatagramSocket</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">DatagramSocket은 UDP 패킷을 읽고 쓰는데 사용된다. 이 클래스에는 연결할 포트와 인터넷 주소를 지정하는데 사용하는 세 개의 생성자를 가지고있다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> DatagramSocket() 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 로컬 호스트에서 이용할 수 있는 포트로 연결한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> DatagramSocket(int port) 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 로컬 호스트에서 지정된 포트로 연결한다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> DatagramSocket(int port, InetAddress laddr) 
</FONT></SPAN></FONT><P><FONT FACE="바탕">- 지정된 주소의 지정된 포트 번호로 연결한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 UDP방식을 이용하여 메신저 프로그램을 만든 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=872>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Messenger.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*; </FONT>
<P><FONT FACE="Courier New">import java.awt.event.*; </FONT>
<P><FONT FACE="Courier New">import java.io.*; </FONT>
<P><FONT FACE="Courier New">import java.net.*; 
</FONT><BR>
<P><FONT FACE="Courier New">public class Messenger implements Runnable, ActionListener { 
</FONT><BR>
<P>	<FONT FACE="Courier New">private Frame f; </FONT>
<P>	<FONT FACE="Courier New">private TextArea outputArea;</FONT>
<P>	<FONT FACE="Courier New">private TextField addressField, inputField;</FONT>
<BR>
<P>	<FONT FACE="Courier New">private DatagramSocket server, client; </FONT>
<P>	<FONT FACE="Courier New">private DatagramPacket sinData, soutData; 
</FONT><BR>
<P>	<FONT FACE="Courier New">private byte[] data = new byte[500]; 
</FONT><BR>
<P>	<FONT FACE="Courier New">public Messenger() { </FONT>
<P>		<FONT FACE="Courier New">try { </FONT>
<P>			<FONT FACE="Courier New">server = new DatagramSocket(8000); </FONT>
<P>			<FONT FACE="Courier New">client = new DatagramSocket(7000, InetAddress.getLocalHost());</FONT>
<P>		<FONT FACE="Courier New">}catch(IOException e) { </FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace(); </FONT>
<P>		<FONT FACE="Courier New">} </FONT>
<P>	<FONT FACE="Courier New">} //end of constructor</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) { </FONT>
<P>		<FONT FACE="Courier New">Messenger m = new Messenger(); </FONT>
<P>		<FONT FACE="Courier New">m.go(); </FONT>
<P>		<FONT FACE="Courier New">Thread t = new Thread(m); </FONT>
<P>		<FONT FACE="Courier New">t.start(); </FONT>
<P>	<FONT FACE="Courier New">} //end of main</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void go() { </FONT>
<P>		<FONT FACE="Courier New">try { </FONT>
<P>			<FONT FACE="Courier New">f = new Frame(InetAddress.getLocalHost().getHostAddress()); </FONT>
<P>		<FONT FACE="Courier New">}catch(UnknownHostException e) { </FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1005>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">Messenger.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.addWindowListener(new WindowAdapter() { </FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) { </FONT>
<P>				<FONT FACE="Courier New">System.exit(0); </FONT>
<P>			<FONT FACE="Courier New">} </FONT>
<P>		<FONT FACE="Courier New">}); 
</FONT><BR>
<P>		<FONT FACE="Courier New">outputArea = new TextArea(); </FONT>
<P>		<FONT FACE="Courier New">outputArea.setEditable(false);</FONT>
<BR>
<P>		<FONT FACE="Courier New">addressField = new TextField();</FONT>
<P>		<FONT FACE="Courier New">inputField = new TextField();</FONT>
<BR>
<P>		<FONT FACE="Courier New">inputField.addActionListener(this); 
</FONT><BR>
<P>		<FONT FACE="Courier New">Panel p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">p1.add(new Label(&quot;Address&quot;), BorderLayout.WEST);</FONT>
<P>		<FONT FACE="Courier New">p1.add(addressField, BorderLayout.CENTER);</FONT>
<BR>
<BR>
<BR>
<P>		<FONT FACE="Courier New">Panel p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">p2.add(new Label(&quot;Message&quot;), BorderLayout.WEST);</FONT>
<P>		<FONT FACE="Courier New">p2.add(inputField, BorderLayout.CENTER);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.add(p1, BorderLayout.NORTH);</FONT>
<P>		<FONT FACE="Courier New">f.add(outputArea, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">f.add(p2, BorderLayout.SOUTH);</FONT>
<BR>
<P>		<FONT FACE="Courier New">f.setSize(300,200); </FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true); </FONT>
<P>	<FONT FACE="Courier New">} //end of go</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) { </FONT>
<P>		<FONT FACE="Courier New">String mssg = inputField.getText(); </FONT>
<P>		<FONT FACE="Courier New">String ip = addressField.getText();</FONT>
<BR>
<P>		<FONT FACE="Courier New">outputArea.append(&quot;&gt;&gt; &quot; + mssg+&quot;\n&quot;); 
</FONT><BR>
<P>		<FONT FACE="Courier New">InetAddress inet = null; </FONT>
<P>		<FONT FACE="Courier New">soutData = null; 
</FONT><BR>
<P>		<FONT FACE="Courier New">try { </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=916>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">Messenger.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<BR>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT>
<P><FONT FACE="Courier New">100:</FONT>
<P><FONT FACE="Courier New">101:</FONT>
<P><FONT FACE="Courier New">102:</FONT>
<P><FONT FACE="Courier New">103:</FONT>
<P><FONT FACE="Courier New">104:</FONT>
<P><FONT FACE="Courier New">105:</FONT>
<P><FONT FACE="Courier New">106:</FONT>
<P><FONT FACE="Courier New">107:</FONT>
<P><FONT FACE="Courier New">108:</FONT>
<P><FONT FACE="Courier New">109:</FONT>
<P><FONT FACE="Courier New">110:</FONT>
<P><FONT FACE="Courier New">111:</FONT>
<P><FONT FACE="Courier New">112:</FONT>
<P><FONT FACE="Courier New">113:</FONT>
<P><FONT FACE="Courier New">114:</FONT>
<P><FONT FACE="Courier New">115:</FONT>
<P><FONT FACE="Courier New">116:</FONT>
<P><FONT FACE="Courier New">117:</FONT>
<P><FONT FACE="Courier New">118:</FONT>
<P><FONT FACE="Courier New">119:</FONT>
<P><FONT FACE="Courier New">120:</FONT>
<P><FONT FACE="Courier New">121:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">inet = InetAddress.getByName(ip);</FONT>
<BR>
<P>			<FONT FACE="Courier New">soutData = new DatagramPacket(mssg.getBytes(), mssg.getBytes().length, inet, 8000); 
</FONT><BR>
<P>			<FONT FACE="Courier New">client.send(soutData); </FONT>
<P>		<FONT FACE="Courier New">} catch(Exception ex) { </FONT>
<P>			<FONT FACE="Courier New">ex.printStackTrace(); </FONT>
<P>		<FONT FACE="Courier New">} 
</FONT><BR>
<P>		<FONT FACE="Courier New">inputField.setText(&quot;&quot;); 
</FONT><BR>
<P>		<FONT FACE="Courier New">if(ip==null) { </FONT>
<P>			<FONT FACE="Courier New">try { </FONT>
<P>				<FONT FACE="Courier New">ip = InetAddress.getLocalHost().getHostName(); </FONT>
<P>			<FONT FACE="Courier New">}catch(UnknownHostException ex) { </FONT>
<P>				<FONT FACE="Courier New">ex.printStackTrace(); </FONT>
<P>			<FONT FACE="Courier New">} </FONT>
<P>		<FONT FACE="Courier New">} </FONT>
<P>	<FONT FACE="Courier New">} //end of actionPerformed</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void run() { </FONT>
<P>		<FONT FACE="Courier New">while(true) { </FONT>
<P>			<FONT FACE="Courier New">sinData = new DatagramPacket(data, data.length); 
</FONT><BR>
<P>			<FONT FACE="Courier New">try { </FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;8000</FONT><FONT FACE="바탕">번</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">포트로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대기중</FONT><FONT FACE="Courier New">...&quot;); </FONT>
<P>				<FONT FACE="Courier New">server.receive(sinData); </FONT>
<P>			<FONT FACE="Courier New">}catch(IOException e) { </FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace(); </FONT>
<P>			<FONT FACE="Courier New">} 
</FONT><BR>
<P>			<FONT FACE="Courier New">String addr = sinData.getAddress().getHostName(); </FONT>
<P>			<FONT FACE="Courier New">String rsvData = new String(sinData.getData(), 0, sinData.getLength()); 
</FONT><BR>
<P>			<FONT FACE="Courier New">outputArea.append(&quot;[&quot; + addr + &quot;]&quot; + rsvData + &quot;\n&quot;); </FONT>
<P>		<FONT FACE="Courier New">} //end of while</FONT>
<P>	<FONT FACE="Courier New">} //end of run</FONT>
<BR>
<P><FONT FACE="Courier New">} //end of class</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P>
<IMG SRC="FYXIV330.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.3   TCP </FONT><FONT FACE="바탕">채팅</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">Ⅰ</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">TCP를 이용하여 채팅 프로그램을 만들어 보자. 먼저 채팅 프로그램의 원리를 이해하기 위해 다음의 그림을 설명하기로 한다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV331.GIF" BORDER=0 WIDTH=609 HEIGHT=310 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">약간 복잡한 그림으로 이 내용을 프로그램으로 옮겨도 상당히 복잡하기 때문에 그림을 충분히 이해를 한 후 프로그램을 이해하기 바란다. 
</FONT><BR>
<P><FONT FACE="바탕">Ⱑ부분인 ChatServer는 대화방(chatting room)을 관리할 수 있는 구조다. (물론 이 예제에서는 단순하게 대기실 한군데서 chatting을 하게 했다. 이 코드를 더 발전시키면 방을 만들 수 있다.) RoomManager라는 클래스가 방을 관리하는데 이를 위해 Vector 클래스를 사용하였다. 그 다음 Room이라는 클래스는 대화방에 속해 있는 대화자를 관리하는데, 역시 Vector 클래스를 통해 관리한다.</FONT>
<BR>
<P><FONT FACE="바탕">Ⱓ 부분의 Chatter 클래스는 대화자가 접속하면 인스턴스가 서버에 자동으로 생성되며 접속된 대화자의 모든 정보를 관리한다. Chatter 클래스에는 소켓을 가지고 있는데, 실제 ChatterClient(Ⱒ 부분)의 소켓과 연결되어 있다. ChatterClient가 메시지를 보내면, Chatter 클래스의 소켓에 전달되고, 이를 기다리던 쓰레드(① 부분)는 데이터를 읽어서 대화방에 있는 다른 대화자에게 메시지를 전달하게 되는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">Ⱒ 부분의 ChatClient는 2개의 쓰레드가 있는데, 먼저 ②부분의 쓰레드는 대화자로부터 메시지를 입력받는다. 그런데 키보드에서 입력받고 있는 동안 다른 대화자가 메시지를 보내면 쓰레드를 이용해서 해결해야 한다. 따라서 입력하는 동안 출력을 담당하는 쓰레드(③ 부분)가 소켓을 감시하면 해결할 수 있다. 소켓에 메시지가 도착하면 이를 화면에 출력하는데 이처럼 쓰레드를 이용하지 않으면 글을 쓰면서 글을 읽는 동시작업을 할 수 없다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.3.1 ChatServer.java</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">어려운 코드는 아니지만, 그렇게 쉬운 부분도 아니다. 먼저 ChatServer부터 프로그램을 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import  java.io.*;</FONT>
<P><FONT FACE="Courier New">import  java.net.*;</FONT>
<P><FONT FACE="Courier New">import  java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatServer {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String [] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">if (args.length &lt; 1 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java ChatServer </FONT><I><FONT FACE="Courier New">port#</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		
<P>		<FONT FACE="Courier New">System.out.println(&quot;Chatting Server Starting.&quot;);</FONT>
<P>		<FONT FACE="Courier New">int portNo = Integer.parseInt(args[0]);</FONT>
<BR>
<P>		<FONT FACE="Courier New">ChatManager cm= new ChatManager(portNo);</FONT>
<BR>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 ChatServer프로그램이 전부는 아니고, 이 부분은 서버를 실행시키기 위해 포트번호를 입력받고, 서버의 모든 대화를 담당할 ChatManager 객체를 만든다. 그리고 CharManager의 인자로 서버의 포트번호를 명령행 인자로 받아 넘겨준다.</FONT>
<P><FONT FACE="바탕">이 프로그램은 다음에 있는 부분을 모두 작성해야 실행이 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 채팅서버에 접속하는 사용자용 클래스이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=225>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Chatter {</FONT>
<P>	<FONT FACE="Courier New">private Socket clientSocket;</FONT>
<P>	<FONT FACE="Courier New">private BufferedReader br;</FONT>
<P>	<FONT FACE="Courier New">private PrintWriter pw;</FONT>
<P>	<FONT FACE="Courier New">private ChatRoom chatRoom;</FONT>
<P>	<FONT FACE="Courier New">private String chatterID;</FONT>
<BR>
<P>	<FONT FACE="Courier New">Chatter(ChatRoom chatRoom, </FONT>
<P>		<FONT FACE="Courier New">Socket clientSocket, String chatterID ) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Chatter </FONT><FONT FACE="바탕">생성</FONT><FONT FACE="Courier New"> : &quot; +</FONT>	 <FONT FACE="Courier New">chatterID);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=711>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<BR>
<P><FONT FACE="Courier New">36:</FONT>
<BR>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">this.chatRoom = chatRoom;</FONT>
<P>			<FONT FACE="Courier New">this.clientSocket = clientSocket;</FONT>
<P>			<FONT FACE="Courier New">this.chatterID = chatterID;</FONT>
<P>			<FONT FACE="Courier New">br = new BufferedReader(new</FONT>
<P><FONT FACE="Courier New">InputStreamReader(clientSocket.getInputStream()));</FONT>
<P>			<FONT FACE="Courier New">pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream())));</FONT>
<P>			<FONT FACE="Courier New">(new readSocketThread()).start();</FONT>
<P>		<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void sendMessage(String message) {</FONT>
<P>		<FONT FACE="Courier New">pw.println(message);</FONT>
<P>		<FONT FACE="Courier New">pw.flush();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">class readSocketThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">String inputString = null;</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">while (true) {</FONT>
<P>					<FONT FACE="Courier New">inputString = br.readLine();</FONT>
<P>					<FONT FACE="Courier New">chatRoom.chatEveryChatter(inputString);</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch ( Exception e ) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">21 : Chatter 클래스는 실제 접속한 대화자의 정보를 가지고 있다. 
</FONT><P><FONT FACE="바탕">47 : 쓰레드를 통해 대화자가 서버로 전달하는 메시지를 감시한다. 앞에서 설명한 그림의 ① 부분에 해당된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 대화방에 해당하는 클래스이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatRoom {</FONT>
<P>	<FONT FACE="Courier New">private String roomName;</FONT>
<P>	<FONT FACE="Courier New">private Vector joinChatters = new Vector();</FONT>
<P>	<FONT FACE="Courier New">private Chatter roomMaker;</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=557>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">ChatRoom(String roomName) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">채팅방</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">개설</FONT><FONT FACE="Courier New"> : &quot; + roomName);</FONT>
<P>		<FONT FACE="Courier New">this.roomName = roomName;</FONT>
<P>		<FONT FACE="Courier New">this.roomMaker = null;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public synchronized void joinChatter(Chatter chatter){</FONT>
<P>		<FONT FACE="Courier New">joinChatters.add(chatter);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public synchronized String getName() {</FONT>
<P>		<FONT FACE="Courier New">return roomName;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public synchronized void chatEveryChatter(String message) {</FONT>
<P>		<FONT FACE="Courier New">for ( int i=0 ; i &lt; joinChatters.size() ; i++) {</FONT>
<P>			<FONT FACE="Courier New">((Chatter)joinChatters.get(i)).sendMessage(message);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public int size() {</FONT>
<P>		<FONT FACE="Courier New">return joinChatters.size();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">61 : ChattRoom 클래스는 실제로 하나의 대화방이다. 
</FONT><P><FONT FACE="바탕">80 : chatEveryChatter() 메소드는 방안에 있는 모든 대화자에게 메시지를 보낼 때 사용된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 대화방을 관리하는 클래스이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=313>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT>
<P><FONT FACE="Courier New">100:</FONT>
<P><FONT FACE="Courier New">101:</FONT>
<P><FONT FACE="Courier New">102:</FONT>
<P><FONT FACE="Courier New">103:</FONT>
<P><FONT FACE="Courier New">104:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatRoomManager {</FONT>
<P>	<FONT FACE="Courier New">private Vector chatRooms = new Vector();</FONT>
<P>	
<P>	<FONT FACE="Courier New">ChatRoomManager() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;ChatRoomManager Starting.&quot;);</FONT>
<P>		<FONT FACE="Courier New">chatRooms.add(new ChatRoom(&quot;</FONT><FONT FACE="바탕">대기실</FONT><FONT FACE="Courier New">&quot;));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void makeRoom(String roomName) { }</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void deleteRoom(String roomName) { }</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void enterRoom(String roomName, Socket clientSocket){</FONT>
<P>   <FONT FACE="Courier New">Chatter chatter = null;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=358>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">105:</FONT>
<P><FONT FACE="Courier New">106:</FONT>
<P><FONT FACE="Courier New">107:</FONT>
<P><FONT FACE="Courier New">108:</FONT>
<P><FONT FACE="Courier New">109:</FONT>
<P><FONT FACE="Courier New">110:</FONT>
<P><FONT FACE="Courier New">111:</FONT>
<P><FONT FACE="Courier New">112:</FONT>
<P><FONT FACE="Courier New">113:</FONT>
<P><FONT FACE="Courier New">114:</FONT>
<P><FONT FACE="Courier New">115:</FONT>
<P><FONT FACE="Courier New">116:</FONT>
<P><FONT FACE="Courier New">117:</FONT>
<P><FONT FACE="Courier New">118:</FONT>
<P><FONT FACE="Courier New">119:</FONT>
<P><FONT FACE="Courier New">120:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">ChatRoom tempRoom = null;</FONT>
<P>		<FONT FACE="Courier New">boolean exitFor = false;</FONT>
<P>		<FONT FACE="Courier New">int i;</FONT>
<P>		<FONT FACE="Courier New">for(i=0; (exitFor == false)&amp;&amp;(i &lt; chatRooms.size()); i++ ) {</FONT>
<P>			<FONT FACE="Courier New">tempRoom = (ChatRoom)chatRooms.get(i);</FONT>
<P>			<FONT FACE="Courier New">if (tempRoom.getName().equals(roomName)) {</FONT>
<P>				<FONT FACE="Courier New">chatter = new Chatter(tempRoom, clientSocket, String.valueOf(tempRoom.size() + 1));</FONT>
<P>				<FONT FACE="Courier New">tempRoom.joinChatter(chatter);</FONT>
<P>				<FONT FACE="Courier New">exitFor = true;</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void exitRoom(Chatter chatter) { }</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">91 : ChatRoomManager 클래스는 생성과 동시에 &quot;대기실&quot;을 만든다. 
</FONT><P><FONT FACE="바탕">103 : enterRoom() 메소드를 통해, 현재 존재하는 모든 대화방을 찾아서 해당 대화방을 찾고 그곳에 Chatter를 생성한다. 즉, 이 클래스는 대화방을 관리한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 채팅 서버를 전체적으로 관리하는 클래스이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=446>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">121:</FONT>
<P><FONT FACE="Courier New">122:</FONT>
<P><FONT FACE="Courier New">123:</FONT>
<P><FONT FACE="Courier New">124:</FONT>
<P><FONT FACE="Courier New">125:</FONT>
<P><FONT FACE="Courier New">126:</FONT>
<P><FONT FACE="Courier New">127:</FONT>
<P><FONT FACE="Courier New">128:</FONT>
<P><FONT FACE="Courier New">129:</FONT>
<P><FONT FACE="Courier New">130:</FONT>
<P><FONT FACE="Courier New">131:</FONT>
<P><FONT FACE="Courier New">132:</FONT>
<P><FONT FACE="Courier New">133:</FONT>
<P><FONT FACE="Courier New">134:</FONT>
<P><FONT FACE="Courier New">135:</FONT>
<P><FONT FACE="Courier New">136:</FONT>
<P><FONT FACE="Courier New">137:</FONT>
<P><FONT FACE="Courier New">138:</FONT>
<P><FONT FACE="Courier New">139:</FONT>
<P><FONT FACE="Courier New">140:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatManager {</FONT>
<P>	<FONT FACE="Courier New">private int serverPort;</FONT>
<P>	<FONT FACE="Courier New">private ServerSocket serverSocket;</FONT>
<P>	<FONT FACE="Courier New">private ChatRoomManager chatRoomManager;</FONT>
<P>	
<P>	<FONT FACE="Courier New">ChatManager(int serverPort ) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Chatting Manager Starting&quot;);</FONT>
<P>		
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">this.serverPort = serverPort;</FONT>
<P>			<FONT FACE="Courier New">chatRoomManager = new ChatRoomManager();</FONT>
<P>			<FONT FACE="Courier New">serverSocket = new ServerSocket(serverPort);</FONT>			
<P>			<FONT FACE="Courier New">new listenerThread().start();</FONT>
<P>		<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(e.toString());</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">class listenerThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">private boolean stopListener = false;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=358>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">141:</FONT>
<P><FONT FACE="Courier New">142:</FONT>
<P><FONT FACE="Courier New">143:</FONT>
<P><FONT FACE="Courier New">144:</FONT>
<P><FONT FACE="Courier New">145:</FONT>
<P><FONT FACE="Courier New">146:</FONT>
<P><FONT FACE="Courier New">147:</FONT>
<P><FONT FACE="Courier New">148:</FONT>
<BR>
<P><FONT FACE="Courier New">149:</FONT>
<P><FONT FACE="Courier New">150:</FONT>
<P><FONT FACE="Courier New">151:</FONT>
<P><FONT FACE="Courier New">152:</FONT>
<P><FONT FACE="Courier New">153:</FONT>
<P><FONT FACE="Courier New">154:</FONT>
<P><FONT FACE="Courier New">155:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Socket clientSocket = null;</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">while ( !stopListener ) {</FONT>
<P>					<FONT FACE="Courier New">System.out.println(&quot;Watting Client...&quot;);</FONT>
<P>					<FONT FACE="Courier New">clientSocket = serverSocket.accept();</FONT>
<P>			<FONT FACE="Courier New">chatRoomManager.enterRoom(&quot;</FONT><FONT FACE="바탕">대기실</FONT><FONT FACE="Courier New">&quot;,clientSocket);</FONT>
<P>					<FONT FACE="Courier New">System.out.println(&quot;Connection Established form:&quot; + clientSocket.getInetAddress().getHostAddress());</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch (Exception e ) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">121 : ChatManager 클래스는 131번째 줄에서 ServerSocket 객체를 만든다. 그리고 133번째 줄은 139번째 줄에서 선언된 ListenerThread라는 내부 클래스의 객체를 생성한다. 이 내부 클래스가 쓰레드이다. 따라서 start() 메소드를 통해 이 클래스의 142번째 줄에 있는 run() 메소드를 호출한다. run() 메소드는 루프를 돌면서 클라이언트의 접속을 기다리다 접속이 이루어지면 일반 소켓을 만든 후, &quot;대기실&quot;에 Chatter 클래스의 객체를 생성시키기 위해 ChatRoomManager의 enterRoom() 메소드를 호출한다. 그리고 계속 루프를 돌면서 다른 클라이언트의 접속을 기다리게 된다. 
</FONT><BR>
<P><FONT FACE="바탕">복잡한 내용을 간단하게 설명했는데 이를 근거로 프로그램을 자세히 살펴보면서 직접 이해하기 바란다. 물론 이 프로그램에는 불필요한 부분도 있는데 GUI 버전으로 작성하기 위해 추가된 부분이 있기 때문이다. 따라서 이 코드를 응용해서 GUI 버젼을 만들 수도 있을 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">이 채팅 서버프로그램을 실행하는 방법은 다음과 같다. (여기서 5432는 포트 번호이다.)</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=48>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt;</FONT><B><FONT FACE="Courier New"> java </FONT></B><FONT FACE="Courier New">ChatServer 5432</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">9.3.2 ChatClient.java</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 채팅에 필요한 ChatClient의 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=459>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatClient {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String [] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">if (args.length &lt; 2 ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java ChatClient IP port#&quot;);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">String addr = args[0];</FONT>
<P>		<FONT FACE="Courier New">int portNo = Integer.parseInt(args[1]);</FONT>
<BR>
<P>		<FONT FACE="Courier New">ChatterManager cm = new ChatterManager(addr, portNo);</FONT>
<BR>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">클라이언트 프로그램은 비교적 짧은데 6번째 줄의 main() 메소드에서 ChatterManager의 객체를 생성한다.</FONT>
<P><FONT FACE="바탕">이 프로그램 역시 아래 이어지는 프로그램을 모두 작성해야 실행이 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 ChatterManager클래스로 이 클래스가 대부분의 클라이언트 채팅을 담당한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=409>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<BR>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class ChatterManager {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private String serverIP;</FONT>
<P>	<FONT FACE="Courier New">private int serverPort;</FONT>
<P>	<FONT FACE="Courier New">private Socket clientSocket;</FONT>
<P>	<FONT FACE="Courier New">private BufferedReader br;</FONT>
<P>	<FONT FACE="Courier New">private PrintWriter pw;</FONT>
<P>	<FONT FACE="Courier New">private BufferedReader keyboard;</FONT>
<BR>
<P>	<FONT FACE="Courier New">ChatterManager(String serverIP, int serverPort) {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<BR>
<P>			<FONT FACE="Courier New">this.serverIP = serverIP;</FONT>
<P>			<FONT FACE="Courier New">this.serverPort = serverPort;</FONT>
<P>			<FONT FACE="Courier New">clientSocket = new Socket(serverIP, serverPort);</FONT>
<BR>
<P>			<FONT FACE="Courier New">br = new BufferedReader( new InputStreamReader( </FONT>
<P> <FONT FACE="Courier New">clientSocket.getInputStream()));</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=303>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">39:</FONT>
<BR>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<BR>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">pw = new PrintWriter(new BufferedWriter( new OutputStreamWriter(clientSocket.getOutputStream())));</FONT>
<BR>
<P>			<FONT FACE="Courier New">keyboard = new BufferedReader(new InputStreamReader(System.in, &quot;KSC5601&quot;));</FONT>
<BR>
<P>			<FONT FACE="Courier New">(new readSocketThread()).start();</FONT>
<P>			<FONT FACE="Courier New">(new writeSocketThread()).start();</FONT>
<BR>
<P>		<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">30 : 생성자를 보면, 첫 번째 인자에 서버의 IP 주소가 넘어오고, 두 번째 인자에 서버의 포트번호가 넘어온다. 
</FONT><P><FONT FACE="바탕">34 : 30번째 줄의 내용을 근거로 서버에 접속을 시도한다.</FONT>
<P><FONT FACE="바탕">서버와의 접속이 이루어지면 42번째 줄과 44번째 줄에서는 51과 63번째 줄에 있는 내부 클래스의 객체를 쓰레드로 생성한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=558>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">class readSocketThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">while(true) {</FONT>
<P>					<FONT FACE="Courier New">System.out.println(br.readLine());</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch (Exception e) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">class writeSocketThread extends Thread {</FONT>
<P>		<FONT FACE="Courier New">String inputString = null;</FONT>
<P>		<FONT FACE="Courier New">public void run() {</FONT>
<P>			<FONT FACE="Courier New">try{</FONT>
<P>				<FONT FACE="Courier New">while ((inputString = keyboard.readLine()) != null){</FONT>
<P>					<FONT FACE="Courier New">pw.println(inputString);</FONT>
<P>					<FONT FACE="Courier New">pw.flush();</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">} catch (Exception e ) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(e.toString()); </FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">51 : 쓰레드는 대화자가 키보드에 입력하는 문자열을 받아들인다. 
</FONT><P><FONT FACE="바탕">63 : 쓰레드는 대화자가 키보드를 통해 입력하는 동안이라도 소켓에 메시지가 도착하면 이를 화면에 출력하는 역할을 한다.</FONT>
<BR>
<P><FONT FACE="바탕">이상의 클라이언트 프로그램을 실행시키는 방법은 다음과 같다. (여기서 서버의 IP를 127.0.0.1로 준 이유는 서버를 자신의 컴퓨터에서 수행한 경우이다.)</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=48>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> ChatClient 127.0.0.1 5432</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV332.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.4   TCP </FONT><FONT FACE="바탕">채팅</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">Ⅱ</FONT><FONT FACE="Bookman Old Style"> 
</FONT></B></SPAN></FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 데이터를 이용한 채팅 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=587>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<P><FONT FACE="Courier New">public class ChatServer {</FONT>
<P>	<FONT FACE="Courier New">Vector buffer;</FONT>
<P>	<FONT FACE="Courier New">ServerSocket serverSocket;</FONT>
<P>	<FONT FACE="Courier New">Socket socket;</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ObjectOutputStream oos;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void service() {</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">준비중</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">serverSocket = new ServerSocket(5555);</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">서비스도중</FONT><FONT FACE="Courier New"> IOException 	</FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">while(true) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">socket = serverSocket.accept();</FONT>
<P>				<FONT FACE="Courier New">System.out.println(socket.getInetAddress()+&quot;</FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>				<FONT FACE="Courier New">ois = new ObjectInputStream(socket.getInputStream());</FONT>
<P>				<FONT FACE="Courier New">oos = new ObjectOutputStream(socket.getOutputStream());</FONT>
<P>				<FONT FACE="Courier New">Thread t = new Thread(new ChatServerThread(buffer,ois,oos));</FONT>
<P>				<FONT FACE="Courier New">t.start();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServer.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;IOException </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Start Server Service...&quot;);</FONT>
<P>		<FONT FACE="Courier New">ChatServer cs = new ChatServer();</FONT>
<P>		<FONT FACE="Courier New">cs.buffer = new Vector(5,1);</FONT>
<P>		<FONT FACE="Courier New">cs.service();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 클라이언트 하나에 하나씩 만들어질 쓰레드이다. 클라이언트가 데이터객체를 보내면 Vector에 저장된 ObjectOutputStream을 이용해서 알리게 된다. 클라이언트가 종료되면 함께 종료된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=563>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServerThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<BR>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatServerThread implements Runnable{</FONT>
<P>	<FONT FACE="Courier New">Vector buffer;</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ObjectOutputStream oos;</FONT>
<P>	<FONT FACE="Courier New">Data d;</FONT>
<P>	<FONT FACE="Courier New">boolean exit;</FONT>
<P>	<FONT FACE="Courier New">String name;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ChatServerThread(Vector v, ObjectInputStream ois , ObjectOutputStream oos) {</FONT>
<P>		<FONT FACE="Courier New">this.buffer = v;</FONT>
<P>		<FONT FACE="Courier New">this.ois = ois;</FONT>
<P>		<FONT FACE="Courier New">this.oos = oos;</FONT>
<P>		<FONT FACE="Courier New">exit = false;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">while(!exit) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">d = (Data) ois.readObject();</FONT>
<P>			<FONT FACE="Courier New">} catch (ClassNotFoundException e) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1005>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServerThread.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<BR>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>				<FONT FACE="Courier New">System.err.println(&quot;Data class</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">찾을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> 	</FONT><FONT FACE="바탕">없음</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (OptionalDataException e1) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;OptionalDataException </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e3) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;IOExcdetion</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">int state = d.getState();</FONT>
<P>			<FONT FACE="Courier New">if(state == Data.</FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">exit = true;</FONT>
<P>				<FONT FACE="Courier New">d.setMessage(&quot;</FONT><FONT FACE="바탕">님이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료하셨습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>				<FONT FACE="Courier New">name = d.getName();</FONT>
<P>				<FONT FACE="Courier New">broadCasting();</FONT>
<P>				<FONT FACE="Courier New">for(int i = 0 ; i &lt;buffer.size() ; i++) {</FONT>
<P>					<FONT FACE="Courier New">if( ((Data)buffer.elementAt(i)).getName().equals(name)) {</FONT>
<P>						<FONT FACE="Courier New">buffer.removeElementAt(i);</FONT>
<P>						<FONT FACE="Courier New">break;</FONT>
<P>					<FONT FACE="Courier New">}</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>				<FONT FACE="Courier New">try{ ois.close();</FONT>
<P>					<FONT FACE="Courier New">oos.close();</FONT>
<P>				<FONT FACE="Courier New">}catch(IOException ex){}</FONT>
<BR>
<P>			<FONT FACE="Courier New">} else if(state == Data.</FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">Vector userName = new Vector(5,1);</FONT>
<P>				<FONT FACE="Courier New">d.setOOS(oos);</FONT>
<P>				<FONT FACE="Courier New">buffer.addElement(d);</FONT>
<P>				<FONT FACE="Courier New">for(int i=0 ; i &lt; buffer.size() ; i++) {</FONT>
<P>					<FONT FACE="Courier New">userName.addElement(</FONT>
<P><FONT FACE="Courier New">((Data)buffer.elementAt(i)).getName() );</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>				<FONT FACE="Courier New">d.setUserName(userName);</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;broadCasting </FONT><FONT FACE="바탕">시작</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>				<FONT FACE="Courier New">broadCasting();</FONT>
<P>			<FONT FACE="Courier New">} else {</FONT>
<P>				<FONT FACE="Courier New">broadCasting();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void broadCasting() {</FONT>
<P>		<FONT FACE="Courier New">Vector v = (Vector)buffer.clone();</FONT>
<P>		<FONT FACE="Courier New">for(int i = 0 ; i &lt; v.size() ; i++ ) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">((Data)v.elementAt(i)).getOOS().writeObject(d);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">ChatServerThread.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>				<FONT FACE="Courier New">System.out.println(&quot;111&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;broadCasting method</FONT><FONT FACE="바탕">에서</FONT><FONT FACE="Courier New"> IOException</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>				<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 서버와 클라이언트 사이에 정보를 주고받기 위한 클래스의 예를 보인 것이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=673>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Data.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Data implements Serializable{</FONT>
<P>	<FONT FACE="Courier New">private String message;</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int state;</FONT>
<P>	<FONT FACE="Courier New">private transient ObjectOutputStream oos; </FONT>
<P>	<FONT FACE="Courier New">private Vector userName;</FONT>
<P>	<FONT FACE="Courier New">public static final int </FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New"> = 0;</FONT>
<P>	<FONT FACE="Courier New">public static final int </FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New"> = -1;</FONT>
<P>	<FONT FACE="Courier New">public static final int </FONT><FONT FACE="바탕">대화중</FONT><FONT FACE="Courier New"> = 1;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Data (String name, String message, int state, ObjectOutputStream o) {</FONT>
<P>		<FONT FACE="Courier New">this.name = name;</FONT>
<P>		<FONT FACE="Courier New">this.message = message;</FONT>
<P>		<FONT FACE="Courier New">this.state = state;</FONT>
<P>		<FONT FACE="Courier New">this.oos = o;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Data (String name, String message, int state) {</FONT>
<P>		<FONT FACE="Courier New">this(name , message, state, null);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public String getMessage() {</FONT>
<P>		<FONT FACE="Courier New">return message;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setMessage(String s) {</FONT>
<P>		<FONT FACE="Courier New">message = s;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=585>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Data.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public String getName() {</FONT>
<P>		<FONT FACE="Courier New">return name;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setName(String s) {</FONT>
<P>	<FONT FACE="Courier New">name = s;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public int getState() {</FONT>
<P>		<FONT FACE="Courier New">return state;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setState(int i) {</FONT>
<P>		<FONT FACE="Courier New">state = i;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public ObjectOutputStream getOOS() {</FONT>
<P>		<FONT FACE="Courier New">return oos;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setOOS(ObjectOutputStream o) {</FONT>
<P>	<FONT FACE="Courier New">oos = o;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Vector getUserName() {</FONT>
<P>		<FONT FACE="Courier New">return this.userName;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setUserName(Vector v) {</FONT>
<P>		<FONT FACE="Courier New">this.userName = v;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ChatClient {</FONT>
<P>	<FONT FACE="Courier New">Socket socket;</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ObjectOutputStream oos;</FONT>
<P>	<FONT FACE="Courier New">Thread t;</FONT>
<P>	<FONT FACE="Courier New">Frame first , second;</FONT>
<P>	<FONT FACE="Courier New">Label state , commLabel , userLabel , serverLabel;</FONT>
<P>	<FONT FACE="Courier New">Label IDLabel , userCount;</FONT>
<P>	<FONT FACE="Courier New">TextArea commList;</FONT>
<P>	<FONT FACE="Courier New">List userList;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1005>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<BR>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">Button conn , transmission;</FONT>
<P>	<FONT FACE="Courier New">TextField stateTextField , transTextField;</FONT>
<P>	<FONT FACE="Courier New">TextField serverTextField , IDTextField;</FONT>
<P>	<FONT FACE="Courier New">String name;</FONT>
<P>	<FONT FACE="Courier New">ChatClientThread cct;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void connection(String serverName , int port) throws IOException{</FONT>
<P>		<FONT FACE="Courier New">socket = new Socket(serverName,port);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(serverName + &quot;  </FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>     
<P>		<FONT FACE="Courier New">oos = new ObjectOutputStream(socket.getOutputStream());</FONT>
<P>		<FONT FACE="Courier New">ois = new ObjectInputStream(socket.getInputStream());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;OutputStream</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">열었습니다</FONT><FONT FACE="Courier New">. &quot;);</FONT>
<P>		<FONT FACE="Courier New">Data d = new Data(IDTextField.getText(),&quot;</FONT><FONT FACE="바탕">님이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속하였습니다</FONT><FONT FACE="Courier New">.&quot;, Data.</FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Stream </FONT><FONT FACE="바탕">연결에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">성공하였습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">oos.writeObject(d) ;</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;InputStream</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">열었습니다</FONT><FONT FACE="Courier New">. &quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">cct = new ChatClientThread(ois,this);</FONT>
<P>		<FONT FACE="Courier New">t = new Thread(cct);</FONT>
<P>		<FONT FACE="Courier New">t.start();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P><FONT FACE="Courier New">/** </FONT><FONT FACE="바탕">처음</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">보여질</FONT><FONT FACE="Courier New"> GUI</FONT><FONT FACE="바탕">화면</FONT><FONT FACE="Courier New"> *************</FONT>
<P>    <FONT FACE="Courier New">Server</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름과</FONT><FONT FACE="Courier New"> User</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> ID</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">받아들여서</FONT><FONT FACE="Courier New">, Connection() </FONT><FONT FACE="바탕">메소드를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">호출한다</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">*/</FONT>
<P>	<FONT FACE="Courier New">public void firstGo() {</FONT>
<P>		<FONT FACE="Courier New">first = new Frame(&quot;Chat Browser&quot;);</FONT>
<P>		<FONT FACE="Courier New">first.addWindowListener( new WindowAdapter() {</FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT>
<P>				<FONT FACE="Courier New">first.setVisible(false);</FONT>
<P>				<FONT FACE="Courier New">first.dispose();</FONT>
<P>				<FONT FACE="Courier New">System.exit(1);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">});</FONT>
<BR>
<P>		<FONT FACE="Courier New">Panel p = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p.setLayout(new GridLayout(2,2));</FONT>
<P>		<FONT FACE="Courier New">serverLabel = new Label(&quot;Server&quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">IDLabel = new Label(&quot; I   D &quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">serverTextField = new TextField(0);</FONT>
<P>		<FONT FACE="Courier New">IDTextField = new TextField(0);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=474>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<BR>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">p.add(serverLabel);</FONT>
<P>		<FONT FACE="Courier New">p.add(serverTextField);</FONT>
<P>		<FONT FACE="Courier New">p.add(IDLabel);</FONT>
<P>		<FONT FACE="Courier New">p.add(IDTextField);</FONT>
<P>		<FONT FACE="Courier New">conn = new Button(&quot;</FONT><FONT FACE="바탕">연결</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">conn.addActionListener( new ActionHandler());</FONT>
<P>		<FONT FACE="Courier New">first.add(p,&quot;Center&quot;);</FONT>
<P>		<FONT FACE="Courier New">first.add(conn,&quot;South&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">first.setSize(300,100);</FONT>
<BR>
<P>	<FONT FACE="Courier New">/* </FONT><FONT FACE="바탕">화면의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중앙에</FONT><FONT FACE="Courier New"> GUI</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">보여질</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있도록</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">부분</FONT><FONT FACE="Courier New">. *****</FONT>
<P>		<FONT FACE="바탕">현재의</FONT><FONT FACE="Courier New"> Screen Size</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">얻어온</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">후</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중앙부분에</FONT><FONT FACE="Courier New"> Dispaly </FONT><FONT FACE="바탕">한다</FONT><FONT FACE="Courier New">.*/</FONT>
<P>		<FONT FACE="Courier New">Dimension d = first.getToolkit().getScreenSize();</FONT>
<P>		<FONT FACE="Courier New">first.setLocation(d.width/2 - first.getWidth()/2 , d.height/2 - first.getHeight()/2);</FONT>
<P>		<FONT FACE="Courier New">first.setResizable(false);</FONT>
<P>		<FONT FACE="Courier New">first.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=452>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT>
<P><FONT FACE="Courier New">85:</FONT>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">/**</FONT>
<P><FONT FACE="바탕">두번째로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">보여질</FONT><FONT FACE="Courier New"> GUI Chatting</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">필요한</FONT><FONT FACE="Courier New"> TextField</FONT><FONT FACE="바탕">와</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속되어</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용자의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">,</FONT><FONT FACE="바탕">그리고</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대화</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">내용이</FONT><FONT FACE="Courier New"> Display</FONT><FONT FACE="바탕">될</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">화면이다</FONT><FONT FACE="Courier New">.</FONT>
<P><FONT FACE="Courier New">*/</FONT>
<P>	<FONT FACE="Courier New">public void secondGo() {</FONT>
<P>		<FONT FACE="Courier New">second = new Frame(&quot;Chat v1.0 second&quot;);</FONT>
<P>		<FONT FACE="Courier New">second.addWindowListener(new WindowAdapter() {</FONT>
<P>			<FONT FACE="Courier New">public void windowClosing(WindowEvent e) {</FONT>
<P>				<FONT FACE="Courier New">frameClose(e);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">});</FONT>
<P>		<FONT FACE="Courier New">state = new Label(&quot;</FONT><FONT FACE="바탕">접속중</FONT><FONT FACE="Courier New">...&quot;);</FONT>
<P>		<FONT FACE="Courier New">state.setBackground(Color.yellow);</FONT>
<P>		<FONT FACE="Courier New">state.setForeground(Color.blue);</FONT>
<P>		<FONT FACE="Courier New">second.add(state,&quot;North&quot;);</FONT>
<P> 
<P>		<FONT FACE="Courier New">Panel p1 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p1.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">commLabel = new Label(&quot;</FONT><FONT FACE="바탕">대화내용</FONT><FONT FACE="Courier New">&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1027>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT>
<P><FONT FACE="Courier New">100:</FONT>
<P><FONT FACE="Courier New">101:</FONT>
<P><FONT FACE="Courier New">102:</FONT>
<P><FONT FACE="Courier New">103:</FONT>
<P><FONT FACE="Courier New">104:</FONT>
<P><FONT FACE="Courier New">105:</FONT>
<P><FONT FACE="Courier New">106:</FONT>
<P><FONT FACE="Courier New">107:</FONT>
<P><FONT FACE="Courier New">108:</FONT>
<P><FONT FACE="Courier New">109:</FONT>
<P><FONT FACE="Courier New">110:</FONT>
<P><FONT FACE="Courier New">111:</FONT>
<P><FONT FACE="Courier New">112:</FONT>
<P><FONT FACE="Courier New">113:</FONT>
<P><FONT FACE="Courier New">114:</FONT>
<P><FONT FACE="Courier New">115:</FONT>
<P><FONT FACE="Courier New">116:</FONT>
<P><FONT FACE="Courier New">117:</FONT>
<P><FONT FACE="Courier New">118:</FONT>
<P><FONT FACE="Courier New">119:</FONT>
<P><FONT FACE="Courier New">120:</FONT>
<P><FONT FACE="Courier New">121:</FONT>
<P><FONT FACE="Courier New">122:</FONT>
<P><FONT FACE="Courier New">123:</FONT>
<P><FONT FACE="Courier New">124:</FONT>
<P><FONT FACE="Courier New">125:</FONT>
<P><FONT FACE="Courier New">126:</FONT>
<P><FONT FACE="Courier New">127:</FONT>
<BR>
<P><FONT FACE="Courier New">128:</FONT>
<P><FONT FACE="Courier New">129:</FONT>
<P><FONT FACE="Courier New">130:</FONT>
<P><FONT FACE="Courier New">141:</FONT>
<P><FONT FACE="Courier New">142:</FONT>
<P><FONT FACE="Courier New">143:</FONT>
<P><FONT FACE="Courier New">144:</FONT>
<P><FONT FACE="Courier New">145:</FONT>
<P><FONT FACE="Courier New">146:</FONT>
<P><FONT FACE="Courier New">147:</FONT>
<P><FONT FACE="Courier New">148:</FONT>
<P><FONT FACE="Courier New">149:</FONT>
<P><FONT FACE="Courier New">150:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">commList = new TextArea();</FONT>
<P>		<FONT FACE="Courier New">commList.setEditable(false);</FONT>
<P>		<FONT FACE="Courier New">p1.add(commLabel,&quot;North&quot;);</FONT>
<P>		<FONT FACE="Courier New">p1.add(commList,&quot;Center&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Panel p2 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">p2.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">userLabel = new Label(&quot;</FONT><FONT FACE="바탕">사용자명</FONT><FONT FACE="Courier New">&quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">userList = new List();</FONT>
<P>		<FONT FACE="Courier New">userCount = new Label(&quot;&quot;,Label.CENTER);</FONT>
<P>		<FONT FACE="Courier New">p2.add(userLabel,&quot;North&quot;);</FONT>
<P>		<FONT FACE="Courier New">p2.add(userList,&quot;Center&quot;);</FONT>
<P>		<FONT FACE="Courier New">p2.add(userCount,&quot;South&quot;);</FONT>
<P>        
<P>		<FONT FACE="Courier New">Panel p3 = new Panel();</FONT>
<P>		<FONT FACE="Courier New">transTextField = new TextField(50);</FONT>
<P>		<FONT FACE="Courier New">//transTextField.requestFocus();  // TextField</FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">커서가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">깜박이게</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">한다</FONT><FONT FACE="Courier New">.</FONT>
<P>		<FONT FACE="Courier New">transTextField.addActionListener(new ActionHandler());</FONT>
<P>		<FONT FACE="Courier New">transmission = new Button(&quot;</FONT><FONT FACE="바탕">전송</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">transmission.addActionListener(new ActionHandler());</FONT>
<P>		<FONT FACE="Courier New">p3.add(transTextField);</FONT>
<P>		<FONT FACE="Courier New">p3.add(transmission);</FONT>
<BR>
<P>		<FONT FACE="Courier New">second.add(p3,&quot;South&quot;);</FONT>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">이것을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">먼저</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">선언해야</FONT><FONT FACE="Courier New"> requestFocus </FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">적용됨</FONT><FONT FACE="Courier New">.</FONT>
<P>		<FONT FACE="Courier New">second.add(p1,&quot;Center&quot;);</FONT>
<P>		<FONT FACE="Courier New">second.add(p2,&quot;West&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">second.setSize(600,500);</FONT>
<P>		<FONT FACE="Courier New">Dimension d = second.getToolkit().getScreenSize();</FONT>
<P>		<FONT FACE="Courier New">second.setLocation(d.width/2 - second.getWidth()/2 , d.height/2 - second.getHeight()/2);</FONT>
<P>		<FONT FACE="Courier New">second.setResizable(false);</FONT>
<BR>
<P>		<FONT FACE="Courier New">second.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void frameClose(WindowEvent e) {</FONT>
<P>		<FONT FACE="Courier New">Frame f = (Frame) e.getSource();</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(false);</FONT>
<P>		<FONT FACE="Courier New">f.dispose();</FONT>
<P>		<FONT FACE="Courier New">cct.exit = true;</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">oos.writeObject(new Data(name,&quot;</FONT><FONT FACE="바탕">님이</FONT><FONT FACE="Courier New"> 	</FONT><FONT FACE="바탕">나가셨습니다</FONT><FONT FACE="Courier New">.&quot;,Data.</FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New">));</FONT>
<P>			<FONT FACE="Courier New">oos.close();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=938>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClient.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">151:</FONT>
<P><FONT FACE="Courier New">152:</FONT>
<P><FONT FACE="Courier New">153:</FONT>
<P><FONT FACE="Courier New">154:</FONT>
<P><FONT FACE="Courier New">155:</FONT>
<P><FONT FACE="Courier New">156:</FONT>
<P><FONT FACE="Courier New">157:</FONT>
<P><FONT FACE="Courier New">158:</FONT>
<P><FONT FACE="Courier New">159:</FONT>
<P><FONT FACE="Courier New">160:</FONT>
<P><FONT FACE="Courier New">161:</FONT>
<P><FONT FACE="Courier New">162:</FONT>
<P><FONT FACE="Courier New">163:</FONT>
<P><FONT FACE="Courier New">164:</FONT>
<P><FONT FACE="Courier New">165:</FONT>
<P><FONT FACE="Courier New">166:</FONT>
<P><FONT FACE="Courier New">167:</FONT>
<P><FONT FACE="Courier New">168:</FONT>
<P><FONT FACE="Courier New">169:</FONT>
<P><FONT FACE="Courier New">170:</FONT>
<BR>
<P><FONT FACE="Courier New">171:</FONT>
<P><FONT FACE="Courier New">172:</FONT>
<BR>
<P><FONT FACE="Courier New">173:</FONT>
<BR>
<P><FONT FACE="Courier New">174:</FONT>
<P><FONT FACE="Courier New">175:</FONT>
<BR>
<P><FONT FACE="Courier New">176:</FONT>
<P><FONT FACE="Courier New">177:</FONT>
<P><FONT FACE="Courier New">178:</FONT>
<P><FONT FACE="Courier New">179:</FONT>
<P><FONT FACE="Courier New">180:</FONT>
<P><FONT FACE="Courier New">181:</FONT>
<P><FONT FACE="Courier New">182:</FONT>
<P><FONT FACE="Courier New">183:</FONT>
<P><FONT FACE="Courier New">184:</FONT>
<P><FONT FACE="Courier New">185:</FONT>
<P><FONT FACE="Courier New">186:</FONT>
<P><FONT FACE="Courier New">187:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">} catch (IOException e1) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">종료중</FONT><FONT FACE="Courier New"> IOExcpetion</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.exit(0);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">/*    Acrtion Event</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">처리하는</FONT><FONT FACE="Courier New"> Inner class</FONT>
<P><FONT FACE="Courier New">*/</FONT>
<P>	<FONT FACE="Courier New">public class ActionHandler implements ActionListener{</FONT>
<P>		<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) {</FONT>
<P>			<FONT FACE="Courier New">String actionCommand = e.getActionCommand();</FONT>
<P>				<FONT FACE="Courier New">if(actionCommand.equals(&quot;</FONT><FONT FACE="바탕">연결</FONT><FONT FACE="Courier New">&quot;)) {</FONT>
<P>					<FONT FACE="Courier New">String server = serverTextField.getText();</FONT>
<P>					<FONT FACE="Courier New">name = IDTextField.getText();</FONT>
<P>					<FONT FACE="Courier New">first.setVisible(false);</FONT>
<P>					<FONT FACE="Courier New">first.dispose();</FONT>
<P>					<FONT FACE="Courier New">secondGo();</FONT>
<P>					<FONT FACE="Courier New">try {</FONT>
<P>						<FONT FACE="Courier New">connection(server,5555);</FONT>
<P>					<FONT FACE="Courier New">} catch (IOException e1) {</FONT>
<P>						<FONT FACE="Courier New">System.err.println(&quot;Connection </FONT><FONT FACE="바탕">중</FONT><FONT FACE="Courier New"> Exception</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생하였습니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>					<FONT FACE="Courier New">}</FONT>
<P>					<FONT FACE="Courier New">state.setText(&quot;[ &quot; + server +&quot; ]&quot; + &quot; </FONT><FONT FACE="바탕">에</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속되었습니다</FONT><FONT FACE="Courier New">. --UserID : &quot; + name);</FONT>
<P>				<FONT FACE="Courier New">} else if ( actionCommand.equals(&quot;</FONT><FONT FACE="바탕">전송</FONT><FONT FACE="Courier New">&quot;) || e.getSource().equals(transTextField)) {</FONT>
<P>					<FONT FACE="Courier New">try {</FONT>
<P>						<FONT FACE="Courier New">oos.writeObject(new Data(name,transTextField.getText(),Data.</FONT><FONT FACE="바탕">대화중</FONT><FONT FACE="Courier New">));</FONT>
<P>					<FONT FACE="Courier New">} catch (IOException e2) {</FONT>
<P>						<FONT FACE="Courier New">System.err.println(&quot;</FONT><FONT FACE="바탕">대화중</FONT><FONT FACE="Courier New"> IOException</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">발생하였습니다</FONT><FONT FACE="Courier New"> &quot;);</FONT>
<P>					<FONT FACE="Courier New">}</FONT>
<P>					<FONT FACE="Courier New">transTextField.setText(&quot;&quot;);</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">ChatClient cc = new ChatClient();</FONT>
<P>			<FONT FACE="Courier New">cc.firstGo();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=991>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ChatClientThread.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<BR>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<BR>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<BR>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<P><FONT FACE="Courier New">public class ChatClientThread implements Runnable{</FONT>
<P>	<FONT FACE="Courier New">ObjectInputStream ois;</FONT>
<P>	<FONT FACE="Courier New">ChatClient cc;</FONT>
<P>	<FONT FACE="Courier New">Data d;</FONT>
<P>	<FONT FACE="Courier New">boolean exit = false;</FONT>
<P>	<FONT FACE="Courier New">public ChatClientThread(ObjectInputStream ois, ChatClient cc) {</FONT>
<P>		<FONT FACE="Courier New">this.ois = ois;</FONT>
<P>		<FONT FACE="Courier New">this.cc = cc;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void run() {</FONT>
<P>		<FONT FACE="Courier New">while(!exit) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">d = (Data) ois.readObject();</FONT>
<P>			<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;run method IOException&quot;);</FONT>
<P>			<FONT FACE="Courier New">} catch (ClassNotFoundException e1) {</FONT>
<P>				<FONT FACE="Courier New">System.err.println(&quot;Data class NotFound&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">int state = d.getState();</FONT>
<P>			<FONT FACE="Courier New">String name = d.getName();</FONT>
<P>			<FONT FACE="Courier New">if(state == Data.</FONT><FONT FACE="바탕">처음접속</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">Vector userName = d.getUserName();</FONT>
<P>				<FONT FACE="Courier New">cc.userList.removeAll();</FONT>
<P>				<FONT FACE="Courier New">for(int i = 0 ; i &lt; userName.size() ; i++) {</FONT>
<P>					<FONT FACE="Courier New">cc.userList.add((String) 	userName.elementAt(i));</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>					<FONT FACE="Courier New">cc.userCount.setText(&quot;</FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> &quot; + cc.userList.getItemCount() + </FONT>
<P><FONT FACE="Courier New">&quot;</FONT><FONT FACE="바탕">명</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속중</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">} else if (state == Data.</FONT><FONT FACE="바탕">접속종료</FONT><FONT FACE="Courier New">) {</FONT>
<P>				<FONT FACE="Courier New">cc.userList.remove(name);</FONT>
<P>				<FONT FACE="Courier New">cc.userCount.setText(&quot;</FONT><FONT FACE="바탕">현재</FONT><FONT FACE="Courier New"> &quot; + 	cc.userList.getItemCount() + </FONT>
<P><FONT FACE="Courier New">&quot;</FONT><FONT FACE="바탕">명</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">접속중</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">cc.commList.append(&quot;[ &quot; + name + &quot; ]&quot; + d.getMessage() + &quot;\n&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">ois.close();</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.err.println(&quot; ChatClientThread</FONT><FONT FACE="바탕">에의</FONT><FONT FACE="Courier New"> ObjectOutputStream</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> Close</FONT><FONT FACE="바탕">하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">중에</FONT><FONT FACE="Courier New"> IOException </FONT><FONT FACE="바탕">발생</FONT><FONT FACE="Courier New">!&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV333.GIF" BORDER=0 ALIGN=LEFT> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">9.5  TCP </FONT><FONT FACE="바탕">파일서버</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">프로그램</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 간단한 파일서버 프로그램의 예를 보인 것이다. 서버로부터 특정파일을 읽어들여 클라이언트 화면에 서버의 파일내용을 출력한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=863>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">FileServer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<BR>
<P><FONT FACE="Courier New">class FileServer {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">ServerSocket s = (ServerSocket) null;</FONT>
<P>		<FONT FACE="Courier New">Socket s1;</FONT>
<P>		<FONT FACE="Courier New">byte[] intbuf = new byte[100];</FONT>
<P>		<FONT FACE="Courier New">String fileName;</FONT>
<P>		<FONT FACE="Courier New">try {</FONT>
<P>			<FONT FACE="Courier New">s = new ServerSocket(4321, 1);</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;\nServer timed out!&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.exit(-1);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">while(true) {</FONT>
<P>			<FONT FACE="Courier New">try {</FONT>
<P>				<FONT FACE="Courier New">s1 = s.accept();</FONT>
<P>				<FONT FACE="Courier New">fileName = getFileName(s1);</FONT>
<P>				<FONT FACE="Courier New">sendFileToClient(s1, fileName);</FONT>
<P>				<FONT FACE="Courier New">s1.close();</FONT>
<P>			<FONT FACE="Courier New">} catch(IOException e) {</FONT>
<P>				<FONT FACE="Courier New">System.out.println(&quot;Error - &quot; + e.toString());</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public static String getFileName(Socket s1) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">InputStream s1in;</FONT>
<P>		<FONT FACE="Courier New">DataInputStream d1In;</FONT>
<P>		<FONT FACE="Courier New">String sfile;</FONT>
<P>		<FONT FACE="Courier New">s1in = s1.getInputStream();</FONT>
<P>		<FONT FACE="Courier New">d1In = new DataInputStream(s1in);</FONT>
<P>		<FONT FACE="Courier New">sfile = d1In.readLine();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;File to open for reading : &quot; + sfile);</FONT>
<P>		<FONT FACE="Courier New">return(sfile);</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=850>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">FileServer.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<BR>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<BR>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public static void sendFileToClient (Socket s1, String sfile) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">int c;</FONT>
<P>		<FONT FACE="Courier New">FileInputStream fis;</FONT>
<P>		<FONT FACE="Courier New">OutputStream s1out;</FONT>
<P>		<FONT FACE="Courier New">s1out = s1.getOutputStream();</FONT>
<P>		<FONT FACE="Courier New">File f = new File(sfile);</FONT>
<BR>
<P>		<FONT FACE="Courier New">if(f.exists() != true) {</FONT>
<P>			<FONT FACE="Courier New">String error = new String (&quot;File &quot; + sfile + &quot;</FONT><FONT FACE="바탕">은</FONT><FONT FACE="Courier New">(</FONT><FONT FACE="바탕">는</FONT><FONT FACE="Courier New">) </FONT><FONT FACE="바탕">존재하지</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">않습니다</FONT><FONT FACE="Courier New">....\n&quot;);</FONT>
<P>			<FONT FACE="Courier New">int len = error.length();</FONT>
<P>			<FONT FACE="Courier New">for(int i=0; i&lt;len; i++) {</FONT>
<P>				<FONT FACE="Courier New">s1out.write((int)error.charAt(i));</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">System.out.println(error);</FONT>
<P>			<FONT FACE="Courier New">return;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">if(f.canRead()) {</FONT>
<P>			<FONT FACE="Courier New">fis = new FileInputStream(sfile);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Sending : &quot; + sfile);</FONT>
<P>			<FONT FACE="Courier New">while((c=fis.read()) != -1) {</FONT>
<P>				<FONT FACE="Courier New">s1out.write(c);</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">fis.close();</FONT>
<P>		<FONT FACE="Courier New">} else {</FONT>
<P>			<FONT FACE="Courier New">String error = new String (&quot;Can't open &quot; + sfile + &quot;for reading...\n&quot;);</FONT>
<P>			<FONT FACE="Courier New">int len = error.length();</FONT>
<P>			<FONT FACE="Courier New">for(int i=0; i&lt;len ; i++) {</FONT>
<P>				<FONT FACE="Courier New">s1out.write((int)error.charAt(i));</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">System.out.println(error);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> FileServer</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=894>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ReadFile.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<BR>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ReadFile {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Socket s;</FONT>
<P>		<FONT FACE="Courier New">int port = 4321;</FONT>
<P>		<FONT FACE="Courier New">if(args.length != 2) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Usage : java ReadFile &quot; + &quot;</FONT><I>&lt;<FONT FACE="Courier New">server&gt; &lt;file&gt;</FONT></I><FONT FACE="Courier New">&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.exit(-1);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">try</FONT>	<FONT FACE="Courier New">{</FONT>
<P>			<FONT FACE="Courier New">s = new Socket (args[0], port);</FONT>
<P>			<FONT FACE="Courier New">sendFileName (s, args[1]);</FONT>
<P>			<FONT FACE="Courier New">receiveFile (s);</FONT>
<P>			<FONT FACE="Courier New">s.close();</FONT>
<P>		<FONT FACE="Courier New">} catch (IOException e) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;Connection failed&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void sendFileName (Socket s, String fileName) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">OutputStream  sOut;</FONT>
<P>		<FONT FACE="Courier New">DataOutputStream dOut;</FONT>
<BR>
<P>		<FONT FACE="Courier New">sOut = s.getOutputStream();</FONT>
<P>		<FONT FACE="Courier New">dOut = new DataOutputStream(sOut);</FONT>
<P>		<FONT FACE="Courier New">String sendString = new String(fileName + &quot;\n&quot;);</FONT>
<P>		<FONT FACE="Courier New">dOut.writeBytes(sendString);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void receiveFile(Socket s) throws IOException {</FONT>
<P>		<FONT FACE="Courier New">int c;</FONT>
<P>		<FONT FACE="Courier New">InputStream sIn;</FONT>
<P>		<FONT FACE="Courier New">sIn = s.getInputStream();</FONT>
<P>		<FONT FACE="Courier New">while ((c=sIn.read()) != -1) {</FONT>
<P>			<FONT FACE="Courier New">System.out.print((char)c);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> ReadFile 127.0.0.1 ReadFile.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="FYXIV334.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV335.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV336.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT>
<IMG SRC="FYXIV337.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[JDBC 프로그래밍]</FONT></SPAN></FONT>
<BR>
<P>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">JDBC(Java Database Connectivity)란 자바 환경에서 데이터베이스를 연결할 수 있는 기능을 의미한다. 데이터베이스를 사용하려면 JVM 환경과 데이터베이스 환경사이에 표준이 있어야 하는데 이러한 표준이 바로 JDBC이기도 하다. 현재 JDK 1.4 에서는 JDBC 3.0 스펙까지 지원하고 있다. 
</FONT></SPAN></FONT><BR>
<BR>
<P>
<BR>
<P>
<IMG SRC="FYXIV339.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">10.1  </FONT><FONT FACE="바탕">데이터베이스</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">개요</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 장에서는 데이터베이스를 다루는데 필요한 기본적인 용어와 기능 등에 대해 설명하고, 일반적으로 쉽게 사용할 수 있는 실제 데이터베이스 엔진을 선정하여 설치에서 사용 방법에 이르기까지 일련의 조작 과정을 설명하기로 한다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.1.1 </FONT><FONT FACE="바탕">데이터베이스</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">용어</FONT></SPAN></FONT>
<BR>
<P>  <FONT FACE="돋움">∘ 테이블 : 테이블은 RDBMS의 기본적인 저장구조로, 한 개 이상의 행(Row)과 한개 이상의 열(Column)로 구성된다.</FONT>
<P>  <FONT FACE="돋움">∘ Column : 한 Column은 테이블에서 단일 종류의 데이터로 구성되는데 예를 들면 성적 테이블에서 이름, 국어, 영어 등이 Column이다. 이것은 특정 데이터 타입 및 크기를 갖고 있다.</FONT>
<P>  <FONT FACE="돋움">∘ Row : Row는 Column 값의 조합이다. 성적 테이블에서 한 학생에 대한 성적내용이 한 Row가 된다. 예를 들면, &quot;홍길동, 100, 95&quot; 가 하나의 Row이다.</FONT>
<P>  <FONT FACE="돋움">∘ 필드 : Row와 Column의 교차점을 필드라고 한다. 데이터가 없는 필드는 널(Null)값을 갖는다. 예를 들면, 국어 Column과 홍길동 학생의 Row의 필드값은 &quot;100&quot;이다.</FONT>
<P>  <FONT FACE="돋움">∘ 기본키(Primary Key) : 기본키는 한 테이블의 레코드를 유일하게 식별해주는 Column 또는 Column의 조합이다. 예를 들면, 앞의 성적테이블에서 각 학생의 이름을 기본키로 사용할 수 있으며, 더 정확하게 하려면 학번 Column을 추가 시켜 기본키로 사용할 수 있다. 기본키는 널값을 가질수 없다. 
</FONT><P>  <FONT FACE="돋움">∘ 외래키 : 두개 이상의 테이블을 사용하는 데이터베이스에서 두 테이블에 있는 데이터를 조작하려고 할 때 두 테이블을 연관시켜주는 Column 또는 Column의 조합을 말한다.  
</FONT><P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.1.2 MySQL</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">데이터베이스를 사용하기 위해서는 먼저 데이터베이스 엔진이 설치되어야 한다. 본 교재에서는 오라클이나 MySQL을 기준으로 설명하기로 한다. MySQL 설치에 관해서는 언급하겠지만, 오라클의 설치에 관해서는 다루지 않으며, 주의할 점은 8i이후 버전의 Personal 오라클은 리스너가 동작하지 않으므로 NT용 이상을 설치해야 리스너가 작동한다. 9i 버전에서는 Personal 오라클을 제공하지 않는다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.2.1 MySQL </FONT><FONT FACE="바탕">설치</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="돋움">Ⅰ. http://www.mysql.com 에서 최신 버전의 MySQL을 내려받아 압축을 푼 다음 설치한다. 윈도우용이라면 설치하는데는 어렵지 않을 것이다. 설치시 MySQL이 설치될 폴더는 C:\mysql로 한다.</FONT>
<BR>
<P><FONT FACE="돋움">Ⅱ. 설치가 모두 끝나면 명령 창을 띄워서 C:\mysql\bin 디렉토리로 이동하여 mysqld을 입력하여 실행시킨다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=63>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">C:\&gt;cd C:\mysql\bin</FONT></B>
<P> <B><FONT FACE="Courier New">C:\mysql\bin&gt;mysqld</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 그림처럼 에러 없이 프롬프트가 나타나면 정상적으로 설치가 완료된 것이다. 
</FONT><P ALIGN=CENTER>
<IMG SRC="FYXIV340.GIF" BORDER=0 WIDTH=491 HEIGHT=314 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">윈도우 2000에 설치했다면 제어판 -&gt; 관리도구 -&gt; 서비스에서 다음 그림과 같이 MySQL 구성요소가 추가된 것을 볼 수 있다. MySQL 구성 요소를 시작한다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV341.GIF" BORDER=0 WIDTH=433 HEIGHT=303 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="돋움">Ⅲ. 이제 MySQL 데이터베이스로 접속할 수 있는 상태가 된 것이다. MySQL 데몬이 정상적으로 가동되었으면 프롬프트상에서 mysql이라고 입력하여 MySQL 데이터베이스에 접속한다. 
</FONT><BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">C:\mysql\bin&gt;mysql</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 그림과 같이 프롬프트에 mysql&gt; 프롬프트가 나타나면 접속된 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV342.GIF" BORDER=0 WIDTH=402 HEIGHT=257 ALIGN=BOTTOM>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.2.2 </FONT><FONT FACE="바탕">데이터베이스</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">설정</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="돋움">Ⅰ. MySQL이 정상적으로 실행되었으면 테이블이 저장될 데이터베이스를 생성한다. 데이터베이스는 다음과 같은 SQL문장으로 생성할 수 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">create database </FONT><I><FONT FACE="Courier New">database_name</FONT></I><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">여기서는 데이터베이스 이름을 mydb로 설정한다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">mysql&gt; create database mydb;</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 그림과 같이 데이터베이스가 생성된 것을 볼 수 있다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV343.GIF" BORDER=0 WIDTH=439 HEIGHT=296 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="돋움">Ⅱ. 다음은 사용자를 추가시키기 위해 데이터베이스로 이동한다. mysql이라는 데이터베이스에 사용자와 권한을 설정한다. 다음처럼 use라는 명령을 이용하여 mysql 데이터베이스로 이동한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">mysql&gt; use mysql</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 데이터베이스가 mysql로 바뀐 그림이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV344.GIF" BORDER=0 WIDTH=428 HEIGHT=286 ALIGN=BOTTOM>
<P><FONT FACE="돋움">Ⅲ. 다음은 mysql이라는 데이터베이스 안에서 'user' 라는 테이블과 'db'라는 테이블을 이용해 사용자를 추가하고 권한을 설정한다. 여기서 사용자 아이디는 'scott' 비밀번호는 'tiger'로 한다. 이는 오라클의 기본 사용자 아이디와 비밀번호 이기도 하다. 'user' 테이블과 'db'테이블에는 다음과 같은 값이 들어간다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=646 HEIGHT=63>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="Courier New">mysql&gt;insert into user (host, user, password) values('</FONT><I><FONT FACE="바탕">주소</FONT></I><FONT FACE="Courier New">', '</FONT><I><FONT FACE="바탕">아이디</FONT></I><FONT FACE="Courier New">', password('</FONT><I><FONT FACE="바탕">비밀번호</FONT></I><FONT FACE="Courier New">'));</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="Courier New">mysql&gt;insert into db values('</FONT><I><FONT FACE="바탕">주소</FONT></I><FONT FACE="Courier New">','</FONT><I><FONT FACE="Courier New">database</FONT><FONT FACE="바탕">이름</FONT></I><FONT FACE="Courier New">','</FONT><I><FONT FACE="바탕">아이디</FONT></I><FONT FACE="Courier New">','y','y','y','y','y','y','y','y','y','y');</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음과 같이 데이터베이스에 접속할 호스트 주소를 localhost로 하고, 아이디는 'scott', 비밀번호는 'tiger'로 한다. 그리고 데이터베이스 이름은 앞에서 만들었던 'mydb'로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=626 HEIGHT=58>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="Courier New">mysql&gt;insert into user (host, user, password) values('localhost', 'scott', password('tiger'));</FONT></SPAN></FONT>
<P><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="Courier New">mysql&gt;insert into db values('localhost','mydb','scott','y','y','y','y','y','y','y','y','y','y');</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 그림은 아이디와 패스워드를 설정한 결과화면이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV345.GIF" BORDER=0 WIDTH=475 HEIGHT=318 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="돋움">Ⅳ. 이상의 설정 내용을 MySQL이 새로 읽어들여 적용시키게 한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">mysql&gt; flush privileges;</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 그림은 flush 명령을 내린 결과화면이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV346.GIF" BORDER=0 WIDTH=461 HEIGHT=309 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="돋움">Ⅴ. 사용자가 추가되었는지 확인하기 위해 quit명령으로 MySQL을 나간 다음 새로 추가한 사용자 아이디와 패스워드로 다시 접속해 보자.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=63>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">mysql&gt; quit</FONT></B>
<P> <B><FONT FACE="Courier New">C:\mysql\bin&gt; mysql -u scott -p</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">패스워드를 입력하고 엔터 키를 눌렀을 때 다음 그림과 같이 mysql 프롬프트가 나타나면 성공한 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV347.GIF" BORDER=0 WIDTH=463 HEIGHT=310 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">Ⅵ. mydb 데이터베이스를 사용하기 위해 use명령을 이용하여 mydb라는 데이터베이스로 이동한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">mysql&gt; use mydb</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 그림과 같이 데이터베이스가 변경되었다. 이제 MySQL 데이터베이스도 정상적으로 설치되었고, 사용자 아이디와 비밀번호도 만들어졌다.</FONT>
<P ALIGN=CENTER>  
<IMG SRC="FYXIV348.GIF" BORDER=0 WIDTH=497 HEIGHT=332 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음은 SQL 질의문에 대해 설명하기로 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.1.3 SQL </FONT><FONT FACE="바탕">문법의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">개요</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDBC에 들어가기 전에 기본적으로 사용되는 SQL에 관한 기본적인 내용을 살펴보기로 한다. 사용하는 데이터베이스에 따라 약간의 차이가 있을 수 있으며 설명은 오라클과 MySQL을 기준으로 예를 들기로 한다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.3.1 CREATE</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">테이블을 생성하는데 사용되며 사용방법은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=549 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">CREATE TABLE </FONT><I><FONT FACE="Courier New">table_name</FONT></I><FONT FACE="Courier New"> </FONT>
<P>	<FONT FACE="Courier New">( </FONT><I><FONT FACE="Courier New">column_name</FONT></I><FONT FACE="Courier New"> datatype(size) [DEFAULT </FONT><I><FONT FACE="Courier New">data</FONT></I><FONT FACE="Courier New">] ,</FONT>
<P>	 <FONT FACE="Courier New">... );</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">CREATE문의 경우에는 오라클과 MySQL의 데이터 타입이 약간 다르므로 질의문이 다를 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">질의문 사용 예 - 오라클</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">CREATE TABLE address_table ( </FONT>
<P>	<FONT FACE="Courier New">id 		</FONT><B><FONT FACE="Courier New">NUMBER(4)</FONT></B><FONT FACE="Courier New">,</FONT>
<P>	<FONT FACE="Courier New">name</FONT>		<FONT FACE="Courier New">CHAR(20),</FONT>
<P>	<FONT FACE="Courier New">addr</FONT>		<FONT FACE="Courier New">CHAR(50)</FONT>
<P><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">질의문 사용 예 - MySQL</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">CREATE TABLE address_table ( </FONT>
<P>	<FONT FACE="Courier New">id 		</FONT><B><FONT FACE="Courier New">INT(4)</FONT></B><FONT FACE="Courier New">,</FONT>
<P>	<FONT FACE="Courier New">name</FONT>		<FONT FACE="Courier New">CHAR(20),</FONT>
<P>	<FONT FACE="Courier New">addr</FONT>		<FONT FACE="Courier New">CHAR(50)</FONT>
<P><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.3.2 INSERT</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">테이블에 레코드를 삽입한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=92>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">INSERT INTO </FONT><I><FONT FACE="Courier New">table_name</FONT></I><FONT FACE="Courier New"> </FONT>
<P>	<FONT FACE="Courier New">( </FONT><I><FONT FACE="Courier New">column1, column2, column3...</FONT></I><FONT FACE="Courier New"> ) </FONT>
<P>	<FONT FACE="Courier New">VALUES</FONT>
<P>	<FONT FACE="Courier New">( </FONT><I><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">1, </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">2, </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">3...</FONT></I><FONT FACE="Courier New"> );</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">질의문 사용 예</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=97>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">INSERT INTO address_table </FONT>
<P>	<FONT FACE="Courier New">( id, name, addr )</FONT>
<P>	<FONT FACE="Courier New">VALUES</FONT>
<P>	<FONT FACE="Courier New">(  1, '</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">', '</FONT><FONT FACE="바탕">서울</FONT><FONT FACE="Courier New">' );</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">또는 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">INSERT INTO address_table VALUES( 1, '</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">', '</FONT><FONT FACE="바탕">서울</FONT><FONT FACE="Courier New">' );</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">데이터가 문자열형일 경우 name과 addr의 데이터처럼 ''로 문자열을 감싸주어야 한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.3.3 SELECT</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">테이블에서 조건을 만족하는 레코드를 찾을 때 사용한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=549 HEIGHT=92>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">SELECT [DISTINCT] </FONT><I><FONT FACE="Courier New">column_name [, column_name, ...]</FONT></I>
<P>	<FONT FACE="Courier New">FROM </FONT><I><FONT FACE="Courier New">table_name</FONT></I><FONT FACE="Courier New"> </FONT>
<P>	<FONT FACE="Courier New">[WHERE </FONT><I><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">]</FONT>
<P>	<FONT FACE="Courier New">[ORDER BY ASC|DESC];</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P> 
<P><FONT FACE="바탕">Query문 사용 예</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">SELECT * FROM address_table WHERE id=2;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.3.4 UPDATE</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">레코드값을 갱신할 때 사용한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">UPDATE </FONT><I><FONT FACE="Courier New">table_name</FONT></I><FONT FACE="Courier New"> </FONT>
<P>	<FONT FACE="Courier New">SET </FONT><I><FONT FACE="Courier New">column1 = </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">1 [, column2 = </FONT><FONT FACE="바탕">값</FONT><FONT FACE="Courier New">2 ,...]</FONT></I>
<P>	<FONT FACE="Courier New">[WHERE </FONT><I><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">] ;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>   
<P><FONT FACE="바탕">Query문 사용 예</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=655 HEIGHT=75>
<TD VALIGN=TOP WIDTH=9%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=90%>
<P><FONT FACE="Courier New">UPDATE  address_table</FONT>
<P>	<FONT FACE="Courier New">SET addr='NewYork' </FONT>
<P>	<FONT FACE="Courier New">WHERE id=1 AND name='</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">';</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P> 
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.3.5 DELETE</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">레코드를 삭제할 때 사용한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">DELETE FROM </FONT><I><FONT FACE="Courier New">table_name</FONT></I><FONT FACE="Courier New"> [WHERE </FONT><I><FONT FACE="바탕">조건식</FONT></I><FONT FACE="Courier New">];</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Query문 사용 예</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">DELETE FROM address_table WHERE id=2;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>  
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.3.6 DROP</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">테이블을 삭제할 때 사용된다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">DROP TABLE </FONT><I><FONT FACE="Courier New">table_name</FONT></I><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">Query문 사용 예</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">DROP TABLE customer;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.3.7 COMMIT / ROLLBACK</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">COMMIT과 ROLLBACK은 트랜잭션처리에 사용하는데 이전에 지시한 명령을 확인시키기는데 COMMIT을 이용하고, 이전에 지시했던 명령을 취소시키는데 ROLLBACK을 이용한다. 참고로 MySQL에서는 트랜잭션처리를 할 수 없으므로 필요가 없지만 오라클에서는 반드시 COMMIT을 해 줘야 데이터가 변경된다. 사용 방법은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">COMMIT;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">ROLLBACK;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">지금까지 데이터베이스에서 사용될 몇가지 질의문에 대하여 알아보았는데 언급되지 않은 질의문에 대해서는 데이터베이스 관련 서적을 참고하길 바란다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.1.4 </FONT><FONT FACE="바탕">데이터</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">타입</FONT><FONT FACE="HY부활M">(</FONT><FONT FACE="바탕">오라클과</FONT><FONT FACE="HY부활M"> MySQL)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">데이터베이스 버전에 따라 사용하는 데이터타입이 다르기 때문에 데이터 타입에 대한 정보는 별도로 제공받아야 한다. 다음은 오라클의 데이터 타입과 MySQL의 데이터 타입을 요약해 놓은 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.4.1 </FONT><FONT FACE="바탕">오라클</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">기본데이터</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">타입</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">CHAR(size) : 길이가 size인 고정길이 문자값으로 최소길이는 1, 최대길이는 255이다.</FONT>
<P><FONT FACE="바탕">VARCHAR2(size) : CHAR의 확장형으로 최대길이는 2000이다.</FONT>
<P><FONT FACE="바탕">NUMBER : 38자리까지 유효한 부동소수점 숫자를 표현한다.</FONT>
<P><FONT FACE="바탕">NUMBER(p,s) : p는 전체자리수이고, 소수점 이하자리수가 s인 NUMBER를 표현한다.</FONT>
<P><FONT FACE="바탕">DATA : B.C.4712년 1월에서 A.D.4712년 12월 1일 사이의 일자와 시간을 표현한다.</FONT>
<P><FONT FACE="바탕">LONG : 2G바이트까지의 가변길이 문자값으로, 테이블 당 한 개의 LONG열만 허용한다.</FONT>
<P><FONT FACE="바탕">RAW, LONGRAW : 각각 VARCHAR2, LONG과 같지만 이진 데이터를 저장하는데 사용한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.1.4.2 MySQL </FONT><FONT FACE="바탕">기본</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">데이터</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">타입</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">CHAR(size) : 최대 1∼255사이의 길이를 갖는 문자값을 나타낸다.</FONT>
<P><FONT FACE="바탕">TEXT : 최대 216의 길이를 갖는 문자열을 표현한다.</FONT>
<P><FONT FACE="바탕">LONGTEXT : 최대 232의 길이를 갖는 문자열을 표현한다.</FONT>
<P><FONT FACE="바탕">INT(size) : 길이가 size인 정수를 표현한다. 표현범위는 &plusmn;231까지 표현이 가능하다.</FONT>
<P><FONT FACE="바탕">FLOAT : 24자리까지 유효한 부동소수점을 표현한다.</FONT>
<P><FONT FACE="바탕">FLOAT(p,s) : 전체 자리수가 p이고, 소수점 이하 자리수가 s인 부동소수점을 나타낸다.</FONT>
<P><FONT FACE="바탕">DOUBLE : 부동소수점을 나타낸다.</FONT>
<P><FONT FACE="바탕">DATE : 1000-01-01부터 9999-12-31 까지 사이의 날짜를 표현한다.   
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.1.5 JDBC </FONT><FONT FACE="바탕">환경설정</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDBC 환경에 앞서 JDK 환경설정이 이루어져야 한다. 우선 JDK를 설치했으면, 어떤 데이터베이스엔진(DBMS)을 사용할 것인지를 결정해야 한다. 현재 많이 사용되는 데이터베이스 엔진은 Oracle, Sybase, Informix 등이 있고 무료로 사용할 수 있는 제품은  mSQL, MySQL 등이 있다. 상용으로 쓰이는 엔진이라도 평가판은 무료로 이용할 수 있다. 각 회사의 홈페이지를 이용하면 쉽게 다운로드 받을 수 있다. 현재 JDBC는 java.sql 패키지의 이름으로 알 수 있듯이 관계형 엔진(R-DBMS)만 지원하고 OODB는 지원하지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">사용할 데이터베이스를 결정했으면 해당 소프트웨어를 내려받아 설치한다. 이때 해당 JDBC 드라이버 클래스도 함께 내려받아야 한다. 주로 .jar이나 .zip 형태로 클래스가 묶여 있다. 오라클은 8i와 9i버전의 경우 classes12.zip파일로 되어 있으며, MySQL은 버전에 따라 조금씩 다르지만 mm.mysql-X.X.X-bin.jar 파일로 되어있다. MySQL 드라이버는 파일명을  mysql.jar로 바꾸어 사용하는 것이 편리하다.</FONT>
<BR>
<P><FONT FACE="바탕">데이터베이스를 설치한 후에 해당 JDBC 드라이버 파일이 있는 디렉토리를 classpath에 설정하거나, JDK 1.2 이상의 환경에서는 JDK가 설치되어 있는 디렉토리 아래의 jre/lib/ext에 복사해도 된다. 하지만 컴파일시 클래스파일을 찾지 못하면 따로 classpath 옵션을 설정해주어야 한다. 이때 현재 폴더(.)와 JDK가 설치된 폴더도 같이 설정하는 것을 잊지말자.</FONT>
<BR>
<P><FONT FACE="바탕">오라클 데이터베이스 드라이버 사용</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=612 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">CLASSPATH=.;c:\j2sdk;C:\j2sdk\jre\lib\ext\classes12.zip</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">MySQL 데이터베이스 드라이버 사용</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=612 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">CLASSPATH=.;c:\j2sdk;C:\j2sdk\jre\lib\ext\mysql.jar</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">데이터베이스와 JDBC 드라이버 설치를 마치면 교재에서 예제로 사용할 테이블을 만들어야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">오라클에서는 SQL*Plus를 이용하여 다음과 같은 SQL을 실행시켜 테이블을 만든다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=141>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">/* address table sql - Oracle */ </FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">CREATE TABLE address_table ( </FONT>
<P>	<FONT FACE="Courier New">id 		NUMBER(4),</FONT>
<P>	<FONT FACE="Courier New">name</FONT>		<FONT FACE="Courier New">CHAR(20),</FONT>
<P>	<FONT FACE="Courier New">addr</FONT>		<FONT FACE="Courier New">CHAR(50)</FONT>
<P><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">MySQL은 MySQL을 실행시키고 use명령으로 앞에서 만들었던 mydb 데이터베이스로 이동한 후 다음과 같은 질의문을 실행시켜 테이블을 만든다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=141>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">/* address table sql - MySQL */ </FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">CREATE TABLE address_table ( </FONT>
<P>	<FONT FACE="Courier New">id 		INT(4),</FONT>
<P>	<FONT FACE="Courier New">name</FONT>		<FONT FACE="Courier New">CHAR(20),</FONT>
<P>	<FONT FACE="Courier New">addr</FONT>		<FONT FACE="Courier New">CHAR(50)</FONT>
<P><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">테이블이 생성되었으면 다음의 질의문으로 테이블에 데이터를 입력한다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=213>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">/* data insert */ </FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<BR>
<P><FONT FACE="Courier New">2:</FONT>
<BR>
<P><FONT FACE="Courier New">3:</FONT>
<BR>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">INSERT INTO address_table (id, name, addr) </FONT>
<P>	<FONT FACE="Courier New">VALUES(1, '</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">', '</FONT><FONT FACE="바탕">서울시</FONT><FONT FACE="Courier New">'); </FONT>
<P><FONT FACE="Courier New">INSERT INTO address_table (id, name, addr) </FONT>
<P>	<FONT FACE="Courier New">VALUES(2, '</FONT><FONT FACE="바탕">허달님</FONT><FONT FACE="Courier New">', '</FONT><FONT FACE="바탕">광주시</FONT><FONT FACE="Courier New">'); </FONT>
<P><FONT FACE="Courier New">INSERT INTO address_table (id, name, addr) </FONT>
<P>	<FONT FACE="Courier New">VALUES(3, '</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">', '</FONT><FONT FACE="바탕">서울시</FONT><FONT FACE="Courier New">'); </FONT>
<P><FONT FACE="Courier New">INSERT INTO address_table (id, name, addr) </FONT>
<P>	<FONT FACE="Courier New">VALUES(4, '</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">', '</FONT><FONT FACE="바탕">전주시</FONT><FONT FACE="Courier New">'); </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">자료 입력이 끝났으면 오라클의 경우에는 commit;를 입력하여 작업을 확인시킨다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=58>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">/* </FONT><FONT FACE="바탕">작업</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">확인</FONT><FONT FACE="HY타자B"> */</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">COMMIT;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">MySQL에서는 위의 COMMIT 질의문이 필요 없다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞에서 만든 데이터베이스에 연결하여 원하는 결과를 얻는 예를 보인 것이다. 수정할 부분이 있으면 자신의 환경에 맞게 수정한 후 컴파일 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=849>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">SimpleJDBC.java </FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<BR>
<P><FONT FACE="Courier New">17:</FONT>
<BR>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">// </FONT><FONT FACE="바탕">수정할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사항</FONT><FONT FACE="Courier New"> (URL) </FONT>
<P><FONT FACE="Courier New">// - &quot;127.0.0.1&quot; </FONT><FONT FACE="바탕">은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">데이터베이스가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">설치된</FONT><FONT FACE="Courier New"> Server</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">주소</FONT>
<P><FONT FACE="Courier New">// - &quot;orcl&quot;</FONT><FONT FACE="바탕">은</FONT><FONT FACE="Courier New"> Oracle DB</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> SID </FONT><FONT FACE="바탕">즉</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">시스템</FONT><FONT FACE="Courier New"> id</FONT>
<P><FONT FACE="Courier New">// - &quot;mydb&quot;</FONT><FONT FACE="바탕">는</FONT><FONT FACE="Courier New"> MySQL</FONT><FONT FACE="바탕">에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용자가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">만든</FONT><FONT FACE="Courier New"> database</FONT>
<P><FONT FACE="Courier New">// - &quot;scott&quot;,&quot;tiger&quot;</FONT><FONT FACE="바탕">는</FONT><FONT FACE="Courier New"> DB </FONT><FONT FACE="바탕">사용자</FONT><FONT FACE="Courier New"> id</FONT><FONT FACE="바탕">와</FONT><FONT FACE="Courier New"> password</FONT>
<BR>
<P><FONT FACE="Courier New">import java.sql.*; 
</FONT><BR>
<P><FONT FACE="Courier New">public class SimpleJDBC { 
</FONT><BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) throws Exception{ 
</FONT><BR>
<P>		<B><FONT FACE="Courier New">Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</FONT></B>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;); //MySQL</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;, &quot;scott&quot;, &quot;tiger&quot; ); </FONT></B>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:mysql://127.0.0.1:3306/mydb&quot;, &quot;scott&quot;, &quot;tiger&quot; ); 
</FONT><BR>
<P>		<B><FONT FACE="Courier New">Statement stmt = conn.createStatement(); 
</FONT></B><BR>
<P>		<B><FONT FACE="Courier New">String sql = &quot;SELECT id, name, addr FROM address_table&quot;;</FONT></B>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">String sql = &quot;SELECT * FROM address_table&quot;;</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">ResultSet rset = stmt.executeQuery(sql);</FONT></B><FONT FACE="Courier New"> 
</FONT><BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;id \t name \t addr&quot;);</FONT>
<P>		<FONT FACE="Courier New">while(</FONT><B><FONT FACE="Courier New">rset.next()</FONT></B><FONT FACE="Courier New">) { </FONT>
<P>			<FONT FACE="Courier New">System.out.print(</FONT><B><FONT FACE="Courier New">rset.getInt(1)</FONT></B><FONT FACE="Courier New">); </FONT>
<P>			<FONT FACE="Courier New">System.out.print(&quot;\t&quot; + </FONT><B><FONT FACE="Courier New">rset.getString(2)</FONT></B><FONT FACE="Courier New">); </FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;\t&quot; + </FONT><B><FONT FACE="Courier New">rset.getString(3)</FONT></B><FONT FACE="Courier New">); </FONT>
<P>		<FONT FACE="Courier New">} 
</FONT><BR>
<P>		<B><FONT FACE="Courier New">conn.close(); </FONT></B>
<P>	<FONT FACE="Courier New">} </FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 프로그램을 실행시켰을 때에 Exception이 발생하지 않고 정상적으로 수행되면 JDBC 개발환경 및 실행환경을 잘 구축한 것이다. Exception이 발생하더라도 오류 메시지를 보고 해결하기 바란다. 프로그램에 대한 자세한 설명은 뒤에서 하기로 한다. 참고로 이 예에서는 13번째 줄과 16번째 줄에서 보면 드라이버로 오라클을 사용했는데, 오라클 데이터베이스의 시스템 아이디(SID)는 orcl로 하였다. 데이터베이스가 MySQL일 경우에는 13번째 줄과 16번째 줄을 각각 14번째 줄과 17번째 줄로 바꾸어 실행해야 한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV349.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">10.2  JDBC API</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDBC 1.0 스펙에서는 java.sql 패키지를 제공하였고, 2.0에서는 몇몇 기능이 추가된 java.sql 패키지와 javax.sql 패키지를 제공한다. java.sql 패키지는 J2SE에 포함되어 있으며 CoreAPI라하고, javax.sql 패키지는 J2EE에 포함되어 있으며 Standard extension API라고 한다. JDK 1.4버전에서는 JDBC 스펙 3.0까지 지원하고 있는데 JDK 1.4 버전의 J2SE에는 java.sql 패키지와 javax.sql 패키지를 모두 포함하고 있다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.2.1 JDBC API</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">java.sql 패키지에는 14개의 인터페이스와 7개의 클래스로 구성되어 있다. 인터페이스는 서로 주고받는 표준인데, 같은 인터페이스를 사용하면 상대방이 누구이건 내가 알고 있는 방법으로 통신을 할 수 있다. JDBC는 이러한 인터페이스의 사상을 잘 구현하고 있는 예이다. 데이터베이스엔진 개발자는 java.sql 패키지에 있는 드라이버 인터페이스를 구현하여 자바와 자신의 DBMS를 연결할 수 있는 드라이버를 만들고, 자바 프로그램 개발자는 java.sql 패키지에 있는 인터페이스와 클래스를 가지고 데이터베이스를 사용하는 프로그램을 개발하게 된다.</FONT>
<P><FONT FACE="바탕">JDBC 프로그램에 쉽게 적응하려면 java.sql 패키지에 있는 클래스, 인터페이스 및 관련 메소드를 잘 이해해야 한다. 다음 그림은 JDBC 클래스 및 인터페이스 상속관계를 나타낸 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV350.GIF" BORDER=0 WIDTH=418 HEIGHT=240 ALIGN=BOTTOM>
<P><FONT FACE="바탕">- DriverManager : JVM에서 JDBC 전체를 관리하는 클래스로 드라이버를 등록하고, Connec -tion객체를 얻는데 사용한다.</FONT>
<P><FONT FACE="바탕">- Driver : 데이터베이스를 만든 회사(Oracle, Informix, Sybase, 등)에서 데이터베이스를 연결할 수 있는 JDBC 드라이버 클래스를 만드는 인터페이스이다. 
</FONT><P><FONT FACE="바탕">- Connection : 데이터베이스와 연결성을 가지고 있는 인터페이스이다. 프로그래머는 Driver -Manger로부터 얻어내어 데이터베이스와 연결한다. 
</FONT><P><FONT FACE="바탕">- Statement : 실제 SQL문을 실행하기 위해 Connection에서 받아 내는 인터페이스이다. 
</FONT><P><FONT FACE="바탕">- ResultSet : Statement를 통해 SQL SELECT문을 실행한 결과 데이터값을 갖는 인터페이스이다. 한 개의 Statement는 한 개의 ResultSet 공간만 할당받는다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.2.2 JDBC </FONT><FONT FACE="바탕">드라이버</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">타입</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDBC 드라이버 타입은 다음과 같이 4가지가 있다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.2.2.1 </FONT><FONT FACE="바탕">타입</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">Ⅰ</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">드라이버</FONT><FONT FACE="HY울릉도M">(JDBC-ODBC Bridge Driver)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">ODBC 드라이버를 연결한다. 이 타입의 드라이버는 마이크로소프트의 장점을 살리기 위해 제공되는 드라이버다. 마이크로소프트의 표준인 ODBC 드라이버를 연결하고 이를 통하여 데이터베이스를 접근하는 방식이기 때문에 JDBC-ODBC 가교 드라이버라고도 한다. 타입 Ⅰ드라이버를 사용하려면 클라이언트 컴퓨터에 ODBC 드라이버와 JDBC 드라이버가 설치되어 있어야 한다. 이 때문에 동적으로 드라이버가 다운로드 되는 환경에서는 사용하기 어렵고 고정된 드라이버를 사용하는 환경에 적합하다. JDBC 1.2부터 기본으로 장착되어 있으므로 따로 설치할 필요가 없다. JVM에 기본적으로 제공하는 JDBC-ODBC 드라이버는 sun.jdbc.odbc.JdbcOdbcDriver이다. 이 드라이버의 장점은 거의 모든 데이터베이스에 사용이 가능하다는 것이다. 단점으로는 ODBC를 사용하므로 100% 자바가 아닌데, 이는 프로그램이 데이터베이스에 의존적이고 또한 플랫폼 독립적이지 않다는 것을 의미한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.2.2.2 </FONT><FONT FACE="바탕">타입</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">Ⅱ</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">드라이버</FONT><FONT FACE="HY울릉도M">(Native API Partly Driver)</FONT></SPAN></FONT>
<P>  
<P><FONT FACE="바탕">타입 Ⅱ 드라이버는 일부가 자바로 되어있는 JDBC 드라이버로 데이터베이스 회사에서 제공해 준다. 따라서 플랫폼 의존적이다. 전체가 자바로 구현되지는 않았지만 수행능력이 뛰어나 속도가 빠르다는 장점을 가지고 있다. 타입 Ⅲ 드라이버와 마찬가지로 클라이언트 컴퓨터에 설치하는 드라이버가 필요하다. 이러한 형식은 오라클,  인포믹스(Informix), DB2 등 DBMS 회사가 제공하는 API를 다시 호출하게 되는데, 타입 Ⅰ 드라이버와 마찬가지로 클라이언트 컴퓨터에 정적으로 설치하여 데이터베이스와 연동하는 환경에 적합하다. 오라클의 oci타입이 이에 해당한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.2.2.3 </FONT><FONT FACE="바탕">타입</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">Ⅲ</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">드라이버</FONT><FONT FACE="HY울릉도M">(JDBC-NET Pure Java Driver)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Type Ⅲ 드라이버는 프로토콜이나 플랫폼에 무관한 완전한 자바기술 및 코드로 이루어진 JDBC 드라이버를 의미한다. 이 타입은 JDBC API 표준에 따라 만들어졌기 때문에 DBMS의 종류에 상관없이 사용할 수 있다. 4가지 타입 중에서 가장 융통성이 뛰어나기 때문에 동적으로 내려받는 애플릿과 같은 환경에 적합하며, 클라이언트 컴퓨터가 정적으로 이루어졌다고 하더라도 시스템 유지보수가 쉬워진다. 단점이라면 유료이다. 특별한 요구사항이 필요한 경우 즉, 특정 DBMS에만 제공되는 기능을 사용할 때 또는 DBMS 자체가 타입 Ⅲ 드라이버를 지원하지 않는 경우를 제외하고는 타입 Ⅲ 드라이버를 사용하는 것이 가장 이상적이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">10.2.2.4 </FONT><FONT FACE="바탕">타입</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">Ⅳ</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">드라이버</FONT><FONT FACE="HY울릉도M">(Native Protocol Pure Java)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Type Ⅳ 드라이버는 데이터베이스 회사의 프로토콜을 사용하며, 전체가 자바기술 및 코드로 이루어진 JDBC 드라이버를 의미한다. Type Ⅲ 드라이버와는 다른데 JDBC API 표준에 따르지 않고 DBMS 회사가 표준에 기능을 추가하거나 삭제하여 독자적인 형태로 만든 타입이다. 따라서 특정 DBMS에 의존적인 반면에 해당 DBMS만이 제공하는 기능을 사용할 수 있는 장점이 있다. 클라이언트가 동적인 상황에서 특정 DBMS만 제공하는 기능을 사용할 때 적합하다. MS-SQL의 경우에만 유료이고 나머지는 해당하는 데이터베이스 사이트에서 무료로 내려받아 사용할 수 있다. 플랫폼 독립으로 프로그래밍이 가능하지만 속도가 느리다는 단점도 있는데,  본 교재에서는 바로 타입 Ⅳ 드라이버를 사용하기로 한다. 참고로 오라클은 thin타입에 해당한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="FYXIV351.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">10.3  JDBC </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">구조</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDBC 프로그램을 이해하려면 데이터베이스를 사용하는데 필요한 몇 가지 절차를 확실하게 이해해야 한다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> JDBC 프로그램 작성과정은 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P>    <FONT FACE="바탕">1. 드라이버를 로딩한다. 
</FONT><P>    <FONT FACE="바탕">2. 데이터베이스와 연결하여 Connection 객체를 얻는다. 
</FONT><P>    <FONT FACE="바탕">3. Connection으로부터 SQL을 실행하기 위한 Statement 객체를 얻는다.</FONT>
<P>    <FONT FACE="바탕">4. Statement 객체의 메소드를 이용하여 SQL을 실행한다. 
</FONT><P>    <FONT FACE="바탕">5. SQL 실행결과인 ResultSet 객체를 얻는다.(SELECT문 경우) 
</FONT><P>    <FONT FACE="바탕">6. ResultSet 객체의 결과를 반복문을 이용하여 처리한다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.3.1 </FONT><FONT FACE="바탕">드라이버</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">로딩</FONT><FONT FACE="HY부활M">(Driver Loading)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JDBC드라이버를 로딩하는 방법은 크게 4가지가 있는데 본교재에서는 세 번째 방법을 사용하겠지만 다른 방법도 참고로 알고 있으면 좋을 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">[</FONT></SPAN></FONT><FONT FACE="바탕">방법 1</FONT><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">]</FONT></SPAN></FONT>
<P><FONT FACE="바탕">JDBC 드라이버를 설치한 후 프로그램에서 해당 드라이버를 로딩하려면 다음과 같이 java.sql 패키지에 있는 DriverManger의 registerDriver() 메소드를 이용한다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">Driver Manager</FONT><FONT FACE="바탕">에</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">등록</FONT><FONT FACE="HY타자B"> - Oracle</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">Driver Manager</FONT><FONT FACE="바탕">에</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">등록</FONT><FONT FACE="HY타자B"> - MySQL</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">DriverManager.registerDriver(new org.gjt.mm.mysql.Driver());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">new oracle.jdbc.driver.OracleDriver()는 해당 드라이버의 인스턴스를 생성한다. 명칭이 길어서 불편하지만 오라클측에서 만든 명칭이기 때문에 그대로 사용할 수 밖에 없다. 만약 다른 데이터베이스를 사용한다면 해당 데이터베이스의 JDBC 메뉴얼을 통하여 어떤 이름으로 드라이버의 인스턴스를 만들어야 하는지 익혀야 한다.  
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">[</FONT></SPAN></FONT><FONT FACE="바탕">방법 2</FONT><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">]</FONT></SPAN></FONT>
<P><FONT FACE="바탕">DriverManager클래스를 사용하지 않고 다음과 같이 해당 드라이버의 인스턴스만 생성해도 자동으로 로딩된다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="바탕">해당</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">드라이버의</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">인스턴스만</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">생성</FONT><FONT FACE="HY타자B"> - Oracle</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">new oracle.jdbc.driver.OracleDriver()</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="바탕">해당</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">드라이버의</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">인스턴스만</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">생성</FONT><FONT FACE="HY타자B"> - MySQL</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">new org.gjt.mm.mysql.Driver();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">[</FONT></SPAN></FONT><FONT FACE="바탕">방법 3</FONT><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">]</FONT></SPAN></FONT>
<P><FONT FACE="바탕">System 패키지의 Class 클래스의 API를 이용하면 문자열을 이용하여 드라이버를 로딩할 수 있다.  
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">Class.forName() </FONT><FONT FACE="바탕">사용</FONT><FONT FACE="HY타자B"> - Oracle</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">Class.forName() </FONT><FONT FACE="바탕">사용</FONT><FONT FACE="HY타자B"> - MySQL</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P ALIGN=RIGHT><FONT FACE="바탕">Class.forName() 메소드는 ClassNotFoundException을 발생하므로 해당하는 예외처리를 해 주어야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">DriverManager에 등록하거나 Class.forName()을 이용해도 모두 비슷하지만 new를 이용할 때에는 먼저 클래스 파일을 컴파일할 때 체크해야하고, Class.forName()을 이용할 때는 실행시 체크해야 한다. 또한 new를 이용하여 객체를 직접 생성할 경우에는 해당하는 드라이버의 static 블록에서도 객체를 만들기 때문에 사실상 객체가 두 개씩 만들어진다. 따라서, Class.forName()을 사용하는 것이 더 편리하다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">[</FONT></SPAN></FONT><FONT FACE="바탕">방법 4</FONT><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">]</FONT></SPAN></FONT>
<P><FONT FACE="바탕">다음과 같이 프롬프트 상에서 자바를 실행하면서 JVM의 jdbc.drivers 프로퍼티를 설정하는 방법도 있다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">System Property </FONT><FONT FACE="바탕">사용</FONT><FONT FACE="HY타자B"> - Oracle</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P>&gt;<FONT FACE="Courier New"> java -D jdbc.drivers=oracle.jdbc.driver.OracleDriver SimpleJDBC </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">System Property </FONT><FONT FACE="바탕">사용</FONT><FONT FACE="HY타자B"> - MySQL</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P>&gt;<FONT FACE="Courier New"> java -D jdbc.drivers=org.gjt.mm.mysql.Driver SimpleJDBC </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.3.2 Connection </FONT><FONT FACE="바탕">객체</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">생성</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Connection 객체를 얻는 방법은 DriverManager 클래스의 getConnection() 메소드를 이용한다. 하지만 시스템에 로딩된 어떤 드라이버의 Connection을 가져올 것인지는 URL을 이용하여 결정해야 한다. (JVM은 여러 가지 드라이버가 로딩될 수 있기 때문. ) 이 외에 데이터베이스 사용자 아이디와 암호를 주어야 한다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">Connection </FONT><FONT FACE="바탕">객체</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">생성</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">Connection con = DriverManager.getConnection( URL, ID, PASSWD );</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>	<FONT FACE="바탕">URL - Oracle : jdbc:oracle:thin:@127.0.0.1:1521:database_SID</FONT>
<P>	        <FONT FACE="바탕">MySQL : jdbc:mysql://127.0.0.1:3306/database_name</FONT>
<P>	        <FONT FACE="바탕">ID : 아이디</FONT>
<P>	        <FONT FACE="바탕">PASSWD : 비밀번호</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> 오라클의 경우 ID와 PASSWD는 scott과 tiger를 사용한다.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">URL(Unified Resource Locator)은 DBMS가 설치된 컴퓨터가 어디인가를 알려주는 역할을 하는데, JDBC 드라이버를 만든 회사측에서 제공하는 고유의 String을 알아야 하기 때문에 해당 드라이버의 JDBC 메뉴얼을 참고해야 한다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.3.3 Statement </FONT><FONT FACE="바탕">객체생성</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">마지막으로 SQL을 수행하려면 Statement 객체를 Connection 객체로부터 얻어야 한다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=61>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">Statement </FONT><FONT FACE="바탕">객체</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">생성</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">Statement stmt = conn.createStatement(); </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.3.4 Statement </FONT><FONT FACE="바탕">객체의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">메소드를</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">이용한</FONT><FONT FACE="HY부활M"> SQL </FONT><FONT FACE="바탕">실행</FONT><FONT FACE="HY부활M"> 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">데이터베이스를 이용하려면 SQL문을 문자열로 만들어 실행해야 한다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=74>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">SELECT</FONT><FONT FACE="바탕">문</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">String sql = &quot;SELECT id, name, addr FROM address_table&quot;;</FONT>
<P><FONT FACE="Courier New">ResultSet rset = stmt.executeQuery(sql); </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">SELECT 문은 Statement객체의 executeQuery() 메소드를 사용한다. 반환값은 ResultSet 객체이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=97>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">DML(INSERT, UPDATE, DELETE) </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY타자B"> DDL(CREATE TABLE, DROP TABLE, ALTER TABLE) </FONT><FONT FACE="바탕">등</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">String sql = &quot;INSERT INTO address_table ( id, name, addr ) VALUES ( 5, 'JAMES', 'NEW YORK' ) &quot;; </FONT>
<P><FONT FACE="Courier New">int  count = stmt.executeUpdate(sql); </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">Statement 객체의 executeUpdate() 메소드를 사용한다. 반환값은  처리된 행(row)의 개수이다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.3.5 </FONT><FONT FACE="바탕">질의결과</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">얻기</FONT><FONT FACE="HY부활M">(SELECT</FONT><FONT FACE="바탕">문</FONT><FONT FACE="HY부활M">)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">SELECT문 이외의 질의문을 사용하려면 executeUpdate()메소드를 이용하는데 이때의 결과는 질의문이 적용된 행의 수를 반환한다. 하지만 SELECT 문일 경우 Statment.executeQuery() 메소드의 반환값이 ResulSet이므로 다음과 같이 ResultSet 객체를 얻는다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=74>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">SELECT</FONT><FONT FACE="바탕">문</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">String sql = &quot;SELECT id, name, addr FROM address_table&quot;;</FONT>
<P><FONT FACE="Courier New">ResultSet rset = stmt.executeQuery(sql); </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.3.6 </FONT><FONT FACE="바탕">데이터</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">추출</FONT></SPAN></FONT>
<P><FONT FACE="바탕">executeQuery() 메소드로부터 ResultSet 객체를 얻은 다음 테이블에서 원하는 결과를 얻어낸다. ResultSet은 2차원 테이블에서 결과를 유도해 낼 수 있다. 첫 번째 레코드에 접근하려면 next() 메소드를 호출하는데 레코드가 있으면 진(true)를 반환하고, 없으면 위(false)를 반환한다. 그 다음 레코드도 마찬가지로 next()를 이용하여 다음 레코드로 이동하게 된다.  
</FONT><P><FONT FACE="바탕">원하는 데이터를 얻기 위해서는 getString(), getInt(), getDate(), getObject() ... 등의 메소드를 데이터 타입에 맞도록 사용한다. SELECT된 한 행에서 데이터의 순서는 0부터 시작하는 것이 아니고 1부터 시작한다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=655 HEIGHT=140>
<TD VALIGN=MIDDLE WIDTH=3%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=96%>
<P><FONT FACE="HY타자B">Looping </FONT><FONT FACE="바탕">처리</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=3%>
<BR></TD>
<TD VALIGN=TOP WIDTH=96%>
<P><FONT FACE="Courier New">while(rset.next()) { </FONT>
<P>	<FONT FACE="Courier New">System.out.println(rset.getInt(1)); </FONT>
<P>	<FONT FACE="Courier New">System.out.println(rset.getString(2)); </FONT>
<P>	<FONT FACE="Courier New">System.out.println(rset.getString(3)); </FONT>
<P><FONT FACE="Courier New">} </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV352.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">10.4  </FONT><FONT FACE="바탕">유용한</FONT><FONT FACE="Bookman Old Style"> JDBC API</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 몇 가지 유용하게 사용되는 API를 설명하기로 한다. API문서를 참고하면 데이터베이스 관련 작업을 쉽게 할 수 있다. 이후의 프로그램은 오라클과 MySQL 데이터베이스를 예로 들기로 한다. 만약 다른 데이터베이스를 사용하려면 해당하는 드라이버로 바꾸어 실행해야 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.4.1 PreparedStatement 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">같은 SQL을 반복사용하는 경우 문자열로 만드는 것은 번거로운 작업이다. 따라서, 이런 경우 Prepared Statement 인터페이스를 사용한다.  
</FONT><P><FONT FACE="바탕">PreparedStatement는 SQL 문자열을 사용하여 미리 준비해 놓는 경우를 말하는데 이때 변경되는 값은 &quot;?&quot;를 사용하여 표현하고 SQL을 실행하기 전에 &quot;?&quot; 값을 setXxx()함수를 이용하여 치환하는 방식이다. setXxx()함수는 setInt(), setLong(),setString().. 등 데이터 타입에 따라 다양한 형태를 취하며 인자(argument)는 &quot;?&quot;의 순번을 준다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=910>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestPrepared.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<BR>
<P><FONT FACE="Courier New">10:</FONT>
<BR>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<BR>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.sql.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class  TestPrepared {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) throws Exception {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;); //MySQL</FONT>
<BR>
<P>		<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;, &quot;scott&quot;, &quot;tiger&quot; );</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:mysql://127.0.0.1:3306/mydb&quot;, &quot;scott&quot;, &quot;tiger&quot; ); 
</FONT><BR>
<P>		<FONT FACE="Courier New">Statement stmt = conn.createStatement();</FONT>
<BR>
<P>		<FONT FACE="Courier New">int[] id = { 100, 200, 300 };</FONT>
<P>		<FONT FACE="Courier New">String[] name = { &quot;AAA&quot;, &quot;BBB&quot;, &quot;CCC&quot; };</FONT>
<P>		<FONT FACE="Courier New">String[] addr = { &quot;Seoul&quot;, &quot;Pusan&quot;, &quot;Gwangju&quot; }; 
</FONT><BR>
<P>		<B><FONT FACE="Courier New">String sql = &quot;INSERT INTO address_table (id, name, addr) VALUES ( ?, ?, ? )&quot;; 
</FONT></B><BR>
<P>		<B><FONT FACE="Courier New">PreparedStatement pstmt = conn.prepareStatement(sql);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i &lt; id.length; i++) { </FONT>
<P>			<B><FONT FACE="Courier New">pstmt.setInt(1, id[i]);</FONT></B>
<P>			<B><FONT FACE="Courier New">pstmt.setString(2, name[i]);</FONT></B>
<P>			<B><FONT FACE="Courier New">pstmt.setString(3, addr[i]);</FONT></B>
<P>			<B><FONT FACE="Courier New">pstmt.executeUpdate(); </FONT></B>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">ResultSet rset = stmt.executeQuery(&quot;SELECT id, name, addr FROM address_table&quot;); 
</FONT><BR>
<P>		<FONT FACE="Courier New">while(rset.next()) { </FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;DB</FONT><FONT FACE="바탕">로부터</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">데이터를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">가져옵니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;id: &quot; + rset.getInt(1)); </FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;name: &quot; + rset.getString(2));</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;addr: &quot; + rset.getString(3)); </FONT>
<P>		<FONT FACE="Courier New">} 
</FONT><BR>
<P>		<FONT FACE="Courier New">conn.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.4.2 CallableStatment 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">대부분의 상용 R-DBMS는 내장함수(Stored Procedure)를 제공한다. 내장함수는 빈번하게 사용되는 함수 등을 미리 프로그램하여 컴파일러에 내장시켜 사용자가 함수명만 호출하여 사용하게 만든 방식이다. CallableStatement를 이용하여 사용하게 되는데, CallableStatement는 PreparedStatement를 상속받은 인터페이스이며 인자값 설정은 PreparedStatement로부터 상속받은 setXxx() 메소드를 사용하고, 결과 값을 반환 받으려면 getXxx() 메소드를 이용한다. 내장함수의 호출방법은 다음과 같이 표현하며, 변수는 PreparedStatment와 같이 &quot;?&quot;로 표시한다. 아래의 예에서 보이는 CallableStatement는 MySQL에서는 사용할 수 없다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=605>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestCallable.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<BR>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.sql.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class  TestCallable {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) throws Exception {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;, &quot;scott&quot;, &quot;tiger&quot; );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Statement stmt = conn.createStatement();</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">String call = &quot;{ ? = call maxplus( ? , ? ) }&quot;;</FONT></B><FONT FACE="Courier New"> </FONT>
<P>		<FONT FACE="Courier New">int result = 0; 
</FONT><BR>
<P>		<B><FONT FACE="Courier New">CallableStatement cstmt = conn.prepareCall(call); </FONT></B>
<P>		<B><FONT FACE="Courier New">cstmt.setInt(2,500); </FONT></B>
<P>		<B><FONT FACE="Courier New">cstmt.setInt(3,20);</FONT></B>	 <FONT FACE="Courier New">//(</FONT><FONT FACE="바탕">최대값</FONT><FONT FACE="Courier New"> + 1500) / 20 = </FONT>
<P>		<B><FONT FACE="Courier New">cstmt.registerOutParameter(1, java.sql.Types.INTEGER);</FONT></B><FONT FACE="Courier New"> </FONT>
<P>		<FONT FACE="Courier New">cstmt.execute();        </FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;result:&quot; + </FONT><B><FONT FACE="Courier New">cstmt.getInt(1)</FONT></B><FONT FACE="Courier New">); 
</FONT><BR>
<P>		<FONT FACE="Courier New">conn.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 예제를 실행시키려면 먼저 오라클의 SQL*Plus에서 다음처럼 테이블을 만들고 데이터를 입력한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Oracle</FONT><FONT FACE="바탕">의</FONT><FONT FACE="HY타자B"> Query</FONT><FONT FACE="바탕">문</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="Courier New">2:</FONT>
<BR>
<BR>
<P><FONT FACE="Courier New">3:</FONT>
<BR>
<BR>
<BR>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">CREATE TABLE shares</FONT>
<P><FONT FACE="Courier New">( ssn 		CHAR(15) 	NOT NULL,</FONT>
<P>  <FONT FACE="Courier New">symbol 	CHAR(8) 	NOT NULL,</FONT>
<P>  <FONT FACE="Courier New">quantity 	NUMBER(4) 	NOT NULL );</FONT>
<BR>
<P><FONT FACE="Courier New">INSERT 	INTO </FONT>
<P>	<FONT FACE="Courier New">shares(ssn, symbol, quantity)</FONT>
<P> 	<FONT FACE="Courier New">VALUES 	('111-120', 'SUNW', 100);</FONT>
<P><FONT FACE="Courier New">INSERT 	INTO </FONT>
<P>	<FONT FACE="Courier New">shares(ssn, symbol, quantity)</FONT>	
<P> 	<FONT FACE="Courier New">VALUES 	('111-120', 'DUKE', 200);</FONT>
<BR>
<P><FONT FACE="Courier New">COMMIT;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞에서처럼 테이블이 만들어지면 다음 내용을 입력하여 maxplus함수를 선언한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">maxplus </FONT><FONT FACE="바탕">함수</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">작성</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">create or replace function maxplus( v_value in number, v_factor in number ) </FONT>
<P>	<FONT FACE="Courier New">return number is max_quantity number(4); </FONT>
<P>	<FONT FACE="Courier New">begin </FONT>
<P>		<FONT FACE="Courier New">select max(quantity) into max_quantity from shares; </FONT>
<P>		<FONT FACE="Courier New">max_quantity := (max_quantity + v_value) / v_factor; </FONT>
<P>	<FONT FACE="Courier New">return(max_quantity);</FONT>
<P><FONT FACE="Courier New">end maxplus; </FONT>
<P><FONT FACE="Courier New">/</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="FYXIV353.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV354.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">result:3</FONT></B>
<BR>
<P><FONT FACE="바탕">앞에서 quantity 필드의 최대값은 200이고 자바코드에서 데이터베이스의 maxplus함수 인자 값으로 각각 500과 20이 입력되었으므로 (200 + 500) / 20 = 35가 되는 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.4.3 ResultSetMetaData 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">ResultSetMetaData는 ResultSet에 대한 정보 즉, 칼럼명(필드명), 개수, 타입 등 메타정보를 알 수 있는 인터페이스로서 ResultSet의 getMetaData() 메소드를 통해 인스턴스를 얻을 수 있다. 이러한 정보를 이용하면 JDBC 프로그램을 더욱 융통성 있게 만들 수 있다. 다음은 테이블 내의 각 열의 이름을 Header로 출력하는 예제이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=922>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestResultSetMetaData.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<BR>
<P><FONT FACE="Courier New">11:</FONT>
<BR>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.sql.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class  TestResultSetMetaData {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) throws Exception {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;); //MySQL</FONT>
<BR>
<P>		<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;, &quot;scott&quot;, &quot;tiger&quot; );</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:mysql://127.0.0.1:3306/mydb&quot;, &quot;scott&quot;, &quot;tiger&quot; ); 
</FONT><BR>
<P>		<FONT FACE="Courier New">Statement stmt = conn.createStatement();</FONT>
<BR>
<P>		<FONT FACE="Courier New">String sql = &quot;SELECT * from address_table&quot;;</FONT>
<P>		<FONT FACE="Courier New">ResultSet rset = stmt.executeQuery(sql); </FONT>
<P>		
<P>		<B><FONT FACE="Courier New">ResultSetMetaData rm = rset.getMetaData(); </FONT></B>
<P>		
<P>		<FONT FACE="Courier New">int colCount = </FONT><B><FONT FACE="Courier New">rm.getColumnCount()</FONT></B><FONT FACE="Courier New">; </FONT>
<P>		
<P>		<FONT FACE="Courier New">// Header print, index</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> 1</FONT><FONT FACE="바탕">부터</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">시작함</FONT>
<P>		<FONT FACE="Courier New">for(int i=1; i &lt;= colCount; i++) { </FONT>
<P>			<FONT FACE="Courier New">System.out.print(</FONT><B><FONT FACE="Courier New">rm.getColumnName(i)</FONT></B><FONT FACE="Courier New"> + &quot;\t\t&quot;); </FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">System.out.println(); </FONT>
<P>		
<P>		<FONT FACE="Courier New">// Data print </FONT>
<P>		<FONT FACE="Courier New">while(rset.next()) { </FONT>
<P>			<FONT FACE="Courier New">System.out.print(rset.getInt(1) + &quot;\t\t&quot;); </FONT>
<P>			<FONT FACE="Courier New">System.out.print(rset.getString(2) + &quot;\t\t&quot;); </FONT>
<P>			<FONT FACE="Courier New">System.out.print(rset.getString(3));</FONT>
<P>			<FONT FACE="Courier New">System.out.println();</FONT>
<P>		<FONT FACE="Courier New">} </FONT>
<P>		<FONT FACE="Courier New">conn.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">10.4.4 DatabaseMetaData 
</FONT></SPAN></FONT><BR>
<P><FONT FACE="바탕">DatabaseMetaData는 사용중인 DBMS에 관련된 여러 가지 정보를 얻을 수 있는 인터페이스이다. 시스템 카탈로그, 키 관련사항, 테이블 관련사항, 트랜잭션 관련사항 등 다양한 정보를 제공한다. 하지만 모든 DBMS가 다 지원하는 것은 아니고 일부 함수는 DBMS에 따라 지원하기도 하고, 지원하지 않을 수도 있다. 
</FONT><P><FONT FACE="바탕">DatabaseMetaData는 Connection 객체의 getMetaData() 함수를 이용하여 인스턴스를 얻을 수 있다. 
</FONT><BR>
<P><FONT FACE="바탕">다음 프로그램은 JDBC 드라이버의 이름과 버전을 출력하는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=519>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestDatabaseMetaData.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<BR>
<P><FONT FACE="Courier New">11:</FONT>
<BR>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.sql.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class  TestDatabaseMetaData {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) throws Exception {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;); //MySQL</FONT>
<BR>
<P>		<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;, &quot;scott&quot;, &quot;tiger&quot; );</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">Connection conn = DriverManager.getConnection( &quot;jdbc:mysql://127.0.0.1:3306/mydb&quot;, &quot;scott&quot;, &quot;tiger&quot; ); 
</FONT><BR>
<P>		<B><FONT FACE="Courier New">DatabaseMetaData dbmd = conn.getMetaData();</FONT></B>
<P>		
<P>		<FONT FACE="Courier New">System.out.println( </FONT><B><FONT FACE="Courier New">dbmd.getDriverName()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>		<FONT FACE="Courier New">System.out.println( </FONT><B><FONT FACE="Courier New">dbmd.getDriverVersion()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">conn.close();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">여기에 언급되지 않은 API도 많이 있는데 좀더 자세한 내용을 알려면 API문서를 참고하기 바란다.</FONT>
<BR>
<P>
<IMG SRC="FYXIV355.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV356.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV357.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="FYXIV358.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[스윙(Swing)]</FONT></SPAN></FONT>
<BR>
<P>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이 장에서 AWT를 사용할 때 보다 더 다양하고 화려한 어플리케이션을 만들 수 있는 스윙에 대해 상세하게 설명하고자 한다. 스윙이 AWT와 다른 점은 AWT가 플랫폼의형의 컴포넌트를 이용하는 반면, 스윙은 비교적 부하가 적은 경량 컴포넌트를 이용하므로 전체적인 프로그램의 실행이 빠르고 작성이 용이한 이점을 가지고 있다. 
</FONT></SPAN></FONT><BR>
<BR>
<BR>
<P>
<P>
<IMG SRC="FYXIV360.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">11.1  </FONT><FONT FACE="바탕">스윙의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">기본적인</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">이해</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">스윙에서 사용할 수 있는 각종 컴포넌트를 설명하기에 앞서 스윙에 관계된 용어와 정의를 간단하게 익히고 구체적인 내용을 설명하기로 한다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.1.1 JFC</FONT></SPAN></FONT>
<P> 
<P><FONT FACE="바탕">자바는 JDK1.1.x에서 JDK1.2로 넘어갈 때 많은 변화가 있었다. 특히 AWT의 단순한 사용자 인터페이스를 개선할 목적으로 5가지 그래픽 API 세트를 추가했는데 바로 JFC(Java Foundation Classes)이다. 이 라이브러리는 자바 1.2.x 이상에 추가되어 기존 AWT의 단순함을 벗어나 상업용으로 사용할 수 있는 화려한 사용자 인터페이스를 제공하게 되었다.</FONT>
<BR>
<P><FONT FACE="바탕">JFC에 포함된 5가지 API를 설명하면 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">Ⅰ AWT : AWT는 JDK1.1.x에도 포함되어있다.</FONT>
<P>  <FONT FACE="돋움">Ⅱ Java 2D : 자바 2D는 그래픽 기능을 보다 다양하게 표현하기 위한 라이브러리로 2D 그래픽 프로그램을 개발할 때 이용하는 고수준의 API를 제공한다. 참고로 Java 2D를 경험하려면 아래와 같이 JDK 1.2 이상 버전에서 JAVA_HOME 폴더의 demo 폴더에서 Java2Demo.html이나 Java2Demo.jar를 실행시키면 된다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">C:\j2sdk\demo\jfc\Java2D&gt;java </FONT></B><FONT FACE="Courier New">-jar Java2Demo.jar</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT FACE="돋움">Ⅲ 접근성 : 스크린 확대 등의 기능을 제공하는데, 이를 이용하면 특별한 입출력 장비를 제어할 수 있는 프로그램을 개발할 수 있다. 예를 들어 음성으로 인식되는 키보드나, 터치 스크린을 제어하는 프로그램을 개발할 수 있다. 
</FONT><P>  <FONT FACE="돋움">Ⅳ 드래그 앤 드롭 : 이 기능은 자바 어플리케이션과 자바가 아닌  기존 프로그램과의 데이터 교환에 사용된다. 
</FONT><P>  <FONT FACE="돋움">Ⅴ 스윙(Swing) : 스윙을 이용하면 AWT를 사용할 때 다양하고 화려한 어플리케이션을 만들 수 있다. 또, AWT가 플랫폼 의존적인 컴포넌트를 이용하는 반면 스윙은 경량 컴포넌트(light weight compolent)를 이용하는 점이 다르다. 경량 컴포넌트는 AWT 1.1에서 소개되었으며, 운영체제에 독립적인 컴포넌트를 작성할 수 있다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.1.2 </FONT><FONT FACE="바탕">룩앤필</FONT><FONT FACE="HY부활M">(Look and Feel)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">스윙을 설명할 때 가장 먼저 언급하는 용어가 &quot;Look and Feel&quot;이다. &quot;Look and Feel&quot;을 &quot;Pluggable Look and Feel&quot;이라고도 하는데, 이는 운영체제와 독립적인 어플리케이션을 개발 할 수 있게 해주는 스윙만의 독특한 특징이다.</FONT>
<P><FONT FACE="바탕">앞서 설명한 AWT로 어플리케이션을 만들어 실행시키면 사용하는 플랫폼에 따라 모양이 달라지는 것을 알 수 있었다. 즉, AWT 어플리케이션을 윈도우에서 수행했을 때와, 리눅스의 X-Window에서 실행했을 때의 결과는 다르다. 이것은 매우 중요한 의미를 갖는데, AWT가 화면에 GUI 컴포넌트를 그릴 때, 운영체제에게 요청을 하므로 운영체제마다 그리는 방식이나 모양이 달라 결과가 같지 않은 것이다. 물론 중요한 문제는 아닐 수도 있다. &quot;Look and Feel&quot;을 이용하면 AWT와 다르게 개발한 프로그램 모습을 운영체제에 상관없이 똑같은 모양으로 보여줄 수 있다. 이것은 AWT처럼 그림을 그리는 일을 운영체제에 맡기는 것이 아니라 그 일 조차도 자바가 한다는 것이다. 그러므로 개발자는 자신만의 고유한 형태로 GUI 컴포넌트를 만들어 사용할 수 있게된다. 예를 들어 5각형 모양의 버튼이 있다면 운영체제의 종류에 관계없이 모양 그대로 화면에 출력된다. 뿐만 아니라, 윈도우 화면에서 X-Window의 기분을 낼 수 있도록 GUI의 모양을 바꿀 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음과 같이 하여 예제 파일을 실행해보자.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=553 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">C:\j2sdk\demo\jfc\SwingSet2&gt;java </FONT></B><FONT FACE="Courier New">-jar SwingSet2.jar</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">AWT의 경우 대부분의 GUI 컴포넌트는 Component 클래스를 상속받아 구현되지만 스윙 GUI 컴포넌트는 JComponent라는 클래스를 상속받아 구현된다. 따라서, 대부분의 컴포넌트 이름이 J로 시작되는 것을 알 수 있다.</FONT>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 자바공식 사이트인 java.sun.com에 있는 내용을 보인 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">http://java.sun.com/docs/books/tutorial/uiswing/components/components_pics.html</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV361.GIF" BORDER=0 WIDTH=476 HEIGHT=439 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P>
<IMG SRC="FYXIV362.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">11.2  </FONT><FONT FACE="바탕">스윙</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">컴포넌트</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">스윙은 17개의 패키지로 구성되어 있으며, 이중에서 javax.swing은 스윙의 기본 패키지로서 컴포넌트, 어덥터, 그리고, 기본컴포넌트 모델에 대한 클래스를 가지고 있다. 
</FONT><P><FONT FACE="바탕">스윙컴포넌트는 AWT컴포넌트보다 수가 많고 기능이 세분화되어 있으며, JComponent를 부모클래스로 갖는다. 이제 스윙의 컴포넌트에 대해 하나씩 설명하기로 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.1 JFrame</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT의 Frame, Window, Dialog 클래스처럼 스윙에도 JFrame, JWindow, JDialog 클래스가 있다. 하지만 이들 클래스는 스윙의 다른 컴포넌트와는 달리 윈도우클래스를 부모클래스로 가지고 있다. 이는 JWindow, JFrame, JDialog가 경량 컴포넌트가 아니라는 것을 의미한다. 
</FONT><P><FONT FACE="바탕">다음은 JWindow와 JFrame의 상속 구조를 나타낸 그림이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV363.GIF" BORDER=0 WIDTH=545 HEIGHT=161 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">JFrame는 AWT의 Frame 클래스와 비슷한 기능을 가지고 있는데, 차이점은 JWindow나 JDialog 클래스처럼 공유된다는 점이 다르다. Frame에서와 같이 컴포넌트를 Frame에 add() 시키거나 setLayout() 메소드에 의해 레이아웃 관리자를 변경시키는 일은 없지만, 컨텐트영역(content pane)이라는 객체를 얻어 이곳에 컴포넌트를 연결하거나 레이아웃 속성을 변경 할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 JFrame을 이용하여 윈도우를 생성한 결과화면이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV364.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 결과화면을 출력시키는 사용 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=249>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JFrameExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JFrameExample {</FONT>
<P>	<FONT FACE="Courier New">private </FONT><B><FONT FACE="Courier New">JFrame f</FONT></B><FONT FACE="Courier New">;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JFrameExample() {</FONT>
<P>		<B><FONT FACE="Courier New">f = new JFrame(&quot;JFrame Example&quot;);</FONT></B>
<P>	<B><FONT FACE="Courier New">}</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=345>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JFrameExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">con = f.getContentPane();</FONT></B>
<P>		<FONT FACE="Courier New">con.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(new JButton(&quot;JButton 1&quot;));</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JFrameExample win = new JFrameExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>  
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">c = f.getContentPane();</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">컨텐트영역(content pane)을 사용하는 이유는 윈도우 안쪽이 JRootPane로 구성되어 있어 AWT처럼 윈도우의 내부 작업을 보호할 수 없기 때문이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 AWT의 Frame에서 컴포넌트를 연결하는 방법과, 스윙에서 컨탠트영역을 이용하여 컴포넌트를 연결하는 방법을 설명한 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">AWT의 Frame에서 컴포넌트를 연결하는 방법은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=573 HEIGHT=43>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">frame.setLayout(new FlowLayout());</FONT>
<P><FONT FACE="Courier New">frame.add(component);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">JFrame에서 컨텐트영역을 사용하는 경우이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=573 HEIGHT=65>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">Container con = jFrame.getContentPane();</FONT>
<P><FONT FACE="Courier New">con.setLayout(new FlowLayout());</FONT>
<P><FONT FACE="Courier New">con.add(component);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">JFrame과 Frame의 다른점은 다음과 같다. 먼저 JFrame은 윈도우 종료이벤트 처리를 하지 않아도 프레임 종료버튼을 누르면 창이 사라지게 된다. 윈도우에 setDefaultCloseOperation() 메소드를 이용하면 JFrame이 종료될 때 세 가지 동작을 지정할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">- DO_NOTHING_ON_CLOSE : AWT의 Frame과 같은 동작을 한다.</FONT>
<P><FONT FACE="바탕">- HIDE_ON_CLOSE : 기본값으로 사용자가 종료하려고 하면 윈도우가 화면에서 사라진다. setVisible(true)를 사용하면 다시 보이게 할 수 있다.</FONT>
<P><FONT FACE="바탕">- DISPOSE_ON_CLOSE : 사용자가 종료하려고 하면 완전히 메모리를 반환하고 종료한다.</FONT>
<BR>
<P><FONT FACE="바탕">종료버튼을 눌렀을 때 종료되게 하려면 앞의 예에서 15와 16번째 줄 사이에 다음 내용을 추가시킨다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=198>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">JRootPane</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">JRootPane은 글래스영역(Glass Pane)과 레이어드영역(Layered Pane)을 가지는 컨테이너이다. 글래스영역은 기본값이 보이지 않는 형태인 반면, 레이어드영역은 보여지는 형태이다.</FONT>
<P> <FONT FACE="바탕">- 레이어드영역은 다시 선택적 메뉴바와 컨텐트영역이라는 두 개의 객체로 구성되는데, 컨텐트영역은 AWT의 Window, Dialog 또는 Frame의 안쪽에서 일어나는 형태로 작업할 수 있다.</FONT>
<P> <FONT FACE="바탕">- 글래스영역에 컴포넌트를 배치하면 항상 컨텐트영역 위에 나타나게 되는데, 이러한 기능은 팝업메뉴나 툴팁 등 문자열이 항상 위에 나타나게할 때 사용된다. </FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.2 JPanel</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JPanel은 AWT의 Panel과 기능이 유사한데, 그래픽 출력시 화면이 떨리는 현상을 예방하는 더블버퍼링 기능을 제공한다. 
</FONT><P><FONT FACE="바탕">JPanel 클래스는 다음 JButton의 예제에서 설명하기로 한다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.3 JButton</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JButton은 java.awt.Button과 유사하고 ActionListener를 사용하여 이벤트를 처리한다. 또 버튼에 아이콘을 나타내는 등 다양하게 버튼을 표현할 수 있으며, 생성자나 setIcon() 메소드를 이용해 아이콘을 사용한다. 
</FONT><P><FONT FACE="바탕">ImageIcon는 이미지를 아이콘으로 만들어 주는 클래스이다. 스윙에서 ImageIcon 클래스를 사용하면 Image 클래스를 사용할 때 이미지가 로딩되는 과정을 모니터 하거나 Image의 객체가 디스크에 저장(serialization)될 수 없는 문제를 해결할 수 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV365.GIF" BORDER=0 WIDTH=225 HEIGHT=116 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">다음 프로그램은 JButton을 이용하여 아이콘을 갖는 버튼을 나타내는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=740>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JButtonExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JButtonExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private JButton myButton;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<P>	<FONT FACE="Courier New">private </FONT><B><FONT FACE="Courier New">Icon dukeIcon = new ImageIcon(&quot;dukeicon.gif&quot;);</FONT></B>
<BR>
<P>	<FONT FACE="Courier New">public JButtonExample() {</FONT>
<P>		<FONT FACE="Courier New">myButton.</FONT><B><FONT FACE="Courier New">setIcon(dukeIcon)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JButton Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<FONT FACE="Courier New">myButton = new JButton(&quot;Duke Button&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.add(myButton);</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout (new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.pack();</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JButtonExample win = new JButtonExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.4 </FONT><FONT FACE="바탕">아이콘</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">아이콘은 고정된 크기의 그림이나 이미지를 표시할 때 사용된다. 보통 JButton이나 JComponent의 아이콘으로 사용된다. 아이콘처럼 동작하는 객체를 만들려면 Icon 인터페이스를 implements하여 paintIcon(), getIconWidth(), getIconHeignt() 메소드를 구현한다. paintIcon() 메소드는 그림을 렌더링 하는데 사용된다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="FYXIV366.GIF" BORDER=0 WIDTH=185 HEIGHT=105 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 Icon인터페이스를 구현하여 임의의 아이콘 클래스를 만든 예를 보인 것이다. 결과는 빨간색 원모양을 갖는 아이콘이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">RedOvalIcon.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class RedOvalIcon implements Icon {</FONT>
<P>	<B><FONT FACE="Courier New">public void paintIcon (Component c, Graphics g, int x, int y)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">g.setColor(Color.red);</FONT>
<P>		<FONT FACE="Courier New">g.drawOval (x, y, getIconWidth(), getIconHeight());</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public int getIconWidth()</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">return 10;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<B><FONT FACE="Courier New">public int getIconHeight()</FONT></B><FONT FACE="Courier New"> { </FONT>
<P>		<FONT FACE="Courier New">return 10;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞에서 만든 아이콘을 버튼에 나타내는 예제이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IconExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class IconExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private JButton myButton;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<P>	<B><FONT FACE="Courier New">private Icon myIcon = new RedOvalIcon();</FONT></B>	</TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">IconExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public IconExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;Icon Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<FONT FACE="Courier New">myButton = new JButton(&quot;My Button&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<B><FONT FACE="Courier New">myButton.setIcon(myIcon);</FONT></B>
<P>		<FONT FACE="Courier New">panel.add(myButton);</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout (new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.pack();</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]) {</FONT>
<P>		<FONT FACE="Courier New">IconExample win = new IconExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.5 JLabel</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JLabel은 java.awt.Label과 유사하지만 확장된 기능은 아이콘을 사용하거나 아이콘의 상대적인 위치에 나타내는 기능을 가지고 있다. 
</FONT><BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV367.GIF" BORDER=0 WIDTH=265 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JLabel의 사용 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=947>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JLabelExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JLabelExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private </FONT><B><FONT FACE="Courier New">JLabel plainLabel, dukeLabel</FONT></B><FONT FACE="Courier New">;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JLabelExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JLable Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<FONT FACE="Courier New">plainLabel = new JLabel(&quot;Plain Small Label&quot;);</FONT>
<P>		<FONT FACE="Courier New">dukeLabel = new JLabel(&quot;Duke Big Label&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">Font dukeFont = new Font(&quot;Serif&quot;, Font.BOLD + Font.ITALIC, 32);</FONT>
<P>		<B><FONT FACE="Courier New">dukeLabel.setFont(dukeFont);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">Icon dukeIcon = new ImageIcon(&quot;dukeicon.gif&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">dukeLabel.setIcon(dukeIcon);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<B><FONT FACE="Courier New">plainLabel.setHorizontalAlignment(JLabel.CENTER); </FONT></B>
<P>		<FONT FACE="Courier New">panel.add(plainLabel, BorderLayout.NORTH);</FONT>
<P>		<FONT FACE="Courier New">panel.add(dukeLabel, BorderLayout.CENTER);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout (new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.pack();</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JLabelExample win = new JLabelExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.6 JCheckBox</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JCheckBox는 AWT의 Checkbox와 유사하지만 라디오버튼을 나타내기 위해 CheckboxGroup을 사용할 필요가 없으며, 체크박스가 선택되었는지의 여부를 아이콘으로 표시할 수 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV368.GIF" BORDER=0 WIDTH=204 HEIGHT=102 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JCheckBox가 선택여부를 아이콘으로 표시하기 위해 임의로 아이콘 클래스를 만든 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=605>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ToggleIcon.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class ToggleIcon implements Icon {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private boolean state;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ToggleIcon(boolean state) {</FONT>
<P>		<FONT FACE="Courier New">this.state = state;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	
<P>	<FONT FACE="Courier New">public void paintIcon (Component c, Graphics g, int x, int y) {</FONT>
<P>		<FONT FACE="Courier New">g.setColor(Color.red);</FONT>
<P>		<FONT FACE="Courier New">if(state) {</FONT>
<P>			<FONT FACE="Courier New">g.fillRect(x, y, getIconWidth(), getIconHeight());</FONT>
<P>		<FONT FACE="Courier New">}else {</FONT>
<P>			<FONT FACE="Courier New">g.drawRect(x, y, getIconWidth(), getIconHeight());</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public int getIconWidth() {</FONT>
<P>		<FONT FACE="Courier New">return 10;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public int getIconHeight() { </FONT>
<P>		<FONT FACE="Courier New">return 10;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 아이콘을 갖는 JCheckBox 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=939>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JCheckBoxExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JCheckBoxExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JCheckBox jcb1, jcb2;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<P>	<FONT FACE="Courier New">private Icon unchecked = new ToggleIcon(false);</FONT>
<P>	<FONT FACE="Courier New">private Icon checked = new ToggleIcon(true);</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JCheckBoxExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JCheckBox Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">jcb1 = new JCheckBox(&quot;Check!&quot;, false);</FONT></B>
<P>		<B><FONT FACE="Courier New">jcb2 = new JCheckBox(&quot;No Check!&quot;, true);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new GridLayout(2,1));</FONT>
<P>		<B><FONT FACE="Courier New">jcb1.setIcon(unchecked);</FONT></B>
<P>		<B><FONT FACE="Courier New">jcb1.setSelectedIcon(checked);</FONT></B>
<P>		<FONT FACE="Courier New">jcb2.setIcon(unchecked);</FONT>
<P>		<FONT FACE="Courier New">jcb2.setSelectedIcon(checked);</FONT>
<P> 		<FONT FACE="Courier New">panel.add(jcb1);</FONT>
<P>		<FONT FACE="Courier New">panel.add(jcb2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout (new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JCheckBoxExample win = new JCheckBoxExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.7 JRadioButton</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">AWT에서 라디오 버튼을 나타낼 때에는 Checkbox와 CheckboxGroup 클래스를 연결하여 작성했지만 스윙은 별도의 JRadioButon 클래스를 제공하고 있다. JRadioButton을 ButtonGroup에 연결하여 라디오버튼 동작을 하게된다.  CheckboxGroup처럼 ButtonGroup도 라디오 버튼의 기능을 할뿐 눈에 보이지는 않는다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV369.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JRadioButton을 이용하여 라디오 버튼을 나타내는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=519>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JRadioButtonExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JRadioButtonExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JRadioButton jrb1, jrb2, jrb3;</FONT></B>
<P>	<B><FONT FACE="Courier New">private ButtonGroup group = new ButtonGroup();</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JRadioButtonExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JRadioButton Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">jrb1 = new JRadioButton(&quot;First&quot;);</FONT></B>
<P>		<FONT FACE="Courier New">jrb2 = new JRadioButton(&quot;Second&quot;);</FONT>
<P>		<FONT FACE="Courier New">jrb3 = new JRadioButton(&quot;Third&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new GridLayout(4,1));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=563>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JRadioButtonExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>		<B><FONT FACE="Courier New">group.add(jrb1);</FONT></B>
<P>		<FONT FACE="Courier New">jrb1.</FONT><B><FONT FACE="Courier New">setMnemonic(KeyEvent.VK_1)</FONT></B><FONT FACE="Courier New">; //Alt+1</FONT>
<P>		<FONT FACE="Courier New">group.add(jrb2);</FONT>
<P>		<FONT FACE="Courier New">jrb2.setSelected(true);</FONT>
<P>		<FONT FACE="Courier New">jrb2.setMnemonic(KeyEvent.VK_2); //Alt+2</FONT>
<P>		<FONT FACE="Courier New">group.add(jrb3);</FONT>
<P>		<FONT FACE="Courier New">jrb3.setMnemonic(KeyEvent.VK_3); //Alt+3</FONT>
<BR>
<P>		<FONT FACE="Courier New">panel.add(new JLabel(&quot;Choose One&quot;));</FONT>
<P>		<FONT FACE="Courier New">panel.add(jrb1); 	panel.add(jrb2); 		panel.add(jrb3);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout (new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JRadioButtonExample win = new JRadioButtonExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.8 JToggleButton</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JToggleButton은 JCheckBox와 JRadioButton의 상위 클래스로 Button과 유사한 모양을 하고 있지만 버튼을 누르면 눌려진 상태를 유지한다는 점이 다르다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV370.GIF" BORDER=0 WIDTH=224 HEIGHT=224 HSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">다음 프로그램은 JToggleButton 클래스를 이용하여 토글 버튼을 나타내는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=916>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JToggleButtonExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JToggleButtonExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JToggleButton jtb1, jtb2, jtb3, jtb4;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JToggleButtonExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JRadioButton Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">jtb1 = new JToggleButton(&quot;One&quot;);</FONT></B>
<P>		<FONT FACE="Courier New">jtb2 = new JToggleButton(&quot;Two&quot;);</FONT>
<P>		<FONT FACE="Courier New">jtb3 = new JToggleButton(&quot;Three&quot;);</FONT>
<P>		<FONT FACE="Courier New">jtb4 = new JToggleButton(&quot;Four&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new GridLayout(4, 1, 10, 10));</FONT>
<BR>
<P>		<FONT FACE="Courier New">panel.add(jtb1);</FONT>
<P>		<FONT FACE="Courier New">panel.add(jtb2);</FONT>
<P>		<FONT FACE="Courier New">panel.add(jtb3);</FONT>
<P>		<FONT FACE="Courier New">panel.add(jtb4);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JToggleButtonExample win = new JToggleButtonExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.9 JScrollPane</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JScrollPane은 AWT 1.1의 ScrollPane처럼  자동스크롤 기능을 가지고 있다. 이 클래스는 ScrollPaneLayout 방식을 사용하여 출력한다. 중요한 사항은 JScrollPane이 스크롤될 때 객체를 추가하는데 JViewport를 사용한다는 점이다. 사용법은 getViewport() 메소드를 사용한 후 객체를 뷰포트에 추가시킨다. JViewport는 보이는 화면보다 더 큰 영역을 사용할 수 있는 기능을 제공하여 JScrollPane와 사용될 수 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV371.GIF" BORDER=0 WIDTH=285 HEIGHT=285 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JScrollPane을 나타내는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JScrollPaneExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JScrollPaneExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private Icon dukeIcon;</FONT>
<P>	<B><FONT FACE="Courier New">private JLabel dukeLabel;</FONT></B>
<P>	<B><FONT FACE="Courier New">private JScrollPane scrollPane;</FONT></B>
<BR>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JScrollPaneExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JScrollPane Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<FONT FACE="Courier New">dukeIcon = new ImageIcon(&quot;bigDuke.gif&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JScrollPaneExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">dukeLabel = new JLabel(dukeIcon);</FONT></B>
<P>		<B><FONT FACE="Courier New">scrollPane = new JScrollPane(dukeLabel);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">panel.add(scrollPane, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 300);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JScrollPaneExample win = new JScrollPaneExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.10 JTextComponents</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JTextComponent는 javax.swing.text 패키지에 있으며, 단순한 편집기 기능을 가지고있는 컴포넌트이다.</FONT>
<BR>
<P><FONT FACE="바탕">JTextComponent의 주요 메소드를 살펴보면 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ copy() : 현재 선택된 블록의 문자열을 클립보드에 복사한다. 
</FONT><P>  <FONT FACE="돋움">∘ cut() : 현재 선택된 블록의 문자열을 클립보드에 옮겨놓는다. 
</FONT><P>  <FONT FACE="돋움">∘ paste() : 클리보드에 있는 내용을 텍스트 컴포넌트에 붙인다.</FONT>
<P>  <FONT FACE="돋움">∘ getSelectedText() : 텍스트 컴포넌트에서 선택되어 있는 문자열을 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ setSelectionStart() : 블록의 시작점은 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ setSelectionEnd() : 블록의 끝점을 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ selectAll() : 텍스트 컴포넌트의 모든 내용을 선택한다.</FONT>
<P>  <FONT FACE="돋움">∘ replaceSelection() : 현재 선택되어 있는 문자열을 주어진 문자열로 바꾼다.</FONT>
<P>  <FONT FACE="돋움">∘ getText() : 텍스트 컴포넌트로부터 문자열을 얻는다.</FONT>
<P>  <FONT FACE="돋움">∘ setText() : 텍스트 컴포넌트에 문자열을 지정한다.</FONT>
<P>  <FONT FACE="돋움">∘ setEditable() : 편집 가능 여부를 설정한다.</FONT>
<P>  <FONT FACE="돋움">∘ setCaretPosition() : 캐럿 위치를 설정한다.</FONT>
<P><FONT FACE="바탕">JTextComponent는 직접 객체를 작성할 수는 없고 상속되는 다른 문자열처리 클래스에서 사용하게 된다. JTextComponent객체는 AWT의 텍스트 컴포넌트와 마찬가지로 패널에 연결될 수 있다.</FONT>
<P><FONT FACE="바탕">JTextComponent의 하위 클래스로는 JTextField, JTextArea, JEditorPane, JPasswordField, JTextPane 등이 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">11.2.10.1 JTextField</FONT><FONT FACE="바탕">와</FONT><FONT FACE="HY울릉도M"> JTextArea</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JTextArea에 JScrollPane을 연결하여 사용하는 점을 제외하면 JTextField와 JTextArea는 AWT의 java.awt.TextField, java.awt.TextArea와 유사하다.</FONT>
<P><FONT FACE="바탕">JTextField는 setHorizontalAlignment() 메소드를 이용 문자열의 위치를 조정할 수 있다. 지정할 수 있는 위치는 LEFT, CENTER, RIGHT가 있으며 기본값은 LEFT이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">11.2.10.2 JTextPane</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JTextPane은 정형화된 텍스트 이미지의 표시 기능을 제공하는 문자 편집기이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JTextField, JTextArea, JTextPane의 사용 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=483>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JTextPaneExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.text.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JTextPaneExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JTextField jtField;</FONT></B>
<P>	<B><FONT FACE="Courier New">private JTextArea jtArea;</FONT></B>
<P>	<B><FONT FACE="Courier New">private JTextPane jtPane;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JTextPaneExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JTextPane Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">jtField = new JTextField();</FONT></B>
<P>		<B><FONT FACE="Courier New">jtArea = new JTextArea();</FONT></B>
<P>		<B><FONT FACE="Courier New">jtPane = new JTextPane();</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">jtField.</FONT><B><FONT FACE="Courier New">setText(&quot;JTextField : Single Line&quot;)</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=602>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JTextPaneExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">jtArea.</FONT><B><FONT FACE="Courier New">setText(&quot;JTextArea :\nMulti Line&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">MutableAttributeSet attr = new SimpleAttributeSet();</FONT></B>
<P>		<FONT FACE="Courier New">StyleConstants.</FONT><B><FONT FACE="Courier New">setFontFamily(attr, &quot;Serif&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">StyleConstants.</FONT><B><FONT FACE="Courier New">setFontSize(attr, 18)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">StyleConstants.</FONT><B><FONT FACE="Courier New">setBold(attr, true)</FONT></B><FONT FACE="Courier New">;</FONT>		
<P>		<FONT FACE="Courier New">jtPane.</FONT><B><FONT FACE="Courier New">setCharacterAttributes(attr, false)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">jtPane.</FONT><B><FONT FACE="Courier New">setText(&quot;JTextPane :\nMulitLine&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<BR>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">panel.add(jtField, BorderLayout.NORTH);</FONT>
<P>		<FONT FACE="Courier New">panel.add(jtArea, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">panel.add(jtPane, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JTextPaneExample win = new JTextPaneExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">11.2.10.3 JPasswordField</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JPasswordField는 JTextField와 같지만 사용자가 입력한 문자를 보여주지 않고 대신에 &quot;*&quot; 문자를 표시하는 텍스트 필드이다. 다른 문자를 표시하고 싶으면 setEchoChar() 메소드를 사용하면 변경이 가능하다. 
</FONT><BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV372.GIF" BORDER=0 WIDTH=375 HEIGHT=125 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JPasswordField를 이용하여 패스워드 필드를 나타내는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=773>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JPasswordFieldExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.text.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JPasswordFieldExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JPasswordField jpass1, jpass2;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JPasswordFieldExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JTextPane Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">jpass1 = new JPasswordField(20);</FONT></B>
<P>		<FONT FACE="Courier New">jpass2 = new JPasswordField(20);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.add(jpass1);</FONT>
<P>		<FONT FACE="Courier New">jpass2.</FONT><B><FONT FACE="Courier New">setEchoChar('?')</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">panel.add(jpass2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JPasswordFieldExample win = new JPasswordFieldExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">11.2.10.4 JEditorPane</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JEditorPane은 HTML문서나 RTF와 같은 특별한 형식의 문서를 표시하고 편집하는 클래스이다. 이 클래스를 이용하면 도움말을 HTML로 제공하거나 URL을 이용 다른 홈페이지의 문서를 보여주는 경우에 사용한다. JEditorPane에서 이벤트 처리를 하면 하이퍼링크를 사용할 수 있으며, setEditable(false)로 설정하면 읽기만 가능하다. 
</FONT><P ALIGN=CENTER>
<IMG SRC="FYXIV373.GIF" BORDER=0 WIDTH=442 HEIGHT=265 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JEditorPane에 썬사의 자바 홈페이지를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=672>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JEditorPaneExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.text.*;</FONT>
<P><FONT FACE="Courier New">import java.io.*;</FONT>
<P><FONT FACE="Courier New">import java.net.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JEditorPaneExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JEditorPane jeditPane;</FONT></B>
<P>	<FONT FACE="Courier New">private JScrollPane jsPane;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JEditorPaneExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JEditorPane Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">jeditPane = new JEditorPane();</FONT></B>
<P>		<FONT FACE="Courier New">jsPane = new JScrollPane();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">try{</FONT>
<P>			<FONT FACE="Courier New">URL url = new URL(&quot;http://java.sun.com&quot;);</FONT>
<P>			<FONT FACE="Courier New">jeditPane.</FONT><B><FONT FACE="Courier New">setPage(url)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">}catch(IOException e) {</FONT>
<P>			<FONT FACE="Courier New">e.printStackTrace();</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<BR>
<P>		<FONT FACE="Courier New">jeditPane.</FONT><B><FONT FACE="Courier New">setEditable(false)</FONT></B><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=395>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JEditorPaneExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">jsPane.getViewport().add(jeditPane);</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">panel.add(jsPane, BorderLayout.CENTER);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(400, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JEditorPaneExample win = new JEditorPaneExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.11 JScrollBar</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JScrollBar는 java.awt.Scrollbar의 스윙버전이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV374.GIF" BORDER=0 WIDTH=288 HEIGHT=192 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JScrollBar의 사용 예를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=161>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JScrollBarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JScrollBarExample {</FONT>
<P><FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=629>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JScrollBarExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<BR>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">private JScrollBar vBar, hBar;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JScrollBarExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JScrollBar Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">vBar = new JScrollBar(JScrollBar.VERTICAL, 40, 5, 0, 100);</FONT></B><FONT FACE="Courier New"> //orientation, value, extent, min, max</FONT>
<P>		<FONT FACE="Courier New">hBar = new JScrollBar(JScrollBar.HORIZONTAL, 50, 5, 0, 100);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">panel.add(vBar, BorderLayout.EAST);</FONT>
<P>		<FONT FACE="Courier New">panel.add(hBar, BorderLayout.SOUTH);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JScrollBarExample win = new JScrollBarExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.12 JSlider</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JSlider는 JScrollBar와 비슷하지만 스크롤바가 있는곳에 눈금을 표시할 수 있다. 
</FONT><BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV375.GIF" BORDER=0 WIDTH=274 HEIGHT=182 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JSlider를 나타내는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=957>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JSliderExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JSliderExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JSlider eastSlider, westSlider;</FONT></B>
<P>	<FONT FACE="Courier New">private JSlider southSlider, northSlider;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JSliderExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JScrollBar Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">eastSlider = new JSlider(JSlider.VERTICAL,0,100,50);</FONT></B>
<P>		<FONT FACE="Courier New">westSlider = new JSlider(JSlider.VERTICAL,0,100,50);</FONT>
<P>		<FONT FACE="Courier New">southSlider = new JSlider(JSlider.HORIZONTAL,0,100,50);</FONT>
<P>		<FONT FACE="Courier New">northSlider = new JSlider(JSlider.HORIZONTAL,0,100,50);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">eastSlider.</FONT><B><FONT FACE="Courier New">setPaintTicks(true)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">eastSlider.</FONT><B><FONT FACE="Courier New">setMajorTickSpacing(10)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">eastSlider.</FONT><B><FONT FACE="Courier New">setMinorTickSpacing(2)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">panel.add(eastSlider, BorderLayout.EAST);</FONT>
<P>		<FONT FACE="Courier New">westSlider.setPaintTicks(true);</FONT>
<P>		<FONT FACE="Courier New">westSlider.setMinorTickSpacing(5);</FONT>
<P>		<FONT FACE="Courier New">panel.add(westSlider, BorderLayout.WEST);</FONT>
<P>		<FONT FACE="Courier New">southSlider.setPaintTicks(true);</FONT>
<P>		<FONT FACE="Courier New">southSlider.setMajorTickSpacing(10);</FONT>
<P>		<FONT FACE="Courier New">panel.add(southSlider, BorderLayout.SOUTH);</FONT>
<P>		<FONT FACE="Courier New">northSlider.setPaintTicks(true);</FONT>
<P>		<FONT FACE="Courier New">northSlider.setBorder( BorderFactory.createLineBorder(Color.red) );</FONT>
<P>		<FONT FACE="Courier New">panel.add(northSlider, BorderLayout.NORTH);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JSliderExample win = new JSliderExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 예에서처럼 JSlider는 단순한 눈금표시 외에도 라벨이나 숫자 그리고 컴포넌트를 표시할 수 있다. setPaintLabels(true)를 사용하면 숫자라벨을 나타낼 수 있다. 눈금간격을 10으로 설정하고 슬라이더의 영역이 0에서 100까지이면 슬라이더는 0, 10, 20, ... 100으로 표시된다. 해쉬테이블(Hashtable)을 이용하면 사용자가 원하는 라벨을 사용할 수 있다. 해쉬테이블은 위치값을 표시하는 라벨표시용 컴포넌트라고 볼 수 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV376.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JSlider에 라벨을 부여한 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=565>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JSliderExample2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import java.util.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JSliderExample2 {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private JSlider eastSlider, westSlider;</FONT>
<P>	<FONT FACE="Courier New">private JSlider southSlider, northSlider;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JSliderExample2() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JScrollBar Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<FONT FACE="Courier New">eastSlider = new JSlider(JSlider.VERTICAL,0,6,3);</FONT>
<P>		<FONT FACE="Courier New">southSlider = new JSlider(JSlider.HORIZONTAL,0,100,25);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<B><FONT FACE="Courier New">Hashtable ht = new Hashtable();</FONT></B>
<P>		<FONT FACE="Courier New">ht.put(new Integer(0), new JLabel(&quot;Sunday&quot;));</FONT>
<P>		<FONT FACE="Courier New">ht.put(new Integer(1), new JLabel(&quot;Monday&quot;));</FONT>
<P>		<FONT FACE="Courier New">ht.put(new Integer(2), new JLabel(&quot;Tuesday&quot;));</FONT>
<P>		<FONT FACE="Courier New">ht.put(new Integer(3), new JLabel(&quot;Wednesday&quot;));</FONT>
<P>		<FONT FACE="Courier New">ht.put(new Integer(4), new JLabel(&quot;Thursday&quot;));</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=483>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JSliderExample2.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">ht.put(new Integer(5), new JLabel(&quot;Friday&quot;));</FONT>
<P>		<FONT FACE="Courier New">ht.put(new Integer(6), new JLabel(&quot;Saturday&quot;));</FONT>
<P>		<B><FONT FACE="Courier New">eastSlider.setLabelTable(ht);</FONT></B>
<P>		<B><FONT FACE="Courier New">eastSlider.setPaintLabels(true)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">panel.add(eastSlider, BorderLayout.EAST);</FONT>
<BR>
<P>		<FONT FACE="Courier New">southSlider.setPaintTicks(true);</FONT>
<P>		<FONT FACE="Courier New">southSlider.setMajorTickSpacing(10);</FONT>
<P>		<FONT FACE="Courier New">southSlider.setPaintLabels(true);</FONT>
<P>		<FONT FACE="Courier New">panel.add(southSlider, BorderLayout.SOUTH);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JSliderExample2 win = new JSliderExample2();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.13 JComboBox</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JComboBox는 AWT의 Choice와 유사하지만 리스트 이외의 항목을 새로 추가할 수 있는 편집기능을 제공한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV377.GIF" BORDER=0 WIDTH=321 HEIGHT=214 HSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JComboBox의 사용법을 예로든 것이다. 
</FONT><P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=977>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JComboBoxExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JComboBoxExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private String day[] = {</FONT>
<P>			<FONT FACE="Courier New">&quot;Sunday&quot;, &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;,</FONT>
<P>			<FONT FACE="Courier New">&quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot; 		};</FONT>
<P>	<B><FONT FACE="Courier New">private JComboBox dayList1, dayList2;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JComboBoxExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JFrame Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">dayList1 = new JComboBox();</FONT></B>
<P>		<FONT FACE="Courier New">dayList2 = new JComboBox();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new FlowLayout());</FONT>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i &lt; day.length; i++) {</FONT>
<P>			<FONT FACE="Courier New">dayList1.</FONT><B><FONT FACE="Courier New">addItem(day[i])</FONT></B><FONT FACE="Courier New">;</FONT>
<P>			<FONT FACE="Courier New">dayList2.addItem(day[i]);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">dayList2.</FONT><B><FONT FACE="Courier New">setEditable(true)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">dayList2.</FONT><B><FONT FACE="Courier New">setMaximumRowCount(4)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">panel.add(dayList1);</FONT>
<P>		<FONT FACE="Courier New">panel.add(dayList2);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JComboBoxExample win = new JComboBoxExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.14 JList</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JList는 AWT의 List와 유사하지만 사용이 편리하다. 리스트에 항목을 지정할 때는 String[]나 Vector의 객체를 setListData() 메소드에 지정하면 된다. AWT의 List는 기본으로 스크롤바를 제공하지만, JList는 JScrollPane에 JList를 연결해야 스크롤바가 나타난다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV378.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 스크롤바를 갖는 JList 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JListExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JListExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JList dayList;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<P>	<FONT FACE="Courier New">private JScrollPane jScroll;</FONT>
<P>	<FONT FACE="Courier New">private String year[] = {</FONT>
<P>			<FONT FACE="Courier New">&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;,</FONT>
<P>			<FONT FACE="Courier New">&quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;, &quot;October&quot;,</FONT>
<P>			<FONT FACE="Courier New">&quot;November&quot;, &quot;DEcember&quot; 		};</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JListExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JList Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">dayList = new JList(year);</FONT></B>
<P>		<FONT FACE="Courier New">jScroll = new JScrollPane(</FONT><B><FONT FACE="Courier New">dayList</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=364>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JListExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">panel.add(jScroll, BorderLayout.CENTER);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JListExample win = new JListExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.15 Borders</FONT></SPAN></FONT>
<BR>
<BR>
<P><FONT FACE="바탕">javax.swing.border 패키지에는 컴포넌트의 테두리를 표시하는 여러 클래스가 있다. border 클래스를 만들려면 인터페이스를 구현한 다음 작성하는데, 인터페이스에는 다음과 같은 세 가지 메소드를 통해 테두리를 정의한다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ Insets getBorderInsets(Component c) : 테두리를 그리는데 필요한 영역을 지정한다.</FONT>
<P>  <FONT FACE="돋움">∘ boolean isBorderOpaque() : 테두리 영역이 투명한지를 판단한다.</FONT>
<P>  <FONT FACE="돋움">∘ void paintBorder (Component c, Graphics g, int x, int y, int width, int height) : 지정된 영역에 테두리를 그리는 방법을 지정한다.</FONT>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 Border인터페이스를 구현한 다음 임의의 border 클래스를 정의하는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyBorder.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.border.*;</FONT>
<P><FONT FACE="Courier New">class MyBorder </FONT><B><FONT FACE="Courier New">implements Border</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">Color color;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public MyBorder (Color c) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyBorder.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<BR>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">color = c;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void paintBorder (Component c, Graphics g, int x, int y, int width, int height)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">Insets insets = getBorderInsets(c);</FONT>
<P>		<FONT FACE="Courier New">g.setColor (color);</FONT>
<P>		<FONT FACE="Courier New">g.fillRect (x, y, 2, height);</FONT>
<P>		<FONT FACE="Courier New">g.fillRect (x, y, width, 2);</FONT>
<P>		<FONT FACE="Courier New">g.setColor (color.darker());</FONT>
<P>		<FONT FACE="Courier New">g.fillRect (x+width-insets.right, y, 2, height);</FONT>
<P>		<FONT FACE="Courier New">g.fillRect (x, y+height-insets.bottom, width, 2);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public boolean isBorderOpaque() </FONT></B><FONT FACE="Courier New">{</FONT>
<P>		<FONT FACE="Courier New">return false;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public Insets getBorderInsets(Component c)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">return new Insets (2, 2, 2, 2);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">테두리에 대한 동작은 JComponent에 정의되어 있으며 상속받아 이용한다. 스윙은 9가지 종류의 테두리를 가지고 있으며, 사용자가 직접 만들어 사용할 수도 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV379.GIF" BORDER=0 WIDTH=372 HEIGHT=304 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P>  <FONT FACE="돋움">∘ AbstractBorder : Border 인터페이스를 구현한 추상클래스이다.</FONT>
<P>  <FONT FACE="돋움">∘ BevelBorder : 3D 모양의 테두리를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ CompoundBorder : 중첩된 테두리를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ EmptyBorder : 선이 그려지지 않는 테두리를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ EtchedBorder : 홈이 파인 것처럼 보이는 테두리를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ LineBorder : 단색의 테두리를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ MatteBorder : 아이콘이나 색을 가지는 테두리를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ SoftBevelBorder : 부드러운 색의 3D 테두리를 갖는다.</FONT>
<P>  <FONT FACE="돋움">∘ TitledBorder : 임의의 위치에 제목을 표시한 테두리를 갖는다.</FONT>
<P> 
<P><FONT FACE="바탕">다음 프로그램은 여러 가지 경계선을 갖는 버튼의 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=762>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BorderExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.border.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class BorderExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public BorderExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;Borders Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new GridLayout(4, 3));</FONT>
<BR>
<P>		<FONT FACE="Courier New">JButton emptyButton = new JButton(&quot;Empty&quot;);</FONT>
<P>		<FONT FACE="Courier New">emptyButton.setBorder (</FONT><B><FONT FACE="Courier New">new EmptyBorder (1,1,1,1)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(emptyButton);</FONT>
<P>		
<P>		<FONT FACE="Courier New">JButton etchedButton = new JButton(&quot;Etched&quot;);</FONT>
<P>		<FONT FACE="Courier New">etchedButton.setBorder (</FONT><B><FONT FACE="Courier New">new EtchedBorder ()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(etchedButton);</FONT>
<P>		
<P>		<FONT FACE="Courier New">JButton cEtchedButton = new JButton(&quot;Colorized Etched&quot;);</FONT>
<P>		<FONT FACE="Courier New">cEtchedButton.setBorder (</FONT><B><FONT FACE="Courier New">new EtchedBorder (Color.red, Color.green)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(cEtchedButton);</FONT>
<BR>
<P>		<FONT FACE="Courier New">JButton titledButton = new JButton(&quot;Titled/Line&quot;);</FONT>
<P>		<FONT FACE="Courier New">titledButton.setBorder( </FONT><B><FONT FACE="Courier New">new TitledBorder (new TitledBorder(LineBorder.createGrayLineBorder(), &quot;Hello&quot;), &quot;World&quot;, TitledBorder.RIGHT, TitledBorder.BOTTOM) </FONT></B><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=1005>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BorderExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">panel.add(titledButton);</FONT>
<BR>
<P>		<FONT FACE="Courier New">JButton bevelUpButton = new JButton(&quot;Bevel Up&quot;);</FONT>
<P>		<FONT FACE="Courier New">bevelUpButton.setBorder(</FONT><B><FONT FACE="Courier New">new BevelBorder(BevelBorder.RAISED)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(bevelUpButton);</FONT>
<BR>
<P>		<FONT FACE="Courier New">JButton bevelDownButton = new JButton(&quot;Bevel Down&quot;);</FONT>
<P>		<FONT FACE="Courier New">bevelDownButton.setBorder(</FONT><B><FONT FACE="Courier New">new BevelBorder(BevelBorder.LOWERED)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(bevelDownButton);</FONT>
<BR>
<P>		<FONT FACE="Courier New">JButton b = new JButton(&quot;Soft Bevel Up&quot;);</FONT>
<P>		<FONT FACE="Courier New">b.setBorder(</FONT><B><FONT FACE="Courier New">new SoftBevelBorder(SoftBevelBorder.RAISED)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">b = new JButton(&quot;Soft Bevel Down&quot;);</FONT>
<P>		<FONT FACE="Courier New">b.setBorder(</FONT><B><FONT FACE="Courier New">new SoftBevelBorder(SoftBevelBorder.LOWERED)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">b = new JButton(&quot;Matte&quot;);</FONT>
<P>		<FONT FACE="Courier New">b.setBorder(</FONT><B><FONT FACE="Courier New">new MatteBorder(5,10,5,10, Color.red)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">b = new JButton(&quot;Matte Icon&quot;);</FONT>
<P>		<FONT FACE="Courier New">Icon icon = new ImageIcon(&quot;dukeicon.gif&quot;);</FONT>
<P>		<FONT FACE="Courier New">b.setBorder(</FONT><B><FONT FACE="Courier New">new MatteBorder(10, 20, 30, 40, icon)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">b = new JButton (&quot;Colorized Bevel&quot;);</FONT>
<P>		<FONT FACE="Courier New">b.setBorder(</FONT><B><FONT FACE="Courier New">new BevelBorder(BevelBorder.RAISED, Color.red, Color.pink)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">b = new JButton(&quot;My Border&quot;);</FONT>
<P>		<FONT FACE="Courier New">b.setBorder(</FONT><B><FONT FACE="Courier New">new CompoundBorder(</FONT></B>
<P>			<B><FONT FACE="Courier New">new MyBorder(Color.red), </FONT></B>
<P>			<B><FONT FACE="Courier New">new CompoundBorder(new MyBorder(Color.green),</FONT></B>
<P>			<B><FONT FACE="Courier New">new MyBorder(Color.blue)))</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.pack();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">BorderExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">BorderExample win = new BorderExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.16 </FONT><FONT FACE="바탕">메뉴</FONT><FONT FACE="HY부활M">(Menus)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">스윙에서 사용하는 메뉴는 AWT보다 다양한 기능을 가지고 있다. 메뉴 클래스(JMenuItem, JCheckBoxMenuItem, JMenu, JMenuBar)는 모두 JComponent에서 상속되며, JMenuBar는 모든 컨테이너에 사용할 수 있다. 예를 들어 JApplet 클래스에 setJMenuBar() 메소드를 사용하면 JMenuBar를 연결할 수 있다. 뿐만 아니라 JMenuItem에 아이콘을 사용할 수 있는 JRadioButtonMenuItem이 추가되었다. 메뉴를 구분하는 선을 넣으려면 AWT에서처럼 addSeparator() 메소드를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV380.GIF" BORDER=0 WIDTH=374 HEIGHT=280 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림처럼 스윙에서 메뉴를 나타내는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JMenuExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=938>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JMenuExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<BR>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<BR>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class JMenuExample implements ActionListener, ItemListener {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<P>	<B><FONT FACE="Courier New">private JMenuBar menuBar;</FONT></B>
<P>	<B><FONT FACE="Courier New">private JMenu menu, submenu;</FONT></B>
<P>	<B><FONT FACE="Courier New">private JMenuItem menuItem;</FONT></B>
<P>	<B><FONT FACE="Courier New">private JCheckBoxMenuItem cbMenuItem;</FONT></B>
<P>	<B><FONT FACE="Courier New">private JRadioButtonMenuItem rbMenuItem;</FONT></B>
<BR>
<P>	<FONT FACE="Courier New">public JMenuExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JMenu Example&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">메뉴바</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성</FONT>
<P>		<B><FONT FACE="Courier New">menuBar = new JMenuBar();</FONT></B>
<P>		<B><FONT FACE="Courier New">f.setJMenuBar(menuBar);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">메뉴</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">생성</FONT>
<P>		<B><FONT FACE="Courier New">menu = new JMenu(&quot;A Menu&quot;);</FONT></B>
<P>		<FONT FACE="Courier New">menu.</FONT><B><FONT FACE="Courier New">setMnemonic(KeyEvent.VK_A)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">menu.addActionListener(this);</FONT>
<P>		<B><FONT FACE="Courier New">menuBar.add(menu)</FONT></B><FONT FACE="Courier New">;</FONT>
<BR>
<P>		<FONT FACE="Courier New">//JMenuItem </FONT><FONT FACE="바탕">그룹</FONT>
<P>		<B><FONT FACE="Courier New">menuItem = new JMenuItem( &quot;A text-only menu item&quot;, KeyEvent.VK_T);</FONT></B>
<P>		<FONT FACE="Courier New">menuItem.</FONT><B><FONT FACE="Courier New">setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_1, ActionEvent.ALT_MASK))</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">menuItem.addActionListener(this);</FONT>
<P>		<FONT FACE="Courier New">menu.add(menuItem);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">menuItem = new JMenuItem(&quot;Both text and icon&quot;, new ImageIcon(&quot;dukeicon.gif&quot;));</FONT></B>
<P>		<FONT FACE="Courier New">menuItem.setMnemonic(KeyEvent.VK_B);</FONT>
<P>		<FONT FACE="Courier New">menuItem.addActionListener(this);</FONT>
<P>		<FONT FACE="Courier New">menu.add(menuItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">menuItem = new JMenuItem(new ImageIcon(&quot;dukeicon.gif&quot;));</FONT>
<P>		<FONT FACE="Courier New">menuItem.setMnemonic(KeyEvent.VK_D);</FONT>
<P>		<FONT FACE="Courier New">menuItem.addActionListener(this);</FONT>
<P>		<FONT FACE="Courier New">menu.add(menuItem);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=961>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">JMenuExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT>
<P><FONT FACE="Courier New">50:</FONT>
<P><FONT FACE="Courier New">51:</FONT>
<P><FONT FACE="Courier New">52:</FONT>
<P><FONT FACE="Courier New">53:</FONT>
<P><FONT FACE="Courier New">54:</FONT>
<P><FONT FACE="Courier New">55:</FONT>
<P><FONT FACE="Courier New">56:</FONT>
<P><FONT FACE="Courier New">57:</FONT>
<P><FONT FACE="Courier New">58:</FONT>
<P><FONT FACE="Courier New">59:</FONT>
<P><FONT FACE="Courier New">60:</FONT>
<P><FONT FACE="Courier New">61:</FONT>
<P><FONT FACE="Courier New">62:</FONT>
<P><FONT FACE="Courier New">63:</FONT>
<P><FONT FACE="Courier New">64:</FONT>
<P><FONT FACE="Courier New">65:</FONT>
<P><FONT FACE="Courier New">66:</FONT>
<P><FONT FACE="Courier New">67:</FONT>
<P><FONT FACE="Courier New">68:</FONT>
<P><FONT FACE="Courier New">69:</FONT>
<P><FONT FACE="Courier New">70:</FONT>
<P><FONT FACE="Courier New">71:</FONT>
<P><FONT FACE="Courier New">72:</FONT>
<P><FONT FACE="Courier New">73:</FONT>
<P><FONT FACE="Courier New">74:</FONT>
<P><FONT FACE="Courier New">75:</FONT>
<P><FONT FACE="Courier New">76:</FONT>
<P><FONT FACE="Courier New">77:</FONT>
<P><FONT FACE="Courier New">78:</FONT>
<BR>
<P><FONT FACE="Courier New">79:</FONT>
<P><FONT FACE="Courier New">80:</FONT>
<P><FONT FACE="Courier New">81:</FONT>
<P><FONT FACE="Courier New">82:</FONT>
<P><FONT FACE="Courier New">83:</FONT>
<P><FONT FACE="Courier New">84:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">라디오</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">버튼</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">모양</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메뉴</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">아이템</FONT>
<P>		<FONT FACE="Courier New">menu.addSeparator();</FONT>
<P>		<B><FONT FACE="Courier New">ButtonGroup group = new ButtonGroup();</FONT></B>
<P>		<B><FONT FACE="Courier New">rbMenuItem = new JRadioButtonMenuItem(&quot;A radio button menu item&quot;);</FONT></B>
<P>		<FONT FACE="Courier New">rbMenuItem.setSelected(true);</FONT>
<P>		<FONT FACE="Courier New">rbMenuItem.setMnemonic(KeyEvent.VK_R);</FONT>
<P>		<FONT FACE="Courier New">rbMenuItem.addItemListener(this);</FONT>
<P>		<FONT FACE="Courier New">group.add(rbMenuItem);</FONT>
<P>		<FONT FACE="Courier New">menu.add(rbMenuItem);</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">rbMenuItem = new JRadioButtonMenuItem(&quot;Another one&quot;);</FONT></B>
<P>		<FONT FACE="Courier New">rbMenuItem.setMnemonic(KeyEvent.VK_O);</FONT>
<P>		<FONT FACE="Courier New">rbMenuItem.addItemListener(this);</FONT>
<P>		<FONT FACE="Courier New">group.add(rbMenuItem);</FONT>
<P>		<FONT FACE="Courier New">menu.add(rbMenuItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">채크박스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">모양</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메뉴</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">아이템</FONT>
<P>		<FONT FACE="Courier New">menu.</FONT><B><FONT FACE="Courier New">addSeparator()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">cbMenuItem = new JCheckBoxMenuItem(&quot;A check box menu item&quot;);</FONT>
<P>		<FONT FACE="Courier New">cbMenuItem.setMnemonic(KeyEvent.VK_C);</FONT>
<P>		<FONT FACE="Courier New">cbMenuItem.addItemListener(this);</FONT>
<P>		<FONT FACE="Courier New">menu.add(cbMenuItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">cbMenuItem = new JCheckBoxMenuItem(&quot;Another one&quot;);</FONT>
<P>		<FONT FACE="Courier New">cbMenuItem.setMnemonic(KeyEvent.VK_H);</FONT>
<P>		<FONT FACE="Courier New">cbMenuItem.addItemListener(this);</FONT>
<P>		<FONT FACE="Courier New">menu.add(cbMenuItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">부메뉴를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">갖는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메뉴아이템</FONT>
<P>		<FONT FACE="Courier New">menu.addSeparator();</FONT>
<P>		<FONT FACE="Courier New">submenu = new JMenu(&quot;A submenu&quot;);</FONT>
<P>		<FONT FACE="Courier New">submenu.setMnemonic(KeyEvent.VK_S);</FONT>
<BR>
<P>		<FONT FACE="Courier New">menuItem = new JMenuItem(&quot;An item in the submenu&quot;);</FONT>
<P>		<FONT FACE="Courier New">menuItem.setAccelerator( KeyStroke.getKeyStroke( KeyEvent.VK_2, ActionEvent.ALT_MASK));</FONT>
<P>		<FONT FACE="Courier New">submenu.add(menuItem);</FONT>
<BR>
<P>		<FONT FACE="Courier New">menuItem = new JMenuItem(&quot;Another item&quot;);</FONT>
<P>		<FONT FACE="Courier New">submenu.add(menuItem);</FONT>
<P>		<FONT FACE="Courier New">menu.add(submenu);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=563>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="HY타자B">JMenuExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">85:</FONT>
<P><FONT FACE="Courier New">86:</FONT>
<P><FONT FACE="Courier New">87:</FONT>
<P><FONT FACE="Courier New">88:</FONT>
<P><FONT FACE="Courier New">89:</FONT>
<P><FONT FACE="Courier New">90:</FONT>
<P><FONT FACE="Courier New">91:</FONT>
<P><FONT FACE="Courier New">92:</FONT>
<P><FONT FACE="Courier New">93:</FONT>
<P><FONT FACE="Courier New">94:</FONT>
<P><FONT FACE="Courier New">95:</FONT>
<P><FONT FACE="Courier New">96:</FONT>
<P><FONT FACE="Courier New">97:</FONT>
<P><FONT FACE="Courier New">98:</FONT>
<P><FONT FACE="Courier New">99:</FONT>
<P><FONT FACE="Courier New">100:</FONT>
<P><FONT FACE="Courier New">101:</FONT>
<P><FONT FACE="Courier New">102:</FONT>
<P><FONT FACE="Courier New">103:</FONT>
<P><FONT FACE="Courier New">104:</FONT>
<P><FONT FACE="Courier New">105:</FONT>
<P><FONT FACE="Courier New">106:</FONT>
<P><FONT FACE="Courier New">107:</FONT>
<P><FONT FACE="Courier New">108:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">두번째</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">메뉴</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">작성</FONT>
<P>		<FONT FACE="Courier New">menu = new JMenu(&quot;Another Menu&quot;);</FONT>
<P>		<FONT FACE="Courier New">menu.setMnemonic(KeyEvent.VK_N);</FONT>
<P>		<FONT FACE="Courier New">menuBar.add(menu);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(400, 300);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JMenuExample win = new JMenuExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void actionPerformed(ActionEvent e) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource());</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void itemStateChanged(ItemEvent e) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(e.getSource());</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.17 JPopupMenu</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JPopupMenu는 모든 컴포넌트에서 사용할 수 있으며 AWT의 PopupMenu와 유사하다. JPopupMenu에서도 구분선을 넣으려면 addSeparator() 메소드를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV381.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 마우스 오른쪽 버튼을 누르면 팝업메뉴가 나타나는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=978>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JPopupMenuExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT>
<P><FONT FACE="Courier New">40:</FONT>
<P><FONT FACE="Courier New">41:</FONT>
<P><FONT FACE="Courier New">42:</FONT>
<P><FONT FACE="Courier New">43:</FONT>
<P><FONT FACE="Courier New">44:</FONT>
<P><FONT FACE="Courier New">45:</FONT>
<P><FONT FACE="Courier New">46:</FONT>
<P><FONT FACE="Courier New">47:</FONT>
<P><FONT FACE="Courier New">48:</FONT>
<P><FONT FACE="Courier New">49:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.event.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JPopupMenuExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private JMenuItem item;</FONT>
<P>	<B><FONT FACE="Courier New">private JPopupMenu popup;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JPopupMenuExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JPopupMenu Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">popup = new JPopupMenu();</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">popup.</FONT><B><FONT FACE="Courier New">add(item = new JMenuItem(&quot;Cut&quot;))</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">popup.add(item = new JMenuItem(&quot;Copy&quot;));</FONT>
<P>		<FONT FACE="Courier New">popup.</FONT><B><FONT FACE="Courier New">addSeparator()</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">popup.add(item = new JMenuItem(&quot;Paste&quot;));</FONT>
<P>		<FONT FACE="Courier New">popup.setInvoker(panel);</FONT>
<BR>
<P>		<FONT FACE="Courier New">panel.addMouseListener (new MouseAdapter() {</FONT>
<P>			<FONT FACE="Courier New">public void mousePressed (MouseEvent e) {</FONT>
<P>				<FONT FACE="Courier New">if (e.isPopupTrigger()) {</FONT>
<P>					<B><FONT FACE="Courier New">popup.show (e.getComponent(), e.getX(), e.getY());</FONT></B>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">public void mouseReleased (MouseEvent e) {</FONT>
<P>				<FONT FACE="Courier New">if (e.isPopupTrigger()) {</FONT>
<P>					<FONT FACE="Courier New">popup.show (e.getComponent(), e.getX(), e.getY());</FONT>
<P>				<FONT FACE="Courier New">}</FONT>
<P>			<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">});</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new BorderLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JPopupMenuExample win = new JPopupMenuExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.18 JApplet</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">스윙 컴포넌트를 처리하는 애플릿을 작성하려면 AWT의 애플릿 클래스 대신 JApplet클래스를 상속받아 사용한다. JApplet을 이용하면 JMenuBar를 사용할 수 있을 뿐만 아니라 스윙 컴포넌트의 그림 그리기 기능을 수행하는 애플릿의 하위 클래스이다. JFrame처럼 JApplet은 JContentPane을 사용하여 컴포넌트를 연결시키게 되며, 기본 레이아웃 관리자는 BorderLayout이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV382.GIF" BORDER=0 WIDTH=339 HEIGHT=279 HSPACE=3 ALIGN=BOTTOM>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JAppletExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<BR>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JAppletExample </FONT><B><FONT FACE="Courier New">extends JApplet</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">public void init () {</FONT>
<P>		<FONT FACE="Courier New">Container con = getContentPane();</FONT>
<P>		<FONT FACE="Courier New">JButton jb = new JButton (&quot;Default&quot;);</FONT>
<P>		<FONT FACE="Courier New">con.add (jb, BorderLayout.WEST);</FONT>
<P>		<FONT FACE="Courier New">jb = new JButton (&quot;LayoutManager&quot;);</FONT>
<P>		<FONT FACE="Courier New">con.add (jb, BorderLayout.CENTER);</FONT>
<P>		<FONT FACE="Courier New">jb = new JButton (&quot;is&quot;);</FONT>
<P>		<FONT FACE="Courier New">con.add (jb, BorderLayout.EAST);</FONT>
<P>		<FONT FACE="Courier New">jb = new JButton (&quot;BorderLayout: &quot; + (con.getLayout() instanceof BorderLayout));</FONT>
<P>		<FONT FACE="Courier New">con.add (jb, BorderLayout.SOUTH);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=77>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JAppletExample.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">applet code=JAppletExample.class width=300 height=300&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.19 </FONT><FONT FACE="바탕">툴팁</FONT><FONT FACE="HY부활M">(tool tip)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">툴팁이란 마우스가 화면상의 특정한 객체 위를 지날 때 표시되는 문자열을 의미한다. 스윙은 JToolTip 클래스에서 이러한 기능을 제공한다. 툴팁을 사용하려면 JComponent 클래스의 setToolTipText() 메소드를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV383.GIF" BORDER=0 WIDTH=219 HEIGHT=109 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 버튼에 툴팁이 나오게 하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=642>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JToolTipExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JToolTipExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JButton myButton;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JToolTipExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JFrame Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">myButton = new JButton(&quot;Hello&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new FlowLayout());</FONT>
<P>		<FONT FACE="Courier New">con.add(myButton);</FONT>
<P>		<FONT FACE="Courier New">myButton.</FONT><B><FONT FACE="Courier New">setToolTipText(&quot;World!&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 100);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JToolTipExample win = new JToolTipExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.20 JToolBar</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JToolBar는 툴바의 모양을 제공하는 클래스로 좌.우.상.하에 위치시킬 수 있으며 기본값(default)으로 별도의 창에 분리시킬 수도 있다. 별도의 창에 분리되는 기능을 없애려면 setFloatable(false)를 이용한다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV384.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM><FONT FACE="바탕">  
</FONT><IMG SRC="FYXIV385.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 앞의 그림처럼 툴바를 나타내는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=563>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JToolBarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JToolBarExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<B><FONT FACE="Courier New">private JToolBar toolbar;</FONT></B>
<P>	<FONT FACE="Courier New">private JButton myButton;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JToolBarExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JFrame Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<B><FONT FACE="Courier New">toolbar = new JToolBar();</FONT></B>
<P>		<FONT FACE="Courier New">myButton = new JButton(&quot;Hello&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.setLayout(new BorderLayout());</FONT>
<P>		<B><FONT FACE="Courier New">toolbar.add(myButton);</FONT></B>
<P>		<B><FONT FACE="Courier New">panel.add(toolbar, BorderLayout.EAST);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.setLayout(new BorderLayout());</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JToolBarExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">JToolBarExample win = new JToolBarExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.21 JTabbedPane</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JTabbedPane은 탭 제어기능을 제공하며, 여러 개의 패널을 사용할 수 있는 인터페이스를 제공한다. AWT의 CardLayout 기본 동작과 유사하지만 사용이 편리한 이점을 가지고 있다. 인자로 JTabbedPane.TOP, JTabbedPane.BOTTOM, JTabbedPane.LEFT, JTabbedPane.RIGHT를 사용하여 탭의 위치를 지정할 수 있다. JTabbedPane의 기본 레이아웃은 JTabbedPane.WRAP_TAB_LAYOUT이지만, 생성자의 두 번째 인자로 JTabbedPane.SCROLL_TAB_LAYOUT를 사용하면 프레임 크기가 작을 때 스크롤바를 나타낼 수 있다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV386.GIF" BORDER=0 WIDTH=204 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">새로운 패널을 추가하려면 다음의 세 가지 addTab()메소드를 이용한다. 
</FONT><BR>
<P>  <FONT FACE="돋움">∘ addTab(String title, Component component) : 문자열이 표시된 탭을 작성하고 탭이 선택되면 컴포넌트가 표시된다.</FONT>
<P>  <FONT FACE="돋움">∘ addTab(String title, Icon icon, Component component) : 탭의 제목과 함께 아이콘을 표시한다.</FONT>
<P>  <FONT FACE="돋움">∘ addTab(String title, Icon icon, Component component, String tip) : 탭의 제목과 함께 아이콘과 툴팁을 표시한다.</FONT>
<P><FONT FACE="바탕">다음 프로그램은 JTabbedPane을 나타내는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=762>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JTabbedPaneExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<BR>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<BR>
<P><FONT FACE="Courier New">17:</FONT>
<BR>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JTabbedPaneExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<B><FONT FACE="Courier New">private JTabbedPane tabbedPane;</FONT></B>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JTabbedPaneExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JTabbedPane Example&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">tabbedPane = new JTabbedPane(JTabbedPane.BOTTOM, JTabbedPane.SCROLL_TAB_LAYOUT);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">tabbedPane.</FONT><B><FONT FACE="Courier New">addTab(&quot;One&quot;, new JButton(&quot;</FONT><FONT FACE="바탕">하나</FONT><FONT FACE="Courier New">&quot;))</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">tabbedPane.</FONT><B><FONT FACE="Courier New">addTab(&quot;Duke&quot;, new ImageIcon(&quot;dukeicon.gif&quot; ), new JButton(&quot;Duke&quot;))</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">tabbedPane.</FONT><B><FONT FACE="Courier New">addTab(&quot;Three&quot;, new ImageIcon(&quot;dukeicon.gif&quot;), new JButton(&quot;Three&quot;), &quot;Hello&quot;)</FONT></B><FONT FACE="Courier New">;</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.add(tabbedPane);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(200, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JTabbedPaneExample win = new JTabbedPaneExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.2.22 JSplitPane</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">JSplitPane은 하나의 컨테이너에 두 개의 컴포넌트를 함께 표시하는 인터페이스를 작성할 수 있게 한다. JSplitPane 안에는 또 다른 JSplitPane이 올 수 있어서 사실상 여러 개의 영역을 작성할 수 있다. 또 영역을 분할할 때는 수평방향 분할과 수직방향분할을 지정할 수 있다. setContinuousLayout 속성은 영역 분리자가 움직일 때 영역을 새로 표시할 것인가를 결정하는데 사용된다. 또 dividerLocation을 설정하여 영역 구분선이 표시되는 위치를 지정할 수 있다. 
</FONT><BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV387.GIF" BORDER=0 WIDTH=306 HEIGHT=204 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 JSplitPane을 나타내는 예이다. 프로그램을 실행시켰을 때에 나타나는 스크롤바는 JSplitPane에 의해 나타난 것이 아니고, JScrollPane에 의해 나타난 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=541>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JSplitPaneExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<BR>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class JSplitPaneExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private JTree tree;</FONT>
<P>	<FONT FACE="Courier New">private JList list;</FONT>
<P>	<FONT FACE="Courier New">private JScrollPane left, right;</FONT>
<P>	<B><FONT FACE="Courier New">private JSplitPane jsPane;</FONT></B>
<P>	<FONT FACE="Courier New">private String[] listItem = {&quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;, &quot;Four&quot;, &quot;Five&quot;, &quot;Six&quot;, &quot;Seven&quot;, &quot;Eight&quot;, &quot;Nine&quot;, &quot;Ten&quot;};</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public JSplitPaneExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;JSplitPane Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<FONT FACE="Courier New">tree = new JTree();</FONT>
<P>		<FONT FACE="Courier New">list = new JList(listItem);</FONT>
<P>		<FONT FACE="Courier New">left = new JScrollPane(tree);</FONT>
<P>		<FONT FACE="Courier New">right = new JScrollPane(list);</FONT>
<P>		<B><FONT FACE="Courier New">jsPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, left, right);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">JSplitPaneExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">jsPane.</FONT><B><FONT FACE="Courier New">setDividerLocation(0.5)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">jsPane.</FONT><B><FONT FACE="Courier New">setOneTouchExpandable(true)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT>
<P>		<FONT FACE="Courier New">con.add(jsPane);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">JSplitPaneExample win = new JSplitPaneExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="FYXIV388.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">11.3  </FONT><FONT FACE="바탕">스윙의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">레이아웃</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">관리자</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">스윙에는 ScrollPaneLayout, ViewportLayout, BoxLayout, OverlayLayout의 4가지 주요한 레이아웃 관리자가 있는데, 이들의 특징은 다음과 같다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.3.1 BoxLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">X축이나 Y축에 따라 컴포넌트를 배치할 수 있다. 예를 들면, Y축 BoxLayout을 사용하면 컴포넌트는 위에서부터 아래로 정렬되고, X축 BoxLayout을 사용하면 왼쪽에서 오른쪽으로 컴포넌트가 정렬된다.</FONT>
<P><FONT FACE="바탕">GridLayout과는 달리 컴포넌트가 주어진 축을 기준으로 각기 다른 영역을 차지하게 되는데, Y축을 기준으로 한 BoxLayout에 사용된 JTextField는 작은 영역을 차지하게 된다.</FONT>
<P><FONT FACE="바탕">좌우로 배치되는 경우는 너비가 가장 큰 컴포넌트에 맞춰지고, 상하로 배치되는 경우는 폭이 가장 큰 것에 맞추어져 표시된다.</FONT>
<P><FONT FACE="바탕">두 개의 파라미터를 사용하는데, 첫 번째 파라미터는 컨테이너를 지시하고 두 번째 파라미터는 기준이 되는 축을 표시한다. 
</FONT><BR>
<P ALIGN=CENTER>
<IMG SRC="FYXIV389.GIF" BORDER=0 WIDTH=232 HEIGHT=237 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">다음 프로그램은 BoxLayout 예를 나타낸 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=673>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BoxLayoutExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT>
<P><FONT FACE="Courier New">29:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import javax.swing.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class BoxLayoutExample {</FONT>
<P>	<FONT FACE="Courier New">private JFrame f;</FONT>
<P>	<FONT FACE="Courier New">private JPanel panel;</FONT>
<P>	<FONT FACE="Courier New">private JTextField textField;</FONT>
<P>	<FONT FACE="Courier New">private JTextArea textArea;</FONT>
<P>	<FONT FACE="Courier New">private JButton button;</FONT>
<P>	<FONT FACE="Courier New">private Container con;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public BoxLayoutExample() {</FONT>
<P>		<FONT FACE="Courier New">f = new JFrame(&quot;BoxLayout Example&quot;);</FONT>
<P>		<FONT FACE="Courier New">panel = new JPanel();</FONT>
<P>		<FONT FACE="Courier New">textField = new JTextField();</FONT>
<P>		<FONT FACE="Courier New">textArea = new JTextArea(5, 20);</FONT>
<P>		<FONT FACE="Courier New">button = new JButton(&quot;Duke&quot;, new ImageIcon(&quot;dukeicon.gif&quot;));</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void launchFrame() {</FONT>
<P>		<FONT FACE="Courier New">panel.</FONT><B><FONT FACE="Courier New">setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS)</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">panel.add(new JLabel(&quot;JTextField : &quot;));</FONT>
<P>		<FONT FACE="Courier New">panel.add(textField);</FONT>
<P>		<FONT FACE="Courier New">panel.add(new JLabel(&quot;JTextArea : &quot;));</FONT>
<P>		<FONT FACE="Courier New">panel.add(textArea);</FONT>
<P>		<FONT FACE="Courier New">panel.add(new JLabel(&quot;JButton : &quot;));</FONT>
<P>		<FONT FACE="Courier New">panel.add(button);</FONT>
<BR>
<P>		<FONT FACE="Courier New">con = f.getContentPane();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">BoxLayoutExample.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">30:</FONT>
<P><FONT FACE="Courier New">31:</FONT>
<P><FONT FACE="Courier New">32:</FONT>
<P><FONT FACE="Courier New">33:</FONT>
<P><FONT FACE="Courier New">34:</FONT>
<P><FONT FACE="Courier New">35:</FONT>
<P><FONT FACE="Courier New">36:</FONT>
<P><FONT FACE="Courier New">37:</FONT>
<P><FONT FACE="Courier New">38:</FONT>
<P><FONT FACE="Courier New">39:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">con.add(panel);</FONT>
<P>		<FONT FACE="Courier New">f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE );</FONT>
<P>		<FONT FACE="Courier New">f.pack();</FONT>
<P>		<FONT FACE="Courier New">f.setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">BoxLayoutExample win = new BoxLayoutExample();</FONT>
<P>		<FONT FACE="Courier New">win.launchFrame();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>  <FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="Asia줄리엣M">Box</FONT><FONT FACE="바탕">클래스</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Box는 기본 레이아웃 매니저가 BoxLayout인 클래스로 BoxLayout 컨테이너와 더불어 컴포넌트 배열에 유용한 static 메소드를 가지고 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 Box클래스의 주요 메소드를 나타낸 것이다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ createVerticalStrut(int) : 간격을 위해 고정 높이 컴포넌트를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ createHorizontalStrut(int) : 간격을 위해 고정 폭 컴포넌트를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ createVerticalGlue() : 컴포넌트 사이의 초과된 공간을 흡수하기 위해 확장된 높이 컴포넌트를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ createHorizontalGlue() : 컴포넌트 사이의 초과된 공간을 흡수하기 위해 확장된 폭 컴포넌트를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ createGlue() : 높이는 Y축으로 확장되고 폭은 X축으로 확장된 컴포넌트를 반환한다.</FONT>
<P>  <FONT FACE="돋움">∘ createRigidArea(Dimension) : 고정 높이 고정 폭을 반환한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.3.2 ScrollPaneLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">ScrollPaneLayout은 JScrollPane에서 사용하는 레이아웃 관리자이다. 직접 만들지 않고 자동으로 생성된다. 이 레이아웃 방법은 JScrollPane에 9개의 다른 영역을 지정한다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ 하나의 JViewport : 내용의 중심에 지정한다.</FONT>
<P>  <FONT FACE="돋움">∘ 두 개의 JScrollBar 객체 : 수평과 수직 스크롤바에 지정한다.</FONT>
<P>  <FONT FACE="돋움">∘ 두 개의 JViewport 객체 : 행과 열에 지정한다.</FONT>
<P>  <FONT FACE="돋움">∘ 네 개의 Component 객체 : 각 모서리에 지정한다.</FONT>
<BR>
<P><FONT FACE="바탕">JScrollPane은 모서리를 LOWER_LEFT_CORNER, LOWER_RIGHT_CORNER, UPPER_LEFT_ CORNER, UPPER_RIGHT_CORNER로 지정한다.</FONT>
<P><FONT FACE="바탕">JViewport는 자체 컴포넌트를 가질 수 있는 컨테이너로 매우 유연한 정렬기능을 갖고, 자신만의 레이아웃 관리자인 ViewportLayout을 사용한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">11.3.3 ViewportLayout</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">ViewportLayout은  JViewport가 사용하는 레이아웃 매니저로 사용자가 직접 레이아웃을 사용하지 않고 JViewPort 객체와 자동으로 연결되어 JViewPort 속성에 따라 내부 컴포넌트의 위치가 결정된다.</FONT>
</HTML>
