<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">3.3</P></td>
        <td width="518">
        <p class="TitleTitle">접근 제한자(Access Modifier)</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P> 접근 제한자는 클래스와 클래스 변수, 메소드, 생성자 등의 접근을 제어할 수 있는 제한자로서 종류에는 public, private, protected와 접근 제한자를 붙이지 않았을 경우에 해당하는 <I>friendly</I>가 있다.
		<P>접근 제한자를 표로 만들면 다음과 같다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=18%>
			<P ALIGN=CENTER>Modifier</TD>
			<TD WIDTH=21%>
			<P ALIGN=CENTER>Same Class</TD>
			<TD WIDTH=24%>
			<P ALIGN=CENTER>Same Package</TD>
			<TD WIDTH=17%>
			<P ALIGN=CENTER>Subclass</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>Universe</TD>
		</tr>
		<TR>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>public</TD>
			<TD WIDTH=21%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=24%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=17%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>Yes</TD>
		</tr>
		<TR>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>protected</TD>
			<TD WIDTH=21%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=24%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=17%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER> &nbsp;</TD>
		</tr>
		<TR>
			<TD WIDTH=18%>
			<P ALIGN=CENTER><I>friendly</I></TD>
			<TD WIDTH=21%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=24%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=17%>
			<P ALIGN=CENTER> &nbsp;</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER> &nbsp;</TD>
		</tr>
		<TR>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>private</TD>
			<TD WIDTH=21%>
			<P ALIGN=CENTER>Yes</TD>
			<TD WIDTH=24%>
			<P ALIGN=CENTER> &nbsp;</TD>
			<TD WIDTH=17%>
			<P ALIGN=CENTER> &nbsp;</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER> &nbsp;</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">3.3.1 public
		<ul>
		<P>public은 외부에서 아무런 제한 없이 호출 가능하도록 해주며, 클래스나 메소드, 변수를 정의할 때 사용한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>package pac;</B>
			<P class="CStep1">public class Super {
			<P class="CStep2"><B>public</B>		<B>int num1 = 10;</B>
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>위의 예에서 클래스 Super나 변수 num1은 모두 public으로 선언되었다. 이는 어디서나 사용할 수 있음을 나타내는데 예를 들면 다음과 같다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import pac.*;
			<P class="CStep1">public class Sub {
			<P class="CStep2">public void print(){
			<P class="CStep3"><B>Super s = new Super();</B>
			<P class="CStep3">System.out.println(&quot;Super num1 = &quot; + <B>s.num1</B>);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>위의 Sub클래스는 Super클래스 및 num1 변수를 패키지가 달라도 참조할 수 있다.
		</ul>
		<P class="TSubmenu">3.3.2 protected
		<ul>
		<P>protected는 같은 패키지 안에 있는 모든 클래스와 그 하위 클래스까지만 접근 가능하다. protected는 자신의 서브클래스가 다른 패키지에 있을 경우, 이 서브클래스는 부모의 protected로 선언된 변수를 접근할 수 있다는 점이 <I>friendly</I>와의 차이점이다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>package pac;</B>
			<P class="CStep1">public class Super {
			<P class="CStep2"><B>protected</B>		<B>int num2 = 20;</B>
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import pac.*;
			<P class="CStep1">public class Sub <B>extends Super</B> {
			<P class="CStep2">public void print() {
			<P class="CStep3">System.out.println(&quot;Super num2 = &quot; + <B>num2</B>);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>앞의 예에서처럼 num2는 패키지가 다르더라도 상속받은 경우 참조가 가능하다. 2개의 패키지가 있다.
		</ul>
		<P class="TSubmenu">3.3.3 <I>package friendly</I>
		<ul>
		<P><I>friendly</I>는 자바에서 제공하는 키워드는 아니며, 자바에서 클래스, 변수, 메소드 등의 앞에 아무 것도 명시하지 않았을 때 기본으로 지정되는 접근 제한 모드이다. 그래서 간혹 default라고 부르기도 한다. 같은 패키지 안에 있는 클래스에만 접근이 가능하므로 package friendly 또는 줄여서 friendly라고도 부른다. 하위 클래스라도 같은 패키지 안에 없으면 접근이 허용되지 않는다. 
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>package pac;</B>
			<P class="CStep1">public class Super {
			<P class="CStep2"><B>int num3 = 30;</B>	/* <I>friendly </I>*/
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import pac.*;
			<P class="CStep1">public class Sub <B>extends Super</B> {
			<P class="CStep2">public void print() {
			<P class="CStep3">System.out.println(&quot;Super num3 = &quot; + <B>num3</B>); //Error
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>이 예제에서는 오류가 발생하는데 그 이유는 num3의 경우 접근범위가 동일 패키지에만 적용되기 때문이다. 패키지를 벗어나 참조할 경우에는 상속을 받았더라도 참조가 불가능하다. 이처럼 <I>friendly</I>가 protected와 다른 점은 protected는 자기의 서브클래스가 다른 패키지에 있어도 서브클래스는 부모의 protected로 선언된 변수를 access할 수 있지만 <I>friendly</I>는 서브클래스라 해도 패키지가 다르면 접근할 수 없다.
		</ul>
		<P class="TSubmenu">3.3.4 private
		<ul>
		<P>private는 접근제한이 가장 많은 제한자로서 소속된 클래스나 변수 또는 메소드의 범위 안에서만 접근이 가능하다. 이는 메소드나 변수 정의시 사용가능하고, 클래스에는 사용되지 않는다. (단, 내부 클래스일 경우에서는 사용이 가능하다)
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class Sub {
			<P class="CStep2"><B>private</B>			<B>int num4 = 40;</B>
			<P class="CStep2">public void print(){
			<P class="CStep3">System.out.println(&quot;Sub num5 = &quot; + <B>num4</B>);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>앞의 예에서 변수 num5는 private로 선언되었으므로 자신의 클래스 안에서만 접근할 수 있고, 다음 예처럼 다른 클래스에서는 참조할 수 없다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class Other {
			<P class="CStep2">public void doSomething() {
			<P class="CStep3">Sub s = new Sub();
			<P class="CStep3">System.out.println(<B>s.num4</B>); //Error
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>이 프로그램은 4번째 줄에서 오류가 발생한다. private는 클래스가 같은 패키지 내에 존재하더라도 다른 클래스인 Other에서 Sub클래스의 num4를 access할 수 없다. 
		<P>private가 <I>friendly</I>와 다른 점은, 같은 <I>friendly</I>로 선언된 변수는 패키지 안의 어디서든지 access가 가능하다는 것이다.
		<P>다음은 앞의 접근 제어 예제를 모두 보여주고 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>pac/Super.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">package pac;
			<P class="CStep1">public class Super {
			<P class="CStep2">public			int num1 = 10;
			<P class="CStep2">protected		int num2 = 20;
			<P class="CStep2">/*friendly*/	int num3 = 30;
			<P class="CStep2">private			int num4 = 40;
			<P class="CStep2">public int getNum4(){
			<P class="CStep3">return num4;
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>Sub.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import pac.*;
			<P class="CStep1">public class Sub extends Super{
			<P class="CStep2">private	int num5 = 50;
			<P class="CStep3">public void print(){
			<P class="CStep3">System.out.println(&quot;Super num1 = &quot; + num1);
			<P class="CStep3">System.out.println(&quot;Super num2 = &quot; + num2);		
			<P class="CStep3">System.out.println(&quot;Super num3 = &quot; + num3); //Error
			<P class="CStep3">System.out.println(&quot;Super num4 = &quot; + num4); //Error
			<P class="CStep3">System.out.println(&quot;Super num4 = &quot; + getNum4());
			<P class="CStep3">System.out.println(&quot;Sub num5 = &quot; + num5);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>TestModifier.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import pac.*;
			<P class="CStep1">public class TestModifier{
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">System.out.println(&quot;***** Super 참조 *****&quot;);
			<P class="CStep3">Super sup = new Super();
			<P class="CStep3">System.out.println(&quot;num1 = &quot; + sup.num1 + 
			<P class="CStep4">//&quot;\tnum2 = &quot; + sup.num2 + 
			<P class="CStep4">//&quot;\tnum3 = &quot; + sup.num3 + 
			<P class="CStep5">&quot;\tnum4 = &quot; + sup.getNum4());
			<P class="CStep3">System.out.println(&quot;\n***** Sub 참조 *****&quot;);
			<P class="CStep3">Sub sub = new Sub();
			<P class="CStep3">sub.print();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result"><B>***** Super 참조 *****</B>
			<P class="Result">num1 = 10       num4 = 40
			<P class="Result">***** Sub 참조 *****
			<P class="Result">Super num1 = 10
			<P class="Result">Super num2 = 20
			<P class="Result">Super num4 = 40
			<P class="Result">Sub num5 = 50</td>
		</tr>
		</table>
		</ul></td>
    </tr>
	</table>
</body>
</html>