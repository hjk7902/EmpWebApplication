<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
	<tr>
		<td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">1.4</P></td>
		<td width="518">
		<p class="TitleTitle">어플리케이션(Application)과 애플릿(Applet)</p></td>
	</tr>
	</table>

	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
	<tr>
		<td>
		<ul>
		<P>자바는 두 가지 종류의 프로그램 형태를 가지고 있는데, 하나는 일반적인 응용 프로그램 즉, 어플리케이션(Application)이고, 또 하나는 작은 프로그램이라는 뜻을 가진 애플릿(Applet)이다. 어플리케이션에는 다시 도스모드 형태로 실행되는 Console 어플리케이션과, 윈도우 형태로 실행되는 Window 어플리케이션, 그리고 서버에서 실행되는 웹 어플리케이션이 있다.
		<P>애플릿과 어플리케이션에는 차이가 있는데, 자바 애플릿은 html 문서 안에서 사용되므로 애플릿을 보려면 외부 뷰어가 있어야 하며, 애플릿을 표시하기 위해서는 웹 브라우저나 애플릿 뷰어(appletviewer.exe)를 이용한다. 자바 어플리케이션은 단독으로 사용되도록 고안되어 외부 뷰어가 필요 없다. 즉, 이것은 자바 인터프리터를 사용해 자바 어플리케이션을 실행할 수 있음을 의미한다. 이러한 특징으로 자바 어플리케이션은 로컬(Local)에서 실행되고, 자바 애플릿은 서버(Server)에서 다운로드 되어 실행된다. 

		<P class="Title_1" align="left">1.4.1 어플리케이션의 기초

		<P>1.4.1.1 Hello World! 응용프로그램 예
		<P>일반적으로 사용되는 가장 짧은 응용프로그램 코드는 Hello World!라는 문자열을 화면에 표시하는 것이다. 아래의 자바코드는 Hello World!라는 문자열을 화면에 표시하는 응용프로그램의 예이다. 프로그램 코드는 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<tr>
            <td width="49"><P>&nbsp;</td>
			<td width="455"><P>HelloWorld.java</td>
		</tr>
		<tr>
			<TD width="7%">
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:</TD>
			<td width="455">
			<P class="CStep1">//
			<P class="CStep1">// Sample HelloWorld application
			<P class="CStep1">//
			<P class="CStep1">public class HelloWorld {
			<P class="CStep2">public static void main (String args[]) {
			<P class="CStep3">System.out.println(&quot;Hello World!&quot;);
			<P class="CStep2">}
			<P class="CStep1">}
			</td>
		</tr>
		</TABLE>
		<P>1.4.1.2 HelloWorld 프로그램 분석
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
		<tr>
			<TD width="7%">
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:</td>
			<TD WIDTH=92%>
			<p class="CStep1">//
			<p class="CStep1">// Sample HelloWorld application
			<p class="CStep1">//</td>
        </tr>
		</TABLE>
		<P>프로그램의 처음 세 줄은 주석 라인이다. //(이중 빗금)표시는 그 라인에서 이후의 문장들은 주석이 되어 실행과는 무관하다는 것을 의미한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%>
			<P class="CNumber">4:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">public class HelloWorld {</td>
        </tr>
		</TABLE>
		<P>4 : 클래스를 선언하는 곳으로 여기에서는 클래스 이름을 HelloWorld로 선언하였다. 소스코드 파일 이름 형식은 ClassName.java로 되어야 한다. 컴파일 하면 소스 파일이 저장되어 있는 폴더에 ClassName. class라는 파일이 생성된다. 이 프로그램의 경우에는 파일명이 HelloWorld.java가 되어야 하며, 컴파일하면 HelloWorld.class라는 파일이 생성된다. 자바에서는 소스코드뿐만 아니라 파일명에서도 대문자와 소문자를 철저하게 구분한다. 또한 파일의 이름은 public으로 선언된 클래스가 있으면 그 클래스 이름과 동일하게 정해져야하며, 그렇지 않으면 main() 메소드가 있는 클래스 이름을 파일 이름으로 한다. 하나의 파일 내에는 여러 개의 클래스가 존재할 수 있지만 public으로 선언된 클래스는 두 개 이상 존재할 수 없다.
		<P>'{'는 클래스 블록의 시작을 나타낸다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%><P class="CNumber">5:</td>
			<TD WIDTH=92%><P class="CStep2">public static void main (String args[]) {</td>
		</tr>
		</TABLE>
		<P>5 : 프로그램 실행이 시작되는 main() 메소드의 선언부이다. 메소드는 일종의 함수로 자세한 내용은 뒤에서 설명하기로 한다. 약술하면 자바 어플리케이션 프로그램의 경우 위에 기술한 내용과 똑같이 정의된 main() 메소드가 반드시 하나 존재해야 하는데,  만약 main() 메소드가 없으면 프로그램은 실행되지 않는다. 메인 메소드의 형태는 기억해두는 것이 좋다. 즉, psvms라고...
		<P>메소드 선언부분의 String args[]은 프로그램을 실행할 때 명령행에서 인수를 사용하면 그 인수는 main() 메소드로 전달되어 args라는 문자열로 선언된 배열로 들어간다. 보통 C언어 등에서는 String args[] 형식으로 배열을 나타내는 대괄호(&quot;[]&quot;)가 뒤에 추가되어야 하지만 자바에서는 어느 곳에 들어가도 상관이 없다. 배열도 일종의 타입이기 때문에 앞에 넣어주는 것이 보기가 좋을 것이다. 이 예제에서는 main() 메소드 선언 이후에 args 배열을 참조하는 부분이 전혀 없기 때문에 인수가 사용되지 않는다.
		<P>5번째 줄에 몇 가지 키워드가 나오는데, 키워드에 대한 전반적인 내용은 뒤에서 자세히 설명하기로 하고, 우선 여기에 나온 키워드만 간단히 설명하면 다음과 같다.
		<P> ▶ public - main() 메소드를 모든 클래스가 사용할 수 있음을 의미한다.
		<P> ▶ static - main() 메소드에서는 호출하는데 쓰이는 인스턴스가 필요하지 않다고 컴파일러에 알려주는 키워드이다.
		<P>  ▶ void - main() 메소드를 실행해도 실행 결과로 돌아오는 것이 없음을 의미한다. 자바에서는 타입(type) 확인은 철저하게 하며, 그 중에는 호출된 메소드의 실행 결과와 그 메소드가 선언된 유형이 같은지 확인하기 때문에 중요하다.
		<P>  ▶ String args[] - String형 배열을 선언하는 키워드이다. 이 배열에서 명령행의 클래스 이름 다음에 입력한 인수가 들어간다. 일종의 배열형이므로 이후부터는 &quot;String[] args&quot;로 표기하기로 한다.
		<P>  '{'는 main() 메소드 블록의 시작을 나타낸다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%><P class="CNumber">6:</td>
			<TD  WIDTH=92%><P class="CStep1">System.out.println(&quot;Hello World!&quot;);</td>
	    </tr>
		</TABLE>
		<P>6 : &quot;Hello World!&quot;라는 문자열을 출력하는 것으로 클래스 이름(System)과 객체 이름(out; PrintStream형 객체) 그리고 메소드 이름(println)을 사용하는 방법을 보여주는 예이기도 하다. 자바에서 문장의 끝은 세미콜론(;)으로 마친다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%>
			<P class="CNumber">7:
			<P class="CNumber">8:</td>
			<TD  WIDTH=92%>
			<P class="CStep2">}
			<P class="CStep1">}</td>
		</tr>
		</TABLE>
		<P>중괄호는 각각 main() 메소드의 끝과 HelloWorld 클래스의 끝을 나타낸다.
		<P>위의 소스코드에 대해서 이해가 잘 안될 수 도 있지만 이후 계속 학습해 가다보면 곧 이해가 될 것이다.
		<P>1.4.1.3 파일 저장하기
		<P>위의 소스 코드를 입력하는데 필요한 에디터는 텍스트 에디터라면 무엇이건 좋다. 물론 자바 전용 에디터도 몇 가지 있는데, 그 중의 하나인 kawa는 많이 사용되는 에디터 중의 하나지만 kawa를 사용하지 않고 윈도우에서 제공하는 일반 에디터(메모장 등)로도 충분하다.
		<P>일단 프로그램 작성이 끝나면 파일을 저장해야 한다. 파일을 저장할 때 유의해야 할 사항은 그 파일에서 정의하는 클래스와 동일한 이름을 붙여야 하며, 확장자는 .java이어야 한다.
		<P>위의 HelloWorld 프로그램의 경우 파일 이름은 HelloWorld.java이다. 소스코드는 물론 파일명도 대문자와 소문자를 구분하여 사용한다.
		<center><P><IMG SRC="images/FYXIV016.GIF" BORDER=0 WIDTH="500" HEIGHT="217" HSPACE=3 VSPACE=3 ALIGN=BOTTOM></center>
		<P>메모장에서 저장할 때 파일명의 앞과 뒤를 큰따옴표(&quot;)로 묶어주면 확장자가 txt인 파일로 저장되는 것을 방지할 수 있다.
		<P><IMG SRC="images/FYXIV017.GIF" BORDER=0 WIDTH="504" HEIGHT="54" HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>1.4.1.4 HelloWorld 컴파일 하기
		<P>응용프로그램을 컴파일한 후 실행시키는 것은 사용하는 자바 개발환경에 따라 다를 수도 있지만, 여기에서는 선사의 Java 2 SDK(Software Development kit)를 기준으로 한다. JDK의 javac 명령은 소스파일을 바이트코드 파일(.class)로 컴파일 하는 명령이며, 이 파일은 JDK가 설치된 폴더 아래의 bin이라는 폴더에 있다.
		<P>HelloWorld.java 소스파일을 만들었으면, 다음 코드 라인을 사용하여 컴파일 할 수 있다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
		<tr>
			<TD>
			<p class="TStep1"> &gt; javac HelloWorld.java</td>
		</tr>
		</TABLE>
		<P>컴파일 후 아무런 메시지도 나타나지 않으면 컴파일이 성공적으로 수행된 것이고, 소스파일과 같은 폴더에 HelloWorld.class라는 새로운 파일이 저장된 것을 알 수 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<tr>
			<TD><p class="TStep1">컴파일할 때 나타나는 오류</td>
		</tr>
		<TR>
			<TD>
			<p class="TStep1">다음은 자바에서 컴파일 하는 도중에 나타날 수 있는
			<p class="TStep1">일반적인 오류를 나타낸 것이다.
			<p class="TStep1">&bull; javac: Command not found
			<p class="TStep1">컴파일러가 있는 경로 변수가 올바르게 설정되지 않는 경우이다.
			<p class="TStep1">path명령으로 JDK가 설치되어 있는 폴더 아래의 bin이라는 폴더를 지정한다.
			<p class="TStep1">&bull;HelloWorld.java:6: cannot resolve symbol
			<p class="TStep1">symbol : method printl (java.lang.String)
			<p class="TStep1">location: class java.io.PrintStream
			<p class="TStep1">System.out.printl(&quot;Hello World!&quot;);
			<p class="TStep1"> ^
			<p class="TStep1">메소드 이름 println이 printl로 잘못 입력되었다.</td>
		</tr>
		</TABLE>
		<P>1.4.1.5 HelloWorld 실행하기
		<P>HelloWorld를 실행하려면 JDK가 설치된 폴더 아래의 bin 폴더에 있는 자바인터프리터(interpreter)인 java.exe를 사용한다. 이때 주의해야 할 사항은 자바인터프리터가 HelloWorld.class 파일을 실행시킨다고 해서 확장자인 .class를 넣어서는 안 된다. 자바에서 &quot;.&quot; 은 폴더를 구분하는 역할을 하기 때문에 &quot;.class&quot;를 넣었을 경우에는 HelloWorld라는 폴더 아래의 &quot;class.class&quot;라는 파일을 의미한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
		<tr>
			<TD>
			<p class="TStep1">&gt; java HelloWorld
			<p class="TStep1">Hello World!</td>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<tr>
			<TD><p class="TStep1">런타임 오류</td>
		</tr>
		<TR>
			<TD>
			<p class="TStep1">다음은 실행할 때 나타날 수 있는 일반적인 오류이다.
			<p class="TStep1">&bull; class Helloworld를 찾을 수 없음
			<p class="TStep1">일반적으로 클래스 이름의 철자가 소스파일 이름과 다르며 파일을 클래스 
			<p class="TStep1">정의에 나오는 철자(대소문자 포함)에 일치하게 지정하지 않았음을 의미한다.
			<p class="TStep1">위의 예에서 실행할 때 java Helloworld라고 입력하면 발생한다.
			<p class="TStep1">(대문자 W를 소문자 w로 잘 못 입력)</td>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">1.4.2 애플릿 기초
		<ul>
		<P>웹 페이지 안에서 동적으로 사용자의 입력에 반응하거나 실시간으로 변화하는 다양한 자바 프로그램은 모두 애플릿이며, 독자적으로 일반 프로그램과 같이 실행될 수 있는 자바 프로그램은 모두 자바 어플리케이션이다. 자바가 웹 프로그래밍 언어의 표준으로 등장하게 된 데에는 무엇보다 자바 애플릿이 큰 영향을 주었다고 볼 수 있다.
		<P>1.4.2.1 Hello World! Applet 프로그램 예
		<P>다음은 웹 브라우저 화면에 Hello World!라는 문자열을 표시하는 애플릿 프로그램의 예이다. 단순히 텍스트로 콘솔(윈도우 도스 창)에 &quot;Hello&quot;라는 문자열만 출력하는 어플리케이션에 비해 일단 웹 브라우저 안에서 글자를 표현해야 하는 애플릿은 그래픽으로 문자열을 그려야 한다는 점에서 훨씬 복잡하다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%>
			<P>HelloWorldApplet.java</td>
	    </tr>
		<TR>
			<TD  WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">import java.awt.Graphics;
			<P class="CStep1">import java.applet.Applet;
			<P class="CStep1">public class HelloWorldApplet extends Applet {
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep3">g.drawString(&quot;Hello, World!&quot; , 100, 100);
			<P class="CStep2">}
			<P class="CStep1">}</td>
		</tr>
		</TABLE>
		<P>1.4.2.2 HelloWorldApplet 프로그램 분석
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">import java.awt.Graphics;
			<P class="CStep1">import java.applet.Applet;</td>
		</tr>
		</TABLE>
		<P>프로그램 내에서 사용될 클래스 파일을 포함하는 패키지를 import한 것이다. C언어의 include문과 유사하지만 구체적인 내용은 많이 다르다. 그래픽 관련 클래스를 사용하기 위해서 java.awt.Graphics 클래스를 import하였고, 애플릿을 프로그래밍하기 위해 java.awt.Applet 클래스를 import하였다. 이를 좀서 쉽게 작성하면 다음과 같다. Graphics 클래스는 java.awt 패키지 내의 클래스이고, Applet 클래스는 java.awt 패키지 내의 클래스이므로 다음과 같이 표기가 가능하다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.applet.*;</td>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%><P class="CNumber">3:</td>
			<TD  WIDTH=92%><P class="CStep1">public class HelloWorldAppet extends Applet {</td>
		</tr>
		</TABLE>
		<P>클래스의 선언부이며 이 클래스는 애플릿 프로그램을 만들기 위해서 Applet 클래스를 상속(extends)받았다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%>
			<P class="CNumber">4:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">public void paint(Graphics g) {</td>
		</tr>
		</TABLE>
		<P>화면에 무언가를 그리기 위한 paint() 메소드를 선언하였다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%>
			<P class="CNumber">5:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">g.drawString(&quot;Hello, World!&quot; , 100, 100);</td>
		</tr>
		</TABLE>
		<P>g라는 그래픽 객체를 가지고 애플릿의 화면 좌측으로부터 100 픽셀, 상단으로부터 100 픽셀의 위치에 Hello, World! 라는 문자열을 출력한다.
		<P>1.4.2.3 HTML 프로그램
		<P>애플릿 프로그램의 저장 및 컴파일도 기본적으로 어플리케이션 프로그램과 같다. 그러나 애플릿은 웹 브라우저 안에서 실행되는 작은 프로그램이므로 웹 브라우저가 있어야 실행시켜 볼 수 있다. 프로그래머를 위하여 선사에서 배포하는 JDK에는 애플릿만 실행시켜주는 간단한 웹 브라우저인 애플릿뷰어(appletviewer)가 포함되어 있다. 애플릿은 웹 페이지에 포함되는 것이므로 반드시 애플릿을 포함하도록 지시하는 HTML 문서가 필요하다. 이 애플릿은 다음과 같이 HTML 문서 안에 포함시킨다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD WIDTH="6%"></TD>
			<TD WIDTH="91%">
			<P>HelloWorldApplet.html</td>
		</tr>
		<TR>
			<TD  WIDTH="6%">
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">&nbsp;
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:</td>
			<TD  WIDTH="91%">
			<P class="CStep1">&lt;HTML&gt;
			<P class="CStep1">&lt;HEAD&gt;&lt;TITLE&gt;Hello Applet&lt;/TITLE&gt;&lt;/HEAD&gt;
			<P class="CStep1">&lt;BODY&gt;
			<P class="CStep1">&lt;applet code=HelloWorldApplet.class
			<P class="CStep1">width=300 height=200&gt;
			<P class="CStep1">&lt;/applet&gt;
			<P class="CStep1">&lt;/BODY&gt;
			<P class="CStep1">&lt;/HTML&gt;</td>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD  WIDTH=7%>
			<P class="CNumber">4:
			<P class="CNumber">&nbsp;
			<P class="CNumber">5:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">&lt;applet code=HelloWorldApplet.class
			<P class="CStep1">width=300 height=200&gt;
			<P class="CStep1">&lt;/applet&gt;</td>
		</tr>
		</TABLE>
		<P>위 내용은 HTML 문장 내에서 애플릿 프로그램을 포함시키는 구문이다. 컴파일 후 생성된 클래스 파일을 HTML 문서 내에서 지시하게 되는데, 이때 사용되는 태그(tag)가 &lt;applet&gt;태그이다. &lt;applet&gt; 태그에 속해 있는 옵션 중에서 code 와 width 그리고 height는 빠져서는 안될 기본 옵션이다. width와 height는 애플릿의 크기를 자로와 세로 픽셀 단위로 지정하고, code 옵션은 실제 실행될 애플릿 프로그램을 지정하는 부분으로 자바 소스코드를 지정하는 것이 아니라, 컴파일 후 생성된 클래스파일을 지정하는 곳이다. HTML 문서 내에서는 대문자와 소문자를 구분하지 않지만 code 옵션에서 지정하는 클래스파일의 이름은 대문자와 소문자를 구분한다. HTML 문서의 이름은 어느 것을 지정해도 관계없다.
		<P>애플릿 프로그램의 실행은 클래스파일이 지정된 HTML 파일을 불러오거나 다음과 같이 appletviewer.exe를 이용할 수 있다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD><p class="TStep1"> &gt; appletviewer HelloWorld.html</td>
		</tr>
		</TABLE>
		<P>1.4.2.4 출력 결과
		<P>다음은 appletviewer.exe로 실행했을 때의 출력화면을 나타낸 것이다.
		<P><center><IMG SRC="images/FYXIV018.GIF" BORDER=0 WIDTH="308" HEIGHT="269" ALIGN=BOTTOM></center>
		<P>다음은 웹브라우저 상에 출력된 화면을 나타낸 것이다.
		<P><center><IMG SRC="images/FYXIV019.GIF" BORDER=0 WIDTH="497" HEIGHT="387" ALIGN=BOTTOM></center>
		<P>1.4.2.5 애플릿 태그
		<P>애플릿을 홈페이지에 설치하려면 &lt;applet&gt; 태그에 대해 정확한 이해가 필요하다. 핫자바 1.0 알파 버전이 지원하던 JDK 1.0 알파 버전에서는 HTML 태그가 &lt;applet&gt;이 아니고 &lt;app&gt;였다. &lt;app&gt; 태그는 다음과 같이 하나의 태그 안에 모든 속성을 기입하는 형식을 택하였다. 현재의 웹 브라우저는 &lt;app&gt; 태그를 지원하지 않으므로 관심을 둘 필요는 없다. 
		<P>&lt;applet&gt; 태그는 이것과 상당히 다른데, 먼저 HTML 명령의 규격을 준수하여 &lt;applet&gt;으로 시작해서 &lt;/applet&gt;으로 끝난다. 그리고 각 애플릿이 필요로 하는 속성은 별도로 &lt;param&gt; 태그를 이용하여 속성(attribute) 값을 주게된다.
		<P>&lt;applet&gt; 태그의 형식은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">&lt;applet code=&quot;<I>클래스 이름</I>&quot;
			<p class="TStep1">width=&quot;<I>픽셀 단위의 애플릿 폭</I>&quot;
			<p class="TStep1">height=&quot;<I>픽셀 단위의 애플릿 높이</I>&quot; 
			<p class="TStep1">[ codebase=&quot;<I>애플릿 파일이 존재하는 기반 URL</I>&quot; 
			<p class="TStep1">alt=&quot;<I>텍스트 전용 브라우저에서 대신 사용하는 텍스트</I>&quot; 
			<p class="TStep1">name=&quot;<I>별명-같은 문서에서는 이 이름으로 사용할 수 있다</I>&quot;
			<p class="TStep1">align=&quot;<I>애플릿 정렬 방식</I>&quot;
			<p class="TStep1">vspace=&quot;<I>세로 방향의 여백</I>&quot;
			<p class="TStep1">hspace=&quot;<I>가로 방향의 여백</I>&quot; ] &gt;
			<p class="TStep1">&lt;param name=&quot;<I>속성 이름</I>&quot; value=&quot;<I>속성 값</I>&quot;&gt;
			<p class="TStep1">&lt;param ...&gt;
			<p class="TStep1">...
			<p class="TStep1">&lt;/applet&gt;</td>
		</tr>
		</TABLE>
		<P>[ ] 안의 부분은 생략이 가능하다.
		</ul>
		<P class="TSubmenu">1.4.3 AWT 프로그램
		<ul>
		<P>애플릿처럼 그래픽으로 윈도우 위에 문자열을 표시하는 자바 어플리케이션은 애플릿보다 훨씬 복잡한데 이는 프로그램 작성이 어려운건 아니고 세세한 신경을 써야하는 면이 복잡하다고 할 수 있다. 
		<P>1.4.3.1 AWT 응용프로그램 예
		<P>다음은 앞에서 애플릿을 사용할 때와 같이 윈도우에 문자열을 나타내는 자바 어플리케이션의 예를 나타낸 것인데 자세한 설명은 생략하고 흐름만 간단하게 익히기 바란다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>HelloWorldWin.java</td>
	    </tr>
		<TR>
			<TD  WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:</td>
			<TD  WIDTH=92%>
			<P class="CStep1">import java.awt.Frame;
			<P class="CStep1">import java.awt.Graphics;
			<P class="CStep1">public class HelloWorldWin extends Frame {
			<P class="CStep2">public HelloWorldWin(String title) {
			<P class="CStep3">super(title);
			<P class="CStep3">setSize(300, 200);
			<P class="CStep3">setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public void paint(Graphics g) {
			<P class="CStep3">g.drawString(&quot;Hello, World&quot;, 100, 100);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">new HelloWorldWin(&quot;Hello World&quot;);
			<P class="CStep2">	} 
			<P class="CStep1">}</td>
		</tr>
		</TABLE>
		<P>1.4.3.2 AWT 응용프로그램 실행결과
		<P>다음은 윈도우 출력화면을 나타낸 것이다.
		<P><center><IMG SRC="images/FYXIV020.GIF" BORDER=0 WIDTH="300" HEIGHT="200" ALIGN=BOTTOM></center>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="500">
		<tr>
			<TD><p class="TStep1">자바의 종류</td>
		</tr>
		<TR>
			<TD  WIDTH=100%>
			<p class="TStep1">&bull; Application : 독립적으로 실행되는 프로그램이다.
			<p class="TStep1">&bull; Applet : 웹 브라우저 내에서 실행된다.
			<p class="TStep1">&bull; Servlet : 애플릿에 대응되는 말로 서버에서 동작하는 작은 
			<p class="TStep1">자바 프로그램을 말한다. 이것은 웹서버에서 동작한다.
			<p class="TStep1">&bull; CORBA : CORBA는 분산객체환경을 위해 OMG라는 그룹에서 제정한 
			<p class="TStep1">표준안이며, CORBA와 대응되는 것은 Microsoft의 DCOM(COM+)이다.
			<p class="TStep1">자바에서는 RMI라는 것이 있는데, 규모로 보면 CORBA나 COM+보다는 
			<p class="TStep1">작지만 자바에 한정해서 보면 기능이 같다.
			<p class="TStep1">&bull; Java Beans : 자바환경에서 컴포넌트를 정의한 것이다.
			<p class="TStep1">&bull; JDBC : ODBC를 연상하면 된다.
			<p class="TStep1">&bull; JFC는 자바의 GUI Frame Work으로 생각하면 되고, MFC를 
			<p class="TStep1">생각하면 된다. 이 중 일부는 Swing이라는 이름으로 구현되었다.
			<p class="TStep1">&bull; JMF : Java Media Framework로 동영상 등을 재생하는 것이다.
			<p class="TStep1">&bull; SCJP : 자바를 만든 선사에서 공인하는 자바 프로그래머
			<p class="TStep1"> 자격증이다.(Sun Certified Java Programmer)
			<p class="TStep1">이를 보면 선사에서는 자바를 이용하여 MS에 대응하는 제품을
			<p class="TStep1"> 계속 만들고 있음을 알 수 있다.
			<p class="TStep1">MFC ↔ JFC, ODBC ↔ JDBC, ASP ↔ JSP, COM+ ↔ RMI</td>
		</tr>
		</TABLE>
		</ul></td>
	</tr>
	</table>
</body>
</html>