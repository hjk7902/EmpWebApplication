<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
	<tr>
		<td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">1.5</P></td>
		<td width="518">
		<p class="TitleTitle" align="left">객체와 클래스</td>
	</tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
	<tr>
		<td width="1101">
		<ul>
		<P>객체는 객체지향 프로그래밍에서 가장 기본이 되는 개념이다. 사전적 의미로는 물건, 물체를 의미한다. 객체지향의 기본 원리는 현실 세계의 모든 것을 객체로 간주하고 이러한 객체를 속성(attribute)과 행위(behavior)를 갖는 소프트웨어적 개념으로 표현하는 것이라고 할 수 있다. 자바에서의 객체는 클래스의 실제 인스턴스(instance)이다. 즉, 클래스의 인스턴스를 만들 때마다 객체가 만들어진다.
		<P>클래스는 일종의 설계도나 명세서(specification)라고 할 수 있으며, 하나 이상의 유사한 객체를 묶어 하나의 공통된 특성으로 표현한 추상적 데이터형으로, 내부 데이터와 데이터에 작용하는 연산 집합으로 구성된다. 즉 실제의 물체(object)를 추상화(abstraction)라는 작업을 통해 자바 프로그램에 사용할 수 있는 코드 형태를 만드는데, 이것이 클래스인 것이다. 클래스가 자기 자신의 구조를 기술하고 정보를 유지하는데 사용하는 데이터를 필드라고 하며, 필드에 작용하는 연산을 메소드라 부른다. 객체에 있어서 명사적 특징들이 클래스에서는 속성(attribute) 즉, 변수에 해당하고, 객체의 동사적 특징은 메소드(method)에 해당한다(C언어에 있어서는 함수).
		</ul>
		<P class="TSubmenu">1.5.1 클래스(Class)의 선언 및 사용
		<ul>
		<P>클래스의 코딩은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1"><I>&lt;modifiers&gt;</I> class <I>&lt;ClassName&gt;</I> {
			<p class="TStep1"><I>ClassBody;</I>
			<p class="TStep1"><I>//attributes</I>
			<p class="TStep1"><I>//constructors</I>
			<p class="TStep1"><I>//methods</I>
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>▶ modifiers : 대표적인 접근 재한자로서 public, protected, default(공백), private 등이 있다. 이 중에서 클래스의 선언에 사용되는 것은 public과 default(공백)이다.
		<P>다음은 실제 클래스를 선언한 예이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>MyClass.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class MyClass {
			<P class="CStep1">//클래스 안의 코드 작성
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>선언한 클래스를 가지고 &quot;new&quot;라는 키워드(메모리 할당 연산자)를 통해 만들어진 실체 즉, 인스턴스를 객체라 하며, 코딩은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1"><I>ClassName instanceName</I> = <B>new</B> <I>Constructor</I>();</TD>
		</tr>
		</TABLE>
		<P>위에서 Constructor는 생성자로서 뒤에서 설명하겠지만 클래스와 이름이 같아야 하므로 통상 클래스 이름과 같이 사용한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>TestMyClass.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber"><B>3:</B>
			<P class="CNumber">4:
			<P class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class TestMyClass {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">MyClass m = <B>new</B> MyClass();
			<P class="CStep4">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">1.5.2 변수 선언 및 사용
		<ul>
		<P>다음은 변수를 선언하는 방법이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1"><I>&lt;modifiers&gt; &lt;type&gt; &lt;variableName&gt;</I>;</TD>
		</tr>
		</TABLE>
		<P>▶ modifiers : 재한자로서 public, protected, default, private 등의 Access Level 제한자와 Usage Level 제한자가 있다. 자세한 설명은 뒤에서 하기로 하고 간단하게 설명하면 다음과 같다.
		<P>- public : 어느 클래스에서나 참조가능.
		<P>- protected : 같은 package 내의 클래스에서만 참조가능, 자손 클래스가 다른 package에 있을 경우, 그 자손 클래스도 참조 가능.
		<P>- default : 같은 package내의 클래스에서만 참조가능.
		<P>- private : 같은 클래스 내에서만 참조가능.
		<P>▶ type : 기본자료형뿐만 아니라 클래스도 자료형으로 사용할 수 있다.
		<P>다음은 변수를 선언한 예이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>MyClass.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber"><B>2:</B>
			<P class="CNumber"><B>3:</B>
			<P class="CNumber">4:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class MyClass {
			<P class="CStep1">public int var1;
			<P class="CStep1">int var2;
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">1.5.3 메소드의 선언 및 사용
		<ul>
		<P>메소드 선언은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1"><I>&lt;modifiers&gt; &lt;return_type&gt; &lt;name&gt; (argument_list)</I>{
			<p class="TStep1">....
			<p class="TStep1">}</TD>
		</tr>
		</TABLE> 
		<P>▶ modifiers : 재한자로서 public, protected, default, private 등의 Access Level 제한자와 Usage Level 제한자가 있다. 
		<P>▶ return_type : 외부로 값을 반환하는데 사용되며, void(리턴값이 없음), byte, short, int, long, float, double, char, boolean, 배열, Class형 등 11가지가 있다.
		<P>▶ argument_list : 외부로부터 값은 받는데 사용되며, return-type 에서 void를 제외한 10 가지가 argument_list의 자료형으로 올 수 있다.
		<P>다음은 메소드를 선언한 예이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%>
			<P>MyClass.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber"><B>4:</B>
			<P class="CNumber">5:
			<P class="CNumber"><B>6:</B>
			<P class="CNumber">7:</td>

			<TD WIDTH=92%>
			<P class="CStep1">public class MyClass {
			<P class="CStep2">public int var1;
			<P class="CStep2">int var2;
			<P class="CStep2"><B>public void doIt() {</B>
			<P class="CStep3">System.out.println(&quot;Hello World!&quot;);
			<P class="CStep2"><B>}</B>
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">1.5.4 멤버변수와 지역변수
		<ul>
		<P>클래스 안에는 변수와 메소드가 올 수 있는데, 이들 클래스와 메소드를 멤버라 부른다. 멤버변수(Member Variable)는 클래스 안에서 선언 된 변수를 말하는데, 초기화를 시켜주지 않아도 객체를 생성할 때 각 자료형의 기본값으로 초기화된다.  
		<P>지역변수(Local Variable)는 Automatic variable이라고도 하며, 메소드 안에서 선언된 것을 말하는데, 반드시 초기화를 필요로 한다.
		<P>다음의 예를 보자
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>VarExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class VarExample {
			<P class="CStep2">int a;
			<P class="CStep2">public void printNum(int c) {
			<P class="CStep3">int b = 1;	//반드시 초기화 해야 함
			<P class="CStep3">System.out.println(&quot;멤버변수 : &quot; + a);
			<P class="CStep3">System.out.println(&quot;지역변수 : &quot; + b);
			<P class="CStep3">System.out.println(&quot;매개변수 : &quot; + c);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			</TD>
			<TD WIDTH=92%>
			<P>TestVarExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class TestVarExample {
			<P class="CStep2">	public static void main(String args[]){
			<P class="CStep3">		VarExample ve = new VarExample();
			<P class="CStep3">		ve.printNum(2);
			<P class="CStep2">	}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		<tr>
			<td width="242">
			<P class="Result">멤버변수 : 0
			<P class="Result">지역변수 : 1
			<P class="Result">매개변수 : 2</td>
		</tr>
		</table>
		</ul>
		<P class="TSubmenu">1.5.5 생성자(Constructor) 선언 및 사용
		<ul>
		<P>생성자는 객체가 생성될 때 객체를 초기화하는데 사용된다. 앞에서 객체를 생성할 때 new 다음에 오는 것을 생성자라고 한다. 
		<P>생성자는 메소드와는 분명히 다르며, 객체가 생성될 때 단 한번 자동으로 수행된다. 생성자는 반드시 하나 이상은 있어야 하는데, 만일 명시적으로 선언하지 않으면 컴파일러가 대신해서 하나를 만들어주게 되는데 이를 기본 생성자(Default Constructor)라 부른다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1"><I>ClassName</I> (<I>argument_list</I>) {
			<p class="TStep1">...
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>생성자를 만드는 규칙은 다음과 같다.
		<P>  1. 생성자의 이름은 클래스 이름과 같아야 한다.(대/소문자까지 정확히 같아야 함) 만일 클래스이름과 다른 이름으로 만들면 메소드로 간주하여 반환 유형이 없다는 오류가 발생한다.
		<P>  2. 메소드와는 달리 반환 유형이 없다. 메소드의 경우 반환 유형이 없더라도 void라고 명시를 해주지만 생성자는 반환 유형을 정의하지 않는다.
		<P>다음의 예를 보자.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%>
			<P>ConExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class ConExample {
			<P class="CStep2">int var;
			<P class="CStep2">public ConExample(int init_var) {
			<P class="CStep3">var = init_var;
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>TestConExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH="10">
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:</TD>
			<TD WIDTH="540">
			<P class="CStep1">public class TestConExample {
			<P class="CStep2">public static void main(String args[]){
			<P class="CStep3">ConExample ce = new ConExample(100);
			<P class="CStep3">System.out.println(&quot;var가 &quot; + ce.var + &quot;으로 초기화&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult"><B>실행 결과</B></td>
		</tr>
		<tr>
			<td width="242"><P class="Result">var가 100으로 초기화</td>
		</tr>
		</table>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=100%>
			<p class="TStep1">Garbage Collecting</TD>
		</tr>
		<TR>
			<TD WIDTH=100%>
			<p class="TStep1">&bull; 자바에서 객체 사용 후 메모리에서 해제할 때 어떻게 해야 할까? 객체를
			<p class="TStep1"> 생성하는데 사용되는 연산자는 &quot;new&quot;이지만, 생성된 객체를 해제시키는 연산
			<p class="TStep1">자는 존재하지 않는다.자바에서는 자바 가상머신이 알아서 메모리를 관리해 
			<p class="TStep1">주며 이를 Garbage Collecting 이라 한다. Garbage Collecting은 객체가
			<p class="TStep1"> 더 이상 프로그램에서 사용되지 않으면 Garbage Collector가 판단하여 스
			<p class="TStep1">스로 해제시켜 메모리를 수거하게된다.
			<p class="TStep1">&bull; System.gc();
			<p class="TStep1">Garbage Collecting의 단점은 언제 동작이 일어날지 모르기 때문에 메모리를
			<p class="TStep1"> 다 차지해 버릴 수도 있다는 것이다. 이때 System클래스의 gc() 메소드를 
			<p class="TStep1">호출하면 시스템이 Garbage Collecting을 가능한 빠른 시간에 수행시킨다.
			<p class="TStep1"> 이 메소드를 호출한다고 해서 Garbage Collector가 바로 실행되는 것은 아
			<p class="TStep1">니다.</TD>	
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">1.5.6 객체 추상화(Object Abstraction)
		<ul>
		<P>모든 객체는 두 가지 특징을 가지고 있다. 하나는 속성에 해당하는 명사적 특징과 또 하나는 행위에 해당하는 동사적 특징이다. 실세계의 객체에서 명사적 특징과, 동사적 특징을 추출해 내는 것을 추상화라고 하는데, 명사적 특징은 객체지향 프로그래밍에서 속성 또는 변수에 해당하고, 동사적 특징은 행위 또는 메소드에 해당한다.
		<P>은행 계좌의 경우를 추상화해보자. 먼저 명사적 특징으로는 계좌번호, 비밀번호, 이율, 잔고 등이 있고 이를 추상화하면 프로그램의 변수에 해당하게 된다. 동사적 특징으로는 입금하다, 출금하다, 조회하다, 이자를 계산하다 등이 있고 이들을 추상화하면 프로그램의 메소드 부분에 해당된다.
		<P>다음은 완벽한 예제는 아니지만 추상화를 거쳐서 실제 은행계좌 객체를 자바로 코딩한 것이다. 이와 같이 추상화 된 객체를 클래스라고 부른다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class Account {
			<P class="CStep2">public String name;
			<P class="CStep2">public String accounCNumber;
			<P class="CStep2">public String passwd;
			<P class="CStep2">public long restMoney;
			<P class="CStep2">public float interest;
			<P class="CStep2">public void saveMoney(logn amount) {
			<P class="CStep3">restMoney = restMoney + amount;
			<P class="CStep2">}
			<P class="CStep2">public void withdrawMoney(long amount) {
			<P class="CStep3">restMoney = restMoney - amount;
			<P class="CStep2">}
			<P class="CStep2">public long getRestMoney() {
			<P class="CStep3">return = restMoney;
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>위 예제는 객체를 추상화하는 과정을 거쳐 만들어 놓은 클래스로 일종의 설계도에 해당한다. 집은 설계도만으로는 별 의미가 없고 실제로 집을 지어야 한다. 이처럼 실제로 만들어져야 할 집을 클래스의 인스턴스라 하며, 바로 객체를 나타낸다.
		<P>다음은 new 키워드를 이용하여 인스턴스를 만드는 예이다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><p class="TStep1">Account myAccount = new Account();</TD>
		</tr>
		</TABLE>
		<P>이제 객체 즉, 인스턴스에 값을 할당해 보자. 클래스 내에서 선언된 변수나 메소드를 사용하려면 객체를 이용한다. 위 예에서 name, accounCNumber, passwd, restMoney, interest를 멤버 변수라 부르고, saveMoney(), withdrawMoney(), getRestMoney() 등을 멤버 메소드라 부른다.
		<P>멤버 변수의 사용은 객체이름 뒤에 &quot;.&quot;점으로 구분하여 변수의 이름을 덧붙여준다. 다음은 만들어진 객체의 멤버 변수에 값을 할당하는 예이다. 
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%>
			<p class="TStep1">myAccount.name = &quot;홍길동&quot;;
			<p class="TStep1">myAccount.accounCNumber = &quot;002-122-011420&quot;;
			<p class="TStep1">myAccount.passwd = &quot;1234&quot;;
			<p class="TStep1">myAccount.restMoney = &quot;3800000&quot;;
			<p class="TStep1">myAccount.interest = 6.03F;</TD>
		</tr>
		</TABLE>
		<P>멤버 메소드를 사용할 때에도 멤버 변수의 사용과 같이 객체이름 뒤에 &quot;.&quot;점으로 구분하여 메소드의 덧붙여준다. 다음은 만들어진 객체의 멤버 메소드를 사용하는 예를 보인 것이다. 
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%>
			<p class="TStep1">myAccount.saveMoney(50000);	//50000원 입금
			<p class="TStep1">myAccount.withdrawMoney(80000);	//80000원 출금
			<p class="TStep1">myAccount.getRestMoney()		//현금 조회</TD>
		</tr>
		</TABLE>
		</ul></td>
	</tr>
	</table>
</body>
</html>