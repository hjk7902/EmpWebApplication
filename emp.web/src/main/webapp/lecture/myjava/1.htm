<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>[자바의 개요] </title>
<meta name="generator" content="Namo WebEditor v5.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.1  </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">개요</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 C++를 모델로 하여 Sun Microsystems(이하 Sun)사에서 개발한 객체지향 프로그래밍 언어이며 개발환경을 가지고 있다.</FONT>
<P><FONT FACE="바탕">자바는 운영체제와 관계없이 이식될 수 있도록 고안된 플랫폼 독립적인 언어이다. &quot;플랫폼 독립적이다&quot;는 예를 들어 윈도우에서 실행되는 워드프로세서를 자바로 만들었다면, 같은 프로그램을 유닉스나 매킨토시에서도 그대로 사용할 수 있다는 말이다. 이렇게 플랫폼에 자유로울 수 있는 이유가 바로 각 플랫폼마다 각기 특성에 맞는 자바 가상 기계(JVM : Java Virtual Machine)를 배포하고 있기 때문이다.</FONT>
<P><FONT FACE="바탕">자바의 실행환경 즉 자바 플랫폼은 자바 API(Application Programming Interface)와 자바 가상 기계(Java Virtual Machine)로 이루어진다. 자바의 실행환경은 운영체제(Operating System)와 하드웨어를 감싸서 자바 프로그램이 동작할 수 있는 환경을 제공하는 역할을 하므로, 이러한 환경에서는 모든 자바 프로그램이 동일하게 동작을 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.1.1 </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">역사</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바의 탄생 배경을 알면 자바 언어의 특성에 대한 이해가 쉬워진다.</FONT>
<P><FONT FACE="바탕">1990년대 초 자바는 미국의 Sun Microsystems사의 제임스 고슬링(James Gosling)이 가전제품에 이용할 목적으로 개발을 시작했다. 제임스 고슬링은 특정한 컴퓨터 칩에 대해 컴파일 해야 하는 C 언어의 문제점, 또 가전 제품의 긴 수명으로 인한 완벽한 호환을 가진 소프트웨어의 개발 요구, 가전 제품에 사용될 소프트웨어의 높은 신뢰성 필요 등의 문제들에 봉착하게 되었으며, 이러한 문제의 해결책으로 탄생한 것이 C와 C++의 불필요한 부분이나 문제가 될 부분들을 제거한 새로운 언어인 자바였다. 
</FONT><P><FONT FACE="바탕">개발 초기에는 파스칼(UCSD Pascal)언어를 모델로 설계하였으나, 이후 C++로 모델을 변경하였다. 최초로 자바를 이용한 프로젝트는 가전 제품과 전기 기기들을 통합하여 가전제품이나 가정 환경에 새로운 인터페이스를 제공하는 그린 프로젝트(Green Project)(Bill Joy, Patric Naughton, Mike sheridan, James Gosling)였다. 팀의 구성원인 제임스 고슬링은 프로그램의 이름을 Oak라고 명명하였고, 후에 자바(java)라는 이름으로 명명하였다.</FONT>
<BR>
<P><FONT FACE="바탕">1994년 인터넷과 그래픽 기반의 월드와이드웹이 확산되면서 기종과 운영체제에 무관한 프로그래밍 언어가 필요함을 느끼게 되었고 개발팀은 곧 이러한 웹 기반의 응용 프로그램에는 자바와 같은 하드웨어 구조에 영향을 받지 않는 중립적인 언어가 이상적이라는 것을 발견하였다. 이에 자바로 만들어진 웹 브라우저인 HotJava(후에 웹러너(webrunner)로 이름이 바뀜)가 탄생하게 되었다. 이것이 최초로 자바를 지원한 웹 브라우저가 되었다. 자바라는 이름은 지역의 어느 커피점 명칭에서 얻었다. 그래서 지금은 웹 페이지에서 항상 끓고 있는 커피를 볼 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">1995년 5월 자바 기술이 처음으로 발표되었고, 정식 버전이 1996년 최초로 발표되었다.</FONT>
<P><FONT FACE="바탕">1995년 말 Netscape 2.0에서 자바 프로그램(Applet) 실행을 지원하면서부터 자바가 급속히 확산되었고, 1990년대 후반 IBM, Borland, Symantic 등 소프트웨어 업체들이 자바 라이센스를 획득하고, 마이크로소프트사의 Windows 98에 자바가 표준적으로 탑재되면서 자바의 전성기를 맞게 되었다.</FONT>
<P><FONT FACE="바탕">자바가 원래 가전기기 제어를 위해 고안되었다는 사실은 현재 이러한 기기용으로 자바의 부분집합이라 할 수 있는 PersonalJava(네트웍 연결 가능한 개인용 소비 기기의 자바 소프트웨어 플랫폼), Embedded Java(Embedded 장치-이동 전화, 사무실 주변 기기, 네트웍 라우터, 스위치 등의 장치- 전용 자바 소프트웨어 플랫폼)가 각광을 받고 있는 현실을 잘 설명해준다.</FONT>
<P><FONT FACE="바탕">또한 근래에는 이동통신기기(Mobile) 분야에 많은 접목이 이루어 지고 있으며, XML이 나온 이후 자바는 또 다른 전성기를 맞게 되었는데. 이는 자바는 Any Where, XML은 Any Thing이라는 점이 서로 잘 맞기 때문이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.1.2 </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">버전</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바의 버전은 JDK가 설치되어 있는 디렉토리(C:\j2sdk\bin)에서 다음 명령으로 확인할 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <B><FONT FACE="Courier New">C:\j2sdk\bin&gt;java -version</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="HY타자B">⽦ Java 1.0.X</FONT>
<P><FONT FACE="바탕">현재에도 웹 브라우저용 프로그램(애플릿)의 제작 방법으로 많이 사용되며, 자바 열풍의 시초가 되어 애플릿으로 자바를 세상에 알린 버전이다. 현재 대부분의 웹 브라우저가 지원하고 있다.</FONT>
<BR>
<BR>
<P><FONT FACE="HY타자B">⽦ Java 1.1.X</FONT>
<P><FONT FACE="바탕">Java 1.0.X의 업그레이드 된 버전으로서 이벤트 처리부분이 drill-up/drill-down 방식에서 위임형 이벤트 모델(delegation event model) 방식으로 완전히 변경되었다. 또한 1.0.X에 있었던 메소드 중에서 보다 개선된 새로운 메소드로 인해 이전의 메소드에서도 사용은 가능하나 권장하지 않는 메소드(deprecated method)가 나타나게 되었다. 향후의 브라우저는 1.1.X 스타일로 프로그래밍을 하고, 자바빈즈(Java Beans ; 자바 환경에서 컴포넌트를 정의한 것), RMI(원격 메소드 호출), JFC(Swing ; Java의 GUI Frame Work) 등의 확장이 일어나게된다.</FONT>
<BR>
<P><FONT FACE="HY타자B">⽦ 1.2.1.3 Java 2(JDK 1.2.X)</FONT>
<P><FONT FACE="바탕">1998년 12월에 발표되었고, JFC(Swing)이 통합되었으며, 보다 향상된 보안 모델을 채택하였고, 코드 최적화와 Drag &amp; Drop 기능이 구현되었으며, 음향 지원 기능이 향상되었다. 현재 완벽하게 지원하는 브라우저가 없으며, appletviewer 또는 Java Plug-in을 사용한다. 후에 JDK 1.2.2로 업그레이드되었다.</FONT>
<BR>
<P><FONT FACE="HY타자B">⽦ 1.3 Java 2 SDK</FONT>
<P><FONT FACE="바탕">CORBA 프로그래밍에 사용되는 idl2java.exe가 idlj.exe로 바뀌었고, 몇몇 API가 추가된 것을 제외하고는 JDK 1.2.2와 거의 유사하다. 1.3의 경우에는 1.4가 나온 이후에도 1.3.1_03버전이 나오기도 하였다.</FONT>
<BR>
<P><FONT FACE="HY타자B">⽦ 1.4 Java 2 SDK</FONT>
<P><FONT FACE="바탕">2002년도 2월에 정식 버전이 나왔으며, 1.3에 비해 많은 기능이 추가되었다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV010.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.2  </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">특징</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 프로그래밍 언어 중 하나지만 다른 프로그래밍 언어에 비해 많은 특징을 가지고 있다. 다음은 자바의 특징에 대하여 개괄적으로 설명한 것이다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">플랫폼</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">독립적</FONT><FONT FACE="Asia줄리엣M">(</FONT><FONT FACE="바탕">아키텍쳐</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">중립적</FONT><FONT FACE="Asia줄리엣M">)</FONT><FONT FACE="바탕">이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">플랫폼 독립적인 특징은 자바가 인기 있는 프로그램 언어가 된 가장 큰 이유이다. 자바는 플랫폼 독립적인 프로그래밍 솔루션으로 플랫폼에 무관한 이식이 가능한 언어이다. 즉, 서로 다른 다양한 플랫폼(하드웨어와 운영체제)에서도 실행이 가능하다. 자바는 서로 다른 네트워크 환경으로 배치될 수 있는 프로그램을 지원하도록 설계되었기 때문에, 네트워크를 통해 프로그램을 다운받아 하드웨어에 관계없이 사용하려면 근본적으로 아키텍처에 독립적이고 이식성을 보장하는 구조가 요구된다. 
</FONT><BR>
<BR>
<P><FONT FACE="바탕">일반적으로 네트워크에는 한 개 이상의 운영체제가 있는데, 시스템 엔지니어나 그래픽 개발자는 UNIX 운영체제를 사용할 것이고, 영업부 등에서는 윈도우95/98 또는 윈도우 NT를 사용하고, 매킨토시 시스템은 광고와 마케팅에서 사용할 것이다. 이렇게 다른 운영체제가 같은 부서나 사무실 안에서 사용되는 일이 점점 늘어나고 있는데, 이때 소프트웨어가 플랫폼에 독립적이지 않다면 사용 소프트웨어를 모든 플랫폼에 맞게 제작하거나, 그 사람을 재교육시켜 새로운 운영체제를 다루도록 해야 한다. 이때 자바를 사용하면 어떤 운영체제에서도 가능한 어플리케이션을 개발하여 그들이 어떤 운영체제에서 실행되든 전혀 차이가 없는 동일한 인터페이스를 만들 수 있게 된다. 이러한 다양한 운영체제를 수용하기 위해 자바 컴파일러는 바이트코드(Bytecode)를 생성한다.</FONT>
<P><FONT FACE="바탕">자바 프로그램은 Windows, Solaris, Mac OS와 같이 자바가 지원되는 모든 플랫폼 상에서 자바 컴파일러에 의해 바이트 코드 형태로 컴파일 되고, 인터프리터가 동작하는 자바 가상 기계에 의해 어떤 기종의 시스템에서도 쉽게 실행된다. 
</FONT><BR>
<P ALIGN=CENTER> 
<IMG SRC="file:///C|/지빠귀/FYXIV011.GIF" BORDER=0 WIDTH=368 HEIGHT=164 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P>                        
<IMG SRC="file:///C|/지빠귀/FYXIV012.GIF" BORDER=0 WIDTH=510 HEIGHT=166 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">객체지향</FONT><FONT FACE="Asia줄리엣M">(Object Oriented) </FONT><FONT FACE="바탕">언어이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스의 계층 구조, 상속(inheritance), 은닉(encapsulation), 다형성(polymorphism) 등과 같이 유용하고 효율적인 객체 지향 언어의 특징을 모두 제공하며, 자바에서는 분산환경, 클라이언트-서버 기반 시스템의 요구가 객체 기반 소프트웨어의 은닉된 메시지 전달 패러다임과 함께 만나고 있다.</FONT>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">멀티쓰레드</FONT><FONT FACE="Asia줄리엣M">(Multi-thread)</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">지원한다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">멀티쓰레드란 한 프로그램 내에 여러 개의 쓰레드가 존재하여 동시에 여러 가지 일을 수행하는 것으로, 하나의 단일 자바 프로그램은 여러 개의 쓰레드 프로그램으로 구성될 수 있으며, 이 쓰레드는 독립적으로 다른 일을 계속해서 할 수 있다. 이는 최종사용자와 높은 수준의 상호작용을 가능하게 해준다. 자바는 언어 자체에서 멀티쓰레드를 지원한다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">분산환경에서</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">동작한다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 네트워크상의 운영을 고려해 설계된 언어이므로 소켓 바인딩 같은 TCP/IP 프로토콜과 URL처리 같은 HTTP 프로토콜을 처리할 수 있다. 자바의 네트워크 관련 패키지에는 이를 위해 미리 패키지로 구현해 놓은 Content Handler, InetAddress, ServerSocket, Socket, SocketImpl, URL, URLConnection, URLStreamHandler 클래스들이 포함되어 있어 네트워크 관련 프로그램 개발을 보다 쉽게 할 수 있다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">인터프리터형</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">프로그래밍</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">언어이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 인터프리터형 언어이지만 수행 성능과 보안, 플랫폼 독립성 등의 이유로 인터프리팅에 앞서 컴파일을 거치는 독특한 형태를 지니고 있다. C/C++ 같은 기존 언어와는 달리, 자바 컴파일러는 소스코드를 기종에 무관한 바이트코드로 만들고, 이를 자바런타임 시스템 즉, 자바가상 기계에서 동작하도록 한다. 즉, 자바는 실행시에 코드를 읽어들여 기계어로 번역하면서 수행되는 프로그램을 만드는 언어이다. 그렇다면 C나 C++, 파스칼 등과 같이 미리 기계어로 번역하여 변환된 바이너리를 수행하는 컴파일형 프로그래밍 언어에 비해 수행 속도가 현저하게 떨어지는 인터프리터 방식을 채택한 자바가 어떻게 살아남을 수 있을 것인가의 문제가 대두된다. 자바는 컴파일과 인터프리팅이 같이 존재하는 모델을 채택하고 있다. 컴파일하여 바이트코드로 변환한 다음 그 바이트코드를 번역하면서 수행하는 방식이다. 바이트코드는 플랫폼에 독립적인 형태로서 인터프리팅이 용이하도록 설계된 자바만의 독특한 형식을 가진다. 자바는 이러한 방식을 통해 플랫폼 독립성과 수행 성능의 향상이라는 두 마리 토끼를 잡으려 하고 있다. 하지만 아직은 만족할 만한 수행 성능을 보여주지 못하고 있는 것이 현실이다. 
</FONT><BR>
<P><FONT FACE="HY타자B">⽦ </FONT><FONT FACE="바탕">기존의</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">프로그래밍</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">모델과</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">자바의</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">프로그래밍</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">모델</FONT><FONT FACE="HY타자B"> </FONT><FONT FACE="바탕">비교</FONT>
<P><FONT FACE="바탕">- 기존의 프로그래밍 모델(C) : 컴파일 → 링크 → 실행 파일(바이너리)</FONT>
<P><FONT FACE="바탕">- 자바의 프로그래밍 모델 : 컴파일 → 클래스 파일(바이트코드) → 인터프리팅</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV013.GIF" BORDER=0 WIDTH=611 HEIGHT=163 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">코드가</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">간단</FONT><FONT FACE="Asia줄리엣M">(Simple)</FONT><FONT FACE="바탕">하다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 다른 객체지향 언어의 복잡성을 제거하여 설계되었다. 수많은 객체지향 특성과, C++의 외양을 그대로 유지하였으며, C++ 언어에 있는 복잡한 요소들을 과감하게 제거하였는데, 자바에서는 C++에서 허용되었던 포인터뿐만 아니라 구조체(struct)와 공용체(union), 그리고 연산자 중복(overloading), 가상함수 등이 제거되었으며, 다중상속을 지원하지 않는다.그러나 자바는 이러한 단순함을 가지면서도 C/C++에서 제공되지 않는 메모리 회수(Garbage Collection), 쓰레드 동기화, 풍부한 클래스 라이브러리 등 추가적인 기능을 제공한다. 즉, 자동적인 메모리 회수 기능은 메모리 관리를 위해 사용자가 일일이 free 선언을 해야하는 불편함을 해소했으며, 쓰레드 동기화는 멀티 쓰레드 프로그램을 더욱 간단히 구성하도록 도와준다. 또한 구문 자체가 단순해진 반면, 사용자 인터페이스, 그래픽, 네트워크 등을 지원하는 풍부한 클래스 라이브러리를 지원함으로써 사용자가 직접 프로그램 해야하는 번거로움을 많이 줄여준다. 또, C언어에는 있지만 자바에서 지원하지 않는 구조체 또는 공용체 등도 구현할 수 있는데 C에 비해 매우 간단하다. 자바의 클래스에서 메소드가 없으면 바로 구조체이다. 특별히 구조체라고 정의한 것은 없으며, 그냥 클래스를 구조체처럼 쓰면 된다. 자세한 내용은 뒤에서 설명하기로 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=195>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">자바가 C/C++과 다른점</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">1. 구조체(Struct), 공용체(Union), 포인터(Pointer)를 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">2. typedef와 #define을 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">3. 연산자 다중정의를 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">4. 클래스 다중상속을 지원하지 않는다.</FONT>
<P><FONT FACE="바탕">5. 문자 배열로서 String이라는 클래스를 지원한다.</FONT>
<P><FONT FACE="바탕">6. Garbage Collection 기능 제공으로 메모리 할당과 해제 함수를 사용할 필요가 없다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">보안성</FONT><FONT FACE="Asia줄리엣M">(Secure)</FONT><FONT FACE="바탕">이</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">뛰어나다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">엄격한 보안은 자바가 완벽한 네트워크 프로그램을 작성할 수 있는 잇점이기도 하다. 자바는 네트워크 환경에서 운영되는 언어이므로 다른 언어보다 안전에 대한 중요성이 요구된다. 다시 말해, 애플릿과 같은 프로그램의 다운로드시에 적절한 제재를 가하지 않으면 보안상 많은 문제를 발생시킬 수 있기 때문이다. 따라서 자바 코드는 바이러스, 파일의 삭제나 수정, 데이터 파괴작업이나 컴퓨터 오류 연산 등을 방지할 수 있는 환경에서 실행되도록 설계되었다. 
</FONT><P><FONT FACE="바탕">자바의 실행에 있어서 보안은 크게 3번 이루어진다. 컴파일 단계에서 보안성 체크를 하여 위반사항이 있을 경우 컴파일 되지 않는다. 컴파일 된 바이트코드를 실행하기 위해서 메모리로 적재시키는 단계에서 다시 한번 보안위반을 검사한다. 컴파일 단계에서 통과된 프로그램인 경우에도 해커에 의해서 바이트코드가 변경되거나 자바컴파일러를 대체하여 사용할 수 있기 때문이다. 마지막으로 실행할 때 다시 한번 보안검사를 한다. 브라우저를 사용하여 애플릿이 있는 웹 페이지를 방문할 경우 실행이 느린 것은 보안검사를 하는 시간이 많은 부분을 차지하기 때문이다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">고성능</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">언어이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 인터프리터 언어이므로 CPU 처리를 많이 요하는 프로그램의 경우 20∼30배, 네트워크 프로그램의 경우 5배정도 기존 프로그램보다 처리속도가 느리다. 이러한 단점을 보완하기 위해 선마이크로시스템즈는 JDK 1.1에 &quot;just-in-time&quot; 컴파일러를 도입해 처리속도를 향상 시켰으며 현재 Hot Spot이란 이름으로 버전1.4까지 출시되었다. 또한 자바 프로그램은 시스템 자원에 얽매이지 않는다. 그 예로 윈도우 운영체제에서 객체 지향 테크닉을 사용한 C++로 코딩된 고급 어플리케이션은 보통 8∼10MB의 메모리가 있어야 하지만, 같은 어플리케이션에서 자바는 3∼4MB의 메모리만을 필요로 한다. 
</FONT><BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">동적이다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 컴파일시 엄격하게 정적인 검사를 하지만 런타임시는 시스템이 동적으로 링크를 수행한다. 즉, 자바는 실행시간까지 링크 과정을 연기함으로써 응용 프로그램이 동적으로 패치 될 수 있도록 한다. 이 방식은 상위 클래스가 수정됐을 때 하위 클래스까지도 다시 컴파일 하는 'Superclass Problem'을 해결한다. 
</FONT><BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">견고하다</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">C/C++에서 사용하는 포인터의 개념은 디버깅이 어려운 런타임 오류를 많이 발생시킨다. 그러나 자바에서는 포인터 처리를 없앰으로써 런타임 오류 발생을 감소시켰으며, 메모리 포인터의 사용으로 주소 기억의 필요성을 없앴다.</FONT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">모듈화</FONT><FONT FACE="Asia줄리엣M">(Modularity)</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">가능하다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바를 이용해 제사용 가능한 객체를 만들 수 있다. 이 객체는 향후 다른 프로그램 내에서 코드 수정 없이 제사용 가능하다.</FONT>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">무료</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">개발</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">환경을</FONT><FONT FACE="Asia줄리엣M"> </FONT><FONT FACE="바탕">제공한다</FONT><FONT FACE="Asia줄리엣M">.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바 컴파일러는 선마이크로시스템즈의 자회사인 자바소프트사의 홈페이지에서 Java Software Development Kit(J2SDK)와 API를 다운로드 받아 사용할 수 있으며, 확장 버전 또한 출시와 함께 다운로드 받을 수 있다. 현재의 개발자 툴킷은 대부분의 프로그래머들이 필요로 하는 조건을 충족시켜주는 7가지 강력한 툴을 포함하고 있다. 이러한 툴의 구성을 보면 애플릿을 표시하는 자바 애플릿 뷰어(appletviewer.exe), 자바 바이트코드를 실행하는 자바 인터프리터(java.exe), 자바 프로그램을 바이트코드로 컴파일하는 자바 컴파일러</FONT>
<P><FONT FACE="바탕">javac.exe), 자바 소스코드에서 html 문서로 만들어내는 자바 문서생성기(javadoc.exe), 자바 클래스에서 C언어 헤더와 스텁 파일을 만드는 자바 헤더 및 스텁 파일 생성기(javah.exe), 자바 파일을 분해해서 자바 바이트 코드를 표시하도록 하는 자바 클래스 디셈블러(javap.exe), 자바 코드에 문법상의 문제를 찾는 자바 언어 디버거(jdb.exe)로 이루어져 있다. 
</FONT><BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV014.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.3   Java 2 SDK(Java 2 Software Development Kit)</FONT></B></SPAN></FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.1 </FONT><FONT FACE="바탕">설치</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">환경</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">설정</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">선사에서는 JDK(Java Development Kit, 자바 개발 도구)라는 이름으로 컴파일러, 인터프리터 등의 여러 자바 환경 도구들을 배포해왔는데, 이후 버전1.3으로 업드레이드 되면서 J2SDK(Java 2 Software Development Kit)라고 부르고 있다. 자바는 이론적으로 거의 모든 시스템에 이식 가능하지만 선사의 자바 홈페이지(http://java.sun.com)에서 바로 구할 수 있는 JDK는 솔라리스 버전과 윈도우(윈도우95/98와 윈도우NT)용, 그리고 맥 OS용이다. 여기서는 Microsoft Windows 용을 기준으로 설명하기로 한다.</FONT>
<P><FONT FACE="바탕">선사의 홈페이지에서 프로그램을 다운로드 받은 다음 설치한 후 시작하기로 하자.</FONT>
<BR>
<P><FONT FACE="바탕">이후는 JDK가 설치된 폴더가 C:\j2sdk로 되어 있는 것을 기준으로 한다.</FONT>
<P><FONT FACE="바탕">path 환경 변수를 설정하는 이유는 JDK 실행 파일(javac.exe, java.exe, javadoc.exe, 등)을 실행할 때 어느 디렉토리에서든지 전체 경로를 지정하지 않고 실행하고자 하기 때문이다. 만일 path 설정을 하지 않았다면 위 JDK 실행 파일을 실행할 때 항상 다음과 같이 전체 경로를 일일이 기술해야 한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=48>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">C:\j2sdk\bin\javac MyClass.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">윈도우에서 자바를 설치한 디렉토리가 C:\j2sdk인 경우 다음과 같이 클래스 경로를 autoexec.bat 파일에 함께 지정한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">set PATH=%PATH%;C:\j2sdk\bin;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">윈도우 NT에서의 환경 설정은 제어판에서 시스템을 선택한 후 환경변수에서 Path 부분에 C:\j2sdk\bin 경로를 세미콜론(;)으로 구분하여 추가한다.</FONT>
<P><FONT FACE="바탕">솔라리스에서는 설치한 디렉토리가 /usr/java인 경우 다음과 같이 클래스 경로를 지정한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=84>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">sh</FONT><FONT FACE="바탕">이나</FONT><FONT FACE="Courier New"> ksh</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">경우</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">PATH=$PATH:/usr/java/bin</FONT>
<P><FONT FACE="Courier New">export PATH</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=62>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">csh</FONT><FONT FACE="바탕">을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">경우</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">set path=( $path /usr/java/bin )</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">JDK 설치가 끝나면 필수적인 자바 프로그래밍 환경은 갖추게 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.2 </FONT><FONT FACE="바탕">자바</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">환경</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">도구</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바 환경 도구란 /j2sdk/bin 디렉토리에 있는 여러 가지 실행 프로그램을 말한다. 자바는 컴파일과 인터프리팅을 모두 수행해야 하는 언어이므로 컴파일러, 인터프리터를 포함한 몇 가지 환경 도구를 제공한다. 윈도우에서 환경 도구를 실행하려면 도스 창 프롬프트에서 실행한다.</FONT>
<BR>
<P><FONT FACE="바탕">⽦ javac : 자바 컴파일러이다. 텍스트 소스 파일인 *.java 파일을 기계 독립적인 바이트 코드, *.class로 컴파일 해준다. 인자는 자바 소스 파일 이름이다. 일반적으로 다음 예와 같이 사용한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javac HelloApp.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">필요에 따라 다음 선택사항을 지정해야 하는 경우가 있다.</FONT>
<BR>
<P>  <FONT FACE="바탕">(1) -classpath '경로' : javac가 클래스를 검색할 경로를 지정한다. 이 값을 지정하면 이미 지정된 CLASSPATH 환경 변수 값은 오버라이드된다. 디렉토리 구분은 세미콜론(;)으로 한다.</FONT>
<P>      <FONT FACE="바탕">사용 예 : javac -classpath .;C:\lib\classes.zip HelloApp.java</FONT>
<P>  <FONT FACE="바탕">(2) -d '디렉토리' : 클래스 계층 구조의 루트 디렉토리를 지정한다. 즉, 컴파일 된 .class 바이트 코드 파일을 다른 곳에 넣고자할 때 사용한다.</FONT>
<P>      <FONT FACE="바탕">사용 예 : javac -d C:\classes HelloApp.java</FONT>
<P>  <FONT FACE="바탕">(3) -g : 디버깅 테이블을 생성해준다. 디버깅 테이블은 줄 번호와 지역 변수 정보(자바 디버깅 도구에 의해 사용되는 정보)를 포함하고 있다. 최적화(-O) 선택사항이 함께 주어지지 않으면 단지 줄 번호만 생성된다.</FONT>
<P>  <FONT FACE="바탕">(4) -nowarn : 경고 메시지를 출력하지 않는다.</FONT>
<P>  <FONT FACE="바탕">(5) -O : static, final and private 도구에 인라인 기법을 사용하여 최적화 한다. 이렇게 되면 클래스 파일은 크기가 커진다. (C++의 inline 예약어와 같은 방법이다. 이 방법은 함수 점프의 오버헤드를 막기 위해 컴파일 시에 실제 코드를 각 함수 대신에 직접 삽입하는 방법을 쓰는 것이다.)</FONT>
<P>  <FONT FACE="바탕">(6) -verbose : 컴파일러와 링커에게 현재 컴파일 되고있는 소스 파일과 적재되는 클래스 파일의 이름을 출력하게 한다.</FONT>
<BR>
<P><FONT FACE="바탕">⽦ java : 자바 인터프리터를 나타내며, 클래스 파일을 실행한다. 클래스 이름을 인자로 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">java HelloApp</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ javaw : 같은 자바 인터프리터이지만 콘솔(윈도우 도스 창)에서 독립된 윈도우를 만들어낸다. 콘솔로의 출력은 행하지 않는다. 예를 들어 애플릿뷰어를 다음과 같은 방법으로 실행해서 두 결과를 비교해 보라. javaw로 실행한 경우에는 콘솔로 출력을 하지 않는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=53>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">java sun.applet.AppletViewer example1.html</FONT>
<P><FONT FACE="Courier New">javaw sun.applet.AppletViewer example1.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>  
<P><FONT FACE="바탕">⽦ javadoc : class 파일의 패키지, 계층 구조, 도구 등을 HTML 문서로 만들어준다. 클래스 이름을 인자로 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javadoc HelloApp.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ javah : 해당 애플러케이션의 C 스텁 헤더 파일을 생성해준다. 인자로 클래스 이름을 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javah HelloApp</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ javap : 자바 역 컴파일러이다. 클래스 파일을 원시 코드로 역 컴파일 해준다. 완전한 소스 파일을 구할 수는 없다. 인자로 클래스 이름을 받으며 역 컴파일 한 결과를 표준 출력(콘솔) 장치로 내보낸다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javap -c HelloApp &gt; HelloApp.txt</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ jdb : 자바 디버거. 유닉스 디버거인 dbx와 유사한 기능을 갖고 있으며 인자로 클래스 이름을 받는다. 디버거 프롬프트에서 help를 입력하면 사용 가능한 명령어를 알 수 있다. 디버거를 제대로 사용하려면 클래스 파일을 컴파일 할 때 dbx의 경우와 같이 -g 옵션으로 컴파일 해야 한다.(예 : javac -g HelloApp.java)</FONT>
<P><FONT FACE="바탕">⽦ appletviewer : HTML 문서에 포함되어 있는 애플릿을 실행시켜준다. 일종의 웹 브라우저로서 &lt;applet&gt; 태그만 찾아서 애플릿을 보여준다. 인자로 URL이나 HTML 문서 파일 이름을 받는다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">appletviewer example1.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이외에도 여러 가지 환경 도구가 JDK에 함께 제공되므로 좀더 자세히 알고 싶으면 선사의 자바 홈페이지(http://java.sun.com) 사이트를 참고하면 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.3 </FONT><FONT FACE="바탕">컴파일</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">컴파일은 원시 파일(*.java)을 입력으로 바이트 코드를 생성한다. 생성되는 바이트 코드는 클래스(*.class)파일이라고도 한다. 소스 파일명에는 반드시 확장자(.java)가 포함되어야 하며 대문자와 소문자를 구분한다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=46>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="바탕">소스파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">디렉토리&gt;</FONT><FONT FACE="Courier New">javac </FONT><I><FONT FACE="바탕">소스파일명</FONT><FONT FACE="Courier New">.java</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.3.4 </FONT><FONT FACE="바탕">실행</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">실행은 컴파일 한 후 생성된 바이트 코드를 이용하여 사용자가 실제 원하는 값을 얻기 위한 것으로 어플리케이션의 실행과 애플릿의 실행이 있다. 실행할 때에는 파일명 뒤의 확장자(.class)가 붙지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">어플리케이션의 실행은 자바 인터프리터를 사용하여 실행하는데, 자바 인터프리터는 C:\j2sdk\bin 디렉토리의 java.exe파일이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=62>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">어플리케이션의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="바탕">클래스파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">디렉토리&gt;</FONT><FONT FACE="Courier New">java </FONT><I><FONT FACE="바탕">클래스파일명</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">애플릿의 실행은 애플릿 태그를 사용하여 html 문서에 등록한 후 웹 브라우저를 사용하거나 appletviewer 프로그램을 사용하여 실행한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=75>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">태그</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">삽입</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P>&lt;<FONT FACE="Courier New">applet code=&quot;</FONT><I><FONT FACE="바탕">클래스파일명</FONT></I><FONT FACE="Courier New">&quot; width=</FONT><I><FONT FACE="바탕">넓이</FONT></I><FONT FACE="Courier New"> height=</FONT><I><FONT FACE="바탕">높이</FONT></I>&gt;
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=564 HEIGHT=62>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="Courier New">appletviewer </FONT><FONT FACE="바탕">사용법</FONT><FONT FACE="Courier New">(</FONT><FONT FACE="바탕">애플릿의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New">)</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">HTML</FONT><FONT FACE="바탕">파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">디렉토리&gt;</FONT><FONT FACE="Courier New">appletviewer </FONT><I><FONT FACE="Courier New">HTML</FONT><FONT FACE="바탕">파일명</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV015.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.4  </FONT><FONT FACE="바탕">어플리케이션</FONT><FONT FACE="Bookman Old Style">(Application)</FONT><FONT FACE="바탕">과</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Bookman Old Style">(Applet)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">자바는 두 가지 종류의 프로그램 형태를 가지고 있는데, 하나는 일반적인 응용 프로그램 즉, 어플리케이션(Application)이고, 또 하나는 작은 프로그램이라는 뜻을 가진 애플릿(Applet)이다. 어플리케이션에는 다시 도스모드 형태로 실행되는 Console 어플리케이션과, 윈도우 형태로 실행되는 Window 어플리케이션, 그리고 서버에서 실행되는 웹 어플리케이션이 있다.</FONT>
<P><FONT FACE="바탕">애플릿과 어플리케이션에는 차이가 있는데, 자바 애플릿은 html 문서 안에서 사용되므로 애플릿을 보려면 외부 뷰어가 있어야 하며, 애플릿을 표시하기 위해서는 웹 브라우저나 애플릿 뷰어(appletviewer.exe)를 이용한다. 자바 어플리케이션은 단독으로 사용되도록 고안되어 외부 뷰어가 필요 없다. 즉, 이것은 자바 인터프리터를 사용해 자바 어플리케이션을 실행할 수 있음을 의미한다. 이러한 특징으로 자바 어플리케이션은 로컬(Local)에서 실행되고, 자바 애플릿은 서버(Server)에서 다운로드 되어 실행된다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.4.1 </FONT><FONT FACE="바탕">어플리케이션의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">기초</FONT></SPAN></FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.1 Hello World! </FONT><FONT FACE="바탕">응용프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">예</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">일반적으로 사용되는 가장 짧은 응용프로그램 코드는 Hello World!라는 문자열을 화면에 표시하는 것이다. 아래의 자바코드는 Hello World!라는 문자열을 화면에 표시하는 응용프로그램의 예이다. 프로그램 코드는 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=214>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorld.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">// Sample HelloWorld application</FONT>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Hello World!&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.2 HelloWorld </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">분석</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">// Sample HelloWorld application</FONT>
<P><FONT FACE="Courier New">//</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프로그램의 처음 세 줄은 주석 라인이다. //(이중 빗금)표시는 그 라인에서 이후의 문장들은 주석이 되어 실행과는 무관하다는 것을 의미한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">4 : 클래스를 선언하는 곳으로 여기에서는 클래스 이름을 HelloWorld로 선언하였다. 소스코드 파일 이름 형식은 ClassName.java로 되어야 한다. 컴파일 하면 소스 파일이 저장되어 있는 폴더에 ClassName. class라는 파일이 생성된다. 이 프로그램의 경우에는 파일명이 HelloWorld.java가 되어야 하며, 컴파일하면 HelloWorld.class라는 파일이 생성된다. 자바에서는 소스코드뿐만 아니라 파일명에서도 대문자와 소문자를 철저하게 구분한다. 또한 파일의 이름은 public으로 선언된 클래스가 있으면 그 클래스 이름과 동일하게 정해져야하며, 그렇지 않으면 main() 메소드가 있는 클래스 이름을 파일 이름으로 한다. 하나의 파일 내에는 여러 개의 클래스가 존재할 수 있지만 public으로 선언된 클래스는 두 개 이상 존재할 수 없다.</FONT>
<P><FONT FACE="바탕">'{'는 클래스 블록의 시작을 나타낸다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public static void main (String args[]) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5 : 프로그램 실행이 시작되는 main() 메소드의 선언부이다. 메소드는 일종의 함수로 자세한 내용은 뒤에서 설명하기로 한다. 약술하면 자바 어플리케이션 프로그램의 경우 위에 기술한 내용과 똑같이 정의된 main() 메소드가 반드시 하나 존재해야 하는데,  만약 main() 메소드가 없으면 프로그램은 실행되지 않는다. 메인 메소드의 형태는 기억해두는 것이 좋다. 즉, psvms라고...</FONT>
<P><FONT FACE="바탕">메소드 선언부분의 String args[]은 프로그램을 실행할 때 명령행에서 인수를 사용하면 그 인수는 main() 메소드로 전달되어 args라는 문자열로 선언된 배열로 들어간다. 보통 C언어 등에서는 String args[] 형식으로 배열을 나타내는 대괄호(&quot;[]&quot;)가 뒤에 추가되어야 하지만 자바에서는 어느 곳에 들어가도 상관이 없다. 배열도 일종의 타입이기 때문에 앞에 넣어주는 것이 보기가 좋을 것이다. 이 예제에서는 main() 메소드 선언 이후에 args 배열을 참조하는 부분이 전혀 없기 때문에 인수가 사용되지 않는다.</FONT>
<P><FONT FACE="바탕">5번째 줄에 몇 가지 키워드가 나오는데, 키워드에 대한 전반적인 내용은 뒤에서 자세히 설명하기로 하고, 우선 여기에 나온 키워드만 간단히 설명하면 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ public - main() 메소드를 모든 클래스가 사용할 수 있음을 의미한다.</FONT>
<P>  <FONT FACE="돋움">∘ static - main() 메소드에서는 호출하는데 쓰이는 인스턴스가 필요하지 않다고 컴파일러에 알려주는 키워드이다.</FONT>
<P>  <FONT FACE="돋움">∘ void - main() 메소드를 실행해도 실행 결과로 돌아오는 것이 없음을 의미한다. 자바에서는 타입(type) 확인은 철저하게 하며, 그 중에는 호출된 메소드의 실행 결과와 그 메소드가 선언된 유형이 같은지 확인하기 때문에 중요하다.</FONT>
<P>  <FONT FACE="돋움">∘ String args[] - String형 배열을 선언하는 키워드이다. 이 배열에서 명령행의 클래스 이름 다음에 입력한 인수가 들어간다. 일종의 배열형이므로 이후부터는 &quot;String[] args&quot;로 표기하기로 한다.</FONT>
<BR>
<P>  <FONT FACE="돋움">'{'는 main() 메소드 블록의 시작을 나타낸다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Hello World!&quot;);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">6 : &quot;Hello World!&quot;라는 문자열을 출력하는 것으로 클래스 이름(System)과 객체 이름(out; PrintStream형 객체) 그리고 메소드 이름(println)을 사용하는 방법을 보여주는 예이기도 하다. 자바에서 문장의 끝은 세미콜론(;)으로 마친다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">중괄호는 각각 main() 메소드의 끝과 HelloWorld 클래스의 끝을 나타낸다.</FONT>
<BR>
<P><FONT FACE="바탕">위의 소스코드에 대해서 이해가 잘 안될 수 도 있지만 이후 계속 학습해 가다보면 곧 이해가 될 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.3 </FONT><FONT FACE="바탕">파일</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">저장하기</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">위의 소스 코드를 입력하는데 필요한 에디터는 텍스트 에디터라면 무엇이건 좋다. 물론 자바 전용 에디터도 몇 가지 있는데, 그 중의 하나인 kawa는 많이 사용되는 에디터 중의 하나지만 kawa를 사용하지 않고 윈도우에서 제공하는 일반 에디터(메모장 등)로도 충분하다.</FONT>
<P><FONT FACE="바탕">일단 프로그램 작성이 끝나면 파일을 저장해야 한다. 파일을 저장할 때 유의해야 할 사항은 그 파일에서 정의하는 클래스와 동일한 이름을 붙여야 하며, 확장자는 .java이어야 한다.</FONT>
<P><FONT FACE="바탕">위의 HelloWorld 프로그램의 경우 파일 이름은 HelloWorld.java이다. 소스코드는 물론 파일명도 대문자와 소문자를 구분하여 사용한다.</FONT>
<BR>
<P ALIGN=CENTER> 
<IMG SRC="file:///C|/지빠귀/FYXIV016.GIF" BORDER=0 WIDTH=510 HEIGHT=221 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<P><FONT FACE="바탕">메모장에서 저장할 때 파일명의 앞과 뒤를 큰따옴표(&quot;)로 묶어주면 확장자가 txt인 파일로 저장되는 것을 방지할 수 있다.</FONT>
<P ALIGN=CENTER> 
<IMG SRC="file:///C|/지빠귀/FYXIV017.GIF" BORDER=0 WIDTH=514 HEIGHT=55 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.4 HelloWorld </FONT><FONT FACE="바탕">컴파일</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">하기</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">응용프로그램을 컴파일한 후 실행시키는 것은 사용하는 자바 개발환경에 따라 다를 수도 있지만, 여기에서는 선사의 Java 2 SDK(Software Development kit)를 기준으로 한다. JDK의 javac 명령은 소스파일을 바이트코드 파일(.class)로 컴파일 하는 명령이며, 이 파일은 JDK가 설치된 폴더 아래의 bin이라는 폴더에 있다.</FONT>
<BR>
<P><FONT FACE="바탕">HelloWorld.java 소스파일을 만들었으면, 다음 코드 라인을 사용하여 컴파일 할 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=45>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">javac</FONT></B><FONT FACE="Courier New"> HelloWorld.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">컴파일 후 아무런 메시지도 나타나지 않으면 컴파일이 성공적으로 수행된 것이고, 소스파일과 같은 폴더에 HelloWorld.class라는 새로운 파일이 저장된 것을 알 수 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">컴파일할 때 나타나는 오류</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="바탕">다음은 자바에서 컴파일 하는 도중에 나타날 수 있는 일반적인 오류를 나타낸 것이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• javac: Command not found</FONT></SPAN></FONT>
<P><FONT FACE="바탕">컴파일러가 있는 경로 변수가 올바르게 설정되지 않는 경우이다. path명령으로 JDK가 설치되어 있는 폴더 아래의 bin이라는 폴더를 지정한다.</FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">•HelloWorld.java:6: cannot resolve symbol</FONT></SPAN></FONT>
<P>  <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">symbol  : method printl (java.lang.String)</FONT></SPAN></FONT>
<P>  <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">location: class java.io.PrintStream</FONT></SPAN></FONT>
<P>                  <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">System.out.printl(&quot;Hello World!&quot;);</FONT></SPAN></FONT>
<P>                              <FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">^</FONT></SPAN></FONT>
<P><FONT FACE="바탕">메소드 이름 println이 printl로 잘못 입력되었다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.1.5 HelloWorld </FONT><FONT FACE="바탕">실행하기</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">HelloWorld를 실행하려면 JDK가 설치된 폴더 아래의 bin 폴더에 있는 자바인터프리터(interpreter)인 java.exe를 사용한다. 이때 주의해야 할 사항은 자바인터프리터가 HelloWorld.class 파일을 실행시킨다고 해서 확장자인 .class를 넣어서는 안 된다. 자바에서 &quot;.&quot; 은 폴더를 구분하는 역할을 하기 때문에 &quot;.class&quot;를 넣었을 경우에는 HelloWorld라는 폴더 아래의 &quot;class.class&quot;라는 파일을 의미한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=73>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; </FONT><B><FONT FACE="Courier New">java</FONT></B><FONT FACE="Courier New"> HelloWorld</FONT>
<P> <FONT FACE="Courier New">Hello World!</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=203>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">런타임 오류</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT FACE="바탕">다음은 실행할 때 나타날 수 있는 일반적인 오류이다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:11pt;"><FONT FACE="Courier New">• class Helloworld</FONT><FONT FACE="바탕">를</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">찾을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">없음</FONT></SPAN></FONT>
<P><FONT FACE="바탕">일반적으로 클래스 이름의 철자가 소스파일 이름과 다르며 파일을 클래스 정의에 나오는 철자(대소문자 포함)에 일치하게 지정하지 않았음을 의미한다. 위의 예에서 실행할 때 java Helloworld라고 입력하면 발생한다.(대문자 W를 소문자 w로 잘 못 입력)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.4.2 </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">기초</FONT></SPAN></FONT>
<P><FONT FACE="바탕">웹 페이지 안에서 동적으로 사용자의 입력에 반응하거나 실시간으로 변화하는 다양한 자바 프로그램은 모두 애플릿이며, 독자적으로 일반 프로그램과 같이 실행될 수 있는 자바 프로그램은 모두 자바 어플리케이션이다. 자바가 웹 프로그래밍 언어의 표준으로 등장하게 된 데에는 무엇보다 자바 애플릿이 큰 영향을 주었다고 볼 수 있다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.1 Hello World! Applet </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">예</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 웹 브라우저 화면에 Hello World!라는 문자열을 표시하는 애플릿 프로그램의 예이다. 단순히 텍스트로 콘솔(윈도우 도스 창)에 &quot;Hello&quot;라는 문자열만 출력하는 어플리케이션에 비해 일단 웹 브라우저 안에서 글자를 표현해야 하는 애플릿은 그래픽으로 문자열을 그려야 한다는 점에서 훨씬 복잡하다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldApplet.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT>
<P><FONT FACE="Courier New">public class HelloWorldApplet extends Applet {</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World!&quot; , 100, 100);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.2 HelloWorldApplet </FONT><FONT FACE="바탕">프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">분석</FONT></SPAN></FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">import java.applet.Applet;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">프로그램 내에서 사용될 클래스 파일을 포함하는 패키지를 import한 것이다. C언어의 include문과 유사하지만 구체적인 내용은 많이 다르다. 그래픽 관련 클래스를 사용하기 위해서 java.awt.Graphics 클래스를 import하였고, 애플릿을 프로그래밍하기 위해 java.awt.Applet 클래스를 import하였다. 이를 좀서 쉽게 작성하면 다음과 같다. Graphics 클래스는 java.awt 패키지 내의 클래스이고, Applet 클래스는 java.awt 패키지 내의 클래스이므로 다음과 같이 표기가 가능하다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.*;</FONT>
<P><FONT FACE="Courier New">import java.applet.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class HelloWorldAppet extends Applet {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">클래스의 선언부이며 이 클래스는 애플릿 프로그램을 만들기 위해서 Applet 클래스를 상속(extends)받았다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">화면에 무언가를 그리기 위한 paint() 메소드를 선언하였다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World!&quot; , 100, 100);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">g라는 그래픽 객체를 가지고 애플릿의 화면 좌측으로부터 100 픽셀, 상단으로부터 100 픽셀의 위치에 Hello, World! 라는 문자열을 출력한다.</FONT>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.3 HTML </FONT><FONT FACE="바탕">프로그램</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿 프로그램의 저장 및 컴파일도 기본적으로 어플리케이션 프로그램과 같다. 그러나 애플릿은 웹 브라우저 안에서 실행되는 작은 프로그램이므로 웹 브라우저가 있어야 실행시켜 볼 수 있다. 프로그래머를 위하여 선사에서 배포하는 JDK에는 애플릿만 실행시켜주는 간단한 웹 브라우저인 애플릿뷰어(appletviewer)가 포함되어 있다. 애플릿은 웹 페이지에 포함되는 것이므로 반드시 애플릿을 포함하도록 지시하는 HTML 문서가 필요하다. 이 애플릿은 다음과 같이 HTML 문서 안에 포함시킨다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldApplet.html</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">HTML&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">HEAD&gt;&lt;TITLE&gt;Hello Applet&lt;/TITLE&gt;&lt;/HEAD&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">BODY&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">applet code=</FONT><B><FONT FACE="Courier New">HelloWorldApplet.class</FONT></B><FONT FACE="Courier New"> width=300 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/BODY&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/HTML&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=53>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>&lt;<FONT FACE="Courier New">applet code=</FONT><B><FONT FACE="Courier New">HelloWorldApplet.class</FONT></B><FONT FACE="Courier New"> width=300 height=200&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">위 내용은 HTML 문장 내에서 애플릿 프로그램을 포함시키는 구문이다. 컴파일 후 생성된 클래스 파일을 HTML 문서 내에서 지시하게 되는데, 이때 사용되는 태그(tag)가 &lt;applet&gt;태그이다. &lt;applet&gt; 태그에 속해 있는 옵션 중에서 code 와 width 그리고 height는 빠져서는 안될 기본 옵션이다. width와 height는 애플릿의 크기를 자로와 세로 픽셀 단위로 지정하고, code 옵션은 실제 실행될 애플릿 프로그램을 지정하는 부분으로 자바 소스코드를 지정하는 것이 아니라, 컴파일 후 생성된 클래스파일을 지정하는 곳이다. HTML 문서 내에서는 대문자와 소문자를 구분하지 않지만 code 옵션에서 지정하는 클래스파일의 이름은 대문자와 소문자를 구분한다. HTML 문서의 이름은 어느 것을 지정해도 관계없다.</FONT>
<P><FONT FACE="바탕">애플릿 프로그램의 실행은 클래스파일이 지정된 HTML 파일을 불러오거나 다음과 같이 appletviewer.exe를 이용할 수 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> &gt;<FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">appletviewer</FONT></B><FONT FACE="Courier New"> HelloWorld.html</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.4 </FONT><FONT FACE="바탕">출력</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">결과</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 appletviewer.exe로 실행했을 때의 출력화면을 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV018.GIF" BORDER=0 WIDTH=227 HEIGHT=199 ALIGN=BOTTOM>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 웹브라우저 상에 출력된 화면을 나타낸 것이다.</FONT>
<P ALIGN=CENTER>  
<IMG SRC="file:///C|/지빠귀/FYXIV019.GIF" BORDER=0 WIDTH=341 HEIGHT=266 ALIGN=BOTTOM>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.2.5 </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">태그</FONT></SPAN></FONT>
<P>  
<P><FONT FACE="바탕">애플릿을 홈페이지에 설치하려면 &lt;applet&gt; 태그에 대해 정확한 이해가 필요하다. 핫자바 1.0 알파 버전이 지원하던 JDK 1.0 알파 버전에서는 HTML 태그가 &lt;applet&gt;이 아니고 &lt;app&gt;였다. &lt;app&gt; 태그는 다음과 같이 하나의 태그 안에 모든 속성을 기입하는 형식을 택하였다. 현재의 웹 브라우저는 &lt;app&gt; 태그를 지원하지 않으므로 관심을 둘 필요는 없다. 
</FONT><P>&lt;<FONT FACE="바탕">applet&gt; 태그는 이것과 상당히 다른데, 먼저 HTML 명령의 규격을 준수하여 &lt;applet&gt;으로 시작해서 &lt;/applet&gt;으로 끝난다. 그리고 각 애플릿이 필요로 하는 속성은 별도로 &lt;param&gt; 태그를 이용하여 속성(attribute) 값을 주게된다.</FONT>
<BR>
<P>&lt;<FONT FACE="바탕">applet&gt; 태그의 형식은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=636 HEIGHT=309>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P>&lt;<FONT FACE="Courier New">applet code=&quot;</FONT><I><FONT FACE="바탕">클래스</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	<FONT FACE="Courier New">width=&quot;</FONT><I><FONT FACE="바탕">픽셀</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단위의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">폭</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	<FONT FACE="Courier New">height=&quot;</FONT><I><FONT FACE="바탕">픽셀</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">단위의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">높이</FONT></I><FONT FACE="Courier New">&quot; </FONT>
<P>	  <FONT FACE="Courier New">[ codebase=&quot;</FONT><I><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">파일이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">존재하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">기반</FONT><FONT FACE="Courier New"> URL</FONT></I><FONT FACE="Courier New">&quot; </FONT>
<P>	    <FONT FACE="Courier New">alt=&quot;</FONT><I><FONT FACE="바탕">텍스트</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">전용</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">브라우저에서</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">대신</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용하는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">텍스트</FONT></I><FONT FACE="Courier New">&quot; </FONT>
<P>	    <FONT FACE="Courier New">name=&quot;</FONT><I><FONT FACE="바탕">별명</FONT><FONT FACE="Courier New">-</FONT><FONT FACE="바탕">같은</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문서에서는</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">사용할</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">있다</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>	    <FONT FACE="Courier New">align=&quot;</FONT><I><FONT FACE="바탕">애플릿</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">정렬</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방식</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>		<FONT FACE="Courier New">vspace=&quot;</FONT><I><FONT FACE="바탕">세로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방향의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">여백</FONT></I><FONT FACE="Courier New">&quot;</FONT>
<P>		<FONT FACE="Courier New">hspace=&quot;</FONT><I><FONT FACE="바탕">가로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">방향의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">여백</FONT></I><FONT FACE="Courier New">&quot; ] &gt;</FONT>
<BR>
<P>&lt;<FONT FACE="Courier New">param name=&quot;</FONT><I><FONT FACE="바탕">속성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">이름</FONT></I><FONT FACE="Courier New">&quot; value=&quot;</FONT><I><FONT FACE="바탕">속성</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">값</FONT></I><FONT FACE="Courier New">&quot;&gt;</FONT>
<P>&lt;<FONT FACE="Courier New">param ...&gt;</FONT>
<P><FONT FACE="Courier New">...</FONT>
<P>&lt;<FONT FACE="Courier New">/applet&gt;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">[ ] 안의 부분은 생략이 가능하다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.4.3 AWT </FONT><FONT FACE="바탕">프로그램</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">애플릿처럼 그래픽으로 윈도우 위에 문자열을 표시하는 자바 어플리케이션은 애플릿보다 훨씬 복잡한데 이는 프로그램 작성이 어려운건 아니고 세세한 신경을 써야하는 면이 복잡하다고 할 수 있다. 
</FONT><BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.3.1 AWT </FONT><FONT FACE="바탕">응용프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">예</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞에서 애플릿을 사용할 때와 같이 윈도우에 문자열을 나타내는 자바 어플리케이션의 예를 나타낸 것인데 자세한 설명은 생략하고 흐름만 간단하게 익히기 바란다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=340>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorldWin.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.awt.Frame;</FONT>
<P><FONT FACE="Courier New">import java.awt.Graphics;</FONT>
<P><FONT FACE="Courier New">public class HelloWorldWin extends Frame {</FONT>
<P>	<FONT FACE="Courier New">public HelloWorldWin(String title) {</FONT>
<P>		<FONT FACE="Courier New">super(title);</FONT>
<P>		<FONT FACE="Courier New">setSize(300, 200);</FONT>
<P>		<FONT FACE="Courier New">setVisible(true);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void paint(Graphics g) {</FONT>
<P>		<FONT FACE="Courier New">g.drawString(&quot;Hello, World&quot;, 100, 100);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">new HelloWorldWin(&quot;Hello World&quot;);</FONT>
<P>	<FONT FACE="Courier New">} </FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:13pt;"><FONT FACE="HY울릉도M">1.4.3.2 AWT </FONT><FONT FACE="바탕">응용프로그램</FONT><FONT FACE="HY울릉도M"> </FONT><FONT FACE="바탕">실행결과</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 윈도우 출력화면을 나타낸 것이다.</FONT>
<BR>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV020.GIF" BORDER=0 WIDTH=266 HEIGHT=177 ALIGN=BOTTOM>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=448>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">자바의 종류</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">• Application : 독립적으로 실행되는 프로그램이다.</FONT>
<P><FONT FACE="바탕">• Applet : 웹 브라우저 내에서 실행된다.</FONT>
<P><FONT FACE="바탕">• Servlet : 애플릿에 대응되는 말로 서버에서 동작하는 작은 자바 프로그램을 말한다. 이것은 웹서버에서 동작한다.</FONT>
<P><FONT FACE="바탕">• CORBA : CORBA는 분산객체환경을 위해 OMG라는 그룹에서 제정한 표준안이며, CORBA와 대응되는 것은 Microsoft의 DCOM(COM+)이다. 자바에서는 RMI라는 것이 있는데, 규모로 보면 CORBA나 COM+보다는 작지만 자바에 한정해서 보면 기능이 같다.</FONT>
<P><FONT FACE="바탕">• Java Beans : 자바환경에서 컴포넌트를 정의한 것이다.</FONT>
<P><FONT FACE="바탕">• JDBC : ODBC를 연상하면 된다.</FONT>
<P><FONT FACE="바탕">• JFC는 자바의 GUI Frame Work으로 생각하면 되고, MFC를 생각하면 된다. 이 중 일부는 Swing이라는 이름으로 구현되었다.</FONT>
<P><FONT FACE="바탕">• JMF : Java Media Framework로 동영상 등을 재생하는 것이다.</FONT>
<P><FONT FACE="바탕">• SCJP : 자바를 만든 선사에서 공인하는 자바 프로그래머 자격증이다.(Sun Certified Java Programmer) </FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">이를 보면 선사에서는 자바를 이용하여 MS에 대응하는 제품을 계속 만들고 있음을 알 수 있다.</FONT>
<P><FONT FACE="바탕">MFC ↔ JFC, ODBC ↔ JDBC, ASP ↔ JSP, COM+ ↔ RMI</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV021.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.5  </FONT><FONT FACE="바탕">객체와</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">클래스</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">객체는 객체지향 프로그래밍에서 가장 기본이 되는 개념이다. 사전적 의미로는 물건, 물체를 의미한다. 객체지향의 기본 원리는 현실 세계의 모든 것을 객체로 간주하고 이러한 객체를 속성(attribute)과 행위(behavior)를 갖는 소프트웨어적 개념으로 표현하는 것이라고 할 수 있다. 자바에서의 객체는 클래스의 실제 인스턴스(instance)이다. 즉, 클래스의 인스턴스를 만들 때마다 객체가 만들어진다.</FONT>
<BR>
<P><FONT FACE="바탕">클래스는 일종의 설계도나 명세서(specification)라고 할 수 있으며, 하나 이상의 유사한 객체를 묶어 하나의 공통된 특성으로 표현한 추상적 데이터형으로, 내부 데이터와 데이터에 작용하는 연산 집합으로 구성된다. 즉 실제의 물체(object)를 추상화(abstraction)라는 작업을 통해 자바 프로그램에 사용할 수 있는 코드 형태를 만드는데, 이것이 클래스인 것이다. 클래스가 자기 자신의 구조를 기술하고 정보를 유지하는데 사용하는 데이터를 필드라고 하며, 필드에 작용하는 연산을 메소드라 부른다. 객체에 있어서 명사적 특징들이 클래스에서는 속성(attribute) 즉, 변수에 해당하고, 객체의 동사적 특징은 메소드(method)에 해당한다(C언어에 있어서는 함수).</FONT>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.1 </FONT><FONT FACE="바탕">클래스</FONT><FONT FACE="HY부활M">(Class)</FONT><FONT FACE="바탕">의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스의 코딩은 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=132>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I>&lt;<FONT FACE="Courier New">modifiers&gt;</FONT></I><FONT FACE="Courier New"> class </FONT><I>&lt;<FONT FACE="Courier New">ClassName&gt;</FONT></I><FONT FACE="Courier New"> {</FONT>
<P>	<I><FONT FACE="Courier New">ClassBody;</FONT></I>
<P>	<I><FONT FACE="바탕">//attributes</FONT></I>
<P>	<I><FONT FACE="바탕">//constructors</FONT></I>
<P>	<I><FONT FACE="바탕">//methods</FONT></I>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ modifiers : 대표적인 접근 재한자로서 public, protected, default(공백), private 등이 있다. 이 중에서 클래스의 선언에 사용되는 것은 public과 default(공백)이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 실제 클래스를 선언한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=795 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass {</FONT>
<P>	<FONT FACE="바탕">//클래스 안의 코드 작성</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">선언한 클래스를 가지고 &quot;new&quot;라는 키워드(메모리 할당 연산자)를 통해 만들어진 실체 즉, 인스턴스를 객체라 하며, 코딩은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I><FONT FACE="Courier New">ClassName instanceName</FONT></I><FONT FACE="Courier New"> = </FONT><B><FONT FACE="Courier New">new</FONT></B><FONT FACE="Courier New"> </FONT><I><FONT FACE="Courier New">Constructor</FONT></I><FONT FACE="Courier New">();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위에서 Constructor는 생성자로서 뒤에서 설명하겠지만 클래스와 이름이 같아야 하므로 통상 클래스 이름과 같이 사용한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=795 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><B><FONT FACE="Courier New">3:</FONT></B>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestMyClass {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MyClass m = </FONT><B><FONT FACE="Courier New">new</FONT></B><FONT FACE="Courier New"> MyClass();</FONT>
<P>	<FONT FACE="바탕">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.2 </FONT><FONT FACE="바탕">변수</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 변수를 선언하는 방법이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I>&lt;<FONT FACE="Courier New">modifiers&gt; &lt;type&gt; &lt;variableName&gt;</FONT></I><FONT FACE="Courier New">;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">⽦ modifiers : 재한자로서 public, protected, default, private 등의 Access Level 제한자와 Usage Level 제한자가 있다. 자세한 설명은 뒤에서 하기로 하고 간단하게 설명하면 다음과 같다.</FONT>
<P><FONT FACE="바탕">- public : 어느 클래스에서나 참조가능.</FONT>
<P><FONT FACE="바탕">- protected : 같은 package 내의 클래스에서만 참조가능, 자손 클래스가 다른 package에 있을 경우, 그 자손 클래스도 참조 가능.</FONT>
<P><FONT FACE="바탕">- default : 같은 package내의 클래스에서만 참조가능.</FONT>
<P><FONT FACE="바탕">- private : 같은 클래스 내에서만 참조가능.</FONT>
<P><FONT FACE="바탕">⽦ type : 기본자료형뿐만 아니라 클래스도 자료형으로 사용할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 변수를 선언한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><B><FONT FACE="Courier New">2:</FONT></B>
<P><B><FONT FACE="Courier New">3:</FONT></B>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass {</FONT>
<P>	<FONT FACE="Courier New">public int var1;</FONT>
<P>	<FONT FACE="Courier New">int var2;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.3 </FONT><FONT FACE="바탕">메소드의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">메소드 선언은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=65>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I>&lt;<FONT FACE="Courier New">modifiers&gt; &lt;return_type&gt; &lt;name&gt; (argument_list)</FONT></I><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">....</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE> 
<BR>
<P><FONT FACE="바탕">⽦ modifiers : 재한자로서 public, protected, default, private 등의 Access Level 제한자와 Usage Level 제한자가 있다. 
</FONT><BR>
<BR>
<BR>
<P><FONT FACE="바탕">⽦ return_type : 외부로 값을 반환하는데 사용되며, void(리턴값이 없음), byte, short, int, long, float, double, char, boolean, 배열, Class형 등 11가지가 있다.</FONT>
<BR>
<P><FONT FACE="바탕">⽦ argument_list : 외부로부터 값은 받는데 사용되며, return-type 에서 void를 제외한 10 가지가 argument_list의 자료형으로 올 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 메소드를 선언한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><B><FONT FACE="Courier New">5:</FONT></B>
<P><B><FONT FACE="Courier New">6:</FONT></B>
<P><B><FONT FACE="Courier New">7:</FONT></B>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyClass {</FONT>
<P>	<FONT FACE="Courier New">public int var1;</FONT>
<P>	<FONT FACE="Courier New">int var2;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public void doIt() {</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Hello World!&quot;);</FONT>
<P>	<B><FONT FACE="Courier New">}</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.4 </FONT><FONT FACE="바탕">멤버변수와</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">지역변수</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스 안에는 변수와 메소드가 올 수 있는데, 이들 클래스와 메소드를 멤버라 부른다. 멤버변수(Member Variable)는 클래스 안에서 선언 된 변수를 말하는데, 초기화를 시켜주지 않아도 객체를 생성할 때 각 자료형의 기본값으로 초기화된다.  
</FONT><P><FONT FACE="바탕">지역변수(Local Variable)는 Automatic variable이라고도 하며, 메소드 안에서 선언된 것을 말하는데, 반드시 초기화를 필요로 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음의 예를 보자</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=259>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">VarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class VarExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">int a;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void printNum(int c) {</FONT>
<P>		<FONT FACE="Courier New">int b = 1;</FONT>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">반드시</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">초기화</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">해야</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">함</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">멤버변수</FONT><FONT FACE="Courier New"> : &quot; + a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">지역변수</FONT><FONT FACE="Courier New"> : &quot; + b);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">매개변수</FONT><FONT FACE="Courier New"> : &quot; + c);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestVarExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestVarExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]){</FONT>
<P>		<FONT FACE="Courier New">VarExample ve = new VarExample();</FONT>
<P>		<FONT FACE="Courier New">ve.printNum(2);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV022.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV023.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT><FONT FACE="Courier New">   	
</FONT></B><P>		<B><FONT FACE="바탕">멤버변수</FONT><FONT FACE="Courier New"> : 0</FONT></B>
<P>		<B><FONT FACE="바탕">지역변수</FONT><FONT FACE="Courier New"> : 1</FONT></B>
<P>		<B><FONT FACE="바탕">매개변수</FONT><FONT FACE="Courier New"> : 2</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.5 </FONT><FONT FACE="바탕">생성자</FONT><FONT FACE="HY부활M">(Constructor) </FONT><FONT FACE="바탕">선언</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">및</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">생성자는 객체가 생성될 때 객체를 초기화하는데 사용된다. 앞에서 객체를 생성할 때 new 다음에 오는 것을 생성자라고 한다. 
</FONT><P><FONT FACE="바탕">생성자는 메소드와는 분명히 다르며, 객체가 생성될 때 단 한번 자동으로 수행된다. 생성자는 반드시 하나 이상은 있어야 하는데, 만일 명시적으로 선언하지 않으면 컴파일러가 대신해서 하나를 만들어주게 되는데 이를 기본 생성자(Default Constructor)라 부른다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><I><FONT FACE="Courier New">ClassName</FONT></I><FONT FACE="Courier New"> (</FONT><I><FONT FACE="Courier New">argument_list</FONT></I><FONT FACE="Courier New">) {</FONT>
<P>	<FONT FACE="Courier New">...</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">생성자를 만드는 규칙은 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">1. 생성자의 이름은 클래스 이름과 같아야 한다.(대/소문자까지 정확히 같아야 함) 만일 클래스이름과 다른 이름으로 만들면 메소드로 간주하여 반환 유형이 없다는 오류가 발생한다.</FONT>
<P>  <FONT FACE="돋움">2. 메소드와는 달리 반환 유형이 없다. 메소드의 경우 반환 유형이 없더라도 void라고 명시를 해주지만 생성자는 반환 유형을 정의하지 않는다.</FONT>
<BR>
<BR>
<BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음의 예를 보자.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">ConExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class ConExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">int var;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public ConExample(int init_var) {</FONT>
<P>		<FONT FACE="Courier New">var = init_var;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestConExample.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestConExample {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]){</FONT>
<P>		<FONT FACE="Courier New">ConExample ce = new ConExample(100);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;var</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> &quot; + ce.var + &quot;</FONT><FONT FACE="바탕">으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">초기화</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV024.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV025.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">var</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> 100</FONT><FONT FACE="바탕">으로</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">초기화</FONT></B>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=267>
<TD VALIGN=MIDDLE WIDTH=100%>
<P><FONT COLOR=WHITE><SPAN STYLE="font-size:13pt;"><FONT FACE="바탕">Garbage Collecting</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=100%>
<P><FONT FACE="바탕">• 자바에서 객체 사용 후 메모리에서 해제할 때 어떻게 해야 할까? 객체를 생성하는데 사용되는 연산자는 &quot;new&quot;이지만, 생성된 객체를 해제시키는 연산자는 존재하지 않는다. 자바에서는 자바 가상머신이 알아서 메모리를 관리해 주며 이를 Garbage Collecting이라 한다. Garbage Collecting은 객체가 더 이상 프로그램에서 사용되지 않으면 Garbage Collector가 판단하여 스스로 해제시켜 메모리를 수거하게된다.</FONT>
<BR>
<P><FONT FACE="바탕">• System.gc();</FONT>
<P><FONT FACE="바탕">Garbage Collecting의 단점은 언제 동작이 일어날지 모르기 때문에 메모리를 다 차지해 버릴 수도 있다는 것이다. 이때 System클래스의 gc() 메소드를 호출하면 시스템이 Garbage Collecting을 가능한 빠른 시간에 수행시킨다. 이 메소드를 호출한다고 해서 Garbage Collector가 바로 실행되는 것은 아니다.</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.5.6 </FONT><FONT FACE="바탕">객체</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">추상화</FONT><FONT FACE="HY부활M">(Object Abstraction)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">모든 객체는 두 가지 특징을 가지고 있다. 하나는 속성에 해당하는 명사적 특징과 또 하나는 행위에 해당하는 동사적 특징이다. 실세계의 객체에서 명사적 특징과, 동사적 특징을 추출해 내는 것을 추상화라고 하는데, 명사적 특징은 객체지향 프로그래밍에서 속성 또는 변수에 해당하고, 동사적 특징은 행위 또는 메소드에 해당한다.</FONT>
<P><FONT FACE="바탕">은행 계좌의 경우를 추상화해보자. 먼저 명사적 특징으로는 계좌번호, 비밀번호, 이율, 잔고 등이 있고 이를 추상화하면 프로그램의 변수에 해당하게 된다. 동사적 특징으로는 입금하다, 출금하다, 조회하다, 이자를 계산하다 등이 있고 이들을 추상화하면 프로그램의 메소드 부분에 해당된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 완벽한 예제는 아니지만 추상화를 거쳐서 실제 은행계좌 객체를 자바로 코딩한 것이다. 이와 같이 추상화 된 객체를 클래스라고 부른다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=358>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Account {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public String accountNumber;</FONT>
<P>	<FONT FACE="Courier New">public String passwd;</FONT>
<P>	<FONT FACE="Courier New">public long restMoney;</FONT>
<P>	<FONT FACE="Courier New">public float interest;</FONT>
<P>	<FONT FACE="Courier New">public void saveMoney(logn amount) {</FONT>
<P>		<FONT FACE="Courier New">restMoney = restMoney + amount;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void withdrawMoney(long amount) {</FONT>
<P>		<FONT FACE="Courier New">restMoney = restMoney - amount;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public long getRestMoney() {</FONT>
<P>		<FONT FACE="Courier New">return = restMoney;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">위 예제는 객체를 추상화하는 과정을 거쳐 만들어 놓은 클래스로 일종의 설계도에 해당한다. 집은 설계도만으로는 별 의미가 없고 실제로 집을 지어야 한다. 이처럼 실제로 만들어져야 할 집을 클래스의 인스턴스라 하며, 바로 객체를 나타낸다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 new 키워드를 이용하여 인스턴스를 만드는 예이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">Account myAccount = new Account();</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">이제 객체 즉, 인스턴스에 값을 할당해 보자. 클래스 내에서 선언된 변수나 메소드를 사용하려면 객체를 이용한다. 위 예에서 name, accountNumber, passwd, restMoney, interest를 멤버 변수라 부르고, saveMoney(), withdrawMoney(), getRestMoney() 등을 멤버 메소드라 부른다.</FONT>
<P><FONT FACE="바탕">멤버 변수의 사용은 객체이름 뒤에 &quot;.&quot;점으로 구분하여 변수의 이름을 덧붙여준다. 다음은 만들어진 객체의 멤버 변수에 값을 할당하는 예이다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">myAccount.name = &quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.accountNumber = &quot;002-122-011420&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.passwd = &quot;1234&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.restMoney = &quot;3800000&quot;;</FONT>
<P><FONT FACE="Courier New">myAccount.interest = 6.03F;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">멤버 메소드를 사용할 때에도 멤버 변수의 사용과 같이 객체이름 뒤에 &quot;.&quot;점으로 구분하여 메소드의 덧붙여준다. 다음은 만들어진 객체의 멤버 메소드를 사용하는 예를 보인 것이다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=75>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">myAccount.saveMoney(50000);</FONT>	<FONT FACE="Courier New">//50000</FONT><FONT FACE="바탕">원</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입금</FONT>
<P><FONT FACE="Courier New">myAccount.withdrawMoney(80000);</FONT>	<FONT FACE="Courier New">//80000</FONT><FONT FACE="바탕">원</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">출금</FONT>
<P><FONT FACE="Courier New">myAccount.getRestMoney()</FONT>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">현금</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">조회</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV026.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.6   </FONT><FONT FACE="바탕">패키지</FONT><FONT FACE="Bookman Old Style">(package)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스에는 크게 2가지 종류가 있는데, 하나는 사용자가 직접 만들어 사용하는 것이고, 다른 하나는 JDK 안에 포함되어있거나, 혹은 누군가가 만들어 놓은 클래스가 있다. 그런데 이런 클래스가 매우 많기 때문에 서로 관계 있는 것끼리 모아놓은 묶음을 패키지라고 한다. 자바소스코드에서 java.lang, java.io란 코드를 볼 수 있는데, 바로  패키지를 나타낸 것이다.</FONT>
<P><FONT FACE="바탕">예를 들어 java.lang 란 패키지 안에는 수많은 클래스가 포함되어 있는데 이 들은 자바가 수행될 때 필수적으로 사용되는 기본적인 클래스를 모아놓은 것이다. 따라서 모든 자바 소스코드에는 반드시 이 패키지가 포함되어야 한다. 물론 이 패키지는 자동으로 포함된다. 자바소스코드에 특정한 패키지를 포함시키려면 import라는 키워드를 사용하며, 사용 방법은 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=31>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">import java.lang.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">여기서 &quot;*&quot; 기호는 &quot;java.lang 패키지에 있는 모든 클래스를 사용한다.&quot;라는 의미이다. (사실 import 구문은 C 언어의 include 구문과 유사하다.)</FONT>
<BR>
<P><FONT FACE="바탕">다음은 일반적인 자바 소스코드의 레이아웃이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=92>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">package xxx;</FONT>
<P><FONT FACE="Courier New">import xxx.xxx.*;</FONT>
<P><FONT FACE="Courier New">class </FONT><FONT FACE="바탕">선언</FONT>
<P><FONT FACE="Courier New">...</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">package 선언문은 사용자가 만든 클래스를 어느 패키지로 묶을것인가를 지정하는 구문이며, import 선언문은 기존에 있던 패키지 안에 있는 클래스를 사용하겠다는 의미이다. 그 다음의 class 선언은 사용자가 만들어서 이용할 클래스를 나타낸다.</FONT>
<BR>
<P><FONT FACE="바탕">일단 예제 프로그램부터 다시 보자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorld.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println (&quot;Hello World!&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">위의 프로그램에서 패키지 구문은 생략되었는데, 이처럼 생략되면 패키지는 만들어지지 않고, 현재 폴더에 클래스 파일만 생성된다. 또 위 프로그램에서 import 구문도 생략되었는데, 이렇게 생략하면 java.lang 패키지가 자동으로 import된다. 즉 import java.lang.*; 구문은 코딩을 하거나 하지 않거나 결과는 마찬가지이다. 예를 들어 만약 file i/o를 하고자 하는데, 관련 클래스가 필요하다면 java.io 패키지를 import하면 된다. 사용 예는 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import java.io.*;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">1.6.1 </FONT><FONT FACE="바탕">패키지</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">사용자가 임의로 패키지를 만들려면 프로그램의 맨 위에 패키지 구문을 포함시키면 된다. 
</FONT><BR>
<P><FONT FACE="바탕">사용 예는 다음과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=236>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">HelloWorld.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package test.sample;</FONT></B>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">// Sample HelloWorld application</FONT>
<P><FONT FACE="Courier New">//</FONT>
<P><FONT FACE="Courier New">public class HelloWorld {</FONT>
<P>	<FONT FACE="Courier New">public static void main (String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println (&quot;Hello World!&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 때 유의할 점은 위와 같이 package를 선언한 다음 컴파일 할 때 다음과 같이 -d 옵션을 주어야만 패키지가 생성된다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">javac  -d  </FONT><I><FONT FACE="바탕">패키지가만들어질경로</FONT><FONT FACE="Courier New">  </FONT><FONT FACE="바탕">자바소스파일</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위 프로그램의 예에서 패키지를 현재 경로에 만들려면 다음 예와 같이 기술한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; javac </FONT><B><FONT FACE="Courier New">-d</FONT></B><FONT FACE="Courier New"> . test/sample/HelloWorld.java</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">여기서 -d 다음의 점(.)은 현재 폴더를 의미한다. 즉 현재 폴더에 패키지를 생성하겠다는 의미이다. 이와 같이 컴파일을 하면 현재 폴더에 test란 디렉토리가 만들어지고 그 아래에 다시 sample이란 디렉토리가 만들어진 후 그 아래에 HelloWorld.class 파일이 생성된다.</FONT>
<BR>
<P><FONT FACE="바탕">위의 파일을 컴파일 한 후 HelloWorld.class를 실행하려면 다음과 같이 입력한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=539 HEIGHT=44>
<TD VALIGN=MIDDLE WIDTH=100%>
<P> <FONT FACE="Courier New">&gt; java test.sample.HelloWorld</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">만약 다른 클래스에서 위의 클래스를 사용하려면 다음과 같이 import 구문을 이용한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import test.sample.HelloWorld;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">물론 이와 같이 import문을 사용하였을 때는 컴파일하기 전에 해당되는 클래스 파일의 경로가 설정되어 있어야 한다. 클래스 파일경로 설정 방법은 도스에서는 다음과 같이 기술한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=501 HEIGHT=41>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">set classpath = %classpath%;</FONT><I><FONT FACE="바탕">클래스파일절대경로명</FONT></I></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV027.GIF" BORDER=0 ALIGN=LEFT>
<P><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">1.7  API </FONT><FONT FACE="바탕">도움말</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">API(Application Programming Interface) 온라인 문서는 자바의 여러 가지 기술을 HTML 파일로 설명하고 있다.</FONT>
<P><FONT FACE="바탕">API 문서의 홈페이지에서 특정한 package를 선택하면, 그 package 내의 클래스와 인터페이스 목록이 나타나고, 원하는 클래스를 선택하면 해당 클래스에 관한 정보가 화면에 나타난다. 각 클래스 문서는 동일한 포맷으로 되어있으며, 해당 클래스와 관련이 없는 일부 요소는 생략될 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 http://java.sun.com/j2se/1.3/docs/api/index.html에 있는 1.3버전의 자바 API 온라인 설명서 시작 페이지를 나타낸 것이다.</FONT>
<P ALIGN=CENTER>
<IMG SRC="file:///C|/지빠귀/FYXIV028.GIF" BORDER=0 WIDTH=416 HEIGHT=288 HSPACE=3 ALIGN=BOTTOM>
<BR>
<P><FONT FACE="바탕">위의 화면 구성을 살펴보면 다음과 같다. 원하는 패키지를 선택할 수 있는 패키지 창이 왼쪽 위 프레임에 있고, 선택한 패키지에 포함된 인터페이스와 클래스 이름이 나열되는 클래스 창이 왼쪽 아래 프레임에 나타난다. 그리고 클래스 창에서 지정한 클래스나 인터페이스에 대한 설명과 여기에 포함된 필드, 메소드에 대한 설명을 보여주는 API 창(오른쪽)으로 구성되어 있다. 
</FONT><P><FONT FACE="바탕">클래스 온라인 설명서의 APT 창에는 클래스의 일반적인 용도에 대한 해설이 있고, 멤버 변수 목록과 각 변수의 목적과 사용법을 보다 자세히 설명하는 변수 세부 목록이 있으며, 생성자 목록 및 이를 자세히 설명하는 생성자 세부 목록이 있다. 또, 메소드 목록 및 이를 설명하는 메소드 세부 목록 등으로 구성되어 있다. 또한 클래스, 인터페이스, 변수, 메소드 등이 알파벳순으로 색인화 되어있어 쉽게 원하는 자료를 찾을 수 있다. 자바의 온라인 설명서는 자바를 익히고 이해력을 높이는데 많은 도움이 된다.</FONT>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV029.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV030.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV031.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[자바 언어의 기본 구조]</FONT></SPAN></FONT>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV032.GIF" BORDER=0 ALIGN=LEFT>
<BR>
<P><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">이 장에서는 프로그램을 작성할 때 구성되는 문장의 기본 요건과 기본 데이터 유형(primitive data type) 및 배열, 그리고 여러 가지 연산자와 제어문을 통하여 자바의 기본적인 문법에 대하여 자세히 알아본다. C언어를 경험했다면 많은 부분이 C언어와 유사한 것을 알 수 있을 것이다. 
</FONT></SPAN></FONT><BR>
<P>
<P>
<BR>
</body>

</html>
