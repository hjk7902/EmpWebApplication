<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">3.6</P></td>
        <td width="518">
        <p class="TitleTitle" align="left">&nbsp;   final Modifier</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P>&nbsp;final은 클래스, 변수, 메소드에 적용되어 특별한 의미를 갖게 한다.
		</ul>
		<P class="TSubmenu">3.6.1 final class
		<ul>
		<P>final클래스는 상속이 불가능하게 한다. 즉 자식 클래스를 가질 수 없고 오직 객체생성을 통해서만 사용할 수 있다. 다음 예에서는 Child.java를 컴파일하면 오류가 발생하게 된다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>Parent.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>final</B> class Parent{
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>Child.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">class Child extends Parent{ <B>//Error</B>
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">3.6.2 final variables
		<ul>
		<P>final변수는 상수 선언시 사용하는데, 한번 값을 할당하면 그 값을 변경할 수 없다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>TestFinalVar.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">class TestFinalVar {
			<P class="CStep2"><B>final int MY_VALUE=7;</B>
			<P class="CStep2">public void go() {
			<P class="CStep2">//MY_VALUE=10;	//Error
			<P class="CStep3">System.out.println(MY_VALUE);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">TestFinalVar t = new TestFinalVar();
			<P class="CStep3">t.go();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">7</td>
		</tr>
		</table>
		<P> 하지만 final변수라 할지라도 참조변수의 경우에는 다음 6번째 줄에서 보인 것처럼 멤버변수의 값은 변경할 수 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>TestFinalRefVar.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class TestFinalRefVar{
			<P class="CStep2">static final MyDate date = new MyDate();
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep2">//date = new MyDate(); //Error
			<P class="CStep3">date.year = 2002;
			<P class="CStep3">System.out.println( date.toString() );
			<P class="CStep2">}
			<P class="CStep2">}
			<P class="CStep2">class MyDate{
			<P class="CStep2">int year = 2000;
			<P class="CStep2">int month = 1;
			<P class="CStep2">int day = 1; 
			<P class="CStep2">public String toString() {
			<P class="CStep3">return &quot;[&quot; + year + &quot;-&quot; + month + &quot;-&quot; + day + &quot;]&quot;;
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">&nbsp;[2002-1-1]</td>
		</tr>
		</table>
		</ul>
		<P class="TSubmenu">3.6.3 final methods
		<ul>
		<P>final 메소드는 하위 클래스에서 재 정의하지 못하게 한다. 하지만 상속은 가능하므로 하위클래스에서 참조는 가능하다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>Parent.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">class Parent{
			<P class="CStep2">public <B>final</B> void method(){
			<P class="CStep3">System.out.println(&quot;Parent - method()&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>Child.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">class Child extends Parent{
			<P class="CStep2">public void method(){ <B>//Error</B>
			<P class="CStep3">System.out.println(&quot;Parent - method()&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>▒ final 키워드의 기능을 정리하면 다음과 같다.
		<P>- 클래스, 메소드, 변수에 적용된다.
		<P>- 클래스의 경우에는 서브-클래싱(상속)을 할 수 없게 한다.
		<P>- 메소드는 상속받아 재정의 할 수 없게 한다.
		<P>- 변수 값을 변경하지 못하게 하여 상수처럼 사용하게 한다. final 변수는 메모리 공간을 절약하기 위해 static과 같이 사용된다.
		<P>- abstract와 동시에 사용될 수 없다.
		</ul></td>
    </tr>
	</table>
</body>
</html>