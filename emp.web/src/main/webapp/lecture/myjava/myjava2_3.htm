<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">2.3</P></td>
        <td width="518">
        <p class="TitleTitle" align="left">&nbsp;제어구조</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
        <ul>    
		<P>제어문은 특정한 조건에 따라서 실행문을 선택하는 분기문과 특정한 실행문을 반복하는 반복문으로 나누어진다.
		</ul>
		<P class="TSubmenu">2.3.1 분기문
		<ul>
		<P>분기문은 조건에 맞는 실행문 만을 선택하여 실행함으로써 프로그램의 흐름을 바꾸는데 사용되며, 종류에는 if문과 switch문으로 나뉘어진다.
		<P>2.3.1.1 if ∼ else 문
		<P>if문은 프로그램의 흐름을 바꾸는데 사용되는 조건 선택 분기문이다.
		<P>기본적인 if문의 사용 방법은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="350">
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<P class="TStep1">if (<I>boolean형 조건식</I>)
			<P class="TStep2">	문장1;
			<P class="TStep1">else
			<P class="TStep2">	문장2;</TD>
		</tr>
		</TABLE>
		<P>if문의 조건식 결과는 반드시 boolean형이어야 하므로 결과는 true 아니면 false가 된다. 따라서, 조건식이 참이면 문장1이 실행되고 거짓일 경우에는 문장2가 실행된다.
		<P>다음은 if∼else 문의 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>IfExample1.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class IfExample1 {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">int jumsu = Integer.parseInt(args[0]);
			<P class="CStep3">if( jumsu &gt;= 60 ) {
			<P class="CStep4">System.out.println(&quot;60이상인 점수입니다.&quot;);
			<P class="CStep3">else
			<P class="CStep4">System.out.println(&quot;60보다 작은 점수입니다.&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>

		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">java IfExample1 79
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">60이상인 점수입니다.</td>
		</tr>
		</table>
		<P>수행할 문장이 복문이면 중괄호 &quot;{}&quot;로 묶어준다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="350">
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">if (<I>boolean형 조건식</I>) {
			<p class="TStep2">문장1;
			<p class="TStep2">문장2;
			<p class="TStep2">…
			<p class="TStep1">} else {
			<p class="TStep2">문장3;
			<p class="TStep2">문장4;
			<p class="TStep2">…
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>다음 예는 if~else에 복문이 사용된 예를 나타낸 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>IfExample2.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class IfExample2 {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">int jumsu = Integer.parseInt(args[0]);
			<P class="CStep3">if( jumsu &gt;= 60 ) {
			<P class="CStep4">System.out.println(&quot;60이상인 점수입니다.&quot;);
			<P class="CStep4">System.out.println(&quot;합격 하셨습니다.&quot;);
			<P class="CStep3">}
			<P class="CStep3">else {
			<P class="CStep4">System.out.println(&quot;60보다 작은 점수입니다.&quot;);
			<P class="CStep4">System.out.println(&quot;불합격 하셨습니다.&quot;);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P><B>실행</B></td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">java IfExample2 75</td>
			</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">60이상인 점수입니다.
			<P class="Result">합격 하셨습니다.</td>
		</tr>
		</table>
		<P>조건식의 결과가 거짓일 때 실행할 문장이 없으면 else문 이하를 생략(단독 if문)할 수도 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=356>
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">if (<I>boolean형 조건식</I>)
			<p class="TStep1">	문장1;</TD>
		</tr>
		</TABLE>
		<P>다음은 else문 없이 if문 단독으로 사용되는 예를 나타낸 것으로 8번째 줄은 if문과 관계없이 항상 실행된다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=9%></td>
			<TD WIDTH=90%>
			<P>IfExample3.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=9%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:</TD>
			<TD WIDTH=90%>
			<P class="CStep1">public class IfExample3 {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">int jumsu = Integer.parseInt(args[0]);
			<P class="CStep3">if( jumsu &gt;= 60 ) {
			<P class="CStep4">System.out.println(&quot;60이상인 점수입니다.&quot;);
			<P class="CStep4">System.out.println(&quot;합격 하셨습니다.&quot;);
			<P class="CStep3">}
			<P class="CStep3">System.out.println(&quot;수고 하셨습니다.&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
			<tr>
				<td width="242"><P><B>실행</B></td>
			</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">java IfExample3 75</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">60이상인 점수입니다
			<P class="Result">합격 하셨습니다.
			<P class="Result">수고 하셨습니다.</td>
		</tr>
		</table>
		<P>if문은 전체가 논리적으로 하나의 실행문이기 때문에 else 다음에 다시 if문이 올 수 있는데 이를 복합 if문이라고 한다. 
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="350">
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">if (<I>boolean형 조건식 1</I>) {
			<p class="TStep2">문장1;
			<p class="TStep1">} else if (<I>boolean형 조건식 2</I>) {
			<p class="TStep2">문장2;
			<p class="TStep1">} else if (<I>boolean형 조건식 3</I>) {
			<p class="TStep2">문장3;
			<p class="TStep1">} else {
			<p class="TStep2">문장4;
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>다음은 else if문을 이용하여 여러 개의 조건식을 검사하는 예이다. 입력한 점수에 따라서 해당하는 학점이 출력된다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=9%></td>
			<TD WIDTH=90%>
			<P>IfExample4.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=9%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:
			<P class="CNumber">17:</TD>
			<TD WIDTH=90%>
			<P class="CStep1">public class IfExample4 {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">int jumsu = Integer.parseInt(args[0]);
			<P class="CStep3">if( jumsu &gt;= 90 ) {
			<P class="CStep4">System.out.println(&quot;당신의 학점은 A입니다.&quot;);
			<P class="CStep3">}else if( jumsu &gt;= 80 ) {
			<P class="CStep4">System.out.println(&quot;당신의 학점은 B입니다.&quot;);
			<P class="CStep3">}else if( jumsu &gt;= 70 ) {
			<P class="CStep4">System.out.println(&quot;당신의 학점은 C입니다.&quot;);
			<P class="CStep3">}else if( jumsu &gt;= 60 ) {
			<P class="CStep4">System.out.println(&quot;당신의 학점은 D입니다.&quot;);
			<P class="CStep3">}else {
			<P class="CStep4">System.out.println(&quot;당신의 학점은 F입니다.&quot;);
			<P class="CStep4">System.out.println(&quot;당신은 재수강 대상자입니다.&quot;);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P><B>실행</B></td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">java IfExample4 85</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">당신의 학점은 B입니다.</td>
		</tr>
		</table>
		<P>if문 내에 또 다른 조건식을 포함시킬 수도 있다. 이와 같은 중첩된 if문의 경우 외부의 if∼else문장과 내부의 if∼else문장이 서로 겹쳐서는 안 된다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="350">
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">if (<I>boolean형 조건식 1</I>) {
			<p class="TStep2">if (<I>boolean형 조건식 1-2</I>) {
			<p class="TStep2">문장1-1;
			<p class="TStep3">} else {
			<p class="TStep3">문장1-2;
			<p class="TStep3">}
			<p class="TStep2">} else {
			<p class="TStep2">문장2;
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>다음은 복합 if문의 예를 보인 것으로 4번째 줄에 있는 외부 if문의 조건식이 참일 때에만 5번째 줄의 내부 if문이 실행된다. 만약 입력점수가 100점을 초과하면 점수가 잘못 입력된 것으로 간주하고 메시지를 출력한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>IfExample5.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:
			<P class="CNumber">17:
			<P class="CNumber">18:
			<P class="CNumber">19:
			<P class="CNumber">20:
			<P class="CNumber">21:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class IfExample5 {
			<P class="CStep1">public static void main(String[] args) {
			<P class="CStep2">int jumsu = Integer.parseInt(args[0]);
			<P class="CStep2"><B>if( jumsu &gt;= 90 ) {</B>
			<P class="CStep3"><B>if( jumsu &gt; 100 ) {</B>
			<P class="CStep4">System.out.println(&quot;잘못 입력된 점수입니다.&quot;);
			<P class="CStep3"><B>}</B>else {
			<P class="CStep4">System.out.println(&quot;당신의 학점은 A입니다.&quot;);
			<P class="CStep3">}
			<P class="CStep2"><B>}</B>else if( jumsu &gt;= 80 ) {
			<P class="CStep4">System.out.println(&quot;당신의 학점은 B입니다.&quot;);
			<P class="CStep2">}else if( jumsu &gt;= 70 ) {
			<P class="CStep3">System.out.println(&quot;당신의 학점은 C입니다.&quot;);
			<P class="CStep2">}else if( jumsu &gt;= 60 ) {
			<P class="CStep3">System.out.println(&quot;당신의 학점은 D입니다.&quot;);
			<P class="CStep2">}else {
			<P class="CStep3">System.out.println(&quot;당신의 학점은 F입니다.&quot;);
			<P class="CStep3">System.out.println(&quot;당신은 재수강 대상자입니다.&quot;);
			<P class="CStep2">}
			<P class="CStep1">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P><B>실행</B></td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">java IfExample5 120</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">잘못 입력된 점수입니다.</td>
		</tr>
		</table>
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=100%>
			<p class="TStep1">인자(argument) 값이 있는 프로그램의 실행</TD>
		</tr>
		<TR>
			<TD WIDTH=100%>
			<p class="TStep1">인자의 수에는 제한이 없지만, 프로그램에서 처리가 되는 인자만큼을 넣어 
        <p class="TStep1">주어야 한다.</p>

			<p class="TStep1">&bull; 인자값을 사용할 경우 컴파일 명령문에는 변함이 없고, 실행은 자바 클래스
        <p class="TStep1"> 파일의 실행문 뒤에 공백을 띄우고 기록한다. 첫 번째 인자는 args[0]에 저</p>
        <p class="TStep1">장되고 다음 인자 값은 args[1]에 저장된다. 위의 프로그램을 컴파일하고 </p>
        <p class="TStep1">실행시키려면 다음과 같이 한다.</p>

			<p class="TStep1">컴파일 &gt; javac IfExample.java
			<p class="TStep1">실 행 &gt; java IfExample 3000
			<p class="TStep1">결 과 &gt; 버스
			<p class="TStep1">&bull; Kawa를 이용하여 인자값이 있는 프로그램을 실행시키는 방법은 다음과 같다.
			<p class="TStep1">먼저 새로운 Project를 만든 후 소스코드를 작성한다.
			<p class="TStep1">메뉴에서 Project -&gt; Interpreter Option을 선택
			<p class="TStep1">Command Line Argument 체크 옵션은 선택하고 &quot;&gt;&gt;&quot; 버튼을 눌러 인자 값을
        <p class="TStep1"> 공백으로 구분하여 넣어준다.</p>
</TD>
		</tr>
		</TABLE>
		<P>2.3.1.2 switch 문
		<P>복합 if문은 구현하기가 복잡하고 프로그램의 효율성이 감소되는 단점이 있가 때문에 다중 분지 문제를 해결할 때는 switch 문을 사용한다. switch문은 다중 분지이므로 복합 if문의 논리적인 구조를 간결하게 표현할 수 있다. C언어에서는 switch이지만 파스칼이나 델파이에서는 명칭이 case이다. 
		<P>switch문은 int형 변수의 값에 따라 다중 조건을 판단하여 선택적으로 실행문을 실행할 수 있도록 해주는 분기문이다. if문과는 달리 조건식이 사용되지 않고, 값을 가지는 변수가 판단 조건으로 사용되며, 연산결과의 기본형은 int형이다. 조건식의 위치에는 int형으로 Promotion 즉, 묵시적 캐스팅이 될 수 있는 형의 변수를 사용해야 한다. switch문의 조건식은 결과 값이 int 형, byte 형, short 형, char 형이 올 수 있으며, 그 외에 boolean 형, float 형, long 형, object reference 형 등은 올 수가 없다. case문 뒤에 사용되는 값(레이블)은 변수를 사용할 수 없고, 반드시 상수를 사용해야 한다. 또, 각각의 case문은 여러 개의 실행문을 기술할 수 있는데, case와 값 사이는 반드시 공백으로 구분을 해 주어야 하며, 중괄호&quot;{ }&quot;는 사용되지 않는다. 해당 case문이 실행된 이후에는 바로 아래에 위치한 실행문으로 흐름이 넘어가기 때문에, 해당 case의 실행문만 실행하고 switch문을 종료하기 위해서는 break문을 사용해야 한다. default문은 조건을 만족하는 경우가 없을 때에 실행되는 문장을 기술한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="350">
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">switch (<I>int형 조건식</I>) {
			<p class="TStep2">case <I>값1</I>:
			<p class="TStep3">실행문 1;
			<p class="TStep3">break;
			<p class="TStep2">case <I>값2</I>:
			<p class="TStep3">실행문 2;
			<p class="TStep3">break;
			<p class="TStep3">......
			<p class="TStep2">case <I>값N</I>:
			<p class="TStep3">실행문 N;
			<p class="TStep3">break;
			<p class="TStep2">default:
			<p class="TStep3">default 실행문;
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>다음은 switch문의 예를 보여주고 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>SwitchExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:
			<P class="CNumber">17:
			<P class="CNumber">18:
			<P class="CNumber">19:
			<P class="CNumber">20:
			<P class="CNumber">21:
			<P class="CNumber">22:
			<P class="CNumber">23:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class SwitchExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">int jumsu = Integer.parseInt(args[0]);
			<P class="CStep3"><B>switch( jumsu / 10 ) {</B>
			<P class="CStep4"><B>case 9 :</B> 
			<P class="CStep5">System.out.println(&quot;당신의 학점은 A입니다.&quot;);
			<P class="CStep5"><B>break;</B>
			<P class="CStep4">case 8 :
			<P class="CStep5">System.out.println(&quot;당신의 학점은 B입니다.&quot;);
			<P class="CStep5">break;
			<P class="CStep4">case 7 : 
			<P class="CStep5">System.out.println(&quot;당신의 학점은 C입니다.&quot;);
			<P class="CStep5">break;
			<P class="CStep4">case 6 : 
			<P class="CStep5">System.out.println(&quot;당신의 학점은 D입니다.&quot;);
			<P class="CStep5">break;
			<P class="CStep4"><B>default :</B>
			<P class="CStep5">System.out.println(&quot;당신의 학점은 F입니다.&quot;);
			<P class="CStep5">System.out.println(&quot;당신은 재수강 대상자입니다.&quot;);
			<P class="CStep5">break;
			<P class="CStep3"><B>}</B>
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P><B>실행</B></td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">java SwitchExample5 90</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">당신의 학점은 A입니다.</td>
		</tr>
		</table>
		<P>다음은 사칙연산을 하기 위한 switch문의 예를 보여주고 있다. switch문의 조건식 결과가 char형일 때에는 다음과 같이 ' '로 묶어 준다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>SwitchCalculator.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:
			<P class="CNumber">17:
			<P class="CNumber">18:
			<P class="CNumber">19:
			<P class="CNumber">20:
			<P class="CNumber">21:
			<P class="CNumber">22:
			<P class="CNumber">23:
			<P class="CNumber">24:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class SwitchCalculator {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">int i ;
			<P class="CStep3">int first, second;
			<P class="CStep3">first = Integer.parseInt(args[0]);
			<P class="CStep3">second =  Integer.parseInt(args[2]);
			<P class="CStep3">switch(args[1].charAt(0)){
			<P class="CStep4">case '+' : 
			<P class="CStep5">System.out.println(first + second);
			<P class="CStep5">break;
			<P class="CStep4">case 'x' :
			<P class="CStep5">System.out.println(first * second);
			<P class="CStep5">break;
			<P class="CStep4">case '/' : 
			<P class="CStep5">System.out.println(first / second);
			<P class="CStep5">break;
			<P class="CStep4">case '-' :
			<P class="CStep5">System.out.println(first - second);
			<P class="CStep5">break;
			<P class="CStep4">default :
			<P class="CStep5">System.out.println(&quot;잘못된 연산식입니다.&quot;);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">java SwitchCalculator 20 + 30</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">50</td>
		</tr>
		</table>
		<p>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%>
			<P class="CNumber">7:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">switch(args[1].charAt(0)) {</TD>
		</tr>
		</TABLE>
		<P>switch문의 charAt() 메소드는 특정 문자열에서 원하는 위치의 문자만을 원할 때 사용한다. args[1].charAt(0)은 두 번째 인자(첫 번째 인자는 args[0]) 값에서 첫 번째 문자 하나를 의미한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">case 'x' :
			<P class="CStep1">System.out.println(first * second);
			<P class="CStep1">break;</TD>
		</tr>
		</TABLE>
		<P>11 : case문의 'x'를 '*'로 바꾸면 안될 수도 있다. 이유는 곱셈에 해당하는 연산자는 * 일지라도 도스모드에서 *를 사용하면 운영체제에서 사용되는 메타문자(* 는 임의의 문자열, ? 는 한 문자)로 인식하기 때문이다.
		</ul>
		<P class="TSubmenu">2.3.2 반복문
		<ul>
		<P>반복문은 하나 이상의 실행문을 특정 조건이 만족하는 한 반복해서 실행하는 문장이다. 반복문의 종류에는 while문, do∼while문, for문이 있다. 이러한 반복문을 사용하면 프로그램의 코드 크기를 효율적으로 줄일 수 있다.
		<P>2.3.2.1 while 문
		<P>  
		<P>while문은 조건식을 만족하는 동안 반복문을 실행하는데, 조건식을 검사해서 조건식이 참이면 실행문을 반복하고, 거짓이면 while문을 빠져 나온다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=356>
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">while (<I>boolean형 조건식</I>) {
			<p class="TStep2">	실행문;
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>while문의 조건식도 if문과 마찬가지로 반드시 boolean형으로 결과를 반환해야 한다. 자바는 C언어에서처럼 0(Zero)은 false, 0이 아니면 true인 semi-boolean형의 개념이 없으며, 조건 부분에는 반드시 boolean형의 결과가 true 또는 false값을 갖는다. 실행문이 한 줄이면 단문이므로 당연히 중괄호 &quot;{ }&quot;는 사용할 필요가 없다.
		<P>while문은 먼저 조건 부분을 검사하여 결과가 진이면 실행한다. 실행문이 한번 실행되면 다시 조건 부분으로 되돌아와 반복해서 조건을 검사하고 그 결과가 true이면 실행하고, false이면 while문을 빠져 나와 다음 문장으로 넘어간다. 따라서, while문 내의 실행문에는 조건식에 사용되는 변수 등을 조정해 주는 문장이 있어야 while문을 빠져나올 수 있으며, 그렇지 않으면 무한루프에 빠지게 된다. 만약 while문에서 조건 부분의 결과가 처음부터 false가 판명되면 while문 내의 실행문은 실행되지 않는다.
		<P>다음은 1부터 10까지 더한 결과를 while문을 이용하여 출력하는 예이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>WhileExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class WhileExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">int i = 1;
			<P class="CStep3">int sum = 0;
			<P class="CStep3">while(i &lt;= 10) {
			<P class="CStep4">sum = sum + i;
			<P class="CStep4">i++;
			<P class="CStep3">}
			<P class="CStep3">System.out.println(&quot;합은:&quot; + sum);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>2.3.2.2 do ∼ while 문
		<P>do∼while문은 while문과 유사한데, 먼저 while문은 조건식을 먼저 검사하고 실행문이 반복되기 때문에 처음 실행 조건이 false이면 한번도 실행되지 않는다. 반면에 do∼while문은 실행된 후 조건식을 검사하므로 조건식의 결과가 true이건 false이건 무조건 한번은 실행이 된다. 실행문이 한 줄이면 단문이므로 중괄호  &quot;{ }&quot; 를 생략할 수 있다. while문은 파스칼의 while∼do와 비슷하고 do∼while은 repeat∼until과 유사하다. 
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=356>
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">do {
			<p class="TStep2">실행문;
			<p class="TStep1">} while (<I>boolean형 조건식</I>);</TD>
		</tr>
		</TABLE>
		<P>다음은 do ∼ while 문을 이용하여 1부터 10까지의 합을 구하는 프로그램이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>DoWhileExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class DoWhileExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">int i = 1;
			<P class="CStep3">int sum = 0;
			<P class="CStep3">do{
			<P class="CStep4">sum = sum + i;
			<P class="CStep4">i++;
			<P class="CStep3">}while(i &lt;= 10); 
			<P class="CStep3">System.out.println(&quot;합은:&quot; + sum);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>2.3.2.3 for 문
		<P>for문은 제어 조건을 한꺼번에 지정한다는 점이 다른 반복문과는 다르다. 따라서, 정확한 반복횟수를 알고있을 때는 for문이 가장 유용하다. for문의 경우에도 실행문이 한 줄이면 단문이므로 중괄호 &quot;{ }&quot;를 생략할 수 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></td>
			<TD WIDTH=97%>
			<p class="TStep1">for(<I>초기값</I> ; <I>boolean형 조건식</I> ; <I>증감값</I>) {
			<p class="TStep2">실행문;
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>for문의 각 구성 요소는 생략할 수도 있으며, 각각을 설명하면 다음과 같다.
		<P>- 초기값 : for문이 시작되기 전에 실행되며 변수에 대한 초기화를 해줄 수 있다. 또 콤마를 사용하여 여러 개의 변수를 다중으로 적용할 수도 있지만 선언은 한번만 가능하다.
		<P>- boolean형 조건식 : 조건식의 결과는 true나 false가 되어야 하며, false면 루프의 실행문은 한번도 실행되지 않는다.
		<P>- 증감값 : 반복되는 변수의 값을 증.감 시킨다. 증.감값도 초기값에서 처럼 콤마를 사용하여 여러 개의 변수에 다중으로 증.감값을 적용할 수 있다.
		<BR>
		<P>다음은 for문을 이용하여 1부터 10까지의 합을 구하는 프로그램이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ForExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class ForExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">int sum = 0;
			<P class="CStep3">for (int i=0; i&lt;=10; i++) {
			<P class="CStep4">sum = sum + i;
			<P class="CStep3">}
			<P class="CStep3">System.out.println(&quot;합은:&quot; + sum);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>for문을 중첩해서 다중 for문으로 사용하면 2차원 이상의 배열을 다루는데 유용하게 사용할 수 있다. 유의할 점은 루프의 몸체가 서로 겹치지 않도록 해야한다. 다중 for문에서 루프가 겹쳐졌을 때 문법적 오류가 발생하지 않아도 논리적인 오류를 발생시킬 수 있다.
		<P>다음은 다중 for문을 이용하여 구구단을 출력하는 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>MultiForExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class MultiForExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">for (int i=1; i&lt;=9; i++) {
			<P class="CStep4">for (int j=2; j&lt;=9; j++) {
			<P class="CStep5">System.out.print(j + &quot;*&quot; + i + &quot;=&quot; + i*j + '\t');
			<P class="CStep4">}
			<P class="CStep4">System.out.println();
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>다음은 다중 for문을 이용하여 1부터 100사이의 소수(prime number)를 출력하는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>PrimeNumber.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:
			<P class="CNumber">17:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class PrimeNumber {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">System.out.println(&quot;======= Prime Number =======&quot;);
			<P class="CStep3">int cnt;
			<P class="CStep3">for (int i=1; i&lt;=100; i++) {
			<P class="CStep4">cnt = 0;
			<P class="CStep4">for (int j=1; j&lt;=i; j++) {
			<P class="CStep5">if(i%j == 0) {
			<P class="CStep6">cnt++;
			<P class="CStep5">}
			<P class="CStep4">}
			<P class="CStep4">if(cnt == 2) {
			<P class="CStep5">System.out.print(i + &quot; &quot;);
			<P class="CStep4">}
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">2.3.3 분기문(Jump statement)
		<ul>
		<P>분기문은 프로그램의 실행 순서를 지정된 곳으로 이동시키는 것으로 반복문에서 빠져 나올 때 사용한다. 분기문에는 break문과 continue문 그리고 return 문이 있다. goto문은 리터럴에는 포함되어 있으나 사용하지 않는다.
		<P>2.3.3.1 break 문
		<P>break문은 반복문 내의 어떤 곳이든지 위치할 수 있으며, 처리 도중에 break 문을 만나면 반복문을 곧바로 빠져 나온다. 특히 다중 반복문일 경우 break 문을 만나면 그 break 문이 속한 반복문만 빠져나오게 된다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=356>
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">break [<I>label</I>];</TD>
		</tr>
		</TABLE>
		<P>다음은 break 문을 사용한 예이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>BreakExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class BreakExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">for (int i=0; i&lt;10; i++) {
			<P class="CStep4">if (i==5) {
			<P class="CStep5"><B>break;</B>
			<P class="CStep4">}
			<P class="CStep4">System.out.println(i);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>위 프로그램에서 break문을 만나면 for문을 빠져나와 for문 바로 다음 문장을 실행하게 된다.
		<P>2.3.3.2 continue 문
		<P>continue문 또한 반복문 내의 어떤 곳이든지 위치할 수 있으며 continue문을 만나면 반복문의 맨 처음으로 제어가 이동한다. 따라서, 이 문의 뒷부분은 실행되지 않게된다. 
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=356>
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">continue [<I>label</I>];</TD>
		</tr>
		</TABLE>
		<P>다음은 continue 문을 사용한 예이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ContinueExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class ContinueExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3">for (int i=0; i&lt;10; i++) {
			<P class="CStep4">if (i==5) {
			<P class="CStep5"><B>continue;</B>
			<P class="CStep4">}
			<P class="CStep4">System.out.println(i);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>위 프로그램에서 continue문을 만나면 아래의 출력문을 실행하지 않고 반복문의 처음으로 가서 계속 수행한다.
		<P>continue문이나 break문을 둘러싸고 있는 루프가 둘 이상일 때는 레이블이 유용하게 사용될 수 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=404>
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1"><I>label</I> : 반복문 {
			<p class="TStep2">반복문 {
			<p class="TStep3">continue <I>label</I>;
			<p class="TStep2">}
			<p class="TStep1">}</TD>
		</tr>
		</TABLE>
		<P>다음은 label문이 사용된 예를 보여주고 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ContinueExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">12:
			<P class="CNumber">13:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class LabelExample {
			<P class="CStep2">public static void main(String[] args){
			<P class="CStep3"><B>outer :</B> 
			<P class="CStep3">for (int i=0; i&lt;3; i++) {
			<P class="CStep4">for (int j=0; j&lt;3; j++) {
			<P class="CStep5">if (j==2) {
			<P class="CStep6"><B>break outer;</B>
			<P class="CStep5">}
			<P class="CStep5">System.out.println(i + &quot;\t&quot; + j);
			<P class="CStep4">}
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>2.3.3.3 return 문
		<P>return문은 메소드의 실행을 끝내고 호출된 메소드로 제어를 넘기는 문장이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=356>
			<TD WIDTH=3%></td>
			<TD WIDTH=96%>
			<p class="TStep1">return [<I>표현식 or 변수</I>];</TD>
		</tr>
		</TABLE>
		<P>return문만 사용될 때에는 호출한 메소드로 제어만 넘어가지만 return문 뒤의 식과 함께 사용되면 식의 값과 제어가 함께 넘어간다. 즉, return문은 호출한 함수에게 결과 값을 넘겨주는 역할을 한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD>
			<P>ReturnExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class ReturnExample {
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">int a = 20;
			<P class="CStep3">int b = 30;
			<P class="CStep3">System.out.println(&quot;넓이는 : &quot; + <B>calcRect(a, b)</B>);
			<P class="CStep2">}
			<P class="CStep2">public static <B>int</B> calcRect(int width, int height) {
			<P class="CStep3"><B>return (width * height);</B>
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242"><P class="RResult">실행 결과</td>
		</tr>
		</table>
		<table width="300" cellpadding="0" cellspacing="0">
		<tr>
			<td width="242">
			<P class="Result">넓이는 : 600</td>
		</tr>
		</table>
		</ul></td>
    </tr>
	</table>
</body>
</html>