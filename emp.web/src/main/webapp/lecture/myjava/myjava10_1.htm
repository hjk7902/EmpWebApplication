<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">10.1</P></td>
        <td width="518"><p class="TitleTitle">데이터베이스 개요</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P>&nbsp;이 장에서는 데이터베이스를 다루는데 필요한 기본적인 용어와 기능 등에 대해 설명하고, 일반적으로 쉽게 사용할 수 있는 실제 데이터베이스 엔진을 선정하여 설치에서 사용 방법에 이르기까지 일련의 조작 과정을 설명하기로 한다. 
		</ul>
		<P class="TSubmenu">10.1.1 데이터베이스 용어
		<ul>
		<P>  &middot; 테이블 : 테이블은 RDBMS의 기본적인 저장구조로, 한 개 이상의 행(Row)과 한개 이상의 열(Column)로 구성된다.
		<P>  &middot; Column : 한 Column은 테이블에서 단일 종류의 데이터로 구성되는데 예를 들면 성적 테이블에서 이름, 국어, 영어 등이 Column이다. 이것은 특정 데이터 타입 및 크기를 갖고 있다.
		<P>  &middot; Row : Row는 Column 값의 조합이다. 성적 테이블에서 한 학생에 대한 성적내용이 한 Row가 된다. 예를 들면, &quot;홍길동, 100, 95&quot; 가 하나의 Row이다.
		<P>  &middot; 필드 : Row와 Column의 교차점을 필드라고 한다. 데이터가 없는 필드는 널(Null)값을 갖는다. 예를 들면, 국어 Column과 홍길동 학생의 Row의 필드값은 &quot;100&quot;이다.
		<P>  &middot; 기본키(Primary Key) : 기본키는 한 테이블의 레코드를 유일하게 식별해주는 Column 또는 Column의 조합이다. 예를 들면, 앞의 성적테이블에서 각 학생의 이름을 기본키로 사용할 수 있으며, 더 정확하게 하려면 학번 Column을 추가 시켜 기본키로 사용할 수 있다. 기본키는 널값을 가질수 없다. 
		<P>  &middot; 외래키 : 두개 이상의 테이블을 사용하는 데이터베이스에서 두 테이블에 있는 데이터를 조작하려고 할 때 두 테이블을 연관시켜주는 Column 또는 Column의 조합을 말한다.
		</ul>
		<P class="TSubmenu">10.1.2 MySQL
		<ul>
		<P>데이터베이스를 사용하기 위해서는 먼저 데이터베이스 엔진이 설치되어야 한다. 본 교재에서는 오라클이나 MySQL을 기준으로 설명하기로 한다. MySQL 설치에 관해서는 언급하겠지만, 오라클의 설치에 관해서는 다루지 않으며, 주의할 점은 8i이후 버전의 Personal 오라클은 리스너가 동작하지 않으므로 NT용 이상을 설치해야 리스너가 작동한다. 9i 버전에서는 Personal 오라클을 제공하지 않는다. 
		<P>10.1.2.1 MySQL 설치
		<P>Ⅰ. http://www.mysql.com 에서 최신 버전의 MySQL을 내려받아 압축을 푼 다음 설치한다. 윈도우용이라면 설치하는데는 어렵지 않을 것이다. 설치시 MySQL이 설치될 폴더는 C:\mysql로 한다.
		<P>Ⅱ. 설치가 모두 끝나면 명령 창을 띄워서 C:\mysql\bin 디렉토리로 이동하여 mysqld을 입력하여 실행시킨다. 
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"><B>C:\&gt;cd C:\mysql\bin</B>
			<p class="TStep1"><B>C:\mysql\bin&gt;mysqld</B></TD>
		</tr>
		</TABLE>
		<P>다음 그림처럼 에러 없이 프롬프트가 나타나면 정상적으로 설치가 완료된 것이다. 
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV340.GIF" BORDER=0 WIDTH=491 HEIGHT=314 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>윈도우 2000에 설치했다면 제어판 -&gt; 관리도구 -&gt; 서비스에서 다음 그림과 같이 MySQL 구성요소가 추가된 것을 볼 수 있다. MySQL 구성 요소를 시작한다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV341.GIF" BORDER=0 WIDTH=433 HEIGHT=303 ALIGN=BOTTOM>
		<P>Ⅲ. 이제 MySQL 데이터베이스로 접속할 수 있는 상태가 된 것이다. MySQL 데몬이 정상적으로 가동되었으면 프롬프트상에서 mysql이라고 입력하여 MySQL 데이터베이스에 접속한다. 
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> <B>C:\mysql\bin&gt;mysql</B></TD>
		</tr>
		</TABLE>
		<P>다음 그림과 같이 프롬프트에 mysql&gt; 프롬프트가 나타나면 접속된 것이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV342.GIF" BORDER=0 WIDTH=402 HEIGHT=257 ALIGN=BOTTOM>
		<P>10.1.2.2 데이터베이스 설정
		<P>Ⅰ. MySQL이 정상적으로 실행되었으면 테이블이 저장될 데이터베이스를 생성한다. 데이터베이스는 다음과 같은 SQL문장으로 생성할 수 있다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=501>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">create database <I>database_name</I>;</TD>
		</tr>
		</TABLE>
		<P>여기서는 데이터베이스 이름을 mydb로 설정한다. 
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> <B>mysql&gt; create database mydb;</B></TD>
		</tr>
		</TABLE>
		<P>다음 그림과 같이 데이터베이스가 생성된 것을 볼 수 있다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV343.GIF" BORDER=0 WIDTH=439 HEIGHT=296 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>Ⅱ. 다음은 사용자를 추가시키기 위해 데이터베이스로 이동한다. mysql이라는 데이터베이스에 사용자와 권한을 설정한다. 다음처럼 use라는 명령을 이용하여 mysql 데이터베이스로 이동한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> <B>mysql&gt; use mysql</B></TD>
		</tr>
		</TABLE>
		<P>다음은 데이터베이스가 mysql로 바뀐 그림이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV344.GIF" BORDER=0 WIDTH=428 HEIGHT=286 ALIGN=BOTTOM>
		<P>Ⅲ. 다음은 mysql이라는 데이터베이스 안에서 'user' 라는 테이블과 'db'라는 테이블을 이용해 사용자를 추가하고 권한을 설정한다. 여기서 사용자 아이디는 'scott' 비밀번호는 'tiger'로 한다. 이는 오라클의 기본 사용자 아이디와 비밀번호 이기도 하다. 'user' 테이블과 'db'테이블에는 다음과 같은 값이 들어간다.
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">mysql&gt;insert into user (host, user, password) values('<I>주소</I>',
			<p class="TStep1"> '<I>아이디</I>', password('<I>비밀번호</I>'));</p>
			<p class="TStep1">mysql&gt;insert into db values('<I>주소</I>','<I>database이름</I>','<I>아</I>
	        <p class="TStep1"><I>이디</I>','y','y','y','y','y','y','y','y','y','y');</p></TD>
		</tr>
		</TABLE>
		<P>다음과 같이 데이터베이스에 접속할 호스트 주소를 localhost로 하고, 아이디는 'scott', 비밀번호는 'tiger'로 한다. 그리고 데이터베이스 이름은 앞에서 만들었던 'mydb'로 한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=100%>
			<p class="TStep1">mysql&gt;insert into user (host, user, password) values
		    <p class="TStep1">('localhost','scott', password('tiger'));
			<p class="TStep1">mysql&gt;insert into db
		    <p class="TStep1"> values('localhost','mydb','scott','y','y','y','y','y','y','y',
			<p class="TStep1">'y','y','y');
</TD>
		</tr>
		</TABLE>
		<P>다음 그림은 아이디와 패스워드를 설정한 결과화면이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV345.GIF" BORDER=0 WIDTH=475 HEIGHT=318 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>Ⅳ. 이상의 설정 내용을 MySQL이 새로 읽어들여 적용시키게 한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> <B>mysql&gt; flush privileges;</B></TD>
		</tr>
		</TABLE>
		<P>다음 그림은 flush 명령을 내린 결과화면이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV346.GIF" BORDER=0 WIDTH=461 HEIGHT=309 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>Ⅴ. 사용자가 추가되었는지 확인하기 위해 quit명령으로 MySQL을 나간 다음 새로 추가한 사용자 아이디와 패스워드로 다시 접속해 보자.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> <B>mysql&gt; quit</B>
			<p class="TStep1"> <B>C:\mysql\bin&gt; mysql -u scott -p</B></TD>
		</tr>
		</TABLE>
		<P>패스워드를 입력하고 엔터 키를 눌렀을 때 다음 그림과 같이 mysql 프롬프트가 나타나면 성공한 것이다.
		<P ALIGN=CENTER>
		<IMG SRC="images/FYXIV347.GIF" BORDER=0 WIDTH=463 HEIGHT=310 ALIGN=BOTTOM>
		<P>Ⅵ. mydb 데이터베이스를 사용하기 위해 use명령을 이용하여 mydb라는 데이터베이스로 이동한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=539>
			<TD WIDTH=100%>
			<p class="TStep1"> <B>mysql&gt; use mydb</B></TD>
		</tr>
		</TABLE>
		<P>다음 그림과 같이 데이터베이스가 변경되었다. 이제 MySQL 데이터베이스도 정상적으로 설치되었고, 사용자 아이디와 비밀번호도 만들어졌다.
		<P ALIGN=CENTER>  
		<IMG SRC="images/FYXIV348.GIF" BORDER=0 WIDTH=497 HEIGHT=332 HSPACE=3 VSPACE=3 ALIGN=BOTTOM>
		<P>다음은 SQL 질의문에 대해 설명하기로 한다.
		</ul>
		<P class="TSubmenu">10.1.3 SQL 문법의 개요
		<ul>
		<P>JDBC에 들어가기 전에 기본적으로 사용되는 SQL에 관한 기본적인 내용을 살펴보기로 한다. 사용하는 데이터베이스에 따라 약간의 차이가 있을 수 있으며 설명은 오라클과 MySQL을 기준으로 예를 들기로 한다. 
		<P>10.1.3.1 CREATE
		<P>테이블을 생성하는데 사용되며 사용방법은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=549>
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">CREATE TABLE <I>table_name</I> 
			<p class="TStep1">( <I>column_name</I> datatype(size) [DEFAULT <I>data</I>] ,
			<p class="TStep1">... );</TD>
		</tr>
		</TABLE>
		<P>CREATE문의 경우에는 오라클과 MySQL의 데이터 타입이 약간 다르므로 질의문이 다를 수도 있다.
		<P>질의문 사용 예 - 오라클
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P>1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">CREATE TABLE address_table ( 
			<p class="TStep2">id 		<B>NUMBER(4)</B>,
			<p class="TStep2">name		CHAR(20),
			<p class="TStep2">addr		CHAR(50)
			<p class="TStep1">);</TD>
		</tr>
		</TABLE>
		<P>질의문 사용 예 - MySQL
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P>1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">CREATE TABLE address_table ( 
			<p class="TStep1">id 		<B>INT(4)</B>,
			<p class="TStep1">name		CHAR(20),
			<p class="TStep1">addr		CHAR(50)
			<p class="TStep1">);</TD>
		</tr>
		</TABLE>
		<P>10.1.3.2 INSERT
		<P>테이블에 레코드를 삽입한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">INSERT INTO <I>table_name</I> 
			<p class="TStep2">( <I>column1, column2, column3...</I> ) 
			<p class="TStep1">	VALUES
			<p class="TStep2">( <I>값1, 값2, 값3...</I> );</TD>
		</tr>
		</TABLE>
		<P>질의문 사용 예
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P>1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">INSERT INTO address_table 
			<p class="TStep2">( id, name, addr )
			<p class="TStep1">VALUES
			<p class="TStep2">(  1, '홍길동', '서울' );</TD>
		</tr>
		</TABLE>
		<P>또는 
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P>1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">INSERT INTO address_table VALUES( 1, '홍길동', '서울' );</TD>
		</tr>
		</TABLE>
		<P>데이터가 문자열형일 경우 name과 addr의 데이터처럼 ''로 문자열을 감싸주어야 한다.
		<P>10.1.3.3 SELECT
		<P>테이블에서 조건을 만족하는 레코드를 찾을 때 사용한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=549>
			<TD WIDTH=2%>
			</td>
			<TD WIDTH=97%>
			<p class="TStep1">SELECT [DISTINCT] <I>column_name [, column_name, ...]</I>
			<p class="TStep1">FROM <I>table_name</I> 
			<p class="TStep1">[WHERE <I>조건식</I>]
			<p class="TStep1">[ORDER BY ASC|DESC];</TD>
		</tr>
		</TABLE>
		<P>Query문 사용 예
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P>1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">SELECT * FROM address_table WHERE id=2;</TD>
		</tr>
		</TABLE>
		<P>10.1.3.4 UPDATE
		<P>레코드값을 갱신할 때 사용한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">UPDATE <I>table_name</I> 
			<p class="TStep1">SET <I>column1 = 값1 [, column2 = 값2 ,...]</I>
			<p class="TStep1">[WHERE <I>조건식</I>] ;</TD>
		</tr>
		</TABLE>
		<P>Query문 사용 예
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=9%>
			<P>1:</TD>
			<TD WIDTH=90%>
			<p class="TStep1">UPDATE  address_table
			<p class="TStep1">	SET addr='NewYork' 
			<p class="TStep1">	WHERE id=1 AND name='홍길동';</TD>
		</tr>
		</TABLE>
		<P>10.1.3.5 DELETE
		<P>레코드를 삭제할 때 사용한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">DELETE FROM <I>table_name</I> [WHERE <I>조건식</I>];</TD>
		</tr>
		</TABLE>
		<P>Query문 사용 예
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">DELETE FROM address_table WHERE id=2;</TD>
		</tr>
		</TABLE>
		<P>10.1.3.6 DROP
		<P>테이블을 삭제할 때 사용된다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">DROP TABLE <I>table_name</I>;</TD>
		</tr>
		</TABLE>
		<P>Query문 사용 예
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			<P class="CNumber">1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">DROP TABLE customer;</TD>
			</tr>
			</TABLE>
			<P>10.1.3.7 COMMIT / ROLLBACK
			<P>COMMIT과 ROLLBACK은 트랜잭션처리에 사용하는데 이전에 지시한 명령을 확인시키기는데 COMMIT을 이용하고, 이전에 지시했던 명령을 취소시키는데 ROLLBACK을 이용한다. 참고로 MySQL에서는 트랜잭션처리를 할 수 없으므로 필요가 없지만 오라클에서는 반드시 COMMIT을 해 줘야 데이터가 변경된다. 사용 방법은 다음과 같다.
			<P>
			<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">COMMIT;</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">ROLLBACK;</TD>
		</tr>
		</TABLE>
		<P>지금까지 데이터베이스에서 사용될 몇가지 질의문에 대하여 알아보았는데 언급되지 않은 질의문에 대해서는 데이터베이스 관련 서적을 참고하길 바란다.
		</ul>
		<P class="TSubmenu">10.1.4 데이터 타입(오라클과 MySQL)
		<ul>
		<P>데이터베이스 버전에 따라 사용하는 데이터타입이 다르기 때문에 데이터 타입에 대한 정보는 별도로 제공받아야 한다. 다음은 오라클의 데이터 타입과 MySQL의 데이터 타입을 요약해 놓은 것이다.
		<P>10.1.4.1 오라클 기본데이터 타입
		<P>CHAR(size) : 길이가 size인 고정길이 문자값으로 최소길이는 1, 최대길이는 255이다.
		<P>VARCHAR2(size) : CHAR의 확장형으로 최대길이는 2000이다.
		<P>NUMBER : 38자리까지 유효한 부동소수점 숫자를 표현한다.
		<P>NUMBER(p,s) : p는 전체자리수이고, 소수점 이하자리수가 s인 NUMBER를 표현한다.
		<P>DATA : B.C.4712년 1월에서 A.D.4712년 12월 1일 사이의 일자와 시간을 표현한다.
		<P>LONG : 2G바이트까지의 가변길이 문자값으로, 테이블 당 한 개의 LONG열만 허용한다.
		<P>RAW, LONGRAW : 각각 VARCHAR2, LONG과 같지만 이진 데이터를 저장하는데 사용한다.
		<P>10.1.4.2 MySQL 기본 데이터 타입
		<P>CHAR(size) : 최대 1∼255사이의 길이를 갖는 문자값을 나타낸다.
		<P>TEXT : 최대 216의 길이를 갖는 문자열을 표현한다.
		<P>LONGTEXT : 최대 232의 길이를 갖는 문자열을 표현한다.
		<P>INT(size) : 길이가 size인 정수를 표현한다. 표현범위는 &plusmn;231까지 표현이 가능하다.
		<P>FLOAT : 24자리까지 유효한 부동소수점을 표현한다.
		<P>FLOAT(p,s) : 전체 자리수가 p이고, 소수점 이하 자리수가 s인 부동소수점을 나타낸다.
		<P>DOUBLE : 부동소수점을 나타낸다.
		<P>DATE : 1000-01-01부터 9999-12-31 까지 사이의 날짜를 표현한다.   
		</ul>
		<P class="TSubmenu">10.1.5 JDBC 환경설정
		<ul>
		<P>JDBC 환경에 앞서 JDK 환경설정이 이루어져야 한다. 우선 JDK를 설치했으면, 어떤 데이터베이스엔진(DBMS)을 사용할 것인지를 결정해야 한다. 현재 많이 사용되는 데이터베이스 엔진은 Oracle, Sybase, Informix 등이 있고 무료로 사용할 수 있는 제품은  mSQL, MySQL 등이 있다. 상용으로 쓰이는 엔진이라도 평가판은 무료로 이용할 수 있다. 각 회사의 홈페이지를 이용하면 쉽게 다운로드 받을 수 있다. 현재 JDBC는 java.sql 패키지의 이름으로 알 수 있듯이 관계형 엔진(R-DBMS)만 지원하고 OODB는 지원하지 않는다.
		<P>사용할 데이터베이스를 결정했으면 해당 소프트웨어를 내려받아 설치한다. 이때 해당 JDBC 드라이버 클래스도 함께 내려받아야 한다. 주로 .jar이나 .zip 형태로 클래스가 묶여 있다. 오라클은 8i와 9i버전의 경우 classes12.zip파일로 되어 있으며, MySQL은 버전에 따라 조금씩 다르지만 mm.mysql-X.X.X-bin.jar 파일로 되어있다. MySQL 드라이버는 파일명을  mysql.jar로 바꾸어 사용하는 것이 편리하다.
		<P>데이터베이스를 설치한 후에 해당 JDBC 드라이버 파일이 있는 디렉토리를 classpath에 설정하거나, JDK 1.2 이상의 환경에서는 JDK가 설치되어 있는 디렉토리 아래의 jre/lib/ext에 복사해도 된다. 하지만 컴파일시 클래스파일을 찾지 못하면 따로 classpath 옵션을 설정해주어야 한다. 이때 현재 폴더(.)와 JDK가 설치된 폴더도 같이 설정하는 것을 잊지말자.
		<P>오라클 데이터베이스 드라이버 사용
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">CLASSPATH=.;c:\j2sdk;C:\j2sdk\jre\lib\ext\classes12.zip</TD>
		</tr>
		</TABLE>
		<P>MySQL 데이터베이스 드라이버 사용
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">CLASSPATH=.;c:\j2sdk;C:\j2sdk\jre\lib\ext\mysql.jar</TD>
		</tr>
		</TABLE>
		<P>데이터베이스와 JDBC 드라이버 설치를 마치면 교재에서 예제로 사용할 테이블을 만들어야 한다.
		<P>오라클에서는 SQL*Plus를 이용하여 다음과 같은 SQL을 실행시켜 테이블을 만든다. 
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>/* address table sql - Oracle */ </TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">CREATE TABLE address_table ( 
			<p class="TStep1">id 		NUMBER(4),
			<p class="TStep1">name		CHAR(20),
			<p class="TStep1">addr		CHAR(50)
			<p class="TStep1">);</TD>
		</tr>
		</TABLE>
		<P>MySQL은 MySQL을 실행시키고 use명령으로 앞에서 만들었던 mydb 데이터베이스로 이동한 후 다음과 같은 질의문을 실행시켜 테이블을 만든다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>/* address table sql - MySQL */ </TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">CREATE TABLE address_table ( 
			<p class="TStep1">id 		INT(4),
			<p class="TStep1">name		CHAR(20),
			<p class="TStep1">addr		CHAR(50)
			<p class="TStep1">);</TD>
		</tr>
		</TABLE>
		<P>테이블이 생성되었으면 다음의 질의문으로 테이블에 데이터를 입력한다. 
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>/* data insert */ </TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">&nbsp;
			<P class="CNumber">2:
			<P class="CNumber">&nbsp;
			<P class="CNumber">3:
			<P class="CNumber">&nbsp;
			<P class="CNumber">4:
			<P class="CNumber">&nbsp;</TD>
			<TD WIDTH=92%>
			<p class="TStep1">INSERT INTO address_table (id, name, addr) 
			<p class="TStep1">VALUES(1, '홍길동', '서울시'); 
			<p class="TStep1">INSERT INTO address_table (id, name, addr) 
			<p class="TStep1">VALUES(2, '허달님', '광주시'); 
			<p class="TStep1">INSERT INTO address_table (id, name, addr) 
			<p class="TStep1">VALUES(3, '이순신', '서울시'); 
			<p class="TStep1">INSERT INTO address_table (id, name, addr) 
			<p class="TStep1">VALUES(4, '박승규', '전주시'); </TD>
		</tr>
		</TABLE>
		<P>자료 입력이 끝났으면 오라클의 경우에는 commit;를 입력하여 작업을 확인시킨다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>/* 작업 확인 */</TD></tr>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:</TD>
			<TD WIDTH=92%>
			<p class="TStep1">COMMIT;</TD>
		</tr>
		</TABLE>
		<P>MySQL에서는 위의 COMMIT 질의문이 필요 없다.
		<P>다음 프로그램은 앞에서 만든 데이터베이스에 연결하여 원하는 결과를 얻는 예를 보인 것이다. 수정할 부분이 있으면 자신의 환경에 맞게 수정한 후 컴파일 한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%>
			</td>
			<TD WIDTH=92%>
			<P>SimpleJDBC.java </TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:
			<P class="CNumber">10:
			<P class="CNumber">11:
			<P class="CNumber">&nbsp;
			<P class="CNumber">&nbsp;
			<P class="CNumber">12:
			<P class="CNumber">&nbsp;
			<P class="CNumber">13:
			<P class="CNumber">14:
			<P class="CNumber">15:
			<P class="CNumber">16:
			<P class="CNumber">17:
			<P class="CNumber">18:
			<P class="CNumber">19:
			<P class="CNumber">20:
			<P class="CNumber">21:
			<P class="CNumber">22:
			<P class="CNumber">23:
			<P class="CNumber">24:
			<P class="CNumber">25:
			<P class="CNumber">26:

</TD>
			<TD WIDTH=92%>
			<P class="CStep1">// 수정할 사항 (URL) 
			<P class="CStep1">// - &quot;127.0.0.1&quot; 은 데이터베이스가 설치된 Server의 주소
			<P class="CStep1">// - &quot;orcl&quot;은 Oracle DB의 SID 즉 시스템 id
			<P class="CStep1">// - &quot;mydb&quot;는 MySQL에서 사용자가 만든 database
			<P class="CStep1">// - &quot;scott&quot;,&quot;tiger&quot;는 DB 사용자 id와 password
			<P class="CStep1">import java.sql.*; 
			<P class="CStep1">public class SimpleJDBC { 
			<P class="CStep2">public static void main(String[] args) throws Exception{ 
			<P class="CStep2"><B>Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);</B>
			<P class="CStep2">//Class.forName(&quot;org.gjt.mm.mysql.Driver&quot;); //MySQL
			<P class="CStep2"><B>Connection conn = DriverManager.getConnection(</B>
			<P class="CStep2"><B>&quot;jdbc:oracle:thin:@127.0.0.1:1521:orcl&quot;, &quot;scott&quot;,</B> 
			<P class="CStep2"><B>&quot;tiger&quot; );</B>
			<P class="CStep2">//Connection conn = DriverManager.getConnection(
			<P class="CStep2">&quot;jdbc:mysql://127.0.0.1:3306/mydb
			<P class="CStep2">&quot;, &quot;scott&quot;, &quot;tiger&quot; ); 
			<P class="CStep2"><B>Statement stmt = conn.createStatement(); </B>
			<P class="CStep2"><B>String sql = &quot;SELECT id, name, addr FROM address_table&quot;;</B>
			<P class="CStep2">//String sql = &quot;SELECT * FROM address_table&quot;;
			<P class="CStep2"><B>ResultSet rset = stmt.executeQuery(sql);</B> 
			<P class="CStep2">System.out.println(&quot;id \t name \t addr&quot;);
			<P class="CStep2">while(<B>rset.next()</B>) { 
			<P class="CStep3">System.out.print(<B>rset.getInt(1)</B>); 
			<P class="CStep3">System.out.print(&quot;\t&quot; + <B>rset.getString(2)</B>); 
			<P class="CStep3">System.out.println(&quot;\t&quot; + <B>rset.getString(3)</B>); 
			<P class="CStep2">} 
			<P class="CStep2"><B>conn.close(); </B>
			<P class="CStep2">} 
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>앞의 프로그램을 실행시켰을 때에 Exception이 발생하지 않고 정상적으로 수행되면 JDBC 개발환경 및 실행환경을 잘 구축한 것이다. Exception이 발생하더라도 오류 메시지를 보고 해결하기 바란다. 프로그램에 대한 자세한 설명은 뒤에서 하기로 한다. 참고로 이 예에서는 13번째 줄과 16번째 줄에서 보면 드라이버로 오라클을 사용했는데, 오라클 데이터베이스의 시스템 아이디(SID)는 orcl로 하였다. 데이터베이스가 MySQL일 경우에는 13번째 줄과 16번째 줄을 각각 14번째 줄과 17번째 줄로 바꾸어 실행해야 한다.
		</ul></td>
    </tr>
	</table>
</body>
</html>	