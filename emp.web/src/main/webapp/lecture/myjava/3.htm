<html>

<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>3.1 은닉(Encapsulation) </title>
<meta name="generator" content="Namo WebEditor v5.0">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<P>&nbsp;<P>
<IMG SRC="file:///C|/지빠귀/FYXIV089.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.1  </FONT><FONT FACE="바탕">은닉</FONT><FONT FACE="Bookman Old Style">(Encapsulation)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">은닉은 사용자에게 상세한 내부 구현을 숨기고 필요한 부분만을 보이게 하는 것이다. 은닉을 통해 클래스를 구성하는 필드 중에서 외부로 노출되어서는 안될 필드에 대해  불법적인 접근을 막아 클래스 내부의 정보를 보호하고, 클래스 자체가 훼손되는 것을 막을 수 있다. 따라서, 이러한 내부 데이터에 접근하기 위해 클래스 사용자는 공개된 메소드를 통해서만 내부 데이터에 접근하게 할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 예를 보기로 하자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=148>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyDate {</FONT>
<P>	<FONT FACE="Courier New">public int day;</FONT>
<P>	<FONT FACE="Courier New">public int month;</FONT>
<P>	<FONT FACE="Courier New">public int year;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestMyDate {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">MyDate myBirth = new MyDate();</FONT>
<P>		<B><FONT FACE="Courier New">myBirth.day = 32;</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Input day is &quot; + myBirth.day);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV090.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV091.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">My Day is 32</FONT></B>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myBirth.day = 32;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">TestMyDate클래스에서 MyDate클래스의 멤버를 참조하는 부분이다. 실제로 날짜 값에는 32라는 값이 존재하지 않지만 여기에서는 아무 제한이 없이 입력이 된다. 이러한 단점을 없애기 위해 MyDate클래스를 다음과 같이 수정한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=124>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class MyDate {</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> int day;</FONT>
<P>	<FONT FACE="Courier New">private int month;</FONT>
<P>	<FONT FACE="Courier New">private int year;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyDate.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">public void setDay(int d)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">if( (d&lt;1) || (d&gt;31) ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">잘못된</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">날짜입력입니다</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else {</FONT>
<P>			<FONT FACE="Courier New">day = d;</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public int getDay()</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">return day;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> int day;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">변수선언이 private로 되어있다. private 접근 제한자는 해당 멤버의 참조 범위를 자신의 클래스 내로 한정시키므로 다른 클래스에서 이 변수를 직접 참조할 수 없다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">...</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<B><FONT FACE="Courier New">public void setDay(int d)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">...</FONT>
<P>	<B><FONT FACE="Courier New">public int getDay()</FONT></B><FONT FACE="Courier New"> {</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 부분은 변수 day에 값을 입력하기 위해 선언한 메소드이고, 12번째 줄은 day의 값을 알기 위한 메소드이다. 이처럼 특정 변수 값을 알기 위해 메소드를 이용하는데, 5번째 줄과 12번째 줄에서 선언된 메소드를 접근자(일반적으로 </FONT><I><FONT FACE="바탕">getter</FONT></I><FONT FACE="바탕">(accessor)와 </FONT><I><FONT FACE="바탕">setter</FONT></I><FONT FACE="바탕">(mutator)로 나뉘어진다)라고 부르기도 한다. 이처럼 접근이 제한된 변수에 접근하려면 공개된 메소드를 이용해야 한다.</FONT>
<P><FONT FACE="바탕">접근자를 이용하면 6번째 줄에서처럼 메소드 내에 접근권한 여부를 체크할 수 있는 루틴을 넣을 수 있기 때문에 중요한 데이터나 로직을 숨길 수도 있고, 이를 제어할 수 도 있다. 또 클래스의 유지보수를 쉽게 할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestMyDate.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestMyDate {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">MyDate myBirth = new MyDate();</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">myBirth.day = 32; //Error</FONT>
<P>		<B><FONT FACE="Courier New">myBirth.setDay(32);</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Input day is &quot; + </FONT><B><FONT FACE="Courier New">myBirth.getDay()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV092.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="file:///C|/지빠귀/FYXIV093.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">잘못된</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">날짜입력입니다</FONT></B>
<P>		<B><FONT FACE="Courier New">Input day is 0</FONT></B>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myBirth.day = 32; //Error</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">private로 선언된 day의 값을 직접 변경하려고 했기 때문에 컴파일시 오류가 발생한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=48>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">myBirth.</FONT><B><FONT FACE="Courier New">setDay(32)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Input day is &quot; + myBirth.</FONT><B><FONT FACE="Courier New">getDay()</FONT></B><FONT FACE="Courier New">);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">day의 값을 변경하거나 얻어내기 위해서 접근자를 사용한다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV094.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.2  </FONT><FONT FACE="바탕">상속</FONT><FONT FACE="Bookman Old Style">(Inheritance)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">객체지향 프로그래밍에서 상속은 기존의 클래스를 확장하여 새로운 클래스를 이끌어내는 것을 의미한다. UML(Unified Modeling Language) 표기법으로는 &quot;is a&quot; 관계라고 한다. 상속은 불필요한 코드를 재 작성하는 것을 없애고, 기존의 코드를 재사용하고 쉽게 확장함으로써 시간과 노력을 줄일 수 있다.</FONT>
<P><FONT FACE="바탕">상속은 단일 상속만 지원하고, 클래스의 멤버(변수와 메소드)에서만 이루어지며, 생성자는 상속되지 않는다.</FONT>
<P><FONT FACE="바탕">어떤 클래스가 다른 클래스로부터 상속을 받아 만들어지면 새롭게 만들어진 클래스는 자손(child 또는 sub)클래스가 되고, 변수와 메소드를 물려준 클래스는 부모(parent 또는 super)클래스가 된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.1 </FONT><FONT FACE="바탕">상속</FONT><FONT FACE="HY부활M"> - Problem</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 학교 인적자원 관리 프로그램에서 사용되는 클래들이다. 
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<P>	<FONT FACE="Courier New">public String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + age + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<P>	<FONT FACE="Courier New">public String subject;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + age + &quot;\t</FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: &quot; + subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<P>	<FONT FACE="Courier New">public String departmen;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New"> : &quot; + age + &quot;\t</FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: &quot; + department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">앞의 4개의 클래스는 모두 비슷한 면이 있다. 사실 Student도 Person이고, Teacher도 Person이며 Employee도 Person이다. 어떤 경우에는 클래스끼리 서로 중복되는 자료가 있을 수 있다. 여기서는 모두 Person클래스가 가지고 있는 변수인 name과 age, 그리고 getDetails() 메소드를 가지고 있다. 이처럼 서로 중복된 자료를 공유해서 사용하기 위한 방법이 상속의 개념이다.</FONT>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.2 </FONT><FONT FACE="바탕">상속</FONT><FONT FACE="HY부활M"> - Solution</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 클래스를 상속이라는 개념을 적용하여 재 작성한 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student </FONT><B><FONT FACE="Courier New">extends Person</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">public String studentId;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher </FONT><B><FONT FACE="Courier New">extends Person</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">public String subject;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee </FONT><B><FONT FACE="Courier New">extends Person</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">public String department;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">상속받을 때 사용하는 키워드는 extends이다. Student클래스가 Person클래스를 상속받으면 Person클래스가 가지고 있는 것을 Student클래스가 갖게 된다. 이때 Person클래스를 부모클래스라 부르고, Student클래스를 자손클래스라 부른다. 이 같은 상속 관계를 &quot;is a relation&quot;이라고 하는데 &quot;Student is a Person&quot;이라는 뜻이다. 상속은 부모의 모든 것을 계승하기 때문에 자손은 부모와 같다고 해도 무리가 아니다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 위의 상속이 제대로 이루어 졌는지를 테스트하는 프로그램이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=651>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInheritance.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT>
<P><FONT FACE="Courier New">27:</FONT>
<P><FONT FACE="Courier New">28:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInheritance {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<FONT FACE="Courier New">Person p = new Person();</FONT>
<P>		<FONT FACE="Courier New">p.name = &quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">p.age = 25;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( p.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student();</FONT>
<P>		<FONT FACE="Courier New">s.name = &quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">s.age = 30;</FONT>
<P>		<FONT FACE="Courier New">s.studentId = &quot;20001234&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Teacher t = new Teacher();</FONT>
<P>		<FONT FACE="Courier New">t.name = &quot;</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">t.age = 40;</FONT>
<P>		<FONT FACE="Courier New">t.subject = &quot;</FONT><FONT FACE="바탕">자바프로그래밍</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( t.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Employee e = new Employee();</FONT>
<P>		<FONT FACE="Courier New">e.name = &quot;</FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">e.age = 30;</FONT>
<P>		<FONT FACE="Courier New">e.department = &quot;</FONT><FONT FACE="바탕">교무처</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( e.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV095.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV096.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 45</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 40</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30</FONT></B>
<BR>
<P><FONT FACE="바탕">상속에서 기억해야 할 점은 &quot;생성자(Constructor)는 상속되지 않는다&quot;는 점과 &quot;다중상속이 아닌 단일상속이다&quot;는 것이다. 즉, 여러 부모클래스로부터 상속받는 것을 지원하지 않는다. 다중상속은 장점도 있지만 코드를 굉장히 모호하게 만들 수 있는 단점이 있다. 따라서 다중상속의 단점을 없애기 위해 단일상속만 지원하고, 다중상속의 장점을 살리기 위해서 인터페이스라는 것을 만들었다. 나중에 배우겠지만 인터페이스를 사용하면 다중상속의 장점을 충분히 살릴 수 있다. 
</FONT><P><FONT FACE="바탕">extends 구문이 없으면 컴파일러는 모든 클래스의 최상위 클래스인 Object클래스를 상속받도록 &quot;extends Object&quot;구문을 삽입한다. 앞의 Person클래스는 사실상 다음과 같이 선언된 것과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person </FONT><B><FONT FACE="Courier New">extends Object</FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">...</FONT>	
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.3 </FONT><FONT FACE="바탕">재정의</FONT><FONT FACE="HY부활M">(Overriding)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">재정의란 부모클래스로부터 상속받은 메소드를 자식클래스에서 행위를 바꾸거나 보완하기 위해 다시 정의해서 사용하는 것을 말한다. 이는 부모클래스에서 특별한 용도로 사용하던 메소드를 자식클래스에서는 그 용도를 달리하고자할 때 사용한다.</FONT>
<P><FONT FACE="바탕">앞의 예에서 Student, Teacher, Employee클래스는 모두 Person클래스를 상속받았으므로 getDetails()메소드의 경우 Person클래스에서 정의된 것을 사용해야 하는데, Person클래스에 있는 getDetails()메소드를 Student, Teacher, Employee클래스에서 다른 용도로 사용하고 싶으면 다음과 같이 재정의 한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 Student, Teacher, Employee클래스에서 getDetails()메소드를 재 정의한 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=209>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">protected String name;</FONT>
<P>	<FONT FACE="Courier New">protected int age;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String studentID;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String subject;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age + &quot;\t</FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: &quot; + subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String department;</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public String getDetails() {</FONT></B>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New"> : &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age + &quot;\t</FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: &quot; + department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 앞의 상속에서 사용되었던 예제를 복사해와 실행시켜보면 그 결과를 쉽게 확인할 수 있다. 앞의 상속 예에서는 getDetails()메소드를 호출했을 때 모두 name과 age필드만 출력되었으나 재 정의된 클래스를 가지고 수행시키면 각각의 클래스가 가지고있는 필드가 출력된 것을 확인할 수 있다.  
</FONT><BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=408>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestOverriding.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestOverriding {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Person p = new Person();</FONT>
<P>		<FONT FACE="Courier New">p.name = &quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">p.age = 25;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( p.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student();</FONT>
<P>		<FONT FACE="Courier New">s.name = &quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">s.age = 30;</FONT>
<P>		<FONT FACE="Courier New">s.studentID = &quot;20001234&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Teacher t = new Teacher();</FONT>
<P>		<FONT FACE="Courier New">t.name = &quot;</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">t.age = 40;</FONT>
<P>		<FONT FACE="Courier New">t.subject = &quot;</FONT><FONT FACE="바탕">자바프로그래밍</FONT><FONT FACE="Courier New">&quot;;</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestOverriding.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT>
<P><FONT FACE="Courier New">25:</FONT>
<P><FONT FACE="Courier New">26:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">System.out.println( t.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Employee e = new Employee();</FONT>
<P>		<FONT FACE="Courier New">e.name = &quot;</FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">e.age = 30;</FONT>
<P>		<FONT FACE="Courier New">e.department = &quot;</FONT><FONT FACE="바탕">교무처</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( e.</FONT><B><FONT FACE="Courier New">getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV098.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV099.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 45       </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 10001234</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 40       </FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">자바프로그래밍</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30       </FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">교무처</FONT></B>
<BR>
<P><FONT FACE="바탕">이렇게 부모클래스로부터 상속받은 것을 재 정의해서 사용할 수 있다. 이를 메소드 재정의(method overriding)라 부르고, 메소드를 재 정의할 때는 다음과 같은 규칙에 따른다.</FONT>
<P>  <FONT FACE="돋움">∘ 상속을 전제로 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 반드시 반환타입이 같아야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 메소드 이름이 같아야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자값이 정확히 일치해야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 접근 제한자는 같거나 더 제한이 없어야 한다.</FONT>
<BR>
<P><FONT FACE="바탕">메소드 중복(overloading)과 혼동하면 안 된다.</FONT>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.2.4 super</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">클래스 안에서 부모클래스의 멤버를 참조하기 위해 사용된다. 부모클래스의 멤버 변수가 private로 선언되었을 경우, 부모클래스의 멤버변수를 참조하려면 메소드를 이용해야 하는데 이때 자식클래스에서 메소드가 재 정의되었을 경우 super를 이용하여 참조할 수 있다.</FONT>
<P><FONT FACE="바탕">다음의 예를 보자.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<B><FONT FACE="Courier New">protected</FONT></B><FONT FACE="Courier New"> String name;</FONT>
<P>	<B><FONT FACE="Courier New">protected</FONT></B><FONT FACE="Courier New"> int age;</FONT>
<BR></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java(</FONT><FONT FACE="바탕">계속</FONT><FONT FACE="HY타자B">)</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<B><FONT FACE="Courier New">protected </FONT></B><FONT FACE="Courier New">String studentID;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return </FONT><B><FONT FACE="Courier New">super.getDetails()</FONT></B><FONT FACE="Courier New"> + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 앞에서 보인 부모클래스의 멤버를 참조하는 클래스를 테스트하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestSuper1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestSuper1 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student();</FONT>
<P>		<FONT FACE="Courier New">s.name = &quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;;</FONT>
<P>		<FONT FACE="Courier New">s.age = 30;</FONT>
<P>		<FONT FACE="Courier New">s.studentID = &quot;20001234&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV100.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV101.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 10001234</FONT></B>
<BR>
<P><FONT FACE="바탕">앞의 예에서처럼 super를 이용하면 부모클래스의 메소드를 호출하여 name과 age변수에 접근할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 예는 멤버 변수가 모두 private으로 되어있는데, 이 때는 변수 값을 설정할 때 setXxx 메소드를 이용하거나 생성자를 이용해야 한다. 생성자는 상속이 되지 않으므로 객체를 생성하면서 멤버 변수를 초기화하려면 다음과 같은 방법을 이용한다. 
</FONT><BR>
<BR>
<BR>
<P><FONT FACE="바탕">이 프로그램은 자식클래스의 생성자로 부모클래스의 멤버를 초기화하는 방법을 보여주는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> String name;</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<B><FONT FACE="Courier New">private</FONT></B><FONT FACE="Courier New"> String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<B><FONT FACE="Courier New">super(init_name, init_age);</FONT></B>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 앞에서 보인 부모클래스의 생성자를 참조하는 클래스를 테스트하는 예이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=187>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestSuper2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestSuper2 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV102.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="file:///C|/지빠귀/FYXIV103.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 10001234</FONT></B>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV104.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.3   </FONT><FONT FACE="바탕">접근</FONT><FONT FACE="Bookman Old Style"> </FONT><FONT FACE="바탕">제한자</FONT><FONT FACE="Bookman Old Style">(Access Modifier)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">접근 제한자는 클래스와 클래스 변수, 메소드, 생성자 등의 접근을 제어할 수 있는 제한자로서 종류에는 public, private, protected와 접근 제한자를 붙이지 않았을 경우에 해당하는 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">가 있다.</FONT>
<BR>
<P><FONT FACE="바탕">접근 제한자를 표로 만들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=573 HEIGHT=144>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Modifier</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Same Class</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Same Package</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Subclass</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Universe</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">public</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">protected</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER> </TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><I><FONT FACE="바탕">friendly</FONT></I></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER> </TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER> </TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">private</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=21%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Yes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=24%>
<P ALIGN=CENTER> </TD>
<TD VALIGN=MIDDLE WIDTH=17%>
<P ALIGN=CENTER> </TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER> </TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.1 public</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">public은 외부에서 아무런 제한 없이 호출 가능하도록 해주며, 클래스나 메소드, 변수를 정의할 때 사용한다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=115>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package pac;</FONT></B>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<B><FONT FACE="Courier New">public</FONT></B>		<B><FONT FACE="Courier New">int num1 = 10;</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위의 예에서 클래스 Super나 변수 num1은 모두 public으로 선언되었다. 이는 어디서나 사용할 수 있음을 나타내는데 예를 들면 다음과 같다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=176>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print(){</FONT>
<P>		<B><FONT FACE="Courier New">Super s = new Super();</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num1 = &quot; + </FONT><B><FONT FACE="Courier New">s.num1</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위의 Sub클래스는 Super클래스 및 num1 변수를 패키지가 달라도 참조할 수 있다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.2 protected</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">protected는 같은 패키지 안에 있는 모든 클래스와 그 하위 클래스까지만 접근 가능하다. protected는 자신의 서브클래스가 다른 패키지에 있을 경우, 이 서브클래스는 부모의 protected로 선언된 변수를 접근할 수 있다는 점이 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">와의 차이점이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=101>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package pac;</FONT></B>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<B><FONT FACE="Courier New">protected</FONT></B>		<B><FONT FACE="Courier New">int num2 = 20;</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=157>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub </FONT><B><FONT FACE="Courier New">extends Super</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num2 = &quot; + </FONT><B><FONT FACE="Courier New">num2</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 예에서처럼 num2는 패키지가 다르더라도 상속받은 경우 참조가 가능하다. 2개의 패키지가 있다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.3 </FONT><I><FONT FACE="HY부활M">package friendly</FONT></I></SPAN></FONT>
<BR>
<P><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">는 자바에서 제공하는 키워드는 아니며, 자바에서 클래스, 변수, 메소드 등의 앞에 아무 것도 명시하지 않았을 때 기본으로 지정되는 접근 제한 모드이다. 그래서 간혹 default라고 부르기도 한다. 같은 패키지 안에 있는 클래스에만 접근이 가능하므로 package friendly 또는 줄여서 friendly라고도 부른다. 하위 클래스라도 같은 패키지 안에 없으면 접근이 허용되지 않는다. 
</FONT><P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=101>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">package pac;</FONT></B>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<B><FONT FACE="Courier New">int num3 = 30;</FONT></B>	<FONT FACE="Courier New">/* </FONT><I><FONT FACE="Courier New">friendly </FONT></I><FONT FACE="Courier New">*/</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=157>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub </FONT><B><FONT FACE="Courier New">extends Super</FONT></B><FONT FACE="Courier New"> {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num3 = &quot; + </FONT><B><FONT FACE="Courier New">num3</FONT></B><FONT FACE="Courier New">); //Error</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 예제에서는 오류가 발생하는데 그 이유는 num3의 경우 접근범위가 동일 패키지에만 적용되기 때문이다. 패키지를 벗어나 참조할 경우에는 상속을 받았더라도 참조가 불가능하다. 이처럼 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">가 protected와 다른 점은 protected는 자기의 서브클래스가 다른 패키지에 있어도 서브클래스는 부모의 protected로 선언된 변수를 access할 수 있지만 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">는 서브클래스라 해도 패키지가 다르면 접근할 수 없다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.3.4 private</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">private는 접근제한이 가장 많은 제한자로서 소속된 클래스나 변수 또는 메소드의 범위 안에서만 접근이 가능하다. 이는 메소드나 변수 정의시 사용가능하고, 클래스에는 사용되지 않는다. (단, 내부 클래스일 경우에서는 사용이 가능하다)</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=181>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Sub {</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">private</FONT></B>			<B><FONT FACE="Courier New">int num4 = 40;</FONT></B>
<BR>
<P>	<FONT FACE="Courier New">public void print(){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Sub num5 = &quot; + </FONT><B><FONT FACE="Courier New">num4</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 예에서 변수 num5는 private로 선언되었으므로 자신의 클래스 안에서만 접근할 수 있고, 다음 예처럼 다른 클래스에서는 참조할 수 없다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=137>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Other {</FONT>
<P>	<FONT FACE="Courier New">public void doSomething() {</FONT>
<P>		<FONT FACE="Courier New">Sub s = new Sub();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(</FONT><B><FONT FACE="Courier New">s.num4</FONT></B><FONT FACE="Courier New">); //Error</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">이 프로그램은 4번째 줄에서 오류가 발생한다. private는 클래스가 같은 패키지 내에 존재하더라도 다른 클래스인 Other에서 Sub클래스의 num4를 access할 수 없다. 
</FONT><P><FONT FACE="바탕">private가 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">와 다른 점은, 같은 </FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">로 선언된 변수는 패키지 안의 어디서든지 access가 가능하다는 것이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 접근 제어 예제를 모두 보여주고 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=260>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">pac/Super.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">package pac;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Super {</FONT>
<P>	<FONT FACE="Courier New">public</FONT>			<FONT FACE="Courier New">int num1 = 10;</FONT>
<P>	<FONT FACE="Courier New">protected</FONT>		<FONT FACE="Courier New">int num2 = 20;</FONT>
<P>	<FONT FACE="Courier New">/*friendly*/</FONT>	<FONT FACE="Courier New">int num3 = 30;</FONT>
<P>	<FONT FACE="Courier New">private</FONT>			<FONT FACE="Courier New">int num4 = 40;</FONT>
<P>	
<P>	<FONT FACE="Courier New">public int getNum4(){</FONT>
<P>		<FONT FACE="Courier New">return num4;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=316>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Sub.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class Sub extends Super{</FONT>
<P>	
<P>	<FONT FACE="Courier New">private</FONT>			<FONT FACE="Courier New">int num5 = 50;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public void print(){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num1 = &quot; + num1);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num2 = &quot; + num2);</FONT>		
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num3 = &quot; + num3); //Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num4 = &quot; + num4); //Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Super num4 = &quot; + getNum4());</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Sub num5 = &quot; + num5);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=372>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestModifier.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">import pac.*;</FONT>
<BR>
<P><FONT FACE="Courier New">public class TestModifier{</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;***** Super </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****&quot;);</FONT>
<P>		<FONT FACE="Courier New">Super sup = new Super();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;num1 = &quot; + sup.num1 + </FONT>
<P><FONT FACE="Courier New">//</FONT>							<FONT FACE="Courier New">&quot;\tnum2 = &quot; + sup.num2 + </FONT>
<P><FONT FACE="Courier New">//</FONT>							<FONT FACE="Courier New">&quot;\tnum3 = &quot; + sup.num3 + </FONT>
<P>							<FONT FACE="Courier New">&quot;\tnum4 = &quot; + sup.getNum4());</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;\n***** Sub </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****&quot;);</FONT>
<P>		<FONT FACE="Courier New">Sub sub = new Sub();</FONT>
<P>		<FONT FACE="Courier New">sub.print();</FONT>
<BR>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV105.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="file:///C|/지빠귀/FYXIV106.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">***** Super </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****</FONT></B>
<P>		<B><FONT FACE="Courier New">num1 = 10       num4 = 40</FONT></B>
<P>		
<P>		<B><FONT FACE="Courier New">***** Sub </FONT><FONT FACE="바탕">참조</FONT><FONT FACE="Courier New"> *****</FONT></B>
<P>		<B><FONT FACE="Courier New">Super num1 = 10</FONT></B>
<P>		<B><FONT FACE="Courier New">Super num2 = 20</FONT></B>
<P>		<B><FONT FACE="Courier New">Super num4 = 40</FONT></B>
<P>		<B><FONT FACE="Courier New">Sub num5 = 50</FONT></B>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV107.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.4   </FONT><FONT FACE="바탕">다형성</FONT><FONT FACE="Bookman Old Style">(polymorphism)</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다형성은 임의의 객체가 다른 객체를 참조하는 것을 말한다. 다형성은 상속을 전제조건으로 하는데, 상속을 통해서 생성된 클래스는 계층 내에서는 동일한 메시지라도 어떤 객체에게 전달되느냐에 따라 다양한 동작이 발생한다. 다형성이란 &quot;poly(多)&quot;와 &quot;morph(形)&quot;가 합쳐진 합성어로 &quot;여러 형태를 가진다&quot;는 뜻이다. 
</FONT><P><FONT FACE="바탕">이와 같은 다형성은 확장이 가능한 시스템을 설계할 수 있도록 해주는데, 프로그램의 개발 시점에서는 존재하지 않았던 클래스를 기존 시스템의 수정 없이 시스템에 추가되도록 해 준다. 이는 모든 상속의 계층구조에서 서브클래스의 객체를 슈퍼클래스의 참조로 처리함으로써 가능하다.</FONT>
<P> 
<P><FONT FACE="바탕">앞의 Person과 그 하위 클래스에서 예를 만들어 보도록 하자.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=164>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestPolymorphism {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Person p = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 29);</FONT>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;10007890&quot;);</FONT>
<P>		<B><FONT FACE="Courier New">Person ps = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<B><FONT FACE="Courier New">Person ps = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT></B></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">5번째 줄에서 객체를 선언한 부분이 좀 어색해 보이는데 원래대로라면 3번째 줄이나 4번째 줄처럼 나타내야 올바른 표현이다.</FONT>
<P><FONT FACE="바탕">한가지 중요한 점은 앞에서 다형성은 임의의 객체가 다른 객체를 참조하는 것이라고 하였는데 상속을 전제로 한다고 하였다. 다시 말하면 부모를 참조하는 reference변수는 자손 객체도 참조할 수 있음을 나타낸다. 따라서 5번째 줄에서 객체 ps는 부모와 자손 모두 참조할 수 있다. 이러한 점이 자바에서 다형성 구현을 가능하게 해주는 기능이다.</FONT>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.1 Virtual Method Invocation</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">우선 다음의 예를 먼저 살펴보자. 앞의 Person클래스와 Student클래스를 다시 보인 프로그램이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=323>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">private String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() +</FONT>
<P>			<FONT FACE="Courier New">&quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestPolymorphism.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestPolymorphism {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<BR>
<P>		<B><FONT FACE="Courier New">Person ps = new Student(&quot;</FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">System.out.println( </FONT><B><FONT FACE="Courier New">ps.getDetails()</FONT></B><FONT FACE="Courier New"> );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV108.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="file:///C|/지빠귀/FYXIV109.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이순신</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001234</FONT></B>
<BR>
<BR>
<P><FONT FACE="바탕">위의 예는 다형성에서의 메소드 호출을 보여주고 있다. 7번째 줄에서 호출하고 있는 getDetails() 메소드는 Person클래스의 메소드를 Student클래스에서 재정의 하고 있다. 객체 ps는 Person 클래스를 이용하여 선언했지만 실제로 만들어진 것은 Student 객체이다. 따라서, 실제 호출되는 메소드는 Person의 것이 아니고 Student의 것이다. 결국 Student의 getDetails() 메소드가 호출된다. 즉, 객체 p가 참조하는 getDetails() 메소드는 컴파일시에는 Person의 것을, 실행시에는 Student의 것을 참조한다. 이를 보고 Virtual method invocation이라 한다.</FONT>
<BR>
<P><FONT FACE="바탕">여기서 주의할 점은 부모의 참조변수가 자손을 참조한다고 해서 그 변수가 자손의 모든 것을 호출할 수 있는 것은 아니다. 부모의 참조변수가 자손을 참조할 때는 부모로부터 상속받은 것이나 부모의 메소드를 재정의한 것만 가능하다. 따라서, 부모로부터 상속받지 않거나, 재 정의되지 않은 것을 호출할 때는 오류가 발생하게 된다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.2 </FONT><FONT FACE="바탕">이종모음</FONT><FONT FACE="HY부활M">(Heterogeneous Collection)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다형성의 개념은 약간 복잡하지만 강력한 기능을 가지고 있다. 따라서, 다형성에 대해 좀더 자세히 알아보도록 하자.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=320>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=293>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">private String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=293>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Teacher.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Teacher extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String subject;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Teacher(String init_name, int init_age, String init_subject) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">subject = init_subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: &quot; + subject;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=293>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Employee.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Employee extends Person{</FONT>
<P>	<FONT FACE="Courier New">protected String department;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Employee(String init_name, int init_age, String init_department) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">department = init_department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: &quot; + department;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">앞의 예제를 보면 Student, Teacher, Employee 클래스가 Person 클래스를 상속받았는데, 다형성을 배열에 적용하면 다음 프로그램과 같다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=342>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestHetero.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestHetero {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<B><FONT FACE="Courier New">Person[] p = new Person[4];</FONT></B>
<BR>
<P>		<B><FONT FACE="Courier New">p[0] = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 30);</FONT></B>
<P>		<B><FONT FACE="Courier New">p[1] = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT></B>
<P>		<B><FONT FACE="Courier New">p[2] = new Teacher(&quot;</FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">&quot;, 40, &quot;JAVA&quot;);</FONT></B>
<P>		<B><FONT FACE="Courier New">p[3] = new Employee(&quot;</FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">&quot;, 30, &quot;</FONT><FONT FACE="바탕">교무처</FONT><FONT FACE="Courier New">&quot;);</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;p.length; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println( p[i].getDetails() );</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV110.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001233</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">박승규</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 40        </FONT><FONT FACE="바탕">과목</FONT><FONT FACE="Courier New">: JAVA</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">이국</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">부서</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">교무처</FONT></B>
<BR>
<BR>
<P><FONT FACE="바탕">앞의 예를 보고 이상한 점을 발견했을 것이다. 배열은 같은 유형의 자료만 저장할 수 있는 것으로 알고 있었지만, 이 예는 다른 유형의 객체들이 하나의 배열에 저장되어 있다. 이러한 기능이 바로 부모의 참조 변수는 자손도 참조할 수 있다는 다형성의 원리이다. 이와 같이 배열에 다형성이 적용되어 서로 다른 자료형을 저장하는 것을 이종모음이라고 한다.</FONT>
<BR>
<P><FONT FACE="바탕">자바의 모든 객체는 Object라는 클래스를 자동 상속받게 되므로 다음과 같이 배열을 Object 타입으로 생성하면 자바의 모든 객체를 참조할 수도 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=340>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestHetero2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class TestHetero2 {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<B><FONT FACE="Courier New">Object arr[] = new Object[5];</FONT></B>
<BR>
<P>		<FONT FACE="Courier New">arr[0] = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 30);</FONT>
<P>		<FONT FACE="Courier New">arr[1] = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT>
<P>		<FONT FACE="Courier New">arr[2] = new Integer(100);</FONT>
<P>		<FONT FACE="Courier New">arr[3] = new String(&quot;Hello&quot;);</FONT>
<P>		<FONT FACE="Courier New">arr[4] = new java.util.Date();</FONT>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;arr.length; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println( arr[i] );</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV111.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV112.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Person@26b249</FONT></B>
<P>		<B><FONT FACE="Courier New">Student@82f0db</FONT></B>
<P>		<B><FONT FACE="Courier New">100</FONT></B>
<P>		<B><FONT FACE="Courier New">Hello</FONT></B>
<P>		<B><FONT FACE="Courier New">Mon Apr 08 18:56:20 KST 2002</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.3 Wrapper Class</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">앞의 예에서 arr[]이 reference형이면 모든 자료형을 저장할 수 있지만 primitive 자료형은 저장할 수 없는 단점이 있다. 
</FONT><P><FONT FACE="바탕">다음은 primitive 자료형을 클래스로 구현해 놓은 것인데, 이러한 클래스를 Wrapper 클래스라고 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=404 HEIGHT=239>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Primitive Data Type</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Wrapper Class</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">byte</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Byte</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">short</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Short</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">int</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Integer</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">long</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Long</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">float</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Float</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">double</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Double</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">boolean</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Boolean</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">char</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=50%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Character</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 Wrapper클래스를 이용하여 배열에 서로 다른 자료형을 저장하는 예를 보인 것이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=442>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestWrapper.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestWrapper {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Object[] obj = new Object[10];</FONT>
<BR>
<P>		<FONT FACE="Courier New">obj[0] = new Byte((byte)127);</FONT>
<P>		<FONT FACE="Courier New">obj[1] = new Short((short)32767);</FONT>
<P>		<FONT FACE="Courier New">obj[2] = new Integer(2147483647);</FONT>
<P>		<FONT FACE="Courier New">obj[3] = new Long(2136484836482L);</FONT>
<P>		<FONT FACE="Courier New">obj[4] = new Float(3.5F);</FONT>
<P>		<FONT FACE="Courier New">obj[5] = new Double(3.7);</FONT>
<P>		<FONT FACE="Courier New">obj[6] = new Boolean(true);</FONT>
<P>		<FONT FACE="Courier New">obj[7] = new Character('J');</FONT>
<P>		<FONT FACE="Courier New">obj[8] = new String(&quot;Hello Java&quot;);</FONT>
<P>		<FONT FACE="Courier New">obj[9] = new java.util.Date();</FONT>
<BR>
<P>		<FONT FACE="Courier New">for(int i=0; i&lt;obj.length ; i++) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(obj[i]);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV113.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV114.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">127</FONT></B>
<P>		<B><FONT FACE="Courier New">32767</FONT></B>
<P>		<B><FONT FACE="Courier New">2147483647</FONT></B>
<P>		<B><FONT FACE="Courier New">2136484836482</FONT></B>
<P>		<B><FONT FACE="Courier New">3.5</FONT></B>
<P>		<B><FONT FACE="Courier New">3.7</FONT></B>
<P>		<B><FONT FACE="Courier New">true</FONT></B>
<P>		<B><FONT FACE="Courier New">J</FONT></B>
<P>		<B><FONT FACE="Courier New">Hello Java</FONT></B>
<P>		<B><FONT FACE="Courier New">Mon Apr 08 18:57:00 KST 2002</FONT></B>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.4 Polymorphic Argument</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다형성이 메소드의 인자에 적용된 것을 Polymorphic Argument라 부르는데, 메소드의 인자뿐만 아니라 메소드의 리턴타입에도 적용이 된다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 다형성이 메소드 인자와 리턴타입에 적용된 예를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=391>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<P>	<FONT FACE="Courier New">private String name;</FONT>
<P>	<FONT FACE="Courier New">private int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String init_name, int init_age) {</FONT>
<P>		<FONT FACE="Courier New">name = init_name;</FONT>
<P>		<FONT FACE="Courier New">age = init_age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setName(String name) {</FONT>
<P>		<FONT FACE="Courier New">this.name = name;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void setAge(int age) {</FONT>
<P>		<FONT FACE="Courier New">this.age = age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=260>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person{</FONT>
<P>	<FONT FACE="Courier New">private String studentId;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Student(String init_name, int init_age, String init_studentID) {</FONT>
<P>		<FONT FACE="Courier New">super(init_name, init_age);</FONT>
<P>		<FONT FACE="Courier New">studentId = init_studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + &quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentId;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestPolyArg.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestPolyArg {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Person s2 = setPerson(s);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s2.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static </FONT><B><FONT FACE="Courier New">Person</FONT></B><FONT FACE="Courier New"> setPerson(</FONT><B><FONT FACE="Courier New">Person p</FONT></B><FONT FACE="Courier New">) {</FONT>
<P>		<FONT FACE="Courier New">p.setName(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">p.setAge(29);</FONT>
<P>		<FONT FACE="Courier New">return p;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV115.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="file:///C|/지빠귀/FYXIV116.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 29        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001233</FONT></B>
<BR>
<P><FONT FACE="바탕">앞의 9번째 줄에서 리턴타입이 Person형으로 되어있는데 polyMethod() 메소드를 호출하여 Student형으로 선언한 자료에 대입하면 어떻게 될까? 
</FONT><BR>
<P><FONT FACE="바탕">Primitive 자료형에서 형 변환이 발생하듯이 객체에서도 형 변환이 발생한다. 다음은 위의 5번째 줄을 Student형으로 선언했을 때 객체 형 변환한 예를 보이고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=31>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>		<FONT FACE="Courier New">Student s2 = </FONT><B><FONT FACE="Courier New">(Student)</FONT></B><FONT FACE="Courier New"> setPerson(s);</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">형 변환시 작은 유형에서 큰 유형으로는 형 변환이 가능하지만, 큰 유형에서 작은 유형으로의 형 변환은 반드시 명시해 주어야한다. 즉, polyMethod()의 Person형이 Student형보다 큰 자료형이므로 앞에 &quot;(Student)&quot;라고 명시한 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.5 instanceof</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">instanceof는 객체가 특정 클래스의 인스턴스 인지를 검사할 때 사용하는 연산자이다.</FONT>
<BR>
<P><FONT FACE="바탕">다음 예에서 사용법이 나타나 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInstanceof.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInstanceof {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) 	{</FONT>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 25, &quot;20001233&quot;);</FONT>
<P>		<FONT FACE="Courier New">Person s2 = printInfo(s);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s2.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static Person printInfo(Person p) {</FONT>
<P>		<FONT FACE="Courier New">if( p </FONT><B><FONT FACE="Courier New">instanceof</FONT></B><FONT FACE="Courier New"> Student ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">학생</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else if( p instanceof Teacher ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">선생</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">} else if( p instanceof Employee ) {</FONT>
<P>			<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">직원</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.&quot;);</FONT>
<P>		<FONT FACE="Courier New">}</FONT>
<P>		<FONT FACE="Courier New">return p;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV117.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="file:///C|/지빠귀/FYXIV118.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">학생</FONT><FONT FACE="Courier New"> instance</FONT><FONT FACE="바탕">입니다</FONT><FONT FACE="Courier New">.</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001233</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.4.6 </FONT><FONT FACE="바탕">중복</FONT><FONT FACE="HY부활M">(overloading)</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">중복은 메소드와 생성자를 사용할 때 하나의 이름으로 서로 다른 인자값이 같은 기능을 수행하게 한다. 즉, 중복기능을 사용하여 하나의 인터페이스로 일반적인 클래스를 사용할 수 있는 것이다.</FONT>
<P><FONT FACE="바탕">중복 조건은 다음과 같다.</FONT>
<BR>
<P>  <FONT FACE="돋움">∘ 이름이 같아야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자 유형(parameter type)이 달라야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자의 개수가 달라야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 인자의 순서가 달라야 한다.</FONT>
<P>  <FONT FACE="돋움">∘ 리턴형은 영향을 미치지 않는다.</FONT>
<BR>
<P><FONT FACE="바탕">자바에서 가장쉽게 볼 수 있는 중복 예는 System.out.print() 메소드 인데, 실제 java.io.PrintStream클래스의 print() 메소드를 보면 다음과 같이 9개의 메소드로 구성되어 있다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=766 HEIGHT=198>
<TD VALIGN=TOP WIDTH=7%>
<BR></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public void print(boolean b)</FONT>
<P><FONT FACE="Courier New">public void print(char c)</FONT>
<P><FONT FACE="Courier New">public void print(int I)</FONT>
<P><FONT FACE="Courier New">public void print(long l)</FONT>
<P><FONT FACE="Courier New">public void print(float f)</FONT>
<P><FONT FACE="Courier New">public void print(double d)</FONT>
<P><FONT FACE="Courier New">public void print(char[] s)</FONT>
<P><FONT FACE="Courier New">public void print(String s)</FONT>
<P><FONT FACE="Courier New">public void print(Object obj)</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">화면이나 콘솔에 값을 출력할 때, 위와 같이 인자에 따라서 각각의 값을 출력하도록 하는 9개 메소드가 있으므로 사용자는 인자의 종류에 따른 입력 변경이나 메소드의 이름 변경 없이 자유롭게 출력할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=185>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Overloading.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Overloading {</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">abc(int i, String str)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">정수와</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void </FONT><B><FONT FACE="Courier New">abc(String str)</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT>	</TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestOverloading.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestOverloading {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Overloading om = new Overloading();</FONT>
<P>		<FONT FACE="Courier New">om.abc(100, &quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>		<FONT FACE="Courier New">om.abc(&quot;</FONT><FONT FACE="바탕">자바</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV119.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV120.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">정수와</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT></B>
<P>		<B><FONT FACE="바탕">문자열이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">입력됨</FONT></B>
<BR>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV121.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.5   static Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">static은 변수, 메소드, 변수범위에 적용되어 특별한 의미를 갖게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.1 static variables</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">static변수는 모든 객체들이 공유하는 공유변수가 된다. 다음 예에서 변수 a의 경우 객체 c1과 c2에 따로 잡히지만 b의 경우에는 같은 장소를 참조하게 된다. 뿐만 아니라  16번째 줄에서 처럼 멤버 참조시에 해당 클래스의 인스턴스 없이도 참조가 가능하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 변수가 static으로 선언되었을 때를 나타내고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=121>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Count.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Count {</FONT>
<P>	<FONT FACE="Courier New">public int a=0;</FONT>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">static</FONT></B><FONT FACE="Courier New"> int b=0;</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=492>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestCount.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestCount {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Count c1 = new Count();</FONT>
<P>		<FONT FACE="Courier New">c1.a++;</FONT>
<P>		<FONT FACE="Courier New">c1.b++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Non-static a : &quot; + c1.a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;static b : &quot; + c1.b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Count c2 = new Count();</FONT>
<P>		<FONT FACE="Courier New">c2.a++;</FONT>
<P>		<FONT FACE="Courier New">c2.b++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Non-static a : &quot; + c2.a);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;static b : &quot; + c2.b);</FONT>
<BR>
<P>		<FONT FACE="Courier New">Count.b++;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;c1.b : &quot; + c1.b);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;c2.b : &quot; + c2.b);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Count.b : &quot; + Count.b);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV122.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV123.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Non-static a : 1</FONT></B>
<P>		<B><FONT FACE="Courier New">static b : 1</FONT></B>
<P>		<B><FONT FACE="Courier New">Non-static a : 1</FONT></B>
<P>		<B><FONT FACE="Courier New">static b : 2</FONT></B>
<P>		<B><FONT FACE="Courier New">c1.b : 3</FONT></B>
<P>		<B><FONT FACE="Courier New">c2.b : 3</FONT></B>
<P>		<B><FONT FACE="Courier New">Count.b : 3</FONT></B>
<BR>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.2 static methods</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">static메소드는 변수와 마찬가지로 다음 예 TestStatic.java의 4번째 줄에서처럼 해당 클래스의 인스턴스 없이 참조가 가능하게 해준다. 또한 Count클래스의 6번째 줄에서처럼 static 메소드 안에서는 non-static 멤버(변수 또는 메소드)를 객체생성 없이 직접 참조할 수 없고, 메소드 안에서는 static변수를 선언할 수 없다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 static 메소드 예를 나타내고 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Count.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Count {</FONT>
<P>	<FONT FACE="Courier New">public int a=0;</FONT>
<P>	<FONT FACE="Courier New">public static int b=0;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">static</FONT></B><FONT FACE="Courier New"> int doIt() {</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">return ++a;</FONT>	<B><FONT FACE="Courier New">//Error</FONT></B>
<P>		<FONT FACE="Courier New">return ++b;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestCount.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestCount {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Count.doIt() : &quot; + </FONT><B><FONT FACE="Courier New">Count.doIt()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV124.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV125.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">Count.doIt() : 1</FONT></B>
<BR>
<P><FONT FACE="바탕">.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.3 static initializer</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">정적 블록(static block)또는 정적 초기화자라고도 하며, static initializer는 클래스가 로딩될 때 main()메소드에 앞서 한번만 실행된다.  자바에서 JDBC를 이용하여 데이터베이스 연결시 드라이버 로딩에 사용될 수도 있다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 클래스 안에 static블록을 두는 static initializer예를 나타내고 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">StaticInit.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class StaticInit {</FONT>
<P>	<FONT FACE="Courier New">static {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;static initializer</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수행됨</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInitializer.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInitializer {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">StaticInit c1 = new StaticInit();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;***********************&quot;);</FONT>
<P>		<FONT FACE="Courier New">StaticInit c2 = new StaticInit();</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;***********************&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;main() </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV126.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV127.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">static initializer</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수행됨</FONT></B>
<P>		<B><FONT FACE="Courier New">***********************</FONT></B>
<P>		<B><FONT FACE="Courier New">***********************</FONT></B>
<P>		<B><FONT FACE="Courier New">main() </FONT><FONT FACE="바탕">메소드</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">종료</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> static 키워드의 기능을 정리하면 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 변수, 메소드, 범위에만 적용된다.</FONT>
<P><FONT FACE="바탕">- static 메소드나 변수는 해당 클래스의 인스턴스 없이도 사용할 수 있다.</FONT>
<P><FONT FACE="바탕">- static 메소드 안에서는 static 변수만 사용해야하고, static 메소드만 호출할 수 있다. 즉 static 메소드에서 non-static 멤버를 객체생성 없이 직접 참조할 수 없다.</FONT>
<P><FONT FACE="바탕">- static 제한자는 지정된 변수와 메소드를 인스턴스와 무관하게 만들어 주기 때문에 this를 가질 수 없다.</FONT>
<BR>
<P><FONT FACE="바탕">- static 메소드는 non-static 메소드로 재정의(overriding)될 수 없다.</FONT>
<P><FONT FACE="바탕">- scope({와 })에 사용할 경우에는 static initializer라하며, 이는 클래스가 로딩될 때 main()이 있더라도 main() 메소드보다 앞서 딱 한번만 수행된다.</FONT>
<P><FONT FACE="바탕">- 대표적인 static 메소드는 애플리케이션의 main() 메소드이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.5.4 Singleton Design Pattern</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">Singleton Design Pattern은 객체를 하나만 만들도록 하는 일종의 프로그래밍 방법이다. 다음 예를 보면 Company 클래스에서는 생성자를 private으로 선언하여 외부에서 생성자를 이용하여 객체 생성이 불가능하게 하였다. 그리고 멤버 변수에서는 자신의 객체를 생성하고, 이를 또한 private으로 선언하여 외부에서 직접 참조가 불가능하게 하고 static을 붙여서 static 메소드에서 객체생성 없이 직접 참조가 가능하게 하였다. 마지막으로 멤버변수에서 만들어진 인스턴스를 참조하기 위해 public 메소드를 이용하였는데, 메소드도 객체 생성 없이 참조가 가능하도록 static으로 선언했다. 실행 결과를 보면 두 개의 인스턴스가 같은 해시코드(hashcode)를 가지고있는 것을 볼 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=276>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Company.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Company{</FONT>
<P>	<FONT FACE="Courier New">private String str;</FONT>
<P>	<B><FONT FACE="Courier New">private static</FONT></B><FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">Company c = new Company();</FONT></B>
<P>	<B><FONT FACE="Courier New">private Company(){</FONT></B>
<P>		<FONT FACE="Courier New">str = &quot;company&quot;;</FONT>
<P>		<FONT FACE="Courier New">System.out.println(str);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public static Company getCompany(){</FONT></B>
<P>		<FONT FACE="Courier New">return c;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestSingleton.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestSingleton {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String [] args){</FONT>
<P>		<FONT FACE="Courier New">Company c1 = Company.getCompany();</FONT>
<P>		<FONT FACE="Courier New">Company c2 = Company.getCompany();</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(c1);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(c1 == c2);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(c2);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV128.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV129.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">company</FONT></B>
<P>		<B><FONT FACE="Courier New">Company@372a1a</FONT></B>
<P>		<B><FONT FACE="Courier New">true</FONT></B>
<P>		<B><FONT FACE="Courier New">Company@372a1a</FONT></B>
<BR>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV130.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.6   final Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final은 클래스, 변수, 메소드에 적용되어 특별한 의미를 갖게 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.6.1 final class</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final클래스는 상속이 불가능하게 한다. 즉 자식 클래스를 가질 수 없고 오직 객체생성을 통해서만 사용할 수 있다. 다음 예에서는 Child.java를 컴파일하면 오류가 발생하게 된다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=77>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Parent.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><B><FONT FACE="Courier New">final</FONT></B><FONT FACE="Courier New"> class Parent{</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=77>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Child.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Child extends Parent{ </FONT><B><FONT FACE="Courier New">//Error</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.6.2 final variables</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final변수는 상수 선언시 사용하는데, 한번 값을 할당하면 그 값을 변경할 수 없다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=298>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestFinalVar.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class TestFinalVar {</FONT>
<P>	<B><FONT FACE="Courier New">final int MY_VALUE=7;</FONT></B>
<P>	<FONT FACE="Courier New">public void go() {</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">MY_VALUE=10;</FONT>	<FONT FACE="Courier New">//Error</FONT>
<P>		<FONT FACE="Courier New">System.out.println(MY_VALUE);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">TestFinalVar t = new TestFinalVar();</FONT>
<P>		<FONT FACE="Courier New">t.go();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV131.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV132.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">7</FONT></B>
<BR>
<P><FONT FACE="바탕">하지만 final변수라 할지라도 참조변수의 경우에는 다음 6번째 줄에서 보인 것처럼 멤버변수의 값은 변경할 수 있다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=430>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestFinalRefVar.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestFinalRefVar{</FONT>
<P>	<FONT FACE="Courier New">static final MyDate date = new MyDate();</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String[] args){</FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">date = new MyDate(); //Error</FONT>
<P>		<FONT FACE="Courier New">date.year = 2002;</FONT>
<P>		<FONT FACE="Courier New">System.out.println( date.toString() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT>
<BR>
<P><FONT FACE="Courier New">class MyDate{</FONT>
<P>	<FONT FACE="Courier New">int year = 2000;</FONT>
<P>	<FONT FACE="Courier New">int month = 1;</FONT>
<P>	<FONT FACE="Courier New">int day = 1; </FONT>
<P>	<FONT FACE="Courier New">public String toString() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;[&quot; + year + &quot;-&quot; + month + &quot;-&quot; + day + &quot;]&quot;;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV133.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV134.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">[2002-1-1]</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.6.3 final methods</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">final 메소드는 하위 클래스에서 재 정의하지 못하게 한다. 하지만 상속은 가능하므로 하위클래스에서 참조는 가능하다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Parent.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Parent{</FONT>
<P>	<FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">final</FONT></B><FONT FACE="Courier New"> void method(){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Parent - method()&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=143>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Child.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Child extends Parent{</FONT>
<P>	<FONT FACE="Courier New">public void method(){ </FONT><B><FONT FACE="Courier New">//Error</FONT></B>
<P>		<FONT FACE="Courier New">System.out.println(&quot;Parent - method()&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> final 키워드의 기능을 정리하면 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 클래스, 메소드, 변수에 적용된다.</FONT>
<P><FONT FACE="바탕">- 클래스의 경우에는 서브-클래싱(상속)을 할 수 없게 한다.</FONT>
<P><FONT FACE="바탕">- 메소드는 상속받아 재정의 할 수 없게 한다.</FONT>
<P><FONT FACE="바탕">- 변수 값을 변경하지 못하게 하여 상수처럼 사용하게 한다. final 변수는 메모리 공간을 절약하기 위해 static과 같이 사용된다.</FONT>
<P><FONT FACE="바탕">- abstract와 동시에 사용될 수 없다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV135.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.7  abstract Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">abstract클래스는 추상 클래스로서 abstract메소드를 가질 수 있다. 또, 객체 생성이 불가능하고 반드시 상속을 통해서만 사용이 가능하며, 메소드가 구현되어 있지 않으므로 클래스를 상속받은 하위 클래스에서 반드시 메소드를 구현해 주어야 한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=238>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Sharp.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">abstract</FONT></B><FONT FACE="Courier New"> class Shape {</FONT>
<P>	<FONT FACE="Courier New">private int x;</FONT>
<P>	<FONT FACE="Courier New">private int y;</FONT>
<P>	<FONT FACE="Courier New">public Shape() {}</FONT>
<P>	<FONT FACE="Courier New">public Shape(int x, int y) {</FONT>
<P>		<FONT FACE="Courier New">this.x = x;</FONT>
<P>		<FONT FACE="Courier New">this.y = y;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<B><FONT FACE="Courier New">public abstract double area();  //</FONT><FONT FACE="바탕">구현이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">되어있지</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">않음</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=258>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Circle.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Circle extends Shape {</FONT>
<P>	<FONT FACE="Courier New">private int radius;</FONT>
<P>	<FONT FACE="Courier New">public Circle(int r) {</FONT>
<P>		<FONT FACE="Courier New">//super();</FONT>
<P>		<FONT FACE="Courier New">radius = r;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public double area() {</FONT>
<P>		<FONT FACE="Courier New">return (Math.PI * radius * radius);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=192>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestAbstract.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestAbstract {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Shape circle = new Circle(10);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;</FONT><FONT FACE="바탕">원의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">넓이는</FONT><FONT FACE="Courier New"> : &quot;+circle.area());</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV136.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV137.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">원의</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">넓이는</FONT><FONT FACE="Courier New"> : 314.1592653589793</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT SIZE=4><SPAN STYLE="font-size:15pt;"><FONT FACE="바탕"> abstract 키워드의 기능을 정리하면 다음과 같다.</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 클래스와 메소드에 적용된다.</FONT>
<P><FONT FACE="바탕">- abstract로 선언된 메소드는 몸체(body : &quot;{ }&quot;)가 없이 선언만 되어있다.</FONT>
<P><FONT FACE="바탕">- abstract 메소드가 있는 클래스는 abstract클래스여야하며, 역은 성립되지 않는다. 
</FONT><P><FONT FACE="바탕">- 객체생성이 되지 않기 때문에 사용하려면 반드시 상속을 받아 하위 클래스에서 상속받은 abstract클래스의 abstract 메소드를 구현해야 한다.</FONT>
<P><FONT FACE="바탕">- 상속되는 각 클래스에 대한 관계를 설정할 때 사용한다.(abstract로 선언된 클래스를 상속받는 클래스에서 특정한 메소드를 반드시 만들어야 할 때 사용)</FONT>
<P><FONT FACE="바탕">- final과 동시에 사용될 수 없다.</FONT>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV138.GIF" BORDER=0 ALIGN=LEFT> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.8  </FONT><FONT FACE="바탕">기타</FONT><FONT FACE="Bookman Old Style"> Modifier</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">이 부분에서는 지금까지 언급한 내용을 제외한 나머지 modifier를 설명하고자 한다. 하지만 사용 빈도가 높지 않기 때문에 개략적으로 이해하기 바란다. 
</FONT><BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.1 transient</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">변수에만 적용되는데, 객체 직렬화에서 transient로 지정된 변수는 직렬화에서 제외된다. 책의 후반부 I/O Programming에서 객체 직렬화를 설명할 때 언급된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.2 native</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 메소드에만 적용된다.</FONT>
<P><FONT FACE="바탕">- 몸체없이 메소드만을 선언하여 실제 구현부분은 자바가 아닌 C언어나 C++ 언어로 구현하여 사용한다.</FONT>
<P><FONT FACE="바탕">- 자바로 구현이 불가능한 부분이나 특정 플랫폼에 최적화를 시켜서 성능을 극대화시키고자 할 때 사용한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.3 synchronized</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 메소드와 범위에 적용된다.</FONT>
<P><FONT FACE="바탕">- 멀티 쓰레드에서 프로그램 동기화 시키는데 사용되는 제한자이다.</FONT>
<P><FONT FACE="바탕">- 락(Lock)을 걸어 한번에 하나의 쓰레드만 접근이 가능하도록 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.8.4 volatile</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">- 변수에만 적용된다.</FONT>
<P><FONT FACE="바탕">- 다중 프로세서 환경에서 변수를 비동기적으로 변경할 수 있도록 지정하기 위한 제한자이다. 
</FONT><P><FONT FACE="바탕">- default로 선언되기 때문에 거의 사용하지 않는다. 
</FONT><BR>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 각 제한자의 적용범위를 나타낸 것이다.</FONT>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=672 HEIGHT=265>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Modifier</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Classes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Attributes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Methods</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Constructors</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=4 WIDTH=8%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Access</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">public</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<BR></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">protected</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">inner class의 경우에는 가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">friendly</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">(공백)</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">private</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">inner class의 경우에는 가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Encapsulation - 정보 은닉화에 사용</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">클래스 안에서만 사용할 때</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Singleton Design Pattern</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=672 HEIGHT=390>
<TD VALIGN=MIDDLE COLSPAN=2 WIDTH=22%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Modifier</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Classes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Attributes</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Methods</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Constructors</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE ROWSPAN=6 WIDTH=8%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Usage</FONT></SPAN></FONT></TD>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">abstract</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체를 생성 못함, 상속 가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">body는 구현하지 않고 선언만 할 때</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">static</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">공유변수, 객체 생성 없이 변수에 참조</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체 생성 없이 참조</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">final</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체 생성 가능, 상속은 불가능</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">상수 값 선언 시, static과 같이 사용</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">final 메소드는 override 안됨</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">transient</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">객체 직렬화에 사용</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">synchronized</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">Lock-한번에 하나의 쓰레드만 접근 가능하게 함</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
</tr>
<TR>
<TD VALIGN=MIDDLE WIDTH=13%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">volatile</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">O</FONT></SPAN></FONT>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">비동기화, 기본값</FONT></SPAN></FONT></TD>
<TD VALIGN=TOP WIDTH=19%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT>
<BR></TD>
<TD VALIGN=TOP WIDTH=18%>
<P ALIGN=CENTER><FONT SIZE=2><SPAN STYLE="font-size:10pt;"><FONT FACE="바탕">X</FONT></SPAN></FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT COLOR=PURPLE><SPAN STYLE="font-size:12pt;"><FONT FACE="바탕">▒</FONT></SPAN></FONT><FONT FACE="바탕"> 생성자와 메소드 내에서 선언되는 변수는 Access Level Modifier를 사용할 수 없다.(</FONT><I><FONT FACE="바탕">friendly</FONT></I><FONT FACE="바탕">만 가능) 또한 static 제한자도 사용할 수 없다.</FONT>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV139.GIF" BORDER=0 ALIGN=LEFT>
<P> <FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">3.9  </FONT><FONT FACE="바탕">인터페이스</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다중상속을 지원하지는 않지만 필요한 기능이기 때문에 단일상속의 한계점을 극복하기 위해 만든 것이 인터페이스이다.</FONT>
<P><FONT FACE="바탕">인터페이스는 클래스의 골격만 정의해 놓은 것으로 이를 이용하면 여러 개의 부모를 갖는 효과를 줄 수 있다. 즉 인터페이스는 서로 주고받는 표준을 말하며, 같은 인터페이스를 구현하고 있으면 상대방이 어떻게 구현하였는지는 상관없이 내가 알고있는 방법으로 사용할 수 있게된다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.1 </FONT><FONT FACE="바탕">인터페이스</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">선언</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">다음은 인터페이스를 선언하는 방법이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=641 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">interface </FONT><I><FONT FACE="Courier New">InterfaceName</FONT></I><FONT FACE="Courier New"> [extends &lt;</FONT><I><FONT FACE="Courier New">SuperInterface&gt; &lt;,SuperInterface&gt;*</FONT></I><FONT FACE="Courier New">]{</FONT>
<P>	<I><FONT FACE="Courier New">interfaceBody</FONT></I>
<P>	<FONT FACE="Courier New">//[public static final]</FONT><I><FONT FACE="Courier New"> </FONT></I><FONT FACE="Courier New">data-type</FONT><I><FONT FACE="Courier New"> variableName;</FONT></I>
<P>	<FONT FACE="Courier New">//[public abstract] return-type </FONT><I><FONT FACE="Courier New">methodName</FONT></I><FONT FACE="Courier New">;</FONT>
<P><FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">인터페이스에 사용되는 필드는 상수(static final 변수)만 가질 수 있고, 메소드는 메소드의 원형만 선언 가능하다. 그리고 메소드의 몸체는 인터페이스를 사용하는 클래스 내에서 구현해야 한다.</FONT>
<P><FONT FACE="바탕">클래스가 상속 가능한 것처럼 인터페이스도 &quot;extends&quot; 예약어를 사용하면 상속을 받을 수 있으며, 다른 인터페이스를 다중상속 할 수 있다.</FONT>
<BR>
<P><FONT FACE="바탕">예를 들면 인어는 사람의 속성과 물고기의 속성을 함께 물려받았다. 그러나 자바에서는 동시에 사람과 물고기의 속성을 함께 상속받지 못하므로 둘 중에서 하나는 인터페이스로 구현하는 것이다. 만약 사람이 클래스로 구현되었다면 물고기는 인터페이스로 구현해야한다. 다음은 물고기 인터페이스를 구현한 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface Aquatic {</FONT>
<P>	<FONT FACE="Courier New">public void swimming();</FONT>
<P>	<FONT FACE="Courier New">public void breathUnderWater();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">위 예에서 2번째 줄과 3번째 줄에서 인터페이스를 선언할 때 메소드 기술시 몸체는 구현하지 않고 원형만 선언했다.(분명히 메소드 선언하는 곳에 &quot;{ }&quot;가 빠져있음.) 실제 메소드의 몸체는 인터페이스를 구현하는 클래스에서 메소드의 몸체를 구현해 주어야 한다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.2 </FONT><FONT FACE="바탕">인터페이스</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">사용</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스를 사용하는 것을 &quot;인터페이스를 구현한다&quot; 라고 하며 &quot;implements&quot;라는 예약어를 이용하는데, 클래스 선언부에서 상속받을 클래스 이름 다음에 &quot;implements&quot;라 기술하고 인터페이스 이름을 쓴다. 만약 여러 개의 인터페이스를 구현할 때에는 &quot;,&quot;로 구분하여 나열한다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=617 HEIGHT=70>
<TD VALIGN=MIDDLE WIDTH=2%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=97%>
<P><FONT FACE="Courier New">class </FONT><I><FONT FACE="Courier New">className</FONT></I><FONT FACE="Courier New"> </FONT><B><FONT FACE="Courier New">implements </FONT></B><I><B><FONT FACE="Courier New">InterfaceName1</FONT></B></I><FONT FACE="Courier New">, </FONT><I><B><FONT FACE="Courier New">InterfaceName2, ... </FONT></B></I><FONT FACE="Courier New">{</FONT>
<P>	<I><FONT FACE="Courier New">classBody;</FONT></I>
<P><FONT FACE="바탕">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">다음은 사람속성은 상속받고, 물고기속성은 인터페이스를 구현하여 인어를 만드는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=137>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class Mermaid extends Human </FONT><B><FONT FACE="Courier New">implements</FONT></B><FONT FACE="Courier New"> Aquatic {</FONT>
<P>	<FONT FACE="Courier New">public void swimming() {</FONT>
<P>		<FONT FACE="Courier New">//</FONT><FONT FACE="바탕">실제</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">수영</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">부분을</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">구현</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void breathUnderWater(){ }</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P><FONT FACE="바탕">2번째 줄이 인터페이스를 사용한 부분이다.(이곳에는 &quot;{ }&quot;가 있음.) 인터페이스를 구현할 때 메소드 재정의 규칙을 따라야하며, 인터페이스에 선언된 메소드 중 실제사용하지 않는 메소드가 있어도 클래스 내에서는 모두 구현해 주어야한다.</FONT>
<BR>
<P><FONT FACE="바탕">앞에서 설명한 인터페이스의 구현과 사용 예를 들면 다음과 같다.</FONT>
<P><FONT FACE="바탕">다음은 도형의 넓이를 구하는 프로그램을 작성하기 위한 인터페이스이다. 실제 도형의 넓이는 종류에 따라 서로 다른 식을 갖게되는데, 도형의 넓이를 구하는 클래스를 만들 때 정의한 Shape인터페이스를 implements할 경우 사용하는 식이 무었이든 구현부와는 관계없이 calcArea() 메소드를 사용하면 도형의 넓이를 구할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Shape.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public </FONT><B><FONT FACE="Courier New">interface</FONT></B><FONT FACE="Courier New"> Shape{</FONT>
<P>	<B><FONT FACE="Courier New">public double calcArea();</FONT></B>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=279>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Rectangle.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Rectangle </FONT><B><FONT FACE="Courier New">implements Shape </FONT></B><FONT FACE="Courier New">{</FONT>
<P>	<FONT FACE="Courier New">int width;</FONT>
<P>	<FONT FACE="Courier New">int height;</FONT>
<P>	<FONT FACE="Courier New">public Rectangle(int init_width, int init_height) {</FONT>
<P>		<FONT FACE="Courier New">width = init_width;</FONT>
<P>		<FONT FACE="Courier New">height = init_height;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public double calcArea() {</FONT></B>
<P>		<FONT FACE="Courier New">return 	width * height;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=299>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Triangle.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Triangle </FONT><B><FONT FACE="Courier New">implements Shape</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">int width;</FONT>
<P>	<FONT FACE="Courier New">int height;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Triangle(int init_width, int init_height) {</FONT>
<P>		<FONT FACE="Courier New">width = init_width;</FONT>
<P>		<FONT FACE="Courier New">height = init_height;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<B><FONT FACE="Courier New">public double calcArea() {</FONT></B>
<P>		<FONT FACE="Courier New">return 	width * height / 2;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=231>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestArea.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestArea {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">Rectangle rect = new Rectangle(20,34);</FONT>
<P>		<FONT FACE="Courier New">Triangle tri = new Triangle(20,34);</FONT>
<BR>
<P>		<FONT FACE="Courier New">System.out.println(&quot;rect's Area = &quot; + </FONT><B><FONT FACE="Courier New">rect.calcArea()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;tri's Area = &quot; + </FONT><B><FONT FACE="Courier New">tri.calcArea()</FONT></B><FONT FACE="Courier New">);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV140.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV141.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">rect's Area = 680.0</FONT></B>
<P>		<B><FONT FACE="Courier New">tri's Area = 340.0</FONT></B>
<BR>
<P><FONT FACE="바탕">앞의 예에서처럼 개발자가 인터페이스 내용에 대해 알고있으면 실제구현에 관계없이 해당 인터페이스를 보고 사용할 수 있다. 대표적인 예가 JDBC 인터페이스인데, JDBC인터페이스는 자바와 데이터베이스 연결을 위해 제공하고있는 일종의 설명서이다. 이 인터페이스의 구현은 각 데이터베이스 제조사가 구현하게 되는데, 개발자는 구현된 구체적인 내용을 몰라도 인터페이스를 보고 프로그램을 작성할 수 있는 것이다.</FONT>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.3 </FONT><FONT FACE="바탕">인터페이스의</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">멤버</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스 내의 변수는 자동으로 public static final로 선언되며, 메소드는 body가 없어야 하며 자동으로 public abstract로 선언된다.</FONT>
<BR>
<BR>
<P><FONT FACE="바탕">다음은 인터페이스 내에 선언된 멤버가 실제로 선언되는 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=165>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface{</FONT>
<P>	<FONT FACE="Courier New">public static final int A = 11;      </FONT>
<P>	<FONT FACE="Courier New">int My_INT = 22; //</FONT><FONT FACE="바탕">이렇게</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">해도</FONT><FONT FACE="Courier New"> public static final </FONT><FONT FACE="바탕">이다</FONT><FONT FACE="Courier New">.</FONT>
<BR>
<P>	<FONT FACE="Courier New">public /* abstract */ void run();           </FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=361>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestInterface.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class TestInterface implements MyInterface{</FONT>
<P>	<FONT FACE="Courier New">public void run(){ </FONT>
<P><FONT FACE="Courier New">//</FONT>		<FONT FACE="Courier New">My_INT  = 33; //Error - MyInterface</FONT><FONT FACE="바탕">의</FONT><FONT FACE="Courier New"> final </FONT><FONT FACE="바탕">변수임</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;run() : &quot; + MyInterface.A); </FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public static void main(String args[]){</FONT>
<P>		<FONT FACE="Courier New">System.out.println(MyInterface.My_INT);</FONT>
<P>		<FONT FACE="Courier New">System.out.println(TestInterface.My_INT);</FONT>
<BR>
<P>		<FONT FACE="Courier New">MyInterface t1 = new TestInterface();</FONT>
<P>		<FONT FACE="Courier New">t1.run();</FONT>
<P>		<FONT FACE="Courier New">TestInterface t2 = new TestInterface();</FONT>
<P>		<FONT FACE="Courier New">t2.run();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV142.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV143.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">22</FONT></B>
<P>		<B><FONT FACE="Courier New">22</FONT></B>
<P>		<B><FONT FACE="Courier New">run() : 11</FONT></B>
<P>		<B><FONT FACE="Courier New">run() : 11</FONT></B>
<BR>
<BR>
<P><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><FONT FACE="HY부활M">3.9.4 </FONT><FONT FACE="바탕">인터페이스</FONT><FONT FACE="HY부활M"> </FONT><FONT FACE="바탕">다중상속</FONT></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">인터페이스는 다른 인터페이스를 다중상속 받을 수 있다. 다음은 인터페이스 다중상속에 대한 예를 보인다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=766 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface1.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface1 {</FONT>
<P>	<FONT FACE="Courier New">void m1();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface2.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface2 {</FONT>
<P>	<FONT FACE="Courier New">void m2();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=104>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface3.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface3 </FONT><B><FONT FACE="Courier New">extends MyInterface1, MyInterface2</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">void m3();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P><FONT FACE="바탕">다음은 한 클래스가 여러 인터페이스를 구현하는 예를 보이고 있다. 하나의 클래스는 여러 개의 서로 다른 인터페이스를 구현할 수 있는데, 다음처럼 MyInterface3을 implements할 때는 MyInterface3이 갖고있는 메소드는 물론이고, 부모 인터페이스인 MyInterface1과 MyInterface2의 메소드도 구현해야 한다. MyClass의 main()안에서 보인 것처럼 인터페이스를 구현했을 때도 상속과 마찬가지로 다형성이 적용된다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=99>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyInterface4.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">interface MyInterface4 {</FONT>
<P>	<FONT FACE="Courier New">void m4();</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=544>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">MyClass.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT>
<P><FONT FACE="Courier New">21:</FONT>
<P><FONT FACE="Courier New">22:</FONT>
<P><FONT FACE="Courier New">23:</FONT>
<P><FONT FACE="Courier New">24:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class MyClass </FONT><B><FONT FACE="Courier New">implements MyInterface3, MyInterface4</FONT></B><FONT FACE="Courier New"> {</FONT>
<P>	<FONT FACE="Courier New">public void m1() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m1() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void m2() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m2() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;); </FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void m3() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m3() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public void m4() {</FONT>
<P>		<FONT FACE="Courier New">System.out.println(&quot;m4() </FONT><FONT FACE="바탕">구현</FONT><FONT FACE="Courier New">&quot;);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<P>		<FONT FACE="Courier New">MyClass mc = new MyClass();</FONT>
<P>		<FONT FACE="Courier New">MyInterface3 i3 = mc; //</FONT><FONT FACE="바탕">다형성이</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">적용됨</FONT>
<P>		<FONT FACE="Courier New">i3.m1();</FONT>
<P>		<FONT FACE="Courier New">i3.m2();</FONT>
<P>		<FONT FACE="Courier New">i3.m3();</FONT>
<P>	<FONT FACE="Courier New">//</FONT>	<FONT FACE="Courier New">i3.m4();  //Error - MyInterface3 </FONT><FONT FACE="바탕">에는</FONT><FONT FACE="Courier New"> m4()</FONT><FONT FACE="바탕">가</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">없다</FONT><FONT FACE="Courier New">.</FONT>
<P>		<FONT FACE="Courier New">MyInterface4 i4 = mc;</FONT>
<P>		<FONT FACE="Courier New">i4.m4();</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV144.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="바탕">실행</FONT></B>
<IMG SRC="file:///C|/지빠귀/FYXIV145.GIF" BORDER=0 ALIGN=LEFT><B><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="Courier New">m1() </FONT><FONT FACE="바탕">구현</FONT></B>
<P>		<B><FONT FACE="Courier New">m2() </FONT><FONT FACE="바탕">구현</FONT></B>
<P>		<B><FONT FACE="Courier New">m3() </FONT><FONT FACE="바탕">구현</FONT></B>
<P>		<B><FONT FACE="Courier New">m4() </FONT><FONT FACE="바탕">구현</FONT></B>
<BR>
<BR>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV146.GIF" BORDER=0 ALIGN=LEFT><FONT SIZE=4 COLOR=PURPLE><SPAN STYLE="font-size:16pt;"><B><FONT FACE="Bookman Old Style">3.10</FONT></B></SPAN></FONT><FONT SIZE=5 COLOR=PURPLE><SPAN STYLE="font-size:20pt;"><B><FONT FACE="Bookman Old Style">  this</FONT><FONT FACE="바탕">와</FONT><FONT FACE="Bookman Old Style"> super</FONT></B></SPAN></FONT>
<BR>
<P><FONT FACE="바탕">앞에서 super에 대해서 간단하게 소개했었다. 여기서는 this와 비교하여 그 사용법을 좀 더 자세하게 설명하기로 한다.</FONT>
<P><FONT FACE="바탕">this는 &quot;this.&quot;를 이용하면 자신의 object를 가리길 수 있고, &quot;this()&quot;를 사용하면 자신의 생성자를 호출 할 수 있다. 
</FONT><P><FONT FACE="바탕">super는 this와는 반대되는 개념으로 &quot;super.&quot;를 이용하면 부모클래스의 메소드 또는 변수를 참조할 수 있으며, 상속받는 전제하에 부모클래스의 생성자를 호출할 수도 있다..</FONT>
<BR>
<P><FONT FACE="바탕">먼저 this가 사용되는 예는 다음과 같다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=474>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Person.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT>
<P><FONT FACE="Courier New">17:</FONT>
<P><FONT FACE="Courier New">18:</FONT>
<P><FONT FACE="Courier New">19:</FONT>
<P><FONT FACE="Courier New">20:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Person {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String name;</FONT>
<P>	<FONT FACE="Courier New">public int age;</FONT>
<BR>
<P>	<FONT FACE="Courier New">public Person(String name, int age) {</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">name = name;</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">age = age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Person(String name) {</FONT>
<P>		<B><FONT FACE="Courier New">this(name, 0);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Person() {</FONT>
<P>		<B><FONT FACE="Courier New">this(null, 0);</FONT></B>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return &quot;</FONT><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: &quot; + name + &quot;\t</FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: &quot; + age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public Person(String name, int age) {</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">name = name;</FONT>
<P>		<B><FONT FACE="Courier New">this.</FONT></B><FONT FACE="Courier New">age = age;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">this.'은 생성자 또는 메소드 내에서 사용되며, 동일 클래스 내의 멤버를 참조할 수 있다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public Person(String name) {</FONT>
<P>		<B><FONT FACE="Courier New">this(name, 0)</FONT></B><FONT FACE="Courier New">;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">this()'는 생성자 내에서만 사용되며, 동일 클래스 내의 다른 생성자를 참조할 수 있고 반드시 생성자 내의 첫 번째 줄에 기술해야한다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 super가 사용되는 예를 보인 것이다.</FONT>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=386>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">Student.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT>
<P><FONT FACE="Courier New">11:</FONT>
<P><FONT FACE="Courier New">12:</FONT>
<P><FONT FACE="Courier New">13:</FONT>
<P><FONT FACE="Courier New">14:</FONT>
<P><FONT FACE="Courier New">15:</FONT>
<P><FONT FACE="Courier New">16:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">public class Student extends Person {</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String studentID;</FONT>
<P>	
<P>	<FONT FACE="Courier New">public Student(String name, int age, String studentID) {</FONT>
<P>		<B><FONT FACE="Courier New">super(name, age);</FONT></B>
<P>		<FONT FACE="Courier New">this.studentID = studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P>	<FONT FACE="Courier New">public Student(String name, int age) {</FONT>
<P>		<FONT FACE="Courier New">this(name, age, null);</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<BR>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + 			&quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=92>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public Student(String name, int age, String studentID) {</FONT>
<P>		<B><FONT FACE="Courier New">super(name, age);</FONT></B>
<P>		<FONT FACE="Courier New">this.studentID = studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">super()'는 생성자 내에서만 사용가능하며 부모클래스의 생성자를 호출하는데 사용된다. this()와 마찬가지로 생성자 내의 첫 번째 줄에 와야한다. 생성자 내에는 this() 또는 super()가 반드시 있어야 하는데, 이를 기술하지 않으면 묵시적으로 super()가 삽입되어 부모클래스의 기본 생성자를 호출한다.</FONT>
<BR>
<P>
<TABLE BORDER=1 CELLPADDING=2 WIDTH=771 HEIGHT=70>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P>	<FONT FACE="Courier New">public String getDetails() {</FONT>
<P>		<FONT FACE="Courier New">return super.getDetails() + 			&quot;\t</FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: &quot; + studentID;</FONT>
<P>	<FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>'<FONT FACE="바탕">super.'는 부모클래스의 멤버를 참조하는데 사용되는데 특히 재정의된 메소드에서 현재클래스의 메소드와 부모클래스의 메소드를 구분하여 호출할 때 유용하다.</FONT>
<BR>
<P><FONT FACE="바탕">다음은 앞의 두 클래스를 테스트하는 예이다.</FONT>
<BR>
<P>
<TABLE BORDER=0 CELLPADDING=2 WIDTH=771 HEIGHT=253>
<TD VALIGN=MIDDLE WIDTH=7%>
<BR></TD>
<TD VALIGN=MIDDLE WIDTH=92%>
<P><FONT FACE="HY타자B">TestThisSuper.java</FONT></TD>
</tr>
<TR>
<TD VALIGN=TOP WIDTH=7%>
<P><FONT FACE="Courier New">1:</FONT>
<P><FONT FACE="Courier New">2:</FONT>
<P><FONT FACE="Courier New">3:</FONT>
<P><FONT FACE="Courier New">4:</FONT>
<P><FONT FACE="Courier New">5:</FONT>
<P><FONT FACE="Courier New">6:</FONT>
<P><FONT FACE="Courier New">7:</FONT>
<P><FONT FACE="Courier New">8:</FONT>
<P><FONT FACE="Courier New">9:</FONT>
<P><FONT FACE="Courier New">10:</FONT></TD>
<TD VALIGN=TOP WIDTH=92%>
<P><FONT FACE="Courier New">class TestThisSuper {</FONT>
<P>	<FONT FACE="Courier New">public static void main(String[] args) {</FONT>
<BR>
<P>		<FONT FACE="Courier New">Person p = new Person(&quot;</FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">&quot;, 25);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( p.getDetails() );</FONT>
<BR>
<P>		<FONT FACE="Courier New">Student s = new Student(&quot;</FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">&quot;, 30, &quot;20001234&quot;);</FONT>
<P>		<FONT FACE="Courier New">System.out.println( s.getDetails() );</FONT>
<P>	<FONT FACE="Courier New">}</FONT>
<P><FONT FACE="Courier New">}</FONT></TD>
<CAPTION ALIGN=BOTTOM>
</CAPTION>

</tr>
</TABLE>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV147.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV148.GIF" BORDER=0 ALIGN=LEFT>
<P><B><FONT FACE="바탕">실행</FONT><FONT FACE="Courier New"> </FONT><FONT FACE="바탕">결과</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">홍길동</FONT><FONT FACE="Courier New">    </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 25</FONT></B>
<P>		<B><FONT FACE="바탕">이름</FONT><FONT FACE="Courier New">: </FONT><FONT FACE="바탕">허준</FONT><FONT FACE="Courier New">      </FONT><FONT FACE="바탕">나이</FONT><FONT FACE="Courier New">: 30        </FONT><FONT FACE="바탕">학번</FONT><FONT FACE="Courier New">: 20001234</FONT></B>
<BR>
<BR>
<P>
<IMG SRC="file:///C|/지빠귀/FYXIV149.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV150.GIF" BORDER=0 ALIGN=LEFT>
<IMG SRC="file:///C|/지빠귀/FYXIV151.GIF" BORDER=0 ALIGN=LEFT>
<P ALIGN=RIGHT><FONT SIZE=7 COLOR=WHITE><SPAN STYLE="font-size:35pt;"><FONT FACE="바탕">[AWT 프로그래밍]</FONT></SPAN></FONT>
<BR>
<P>
<BR></body>

</html>
