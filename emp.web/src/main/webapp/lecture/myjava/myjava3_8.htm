<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">3.8</P></td>
        <td width="518">
        <p class="TitleTitle"> 기타 Modifier</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P>&nbsp;이 부분에서는 지금까지 언급한 내용을 제외한 나머지 modifier를 설명하고자 한다. 하지만 사용 빈도가 높지 않기 때문에 개략적으로 이해하기 바란다. 
		</ul>
		<P class="TSubmenu">3.8.1 transient
		<ul>
		<P>변수에만 적용되는데, 객체 직렬화에서 transient로 지정된 변수는 직렬화에서 제외된다. 책의 후반부 I/O Programming에서 객체 직렬화를 설명할 때 언급된다.
		</ul>
		<P class="TSubmenu">3.8.2 native
		<ul>
		<P>- 메소드에만 적용된다.
		<P>- 몸체없이 메소드만을 선언하여 실제 구현부분은 자바가 아닌 C언어나 C++ 언어로 구현하여 사용한다.
		<P>- 자바로 구현이 불가능한 부분이나 특정 플랫폼에 최적화를 시켜서 성능을 극대화시키고자 할 때 사용한다.
		</ul>
		<P class="TSubmenu">3.8.3 synchronized
		<ul>
		<P>- 메소드와 범위에 적용된다.
		<P>- 멀티 쓰레드에서 프로그램 동기화 시키는데 사용되는 제한자이다.
		<P>- 락(Lock)을 걸어 한번에 하나의 쓰레드만 접근이 가능하도록 한다.
		</ul>
		<P class="TSubmenu">3.8.4 volatile
		<ul>
		<P>- 변수에만 적용된다.
		<P>- 다중 프로세서 환경에서 변수를 비동기적으로 변경할 수 있도록 지정하기 위한 제한자이다. 
		<P>- default로 선언되기 때문에 거의 사용하지 않는다. 
		<P>다음은 각 제한자의 적용범위를 나타낸 것이다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD COLSPAN=2 WIDTH=22%>
			<P ALIGN=CENTER>Modifier</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>Classes</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>Attributes</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>Methods</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>Constructors</TD>
		</tr>
		<TR>
			<TD ROWSPAN=4 WIDTH=8%>
			<P ALIGN=CENTER>Access</TD>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>public</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>O</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>protected</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X
			<P ALIGN=CENTER>inner class의 경우에는 가능</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>O</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>friendly
			<P ALIGN=CENTER>(공백)</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>O</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>private</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X
			<P ALIGN=CENTER>inner class의 경우에는 가능</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>Encapsulation - 정보 은닉화에 사용</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>클래스 안에서만 사용할 때</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>Singleton Design Pattern</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD COLSPAN=2 WIDTH=22%>
			<P ALIGN=CENTER>Modifier</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>Classes</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>Attributes</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>Methods</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>Constructors</TD>
		</tr>
		<TR>
			<TD ROWSPAN=6 WIDTH=8%>
			<P ALIGN=CENTER>Usage</TD>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>abstract</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>객체를 생성 못함, 상속 가능</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>body는 구현하지 않고 선언만 할 때</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>X</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>static</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>공유변수, 객체 생성 없이 변수에 참조</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>객체 생성 없이 참조</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>X</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>final</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>객체 생성 가능, 상속은 불가능</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>상수 값 선언 시, static과 같이 사용</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>final 메소드는 override 안됨</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>O</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>transient</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>객체 직렬화에 사용</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>X</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>synchronized</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>Lock-한번에 하나의 쓰레드만 접근 가능하게 함</TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>X</TD>
		</tr>
		<TR>
			<TD WIDTH=13%>
			<P ALIGN=CENTER>volatile</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>O
			<P ALIGN=CENTER>비동기화, 기본값</TD>
			<TD WIDTH=19%>
			<P ALIGN=CENTER>X
			<BR></TD>
			<TD WIDTH=18%>
			<P ALIGN=CENTER>X</TD>
		</tr>
		</TABLE>
		<P>▒ 생성자와 메소드 내에서 선언되는 변수는 Access Level Modifier를 사용할 수 없다.(<I>friendly</I>만 가능) 또한 static 제한자도 사용할 수 없다.
		</ul></td>
    </tr>
</table>
</body>
</html>