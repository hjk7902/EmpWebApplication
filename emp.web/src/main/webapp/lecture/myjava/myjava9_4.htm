<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">9.4</P></td>
        <td width="518">
        <p class="TitleTitle">TCP 채팅 프로그램 Ⅱ</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>
		<P> 다음 프로그램은 데이터를 이용한 채팅 예를 보인 것이다. 
		<P>
		<table BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ChatServer.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">&nbsp;
			<p class="CNumber">21:
			<p class="CNumber">&nbsp;
			<p class="CNumber">22:
			<p class="CNumber">&nbsp;
			<p class="CNumber">23:
			<p class="CNumber">&nbsp;
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">35:
			<p class="CNumber">36:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.io.*;
			<P class="CStep1">import java.net.*;
			<P class="CStep1">import java.util.*;
			<P class="CStep1">public class ChatServer {
			<P class="CStep2">Vector buffer;
			<P class="CStep2">ServerSocket serverSocket;
			<P class="CStep2">Socket socket;
			<P class="CStep2">ObjectInputStream ois;
			<P class="CStep2">ObjectOutputStream oos;
			<P class="CStep2">public void service() {
			<P class="CStep3">try {
			<P class="CStep4">System.out.println(&quot;접속 준비중&quot;);
			<P class="CStep4">serverSocket = new ServerSocket(5555);
			<P class="CStep3">} catch (IOException e) {
			<P class="CStep4">System.err.println(&quot;서비스도중 IOException 	발생!&quot;);
			<P class="CStep3">}
			<P class="CStep3">while(true) {
			<P class="CStep4">try {
			<P class="CStep5">socket = serverSocket.accept();
			<P class="CStep5">System.out.println(socket.getInetAddress()+
			<P class="CStep5">&quot;접속!&quot;);
			<P class="CStep5">ois = new ObjectInputStream(socket.
			<P class="CStep5">getInputStream());
			<P class="CStep5">oos = new ObjectOutputStream(socket.
			<P class="CStep5">getOutputStream());
			<P class="CStep5">Thread t = new Thread(new ChatServerThread
			<P class="CStep5">(buffer,ois,oos));
			<P class="CStep5">t.start();
			<P class="CStep4">} catch (IOException e) {
			<P class="CStep5">System.err.println(&quot;IOException 발생!&quot;);
			<P class="CStep4">}
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep2">public static void main(String args[]) {
			<P class="CStep3">System.out.println(&quot;Start Server Service...&quot;);
			<P class="CStep3">ChatServer cs = new ChatServer();
			<P class="CStep3">cs.buffer = new Vector(5,1);
			<P class="CStep3">cs.service();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P> 다음 프로그램은 클라이언트 하나에 하나씩 만들어질 쓰레드이다. 클라이언트가 데이터객체를 보내면 Vector에 저장된 ObjectOutputStream을 이용해서 알리게 된다. 클라이언트가 종료되면 함께 종료된다.
		<P>
		<table BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ChatServerThread.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">&nbsp;
			<p class="CNumber">12:
			<p class="CNumber">&nbsp;
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">&nbsp;
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">&nbsp;
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">38:
			<p class="CNumber">39:
			<p class="CNumber">40:
			<p class="CNumber">41:
			<p class="CNumber">42:
			<p class="CNumber">43:
			<p class="CNumber">44:
			<p class="CNumber">45:
			<p class="CNumber">46:
			<p class="CNumber">47:
			<p class="CNumber">48:
			<p class="CNumber">49:
			<p class="CNumber">50:
			<p class="CNumber">51:
			<p class="CNumber">&nbsp;
			<p class="CNumber">52:
			<p class="CNumber">53:
			<p class="CNumber">54:
			<p class="CNumber">55:
			<p class="CNumber">56:
			<p class="CNumber">57:
			<p class="CNumber">58:
			<p class="CNumber">59:
			<p class="CNumber">60:
			<p class="CNumber">61:
			<p class="CNumber">62:
			<p class="CNumber">63:
			<p class="CNumber">64:
			<p class="CNumber">&nbsp;
			<p class="CNumber">65:
			<p class="CNumber">66:
			<p class="CNumber">67:
			<p class="CNumber">68:
			<p class="CNumber">69:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.io.*;
			<P class="CStep1">import java.util.*;
			<P class="CStep1">public class ChatServerThread implements Runnable{
			<P class="CStep2">Vector buffer;
			<P class="CStep2">ObjectInputStream ois;
			<P class="CStep2">ObjectOutputStream oos;
			<P class="CStep2">Data d;
			<P class="CStep2">boolean exit;
			<P class="CStep2">String name;
			<P class="CStep2">public ChatServerThread(Vector v, 
			<P class="CStep2">ObjectInputStream ois ,
			<P class="CStep2">ObjectOutputStream oos) {
			<P class="CStep3">this.buffer = v;
			<P class="CStep3">this.ois = ois;
			<P class="CStep3">this.oos = oos;
			<P class="CStep3">exit = false;
			<P class="CStep2">}
			<P class="CStep2">public void run() {
			<P class="CStep3">while(!exit) {
			<P class="CStep4">try {
			<P class="CStep5">d = (Data) ois.readObject();
			<P class="CStep4">} catch (ClassNotFoundException e) {
			<P class="CStep5">System.err.println(&quot;Data class를 찾을 수 	없음!&quot;);
			<P class="CStep4">} catch (OptionalDataException e1) {
			<P class="CStep5">System.err.println(&quot;OptionalDataException
			<P class="CStep5">발생!&quot;);
			<P class="CStep4">} catch (IOException e3) {
			<P class="CStep5">System.err.println(&quot;IOExcdetion이 발생!&quot;);
			<P class="CStep4">}
			<P class="CStep4">int state = d.getState();
			<P class="CStep4">if(state == Data.접속종료) {
			<P class="CStep5">exit = true;
			<P class="CStep5">d.setMessage(&quot;님이 종료하셨습니다.&quot;);
			<P class="CStep5">name = d.getName();
			<P class="CStep5">broadCasting();
			<P class="CStep5">for(int i = 0 ; i &lt;buffer.size() ; i++) {
			<P class="CStep6">if( ((Data)buffer.elementAt(i)).getName().
			<P class="CStep6">equals(name)) {
			<P class="CStep7">buffer.removeElementAt(i);
			<P class="CStep7">break;
			<P class="CStep6">}
			<P class="CStep5">}
			<P class="CStep5">try{ ois.close();
			<P class="CStep5">oos.close();
			<P class="CStep5">}catch(IOException ex){}
			<P class="CStep4">} else if(state == Data.처음접속) {
			<P class="CStep5">Vector userName = new Vector(5,1);
			<P class="CStep5">d.setOOS(oos);
			<P class="CStep5">buffer.addElement(d);
			<P class="CStep5">for(int i=0 ; i &lt; buffer.size() ; i++) {
			<P class="CStep6">userName.addElement(
			<P class="CStep2">((Data)buffer.elementAt(i)).getName() );
			<P class="CStep4">}
			<P class="CStep4">d.setUserName(userName);
			<P class="CStep4">System.out.println(&quot;broadCasting 시작&quot;);
			<P class="CStep4">broadCasting();
			<P class="CStep3">} else {
			<P class="CStep4">broadCasting();
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}
			<P class="CStep1">public void broadCasting() {
			<P class="CStep2">Vector v = (Vector)buffer.clone();
			<P class="CStep2">for(int i = 0 ; i &lt; v.size() ; i++ ) {
			<P class="CStep3">try {
			<P class="CStep4">((Data)v.elementAt(i)).getOOS().writeObject(d);
			<P class="CStep4">System.out.println(&quot;111&quot;);
			<P class="CStep4">} catch (IOException e) {
			<P class="CStep5">System.err.println(&quot;broadCasting method에서
			<P class="CStep5">IOException이 발생!&quot;);
			<P class="CStep5">e.printStackTrace();
			<P class="CStep4">}
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>다음 프로그램은 서버와 클라이언트 사이에 정보를 주고받기 위한 클래스의 예를 보인 것이다. 
		<P>
		<table BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>Data.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">&nbsp;
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">38:
			<p class="CNumber">39:
			<p class="CNumber">40:
			<p class="CNumber">41:
			<p class="CNumber">42:
			<p class="CNumber">43:
			<p class="CNumber">44:
			<p class="CNumber">45:
			<p class="CNumber">46:
			<p class="CNumber">47:
			<p class="CNumber">48:
			<p class="CNumber">49:
			<p class="CNumber">50:
			<p class="CNumber">51:
			<p class="CNumber">52:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.io.*;
			<P class="CStep1">import java.util.*;
			<P class="CStep1">public class Data implements Serializable{
			<P class="CStep2">private String message;
			<P class="CStep2">private String name;
			<P class="CStep2">private int state;
			<P class="CStep2">private transient ObjectOutputStream oos; 
			<P class="CStep2">private Vector userName;
			<P class="CStep2">public static final int 처음접속 = 0;
			<P class="CStep2">public static final int 접속종료 = -1;
			<P class="CStep2">public static final int 대화중 = 1;
			<P class="CStep2">public Data (String name, String message, int state,
			<P class="CStep2">ObjectOutputStream o)
			<P class="CStep2">{
			<P class="CStep3">this.name = name;
			<P class="CStep3">this.message = message;
			<P class="CStep3">this.state = state;
			<P class="CStep3">this.oos = o;
			<P class="CStep2">}
			<P class="CStep2">public Data (String name, String message, int state) {
			<P class="CStep3">this(name , message, state, null);
			<P class="CStep2">}
			<P class="CStep2">public String getMessage() {
			<P class="CStep3">return message;
			<P class="CStep2">}
			<P class="CStep2">public void setMessage(String s) {
			<P class="CStep3">message = s;
			<P class="CStep2">}
			<P class="CStep2">public String getName() {
			<P class="CStep3">return name;
			<P class="CStep2">}
			<P class="CStep2">public void setName(String s) {
			<P class="CStep2">name = s;
			<P class="CStep2">}
			<P class="CStep2">public int getState() {
			<P class="CStep3">return state;
			<P class="CStep2">}
			<P class="CStep2">public void setState(int i) {
			<P class="CStep3">state = i;
			<P class="CStep2">}
			<P class="CStep2">public ObjectOutputStream getOOS() {
			<P class="CStep3">return oos;
			<P class="CStep2">}
			<P class="CStep2">public void setOOS(ObjectOutputStream o) {
			<P class="CStep2">oos = o;
			<P class="CStep2">}
			<P class="CStep2">public Vector getUserName() {
			<P class="CStep3">return this.userName;
			<P class="CStep2">}
			<P class="CStep2">public void setUserName(Vector v) {
			<P class="CStep3">this.userName = v;
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ChatClient.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">&nbsp;
			<p class="CNumber">23:
			<p class="CNumber">&nbsp;
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">&nbsp;
			<p class="CNumber">27:
			<p class="CNumber">&nbsp;
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">&nbsp;
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">&nbsp;
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">38:
			<p class="CNumber">39:
			<p class="CNumber">40:
			<p class="CNumber">41:
			<p class="CNumber">42:
			<p class="CNumber">43:
			<p class="CNumber">44:
			<p class="CNumber">45:
			<p class="CNumber">46:
			<p class="CNumber">47:
			<p class="CNumber">48:
			<p class="CNumber">49:
			<p class="CNumber">50:
			<p class="CNumber">51:
			<p class="CNumber">52:
			<p class="CNumber">53:
			<p class="CNumber">54:
			<p class="CNumber">55:
			<p class="CNumber">56:
			<p class="CNumber">57:
			<p class="CNumber">58:
			<p class="CNumber">59:
			<p class="CNumber">60:
			<p class="CNumber">61:
			<p class="CNumber">62:
			<p class="CNumber">63:
			<p class="CNumber">&nbsp;
			<p class="CNumber">64:
			<p class="CNumber">65:
			<p class="CNumber">66:
			<p class="CNumber">67:
			<p class="CNumber">68:
			<p class="CNumber">69:
			<p class="CNumber">70:
			<p class="CNumber">71:
			<p class="CNumber">72:
			<p class="CNumber">73:
			<p class="CNumber">&nbsp;
			<p class="CNumber">74:
			<p class="CNumber">75:
			<p class="CNumber">76:
			<p class="CNumber">77:
			<p class="CNumber">78:
			<p class="CNumber">79:
			<p class="CNumber">80:
			<p class="CNumber">81:
			<p class="CNumber">82:
			<p class="CNumber">83:
			<p class="CNumber">84:
			<p class="CNumber">85:
			<p class="CNumber">86:
			<p class="CNumber">87:
			<p class="CNumber">88:
			<p class="CNumber">89:
			<p class="CNumber">90:
			<p class="CNumber">91:
			<p class="CNumber">92:
			<p class="CNumber">93:
			<p class="CNumber">94:
			<p class="CNumber">95:
			<p class="CNumber">96:
			<p class="CNumber">97:
			<p class="CNumber">98:
			<p class="CNumber">99:
			<p class="CNumber">&nbsp;
			<p class="CNumber">100:
			<p class="CNumber">&nbsp;
			<p class="CNumber">101:
			<p class="CNumber">102:
			<p class="CNumber">103:
			<p class="CNumber">104:
			<p class="CNumber">105:
			<p class="CNumber">106:
			<p class="CNumber">107:
			<p class="CNumber">108:
			<p class="CNumber">109:
			<p class="CNumber">110:
			<p class="CNumber">111:
			<p class="CNumber">&nbsp;
			<p class="CNumber">&nbsp;
			<p class="CNumber">112:
			<p class="CNumber">113:
			<p class="CNumber">114:
			<p class="CNumber">115:
			<p class="CNumber">&nbsp;
			<p class="CNumber">116:
			<p class="CNumber">117:
			<p class="CNumber">118:
			<p class="CNumber">119:
			<p class="CNumber">120:
			<p class="CNumber">&nbsp;
			<p class="CNumber">121:
			<p class="CNumber">122:
			<p class="CNumber">123:
			<p class="CNumber">124:
			<p class="CNumber">125:
			<p class="CNumber">126:
			<p class="CNumber">127:
			<p class="CNumber">&nbsp;
			<p class="CNumber">128:
			<p class="CNumber">&nbsp;
			<p class="CNumber">129:
			<p class="CNumber">130:
			<p class="CNumber">141:
			<p class="CNumber">142:
			<p class="CNumber">143:
			<p class="CNumber">144:
			<p class="CNumber">145:
			<p class="CNumber">146:
			<p class="CNumber">147:
			<p class="CNumber">148:
			<p class="CNumber">149:
			<p class="CNumber">150:
			<p class="CNumber">&nbsp;
			<p class="CNumber">151:
			<p class="CNumber">152:
			<p class="CNumber">&nbsp;
			<p class="CNumber">153:
			<p class="CNumber">154:
			<p class="CNumber">155:
			<p class="CNumber">156:
			<p class="CNumber">&nbsp;
			<p class="CNumber">157:
			<p class="CNumber">158:
			<p class="CNumber">&nbsp;
			<p class="CNumber">159:
			<p class="CNumber">160:
			<p class="CNumber">&nbsp;
			<p class="CNumber">161:
			<p class="CNumber">162:
			<p class="CNumber">163:
			<p class="CNumber">164:
			<p class="CNumber">165:
			<p class="CNumber">166:
			<p class="CNumber">167:
</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.io.*;
			<P class="CStep1">import java.net.*;
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class ChatClient {
			<P class="CStep2">Socket socket;
			<P class="CStep2">ObjectInputStream ois;
			<P class="CStep2">ObjectOutputStream oos;
			<P class="CStep2">Thread t;
			<P class="CStep2">Frame first , second;
			<P class="CStep2">Label state , commLabel , userLabel , serverLabel;
			<P class="CStep2">Label IDLabel , userCount;
			<P class="CStep2">TextArea commList;
			<P class="CStep2">List userList;
			<P class="CStep2">Button conn , transmission;
			<P class="CStep2">TextField stateTextField , transTextField;
			<P class="CStep2">TextField serverTextField , IDTextField;
			<P class="CStep2">String name;
			<P class="CStep2">ChatClientThread cct;
			<P class="CStep2">public void connection(String serverName , int port)
			<P class="CStep2">throws IOException{
			<P class="CStep3">socket = new Socket(serverName,port);
			<P class="CStep3">System.out.println(serverName + &quot;  에 접속!&quot;);
 			<P class="CStep3">oos = new ObjectOutputStream(socket.
			<P class="CStep3">getOutputStream());
			<P class="CStep3">ois = new ObjectInputStream(socket.getInputStream());
			<P class="CStep3">System.out.println(&quot;OutputStream을 열었습니다. &quot;);
			<P class="CStep3">Data d = new Data(IDTextField.getText(),
			<P class="CStep3">&quot;님이 접속하였습니다.&quot;, 
			<P class="CStep3">Data.처음접속);
			<P class="CStep3">System.out.println(&quot;Stream 연결에 성공하였습니다.&quot;);
			<P class="CStep3">oos.writeObject(d) ;
			<P class="CStep3">System.out.println(&quot;InputStream을 열었습니다. &quot;);
			<P class="CStep3">cct = new ChatClientThread(ois,this);
			<P class="CStep3">t = new Thread(cct);
			<P class="CStep3">t.start();
			<P class="CStep2">}
			<P class="CStep2">/** 처음 보여질 GUI화면 *************
			<P class="CStep3">Server의 이름과 User의 ID를 받아들여서,
			<P class="CStep3">Connection() 메소드를 호출한다.
			<P class="CStep2">*/
			<P class="CStep2">public void firstGo() {
			<P class="CStep3">first = new Frame(&quot;Chat Browser&quot;);
			<P class="CStep3">first.addWindowListener( new WindowAdapter() {
			<P class="CStep4">public void windowClosing(WindowEvent e) {
			<P class="CStep5">first.setVisible(false);
			<P class="CStep5">first.dispose();
			<P class="CStep5">System.exit(1);
			<P class="CStep4">}
			<P class="CStep3">});
			<P class="CStep3">Panel p = new Panel();
			<P class="CStep3">p.setLayout(new GridLayout(2,2));
			<P class="CStep3">serverLabel = new Label(&quot;Server&quot;,Label.CENTER);
			<P class="CStep3">IDLabel = new Label(&quot; I   D &quot;,Label.CENTER);
			<P class="CStep3">serverTextField = new TextField(0);
			<P class="CStep3">IDTextField = new TextField(0);
			<P class="CStep3">p.add(serverLabel);
			<P class="CStep3">p.add(serverTextField);
			<P class="CStep3">p.add(IDLabel);
			<P class="CStep3">p.add(IDTextField);
			<P class="CStep3">conn = new Button(&quot;연결&quot;);
			<P class="CStep3">conn.addActionListener( new ActionHandler());
			<P class="CStep3">first.add(p,&quot;Center&quot;);
			<P class="CStep3">first.add(conn,&quot;South&quot;);
			<P class="CStep3">first.setSize(300,100);
			<P class="CStep3">/* 화면의 중앙에 GUI가 보여질 수 있도록 하는 부분. *****
			<P class="CStep3">현재의 Screen Size을 얻어온 후 중앙부분에 Dispaly 한다.*/
			<P class="CStep3">Dimension d = first.getToolkit().getScreenSize();
			<P class="CStep2">first.setLocation(d.width/2 - first.getWidth()/2 , 
			<P class="CStep2">d.height/2 - first.getHeight()/2);
			<P class="CStep2">first.setResizable(false);
			<P class="CStep2">first.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">/**
			<P class="CStep2">두번째로 보여질 GUI Chatting에 필요한 TextField와
			<P class="CStep2">현재 접속되어 있는 사용자의 이름,그리고 
			<P class="CStep2">대화 내용이 Display될 화면이다.</p>
			<P class="CStep2">*/
			<P class="CStep2">public void secondGo() {
			<P class="CStep3">second = new Frame(&quot;Chat v1.0 second&quot;);
			<P class="CStep3">second.addWindowListener(new WindowAdapter() {
			<P class="CStep4">public void windowClosing(WindowEvent e) {
			<P class="CStep5">frameClose(e);
			<P class="CStep4">}
			<P class="CStep3">});
			<P class="CStep3">state = new Label(&quot;접속중...&quot;);
			<P class="CStep3">state.setBackground(Color.yellow);
			<P class="CStep3">state.setForeground(Color.blue);
			<P class="CStep3">second.add(state,&quot;North&quot;);
			<P class="CStep3">Panel p1 = new Panel();
			<P class="CStep3">p1.setLayout(new BorderLayout());
			<P class="CStep3">commLabel = new Label(&quot;대화내용&quot;);
			<P class="CStep3">commList = new TextArea();
			<P class="CStep3">commList.setEditable(false);
			<P class="CStep3">p1.add(commLabel,&quot;North&quot;);
			<P class="CStep3">p1.add(commList,&quot;Center&quot;);
			<P class="CStep3">Panel p2 = new Panel();
			<P class="CStep3">p2.setLayout(new BorderLayout());
			<P class="CStep3">userLabel = new Label(&quot;사용자명&quot;,Label.CENTER);
			<P class="CStep3">userList = new List();
			<P class="CStep3">userCount = new Label(&quot;&quot;,Label.CENTER);
			<P class="CStep3">p2.add(userLabel,&quot;North&quot;);
			<P class="CStep3">p2.add(userList,&quot;Center&quot;);
			<P class="CStep3">p2.add(userCount,&quot;South&quot;);
			<P class="CStep3">Panel p3 = new Panel();
			<P class="CStep3">transTextField = new TextField(50);
			<P class="CStep3">//transTextField.requestFocus();
			<P class="CStep3">// TextField에 커서가 깜박이게 한다.
			<P class="CStep3">transTextField.addActionListener
			<P class="CStep3">(new ActionHandler());
			<P class="CStep3">transmission = new Button(&quot;전송&quot;);
			<P class="CStep3">transmission.addActionListener(new ActionHandler());
			<P class="CStep3">p3.add(transTextField);
			<P class="CStep3">p3.add(transmission);
			<P class="CStep2">second.add(p3,&quot;South&quot;);
			<P class="CStep3">//이것을 먼저 선언해야 requestFocus 가 적용됨.
			<P class="CStep3">second.add(p1,&quot;Center&quot;);
			<P class="CStep3">second.add(p2,&quot;West&quot;);
			<P class="CStep3">second.setSize(600,500);
			<P class="CStep3">Dimension d = second.getToolkit().getScreenSize();
			<P class="CStep3">second.setLocation(d.width/2 - 
			<P class="CStep3">second.getWidth()/2 , d.height/2 -
			<P class="CStep3">second.getHeight()/2);
			<P class="CStep3">second.setResizable(false);
			<P class="CStep3">second.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public void frameClose(WindowEvent e) {
			<P class="CStep3">Frame f = (Frame) e.getSource();
			<P class="CStep3">f.setVisible(false);
			<P class="CStep3">f.dispose();
			<P class="CStep3">cct.exit = true;
			<P class="CStep3">try {
			<P class="CStep4">oos.writeObject(new Data(name,&quot;
			<P class="CStep4">님이 나가셨습니다.&quot;,Data.접속종료));
			<P class="CStep4">oos.close();
			<P class="CStep3">} catch (IOException e1) {
			<P class="CStep4">System.err.println(&quot;종료중 IOExcpetion이 발생!&quot;);
			<P class="CStep3">}
			<P class="CStep3">System.exit(0);
			<P class="CStep2">}
			<P class="CStep3">/*    Acrtion Event를 처리하는 Inner class
			<P class="CStep4">*/
			<P class="CStep5">public class ActionHandler implements
			<P class="CStep5">ActionListener{
			<P class="CStep6">public void actionPerformed(ActionEvent e) {
			<P class="CStep6">String actionCommand = e.getActionCommand();
			<P class="CStep6">if(actionCommand.equals(&quot;연결&quot;)) {
			<P class="CStep6">String server = serverTextField.getText();
			<P class="CStep6">name = IDTextField.getText();
			<P class="CStep6">first.setVisible(false);
			<P class="CStep6">first.dispose();
			<P class="CStep6">secondGo();
			<P class="CStep6">try {
			<P class="CStep7">connection(server,5555);
			<P class="CStep6">} catch (IOException e1) {
			<P class="CStep7">System.err.println(&quot;Connection 중
			<P class="CStep7">Exception이 발생하였습니다.&quot;);
			<P class="CStep6">}
			<P class="CStep6">state.setText(&quot;[ &quot; + server +&quot; ]&quot; + &quot;
			<P class="CStep6"> 에 접속되었습니다. --UserID : &quot; + name);
			<P class="CStep5">} else if ( actionCommand.equals(&quot;전송&quot;) ||
			<P class="CStep5"> e.getSource().equals(transTextField)) {
			<P class="CStep5">try {
			<P class="CStep6">oos.writeObject(new Data(name,transTextField.
			<P class="CStep6">getText(),Data.대화중));
			<P class="CStep7">} catch (IOException e2) {
			<P class="CStep5">System.err.println(&quot;대화중
			<P class="CStep5">IOException이 발생하였습니다 &quot;);
			<P class="CStep6">}
			<P class="CStep5">transTextField.setText(&quot;&quot;);
			<P class="CStep5">}
			<P class="CStep4">}
			<P class="CStep3">}
			<P class="CStep2">public static void main(String args[]) {
			<P class="CStep3">ChatClient cc = new ChatClient();
			<P class="CStep4">cc.firstGo();
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ChatClientThread.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">&nbsp;
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">&nbsp;
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">&nbsp;
			<p class="CNumber">20:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">&nbsp;
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">&nbsp;
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">38:
			<p class="CNumber">39:
			<p class="CNumber">&nbsp;
			<p class="CNumber">&nbsp;	
			<p class="CNumber">40:
			<p class="CNumber">41:
			<p class="CNumber">42:
			</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.io.*;
			<P class="CStep1">import java.util.*;
			<P class="CStep1">public class ChatClientThread implements Runnable{
			<P class="CStep2">ObjectInputStream ois;
			<P class="CStep2">ChatClient cc;
			<P class="CStep2">Data d;
			<P class="CStep2">boolean exit = false;
			<P class="CStep2">public ChatClientThread(ObjectInputStream ois,
			<P class="CStep2">ChatClient cc) {
			<P class="CStep3">this.ois = ois;
			<P class="CStep3">this.cc = cc;
			<P class="CStep2">}
			<P class="CStep2">public void run() {
			<P class="CStep3">while(!exit) {
			<P class="CStep4">try {
			<P class="CStep5">d = (Data) ois.readObject();
			<P class="CStep4">} catch (IOException e) {
			<P class="CStep5">System.err.println(&quot;run method IOException&quot;);
			<P class="CStep4">} catch (ClassNotFoundException e1) {
			<P class="CStep5">System.err.println(&quot;Data class NotFound&quot;);
			<P class="CStep4">}
			<P class="CStep4">int state = d.getState();
			<P class="CStep4">String name = d.getName();
			<P class="CStep4">if(state == Data.처음접속) {
			<P class="CStep5">Vector userName = d.getUserName();
			<P class="CStep5">cc.userList.removeAll();
			<P class="CStep5">for(int i = 0 ; i &lt; userName.size() ; i++) {
			<P class="CStep6">cc.userList.add((String)
			<P class="CStep6">userName.elementAt(i));
			<P class="CStep5">}
			<P class="CStep6">cc.userCount.setText(&quot;현재 &quot; +
			<P class="CStep6"> cc.userList.getItemCount() + &quot;명 접속중&quot;);
			<P class="CStep5">} else if (state == Data.접속종료) {
			<P class="CStep6">cc.userList.remove(name);
			<P class="CStep6">cc.userCount.setText(&quot;현재 &quot; +
			<P class="CStep6"> 	cc.userList.getItemCount() + &quot;명 접속중&quot;);
			<P class="CStep5">}
			<P class="CStep5">cc.commList.append(&quot;[ &quot; + name +
			<P class="CStep5">&quot; ]&quot; + d.getMessage() + &quot;\n&quot;)4;
			<P class="CStep4">}
			<P class="CStep5">try {
			<P class="CStep4">ois.close();
			<P class="CStep5">} catch (IOException e) {
			<P class="CStep5">System.err.println(&quot; ChatClientThread에의  
			<P class="CStep5">ObjectOutputStream을 Close하는 중에
			<P class="CStep5">IOException 발생!&quot;);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep1">}		</TD>
		</tr>
		</TABLE>
		</ul></td>
    </tr>
	</table>
</body>
</html>