<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>

<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">

	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76"bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">1.6</P></td>
        <td width="518">
        <p class="TitleTitle" align="left"><font size=4><font size=4>&nbsp;</font></font>패키지(package)</p></td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
        <ul>
		<P>클래스에는 크게 2가지 종류가 있는데, 하나는 사용자가 직접 만들어 사용하는 것이고, 다른 하나는 JDK 안에 포함되어있거나, 혹은 누군가가 만들어 놓은 클래스가 있다. 그런데 이런 클래스가 매우 많기 때문에 서로 관계 있는 것끼리 모아놓은 묶음을 패키지라고 한다. 자바소스코드에서 java.lang, java.io란 코드를 볼 수 있는데, 바로  패키지를 나타낸 것이다.
		<P>예를 들어 java.lang 란 패키지 안에는 수많은 클래스가 포함되어 있는데 이 들은 자바가 수행될 때 필수적으로 사용되는 기본적인 클래스를 모아놓은 것이다. 따라서 모든 자바 소스코드에는 반드시 이 패키지가 포함되어야 한다. 물론 이 패키지는 자동으로 포함된다. 자바소스코드에 특정한 패키지를 포함시키려면 import라는 키워드를 사용하며, 사용 방법은 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%><p class="TStep1">import java.lang.*;</TD>
		</tr>
		</TABLE>
		<P>여기서 &quot;*&quot; 기호는 &quot;java.lang 패키지에 있는 모든 클래스를 사용한다.&quot;라는 의미이다. (사실 import 구문은 C 언어의 include 구문과 유사하다.)
		<P>다음은 일반적인 자바 소스코드의 레이아웃이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">package xxx;
			<p class="TStep1">import xxx.xxx.*;
			<p class="TStep1">class 선언
			<p class="TStep1">...</TD>
		</tr>
		</TABLE>
		<P>package 선언문은 사용자가 만든 클래스를 어느 패키지로 묶을것인가를 지정하는 구문이며, import 선언문은 기존에 있던 패키지 안에 있는 클래스를 사용하겠다는 의미이다. 그 다음의 class 선언은 사용자가 만들어서 이용할 클래스를 나타낸다.
		<P>일단 예제 프로그램부터 다시 보자.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>HelloWorld.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">public class HelloWorld {
			<P class="CStep2">public static void main (String[] args) {
			<P class="CStep3">System.out.println (&quot;Hello World!&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>위의 프로그램에서 패키지 구문은 생략되었는데, 이처럼 생략되면 패키지는 만들어지지 않고, 현재 폴더에 클래스 파일만 생성된다. 또 위 프로그램에서 import 구문도 생략되었는데, 이렇게 생략하면 java.lang 패키지가 자동으로 import된다. 즉 import java.lang.*; 구문은 코딩을 하거나 하지 않거나 결과는 마찬가지이다. 예를 들어 만약 file i/o를 하고자 하는데, 관련 클래스가 필요하다면 java.io 패키지를 import하면 된다. 사용 예는 다음과 같다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><p class="TStep1">import java.io.*;</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">1.6.1 패키지 선언
		<ul>
		<P>사용자가 임의로 패키지를 만들려면 프로그램의 맨 위에 패키지 구문을 포함시키면 된다. 
		<P>사용 예는 다음과 같다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%><P>HelloWorld.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<P class="CNumber">1:
			<P class="CNumber">2:
			<P class="CNumber">3:
			<P class="CNumber">4:
			<P class="CNumber">5:
			<P class="CNumber">6:
			<P class="CNumber">7:
			<P class="CNumber">8:
			<P class="CNumber">9:</TD>
			<TD WIDTH=92%>
			<P class="CStep1"><B>package test.sample;</B>
			<P class="CStep1">//
			<P class="CStep1">// Sample HelloWorld application
			<P class="CStep1">//
			<P class="CStep1">public class HelloWorld {
			<P class="CStep2">public static void main (String[] args) {
			<P class="CStep3">System.out.println (&quot;Hello World!&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>이 때 유의할 점은 위와 같이 package를 선언한 다음 컴파일 할 때 다음과 같이 -d 옵션을 주어야만 패키지가 생성된다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%><p class="TStep1">javac  -d  <I>패키지가만들어질경로  자바소스파일</I></TD>
		</tr>
		</TABLE>
		<P>위 프로그램의 예에서 패키지를 현재 경로에 만들려면 다음 예와 같이 기술한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=100%>
			<p class="TStep1"> &gt; javac <B>-d</B> . test/sample/HelloWorld.java</TD>
		</tr>
		</TABLE>
		<P>여기서 -d 다음의 점(.)은 현재 폴더를 의미한다. 즉 현재 폴더에 패키지를 생성하겠다는 의미이다. 이와 같이 컴파일을 하면 현재 폴더에 test란 디렉토리가 만들어지고 그 아래에 다시 sample이란 디렉토리가 만들어진 후 그 아래에 HelloWorld.class 파일이 생성된다.
		<P>위의 파일을 컴파일 한 후 HelloWorld.class를 실행하려면 다음과 같이 입력한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=100%>
			<p class="TStep1"> &gt; java test.sample.HelloWorld</TD>
		</tr>
		</TABLE>
		<P>만약 다른 클래스에서 위의 클래스를 사용하려면 다음과 같이 import 구문을 이용한다.
		<P>
		<TABLE BORDER=1 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></TD>
			<TD WIDTH=92%>
			<p class="TStep1">import test.sample.HelloWorld;</TD>
		</tr>
		</TABLE>
		<P>물론 이와 같이 import문을 사용하였을 때는 컴파일하기 전에 해당되는 클래스 파일의 경로가 설정되어 있어야 한다. 클래스 파일경로 설정 방법은 도스에서는 다음과 같이 기술한다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=2%></TD>
			<TD WIDTH=97%>
			<p class="TStep1">set classpath = %classpath%;<I>클래스파일절대경로명</I></TD>
		</tr>
		</TABLE>
		<ul></td>
    </tr>
</table>
</body>
</html>