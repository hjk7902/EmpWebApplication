<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<link href="java.css" type="text/css">
</head>
<body bgcolor="white" text="black" link="blue" vlink="purple" alink="red">
	<table cellpadding="0" cellspacing="0" width="650">
    <tr>
        <td width="76" bgcolor="#CCCCCC">
		<P class="TitleNumber" align="center">5.3</P></td>
        <td width="518">
		<p class="TitleTitle">주요 이벤트 클래스</td>
    </tr>
	</table>
	<table class="frame" border="0" cellpadding="0" cellspacing="2" width="650">
    <tr>
        <td width="1101">
		<ul>	
		<P>여기서는 각 이벤트별 리스너 인터페이스와 어댑터 클래스에 대해 설명하고 발생할 수 있는 메소드에 대해 구체적으로 언급하기로 한다.
		</ul>
		<P class="TSubmenu">5.3.1. ActionEvent
		<ul>
		<P>	Action 이벤트는 Button, List, MenuItem, TextField가 다음과 같은 상황일 때 발생된다.
		<P>- Button : 마우스를 누를 때
		<P>- List : 아이템을 선택하거나 선택을 해제했을 때
		<P>- MenuItem : 메뉴아이템을 선택했을 때
		<P>- TextField : 텍스트필드에서 엔터 키를 눌렀을 때
		<P>5.3.1.1 ActionListener
		<P> 동작(Action) 이벤트를 처리할 리스너의 기능을 정의하는 인터페이스이다. 따라서, 동작 이벤트를 처리하려면 이 인터페이스를 구현해야 하고, 객체를 생성한 후 컴포넌트의 addActionListener() 메소드를 이용하여 컴포넌트에 등록한다. 동작이 일어나면 해당 ActionListener의 actionPerformed() 메소드가 호출된다.
		<P> 5.3.1.2 ActionListener 메소드
		<P> &middot; void actionPerformed(ActionEvent e) : 동작이 발생할 때 호출된다.
		<P>다음 프로그램은 Action 이벤트의 사용 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ActionExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
		<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">38:
			<p class="CNumber">39:
			<p class="CNumber">40:
			<p class="CNumber">41:
			<p class="CNumber">42:
			<p class="CNumber">43:
			<p class="CNumber">44:
			<p class="CNumber">45:
			<p class="CNumber">46:
			<p class="CNumber">47:
			<p class="CNumber">48:
			<p class="CNumber">49:
			<p class="CNumber">50:
			<p class="CNumber">51:
			<p class="CNumber">52:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class ActionExample <B>implements ActionListener</B> {
			<P class="CStep2">private Frame f;
			<P class="CStep2">private MenuBar mb;
			<P class="CStep2">private Menu fileMenu;
			<P class="CStep2">private MenuItem exitItem;
			<P class="CStep2">private TextField inputField;
			<P class="CStep2">private Button sendButton;<P class="CStep1">	private Panel p = new Panel();
			<P class="CStep2">public ActionExample() {
			<P class="CStep3">f = new Frame(&quot;Action Event&quot;);
			<P class="CStep3">mb = new MenuBar();
			<P class="CStep3">fileMenu = new Menu(&quot;파일&quot;);
			<P class="CStep3">exitItem = new MenuItem(&quot;종료&quot;);
			<P class="CStep3">p = new Panel();
			<P class="CStep3">inputField = new TextField();
			<P class="CStep3">sendButton = new Button(&quot;Send&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.setMenuBar(mb);
			<P class="CStep3">mb.add(fileMenu);
			<P class="CStep3">fileMenu.add(exitItem);
			<P class="CStep3">p.setLayout(new BorderLayout());
			<P class="CStep3">p.add(inputField, BorderLayout.CENTER);
			<P class="CStep3">p.add(sendButton, BorderLayout.EAST);
			<P class="CStep3">f.add(p, BorderLayout.SOUTH);
			<P class="CStep3"><B>exitItem.addActionListener(this);</B>
			<P class="CStep3"><B>inputField.addActionListener(this);</B>
			<P class="CStep3"><B>sendButton.addActionListener(this);</B>
			<P class="CStep3">f.setSize(200, 200);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">ActionExample win = new ActionExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep3">}
			<P class="CStep3"><B>public void actionPerformed(ActionEvent e) </B>{
			<P class="CStep3">if(<B>e.getSource() == exitItem</B>) {
			<P class="CStep4">System.out.println(&quot;종료메뉴가 선택되었습니다&quot;);
			<P class="CStep4">System.exit(0);
			<P class="CStep3">}else if(<B>e.getSource() == inputField</B>) {
			<P class="CStep4">System.out.println(&quot;텍스트 필드에서 엔터 입력&quot;);
			<P class="CStep4">System.out.println(inputField.getText() + &quot;입력&quot;);
			<P class="CStep4">inputField.setText(&quot;&quot;);
			<P class="CStep3">}else if(<B>e.getSource() == sendButton</B>) {
			<P class="CStep4">System.out.println(&quot;버튼이 클릭되었습니다&quot;);
			<P class="CStep4">System.out.println(inputField.getText() + &quot;입력&quot;);
			<P class="CStep4">inputField.setText(&quot;&quot;);
			<P class="CStep3">}</TD>
			<P class="CStep2">}</TD>
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.2 AdjustmentEvent
		<ul>
		<P>스크롤바의 값이 변경되었을 때 발생한다.
		<P>5.3.2.1 AdjustmentListener 
		<P>리스너가 구현해야할 기능을 정의하고 있는 인터페이스로 Adjustment 이벤트를 처리하려면 이 인터페이스를 구현해야 한다.
		<P>AdjustmentListener를 사용하면 스크롤바 컴포넌트에 등록하기 위해 다음과 같은 메소드를 사용한다.
		<P> &middot; void addAdjustmentListener(AdjustmentListener l) : Adjustment Listener를 추가한다.
		<P> &middot; void removeAdjustmentListener(AdjustmentListener l) : 주어진 Listener를 제거한다.
		<P> 5.3.2.2 AdjustmentListener 메소드
		<P> &middot; void adjustmentValueChanged(AdjustmentEvent e) : 스크롤바 컴포넌트의 값이 변할 때 호출된다.
		<P>다음 프로그램은 Adjustment 이벤트를 사용하는 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>AdjustmentExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">&nbsp;
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class AdjustmentExample 
			<P class="CStep1"><B>implements AdjustmentListener </B>{
			<P class="CStep2">private Frame f;
			<P class="CStep2">private Scrollbar mySlider;
			<P class="CStep2">public AdjustmentExample() {
			<P class="CStep3">f = new Frame(&quot;Adjustment Event&quot;);
			<P class="CStep3">mySlider = new Scrollbar(Scrollbar.HORIZONTAL, 100, 20, 0, 255);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.add(mySlider, BorderLayout.SOUTH);
			<P class="CStep3"><B>mySlider.addAdjustmentListener(this);</B>
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">AdjustmentExample win = new AdjustmentExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void adjustmentValueChanged(AdjustmentEvent e) </B>{
			<P class="CStep3">System.out.println(<B>e.getValue()</B> + &quot;으로 값이 변경됨&quot;);
			<P class="CStep2">} 
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.3 ComponentEvent
		<ul>
		<P>MenuItem과 CheckboxMenuItem을 제외한 모든 컴포넌트에서 발생하는 이벤트이다.
		<P>5.3.3.1 ComponentListener 
		<P>Component 이벤트의 리스너를 정의한 인터페이스이며, 이벤트를 처리하려면 이 ComponentListener 인터페이스를 implements하여 메소드를 구현하거나 ComponentAdapter 클래스를 상속받아야 한다.
		<P>컴포넌트의 addComponentListener() 메소드에 의해 등록되며, 컴포넌트 크기나  위치 또는 가시화(Visibility) 등의 변화가 일어날 때 Component 이벤트가 발생한다.
		<P>5.3.3.2 ComponentAdapter 
		<P> Component 이벤트 처리를 위한 abstract adapter 클래스를 제공한다. 이 클래스는 ComponentListener 인터페이스가 정의하고 있는 메소드를 구현하고 있지만, 메소드의 몸체 부분은 비어 있기 때문에 처리하고자 하는 이벤트의 메소드만 재정의 해주면 된다.
		<P> 5.3.3.3 ComponentListener 메소드
		<P> &middot; void componentMoved(ComponentEvent e) : 컴포넌트 위치 변경시 호출된다.
		<P> &middot; void componentResized(ComponentEvent e) : 컴포넌트 크기 변경시 호출된다.
		<P> &middot; void componentShown(ComponentEvent e) : 컴포넌트를 보이게 할 때 호출된다.
		<P> &middot; void componentHidden(ComponentEvent e) : 컴포넌트를 보이지 않게 할 때 호출된다.
		<P> 
		다음 프로그램은 Component 이벤트의 사용 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>AdjustmentExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">&nbsp;
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class ComponentExample <B>implements ComponentListener </B>
			<P class="CStep1">{
			<P class="CStep2">private Frame f;
			<P class="CStep2">public ComponentExample() {
			<P class="CStep3">f = new Frame(&quot;Component Event&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>f.addComponentListener(this);</B>
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">ComponentExample win = new ComponentExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void componentMoved(ComponentEvent e) </B>{
			<P class="CStep3">System.out.println(e.getSource() + &quot; 위치 변경&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void componentResized(ComponentEvent e) </B>{
			<P class="CStep3">System.out.println(e.getSource() + &quot; 크기 변경&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void componentShown(ComponentEvent e) </B>{
			<P class="CStep3">System.out.println(e.getSource() + &quot;가 보여짐&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void componentHidden(ComponentEvent e) </B>{
			<P class="CStep3">System.out.println(e.getSource() + &quot;가 없어짐&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.4 ContainerEvent
		<ul>
		<P> 컨테이너에서 컴포넌트의 이동이나 크기 변경 또는 보이거나 보이지 않게 할 때 발생하는 저수준 이벤트이며, 단순하게 알려주는 목적으로 사용된다. AWT에서는 컴포넌트의 크기 변경 및 이동이 자동으로 처리되며, 이 이벤트 처리 여부에 상관없이 레이아웃을 수행하게 하는데 사용된다.
		<P>컴포넌트를 컨테이너에 추가하거나 삭제하면 컨테이너 이벤트가 발생되고 ContainerListener 또는 ContainerAdatper에 전달된다.
		<P> &middot; static int COMPONENT_ADDED : 컴포넌트 추가.
		<P> &middot; static int COMPONENT_REMOVED : 컴포넌트 제거.
		<P> &middot; static int CONTAINER_FIRST : 컨테이너 이벤트 id의 시작번호.
		<P> &middot; static int CONTAINER_LAST : 컨테이너 이벤트 id의 마지막번호.
		<P> &middot; Component getChild() : 이벤트에 영향을 받는 컴포넌트를 구한다.
		<P> &middot; Container getContainer() : 이벤트가 발생한 컴포넌트를 구한다.
		<P>5.3.4.1 ContainerListener 
		<P>Container 이벤트를 처리할 수 있는 기능을 정의하는 인터페이스로 이벤트를 처리할 클래스는 ContainerListener 인터페이스가 정의한 모든 메소드를 구현하거나, ContainerAdapter 클래스의 관련 메소드를 재정의 하여 상속받아야 한다.
		<P>5.3.4.2 ContainerAdapter 
		<P>컨테이너 이벤트를 처리할 추상 클래스를 제공한다. ContainerListener 인터페이스가 정의한 메소드를 구현하고 있지만 메소드의 몸체 부분은 비어 있다. 따라서, ContainerAdapter의 메소드 중 처리하고자 하는 메소드만 재 정의해준다.
		<P>5.3.4.3 ContainerListener 메소드
		<P> &middot; void componentAdded(ContainerEvent e) : 컴포넌트가 컨테이너에 추가될 때 호출된다.
		<P> &middot; void componentRemoved(ContainerEvent e) : 컴포넌트가 컨테이너에서 제거될 때 호출된다.
		<P>  다음 프로그램은 Container 이벤트의 사용 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ContainerExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">&nbsp;
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class ContainerExample <B>implements ContainerListener </B>
			<P class="CStep1">{
			<P class="CStep2">private Frame f;
			<P class="CStep2">private Button btn1;
			<P class="CStep2">public ContainerExample() {
			<P class="CStep3">f = new Frame(&quot;Container Event&quot;);
			<P class="CStep3">btn1 = new Button(&quot;Button&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>f.addContainerListener(this);</B>
			<P class="CStep3">f.add(btn1, BorderLayout.SOUTH);
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">ContainerExample win = new ContainerExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void componentAdded(ContainerEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;컴포넌트 추가됨&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void componentRemoved(ContainerEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;컴포넌트 삭제됨&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.5 FocusEvent
		<ul>
		<P>컴포넌트가 키보드 포커스를 얻거나 잃을 때 발생하는 저수준 이벤트이다. 이러한 이벤트는 MenuItem컴포넌트를 제외한 거의 모든 컴포넌트에서 발생하며, FocusListener 또는 FocusAdapter에 전달되고, 컴포넌트 클래스의 addFocusListener() 메소드를 이용하여 등록할 수 있다.
		<P>이 때, 포커스의 변화는 다음과 같은 두 가지 수준이 있다.
		<P>일시적인 포커스 변화 : requestFocus() 메소드를 호출하거나 탭 키로 컴포넌트간에 포커스를 이동시킬 때 발생하는 이벤트이다.
		<P>영구적인 포커스 변화 : 윈도우의 비활성화 또는 스크롤바의 끌기와 같이 다른 동작의 간접적인 결과로 발생하여, 일시적으로 포커스를 얻거나 잃을 때 발생하는 이벤트이다. 이런 경우 윈도우가 다시 활성화되거나 해당 동작이 끝나면 포커스는 자동으로 전 상태로 복구된다.
		<P>위의 두 가지 포커스 이벤트 모두 FOCUS_GAINED와 FOCUS_LOST 이벤트 id를 발생시키며, 이 때 isTemporary() 메소드를 이용하여 이벤트 종류를 얻을 수 있다.
		<P> &middot; static int FOCUS_FIRST : 포커스 이벤트 id의 시작번호.
		<P> &middot; static int FOCUS_LAST : 포커스 이벤트 id의 마지막번호.
		<P> &middot; static int FOCUS_GAINED : 포커스를 얻었음을 표시.
		<P> &middot; static int FOCUS_LOST : 포커스를 잃었음을 표시.
		<P> &middot; boolean isTemporary() : 포커스 변화 이벤트가 일시적인지 영구적인지를 구한다.
		<P>5.3.5.1 FocusListener 
		<P>포커스 이벤트를 처리할 기능을 정의하는 인터페이스이며, 처리할 클래스는 FocusListener가 정의한 모든 메소드를 구현하거나, 추상 클래스인 FocusAdapter 메소드를 재정의하여 상속받아야 한다.
		<P>5.3.5.2 FocusAdapter 
		<P>이 클래스는 FocusListener가 정의하고 있는 메소드를 구현하고 있지만, 몸체 부분은 비어 있어 FocusAdapter의 메소드 중 자신이 처리하고자 하는 메소드만 재정의 해주면 된다.
		<P>5.3.5.3 FocusListener 메소드
		<P> &middot; void focusGained(FocusEvent e) : 컴포넌트가 키보드 포커스를 얻었을 때 호출된다.
		<P> &middot; void focusLost(FocusEvent e) : 컴포넌트가 키보드 포커스를 잃었을 때 호출된다.
		<P>다음 프로그램은 Focus 이벤트의 사용 예를 보인 것이다. 
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>FocusExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class FocusExample <B>implements FocusListener</B> {
			<P class="CStep2">private Frame f;
			<P class="CStep2">private Button btn1;
			<P class="CStep2">private TextField textField;
			<P class="CStep2">public FocusExample() {
			<P class="CStep3">f = new Frame(&quot;Focus Event&quot;);
			<P class="CStep3">btn1 = new Button(&quot;Button1&quot;);
			<P class="CStep3">textField = new TextField();
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>btn1.addFocusListener(this);</B>
			<P class="CStep3"><B>textField.addFocusListener(this);</B>
			<P class="CStep3">f.add(btn1, BorderLayout.SOUTH);
			<P class="CStep3">f.add(textField, BorderLayout.NORTH);
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">FocusExample win = new FocusExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void focusGained(FocusEvent e) </B>{
			<P class="CStep3">System.out.println(e.getSource() + &quot;의 포커스 얻음&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void focusLost(FocusEvent e) </B>{
			<P class="CStep3">System.out.println(e.getSource() + &quot;의 포커스 잃음&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.6 KeyEvent
		<ul>
		<P>Input의 하위클래스로 컴포넌트 내에서 발생한 키 입력에 대한 기능을 제공해 준다. 텍스트필드류의 컴포넌트에서 발생할 수 있는 저수준 이벤트로, 키를 누르거나 놓거나 칠(타이프 pressed and released) 때 이벤트가 발생된다. 컴포넌트 클래스의 addKeyListener() 메소드에 의해 KeyListener 또는 KeyAdapter 객체에 전달된다.
		<P>&quot;Key typed&quot;는 고수준 이벤트로 플랫폼이나 키보드 레이아웃에 독립적이며, 문자가 입력되면 발생하고 문자를 정확하게 알 수 있는 방법을 제공해준다.
		<P>가장 간단한 경우 &quot;Key typed&quot;는 키의 눌림(pressed)과 놓임(released) 이벤트의 조합으로 만들어지며, 키를 계속 누르고 있을 때도 연속적인 &quot;Key typed&quot; 이벤트가 발생한다. 그러나, F1과 같은 동작 키 또는 Shift 키에 대해서는 이벤트가 발생하지 않는다.
		<P>getKeyChar()는 키에 해당하는 유니코드나 CHAR_UNDEFINED를 반환해준다. 키를 누르거나 놓을 경우 getKeyCode()가 키의 코드값을 반환하고, 키를 칠 때는 VK_UNDEFINED를 반환한다. &quot;Key pressed&quot;와 &quot;Key released&quot;는 저수준 이벤트로 플랫폼과 키보드 레이아웃에 의존한다. 이 이벤트는 키를 누르거나(눌려있는 상태) 놓을 때마다 생성되고, 문자 입력이 없는 F1 키와 Shift 키 등은 modifier 키가 눌렸는지를 알 수 있다. 
		<P>getKeyCode()를 이용하면 해당키에 대한 가상 키값을 알 수 있는데 예를 들어, Shift 키를 누르면 VK_SHIFT 코드를 갖는 KEY_PRESSED 이벤트가 발생하고, 'a'를 누르면 VK_A 코드를 갖는 KEY_PRESSED 이벤트가 발생한다. 또, 'a' 키를 놓으면 VK_A 코드를 갖는 KEY_RELEASED 이벤트가 발생한다. 물론, 이 때 KEY_TYPED 이벤트가 발생하고 그 때의 키문자는 'A'가 된다.
		<P>F1 키와 같이 문자로 나타나지 않는 키는 KEY_TYPED 이벤트를 발생시키지 못한다. 또 모든 키가 가상 키코드를 생성할 수 있는 것은 아니다. 
		<P>KeyEvent 클래스가 제공하는 기능을 살펴보면 다음과 같다.
		<P> &middot; static char CHAR_UNDEFINED : 유효하지 않은 유니코드 문자.
		<P> &middot; static int KEY_FIRST : 키 이벤트 id의 시작번호.
		<P> &middot; static int KEY_LAST : 키 이벤트 id의 마지막번호.
		<P> &middot; static int KEY_PRESSED : &quot;Key pressed&quot; 이벤트가 발생했음을 나타낸다.
		<P> &middot; static int KEY_RELEASED : &quot;Key released&quot; 이벤트가 발생했음을 나타낸다.
		<P> &middot; static int KEY_TYPED : &quot;Key typed&quot; 이벤트가 발생했음을 나타낸다.
		<P> &middot; static int VK_ : 가상 키코드 상수.
		<P> &middot; char getKeyChar() : 이벤트 내의 키와 관련된 문자를 얻는다.
		<P> &middot; int getKeyCode() : 이벤트 내의 키와 관련된 정수 키코드를 얻는다.
		<P> &middot; static String getKeyModifiersText(int modifiers) : &quot;Shift&quot; 또는 &quot;Ctrl+Shift&quot; 와 같은 문자열을 얻는다.
		<P> &middot; static String getKeyText(intkeyCode) : &quot;HOME&quot;, &quot;F1&quot; 또는 &quot;A&quot;와 같은 문자열을 얻는다.
		<P> &middot; boolean isActionKey() : 이벤트 내의 키가 동작키인지를 얻는다
		<P> &middot; String paramString() : 이벤트를 구분할 수 있는 매개변수 문자열을 얻는다.
		<P> &middot; void setKeyChar(char keyChar) : logical character를 나타내는 keyChar 값을 얻는다.
		<P> &middot; void setKeyCode(int keyCode) : physical key를 가리키는 keyCode 값을 설정한다.
		<P> &middot; void setModifiers(int modifiers) : shift, ctrl, alt, meta 등과 같은 추가적인 키를 나타내는 modifier를 설정한다.
		<P>5.3.6.1 KeyListener 
		<P>키 이벤트를 처리하는 기능을 가지고 있는 인터페이스이다. 처리하려는 클래스는 KeyListener가 정의한 모든 메소드를 구현하거나, KeyAdapter 클래스의 관련 메소드를 재정의하여 상속받아야 한다.
		<P>5.3.6.2 KeyAdapter
		<BR>
		<P>키 이벤트를 처리하는 추상 클래스로 KeyListener의 메소드를 구현하지만 메소드의 몸체 부분은 비어 있다. 처리하려는 이벤트의 메소드를 재정의해주면 된다.
		<P>5.3.6.3 KeyListener 메소드
		<P> &middot; void keyPressed(KeyEvent e) : 키를 누를 때 호출된다.
		<P> &middot; void keyReleased(KeyEvent e) : 키를 놓았을 때 호출된다.
		<P> &middot; void keyTyped(KeyEvent e) : 키를 칠(눌렀다 놓음) 때 호출된다.
		<P>다음 프로그램은 키 이벤트의 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TD WIDTH=7%>
		</td>
			<TD WIDTH=92%>
			<P>KeyExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class KeyExample <B>implements KeyListener </B>{
			<P class="CStep2">private Frame f;
			<P class="CStep2">private TextField textField;
			<P class="CStep2">public KeyExample() {
			<P class="CStep3">f = new Frame(&quot;Key Event&quot;);
			<P class="CStep3">textField = new TextField();
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>textField.addKeyListener(this);</B>
			<P class="CStep3">f.add(textField, BorderLayout.SOUTH);
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">KeyExample win = new KeyExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void keyPressed(KeyEvent e) </B>{
			<P class="CStep3">System.out.println(e.getKeyChar() + &quot; Pressed&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void keyReleased(KeyEvent e) </B>{
			<P class="CStep3">System.out.println(e.getKeyChar() + &quot; Released&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void keyTyped(KeyEvent e) </B>{
			<P class="CStep3">System.out.println(e.getKeyChar() + &quot; Typed&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.7 MouseEvent
		<ul>
		<P> 
		마우스 이벤트는 두 가지가 있는데 먼저 click, enter, exit 등과 같은 이벤트와 moves, drag 등의 동작 이벤트이다.
		<P>마우스 이벤트 객체는 컴포넌트 클래스의 MouseListener나 MouseAdapter 객체에 전달된다. Mouse- Event 객체는 컴포넌트 클래스의 addMouseMotionListener() 메소드를 이용하여 MouseMotion- Listener나 MouseMotionAdapter 객체에 전달된다. 마우스를 누르면 이벤트가 발생하고 modifier 필드에 저장된 후  MouseListeners 객체에 보내진다.
		<P> &middot; static int MOUSE_FIRST : 마우스 이벤트 id의 시작번호.
		<P> &middot; static int MOUSE_LAST : 마우스 이벤트 id의 마지막번호.
		<P> &middot; static int MOUSE_PRESSED : 마우스 버튼의 누른 상태를 나타낸다.
		<P> &middot; static int MOUSE_RELEASED : 마우스의 버튼이 놓였음을 나타낸다.
		<P> &middot; static int MOUSE_CLICKED : 마우스의 버튼이 클릭 되었음을 나타낸다.
		<P> &middot; static int MOUSE_ENTERED : 마우스가 컴포넌트의 영역 내로 들어왔음을 나타낸다.
		<P> &middot; static int MOUSE_EXITED : 마우스가 컴포넌트의 영역 밖으로 나갔음을 나타낸다.
		<P> &middot; static int MOUSE_MOVED : 마우스가 움직였음을 나타낸다.
		<P> &middot; static int MOUSE_DRAGGED : 마우스가 드래그 되었음을 나타낸다.
		<P> &middot; int getClickCount() : 마우스가 클릭 된 수를 얻는다.
		<P> &middot; Point getPoint() : 이벤트 소스 컴포넌트에 상대적인 마우스 커서의 좌표를 얻는다.
		<P> &middot; int getX() : 이벤트 소스 컴포넌트에 상대적인 마우스 커서의 x 좌표를 얻는다.
		<P> &middot; int getY() : 이벤트 소스 컴포넌트에 상대적인 마우스 커서의 y 좌표를 얻는다.
		<P> &middot; boolean isPopupTrigger() : 플랫폼을 위한 팝업 메뉴를 나타나게 할 이벤트인지를 얻는다.
		<P> &middot; void translatePoint(int x, int y) : 이벤트가 발생한 좌표를 현 좌표에서 수평으로 x값만큼, 수직으로 y값만큼 더한 새로운 위치로 옮긴다.
		<P>5.3.7.1 MouseListener
		<P>마우스 이벤트를 처리할 기능을 정의한 인터페이스이다. 마우스 이벤트를 처리하려면 MouseListener 인터페이스의 모든 메소드를 구현하거나, MouseAdapter 클래스의 관련 메소드를 재 정의하여 상속받아야 한다.
		<P>5.3.7.2 MouseAdapter
		<P>마우스 이벤트를 처리하는 abstract adapter 클래스로 MouseListener 인터페이스의 메소드를 구현해야하지만 메소드의 몸체 부분은 비어있다. 구현은 처리하고자 하는 이벤트의 메소드만 재정의해주면 된다.
		<P>5.3.7.3 MouseListener 메소드
		<P> &middot; void mouseClicked(MouseEvent e) : 컴포넌트에서 마우스를 클릭하면 호출된다.
		<P> &middot; void mouseEntered(MouseEvent e) : 마우스가 컴포넌트 영역 안으로 들어왔을 때 호출된다.
		<P> &middot; void mouseExited(MouseEvent e) : 마우스가 컴포넌트 영역 밖으로 나갈 때 호출된다.
		<P> &middot; void mousePressed(MouseEvent e) : 컴포넌트에서 마우스 버튼를 누르면 호출된다.
		<P> &middot; void mouseReleased(MouseEvent e) : 컴포넌트에서 마우스 버튼을 놓으면 호출된다.
		<P>5.3.7.4 MouseMotionListener 
		<P>마우스 동작 이벤트를 처리할 수 있는 기능을 가지고 있는 인터페이스로 MouseMotionListener 인터페이스의 모든 메소드를 구현하거나, MouseMotionAdapter의 관련 메소드를 재정의하여 상속받아야 한다.
		<P>5.3.7.5 MouseMotionAdapter 
		<P>마우스 동작 이벤트를 처리하는 클래스로 MouseMotionListener 인터페이스의 메소드를 구현하고 있지만, 메소드의 몸체 부분은 비어있다. 구현은 처리하고자 하는 이벤트의 메소드를 재정의해주면 된다.
		<P>5.3.7.6 MouseMotionListener 메소드
		<P> &middot; void mouseDragged(MouseEvent e) : 컴포넌트에서 마우스 버튼이 눌려진 상태로 드래그 될 때 호출된다.
		<P> &middot; void mouseMoved(MouseEvent e) : 컴포넌트에서 마우스가 움직일 때 호출된다.
		<P>다음 프로그램은 마우스 이벤트의 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>MouseExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">44:
			<p class="CNumber">45:
			<p class="CNumber">46:
			<p class="CNumber">47:
			<p class="CNumber">48:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class MouseExample <B>implements MouseListener</B> {
			<P class="CStep2">private Frame f;
			<P class="CStep2">public MouseExample() {
			<P class="CStep3">f = new Frame(&quot;Mouse Event&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.addMouseListener(this);
			<P class="CStep3">f.setSize(300, 200);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">MouseExample win = new MouseExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void mouseClicked(MouseEvent e) </B>{
			<P class="CStep3">if(<B>e.getModifiers()</B> == <B>MouseEvent.BUTTON1_MASK</B>) {
			<P class="CStep4">System.out.println(&quot;Left button clicked&quot;);
			<P class="CStep3">}else if(e.getModifiers() == <B>MouseEvent.BUTTON2_MASK</B>) {
			<P class="CStep4">System.out.println(&quot;Center button clicked&quot;);
			<P class="CStep3">}else if(e.getModifiers() == <B>MouseEvent.BUTTON3_MASK</B>) {
			<P class="CStep4">System.out.println(&quot;Right button clicked&quot;);
			<P class="CStep3">}
			<P class="CStep2">}
			<P class="CStep2"><B>public void mousePressed(MouseEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;mousePressed&quot;);
			<P class="CStep4">}
			<P class="CStep3"><B>public void mouseReleased(MouseEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;mouseReleased&quot;);
			<P class="CStep4">}
			<P class="CStep3"><B>public void mouseEntered(MouseEvent e) </B>{
			<P class="CStep4">System.out.println(&quot;mouseEntered&quot;);
			<P class="CStep3">}
			<P class="CStep3"><B>public void mouseExited(MouseEvent e) </B>{
			<P class="CStep4">System.out.println(&quot;mouseExited&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<p>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>MouseMotionExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class MouseMotionExample <B>implements MouseMotionListener</B>
			<P class="CStep1">{
			<P class="CStep2">private Frame f;
			<P class="CStep2">public MouseMotionExample() {
			<P class="CStep3">f = new Frame(&quot;Mouse Event&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.addMouseMotionListener(this);
			<P class="CStep3">f.setSize(300, 200);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">MouseMotionExample win = new MouseMotionExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2">B>public void mouseDragged(MouseEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;mouseDragged&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void mouseMoved(MouseEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;mouseMoved&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.8 ItemEvent
		<ul>
		<P>아이템의 선택과 선택해제 여부를 나타내는 시멘틱 이벤트이다. 리스트 컴포넌트처럼 ItemSelectable 객체가 생성하는 고수준 이벤트로, ItemSelectable 객체가 포함한 아이템이 선택되거나 선택해제된 경우 발생한다. 이 이벤트는 컴포넌트 클래스의 addItemListener() 메소드를 이용하여 모든 ItemListener 객체에 전달된다. 이 때, 리스너(Listener)는 마우스의 움직임이나 클릭 같은 개개의 이벤트는 알 필요가 없고 아이템이 선택되거나 선택해제되는 등의 의미 있는 이벤트만 인지하면 된다.
		<P> &middot; static int ITEM_FIRST : 아이템 이벤트 id의 시작번호를 나타낸다.
		<P> &middot; static int ITEM_LAST : 아이템 이벤트 id의 마지막번호를 나타낸다.
		<P> &middot; static int SELECTED : 선택 해제된 아이템이 다시 선택된 경우와 같이 상태변화를 나타낸다.
		<P> &middot; static int DESELECTED : 선택된 아이템이 선택해제된 경우의 상태변화를 나타낸다.
		<P> &middot; static int ITEM_STATE_CHANGED : 아이템의 상태가 변했음을 나타낸다.
		<P> &middot; Object getItem() : 이벤트가 발생한 아이템 객체를 얻는다
		<P> &middot; ItemSelectable getItemSelectable() : 이벤트가 발생한 소스 컴포넌트를 얻는다
		<P> &middot; int getStateChange() : 상태 변화의 종류를 얻는다
		<P>ItemSelectable 인터페이스는 선택 가능한 아이템을 갖는 컴포넌트의 기능을 정의하며 구체적인 기능을 살펴보면 다음과 같다.
		<P> &middot; void addItemListener(ItemListener l) : 아이템 Listener를 추가한다.
		<P> &middot; void removeItemListener(ItemListener l) : 주어진 아이템 Listener를 삭제한다.
		<P>5.3.8.1 ItemListener 
		<P>아이템 이벤트를 처리할 수 있는 기능을 가진 인터페이스로, 처리하려면 메소드를 구현해야 한다.
		<P>5.3.8.2 ItemListener 메소드
		<P> &middot; void itemStateChanged(ItemEvent e) : 아이템 상태가 변했을 때 호출된다.
		<P>다음 프로그램은 아이템 이벤트의 기능을 이해할 수 있는 예이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>ItemExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">&nbsp;
			<p class="CNumber">26:
			<p class="CNumber">27:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class ItemExample <B>implements ItemListener </B>{
			<P class="CStep2">private Frame f;
			<P class="CStep2">private List list;
			<P class="CStep2">public ItemExample() {
			<P class="CStep3">f = new Frame(&quot;Item Event&quot;);
			<P class="CStep3">list = new List();
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">list.add(&quot;Solaris&quot;);
			<P class="CStep3">list.add(&quot;Windows&quot;);
			<P class="CStep3">list.add(&quot;Mac&quot;);
			<P class="CStep3">list.add(&quot;MS-DOS&quot;);
			<P class="CStep3"><B>list.addItemListener(this);</B>
			<P class="CStep3">f.add(list, BorderLayout.CENTER);
			<P class="CStep3">f.pack();
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">ItemExample win = new ItemExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void itemStateChanged(ItemEvent e) </B>{
			<P class="CStep3">System.out.println(list.getSelectedItem() +
			<P class="CStep3">&quot;Selected&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.9 TextEvent
		<ul>
		<P>텍스트의 변화 유무를 나타내는 이벤트로 TextComponent 같은 객체에 의해 생성되는 고수준 이벤트이다. 객체에 포함된 텍스트가 변경되었 때 발생하며, TextComponent 클래스의 addTextListener() 메소드를 이용하여 TextListener 객체에 전달된다. 
		<P> &middot; static int TEXT_FIRST : 텍스트 이벤트 id의 시작번호.
		<P> &middot; static int TEXT_LAST : 텍스트 이벤트 id의 마지막번호.
		<P> &middot; static int TEXT_VALUE_CHANGED : 텍스트가 변했음을 나타낸다.
		<P>5.3.9.1 TextListener 
		<P>아이템 이벤트를 처리할 수 있는 인터페이스로 메소드를 구현해주면 된다.
		<P>5.3.9.2 TextListener 메소드
		<P> &middot; void textValueChanged(TextEvent e) : 텍스트의 내용이 변했을 때 호출된다.
		<P>다음 프로그램은 텍스트 이벤트를 이해할 수 있는 예제이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>TextExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class TextExample <B>implements TextListener </B>{
			<P class="CStep2">private Frame f;
			<P class="CStep2">private TextField textField;
			<P class="CStep2">public TextExample() {
			<P class="CStep3">f = new Frame(&quot;Text Event&quot;);
			<P class="CStep3">textField = new TextField();
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>textField.addTextListener(this);</B>
			<P class="CStep3">f.add(textField, BorderLayout.SOUTH);
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">TextExample win = new TextExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void textValueChanged(TextEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;Text Changed&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.10 WindowEvent
		<ul>
		<P> 
		윈도우 상태의 변화를 나타내는 저수준 이벤트로, 윈도우가 열리거나, 닫히거나, 닫히는 중이거나, 활성화/비활성화 되었거나, 아이콘화/정상화되었을 경우 윈도우 객체에 의해 발생된다. 이 이벤트는 윈도우 클래스의 addWindowListener() 메소드를 이용하여 WindowListener 또는 WindowAdapter 객체에 전달된다. 
		<P> &middot; static int WINDOW_ACTIVATED : 윈도우가 활성화되었음.
		<P> &middot; static int WINDOW_CLOSED : 윈도우가 닫혔음.
		<P> &middot; static int WINDOW_CLOSING : 윈도우가 닫히고 있음.
		<P> &middot; static int WINDOW_DEACTIVATED : 윈도우가 비활성화 되었음.
		<P> &middot; static int WINDOW_DEICONIFIED : 윈도우가 정상화 되었음.
		<P> &middot; static int WINDOW_FIRST : 윈도우 이벤트 id의 시작번호.
		<P> &middot; static int WINDOW_ICONIFIED : 윈도우가 아이콘화 되었음.
		<P> &middot; static int WINDOW_LAST : 윈도우 이벤트 id의 마지막번호.
		<P> &middot; static int WINDOW_OPENED : 윈도우가 열렸음.
		<P> &middot; Window getWindow() : 이벤트가 발생한 이벤트 소스 컴포넌트를 얻는다.
		<P>5.3.10.1 WindowListener 
		<P>윈도우 이벤트를 처리하는 인터페이스로 메소드를 구현하거나, WindowAdapter 클래스의 관련 메소드를 재정의하여 상속받아야 한다.
		<P>5.3.10.2 WindowFocusListener 
		<P>JDK 1.4에 추가된 인터페이스로 윈도우 포커스 변화 이벤트를 받는 인터페이스이다. 윈도우가 활성창이되어 포커스를 얻었을 때 호출되는 windowGainedFocus(WindowEvent) 메소드와  윈도우가 비 활성화 되어 포커스를 잃었을 때 호출되는 windowLostFocus(WindowEvent) 메소드를 가지고 있다.
		<P>5.3.10.3 WindowStateListener 
		<P>JDK 1.4에 추가된 인터페이스로 윈도우 상태 이벤트를 받기 위한 인터페이스이다. 윈도우가 아이콘화 되거나, 최대크기, 원래크기로의 상태가 변했을 때 호출되는 windowStateChanged(WindowEvent) 메소드를 가지고 있다.
		<P>5.3.10.4 WindowAdapter 
		<P>윈도우 이벤트를 처리하는 클래스로 WindowFocusListener, WindowListener, WindowState Listener 인터페이스를 정의하고 메소드를 구현한다. 
		<P>5.3.10.5 WindowListener 메소드
		<P> &middot; void windowActivated(WindowEvent e) : 윈도우가 활성화되었을 때 호출된다.
		<P> &middot; void windowClosed(WindowEvent e) : 윈도우가 닫혔을 때 호출된다.
		<P> &middot; void windowClosing(WindowEvent e) : 윈도우가 닫히고 있을 때 호출된다.
		<P> &middot; void windowDeactivated(WindowEvent e) : 윈도우가 비활성화 되었을 때 호출된다.
		<P> &middot; void windowDeiconified(WindowEvent e) : 윈도우가 정상 상태로 되었을 때 호출된다.
		<P> &middot; void windowIconified(WindowEvent e) : 윈도우가 아이콘화 되었을 때 호출된다.
		<P> &middot; void windowOpened(WindowEvent e) : 윈도우가 열렸을 때 호출된다.
		<P> 다음 프로그램은 윈도우 이벤트의 사용 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>WindowExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH="550">
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:
			<p class="CNumber">25:
			<p class="CNumber">26:
			<p class="CNumber">27:
			<p class="CNumber">28:
			<p class="CNumber">29:
			<p class="CNumber">30:
			<p class="CNumber">31:
			<p class="CNumber">32:
			<p class="CNumber">33:
			<p class="CNumber">34:
			<p class="CNumber">35:
			<p class="CNumber">36:
			<p class="CNumber">37:
			<p class="CNumber">38:
			<p class="CNumber">39:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class WindowExample <B>implements WindowListener </B>{
			<P class="CStep2">private Frame f;
			<P class="CStep2">public WindowExample() {
			<P class="CStep3">f = new Frame(&quot;Key Event&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>f.addWindowListener(this);</B>
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">WindowExample win = new WindowExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowOpened(WindowEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;windowOpened&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowClosing(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;windowClosing&quot;);
			<P class="CStep3">System.exit(0);
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowClosed(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;windowClosed&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowIconified(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;windowIconified&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowDeiconified(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;windowDeiconified&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowActivated(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;windowActivated&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowDeactivated(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;windowDeactivated&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>WindowFocusExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">&nbsp;
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:
			<p class="CNumber">21:
			<p class="CNumber">22:
			<p class="CNumber">23:
			<p class="CNumber">24:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class WindowFocusExample
			<P class="CStep2"><B>implements WindowFocusListener</B>
			<P class="CStep2">{
			<P class="CStep2">private Frame f;
			<P class="CStep2">public WindowFocusExample() {
			<P class="CStep3">f = new Frame(&quot;Key Event&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3">f.addWindowFocusListener(this);
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">WindowFocusExample win = new WindowFocusExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowGainedFocus(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;윈도우 포커스 얻음&quot;);
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowLostFocus(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;윈도우 포커스 잃음&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
		<P>WindowFocusExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">&nbsp;
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class WindowStateExample
			<P class="CStep2"><B>implements WindowStateListener</B> {
			<P class="CStep2">private Frame f;
			<P class="CStep2">public WindowStateExample() {
			<P class="CStep3">f = new Frame(&quot;Key Event&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>f.addWindowStateListener(this);</B>
			<P class="CStep3">f.setSize(300, 100);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">WindowStateExample win = new WindowStateExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void windowStateChanged(WindowEvent e)</B> {
			<P class="CStep3">System.out.println(&quot;윈도우 상태 변화&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		</ul>
		<P class="TSubmenu">5.3.11 MouseWheelEvent
		<ul>
		<P>JDK 1.4에 추가되었으며 휠마우스를 사용하기 위한 이벤트이다. 
		<P>5.3.11.1 MouseWheelListener 
		<P>휠마우스 이벤트를 처리하려면 mouseWheelMoved() 메소드를 구현한다.
		<P>5.3.11.2 MouseWheelListener 메소드
		<P> &middot; void mouseWheelMoved(MouseWheelEvent e) : 휠마우스의 휠을 움직였을 때 호출된다.
		<P>다음 프로그램은 MouseWheel 이벤트의 사용 예를 보인 것이다.
		<P>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
			<TD WIDTH=7%></td>
			<TD WIDTH=92%>
			<P>MouseWheelExample.java</TD>
		</tr>
		</TABLE>
		<TABLE BORDER=0 CELLPADDING=2 WIDTH=550>
		<TR>
			<TD WIDTH=7%>
			<p class="CNumber">1:
			<p class="CNumber">2:
			<p class="CNumber">3:
			<p class="CNumber">&nbsp;
			<p class="CNumber">4:
			<p class="CNumber">5:
			<p class="CNumber">6:
			<p class="CNumber">7:
			<p class="CNumber">8:
			<p class="CNumber">9:
			<p class="CNumber">10:
			<p class="CNumber">11:
			<p class="CNumber">12:
			<p class="CNumber">13:
			<p class="CNumber">14:
			<p class="CNumber">15:
			<p class="CNumber">16:
			<p class="CNumber">17:
			<p class="CNumber">18:
			<p class="CNumber">19:
			<p class="CNumber">20:</TD>
			<TD WIDTH=92%>
			<P class="CStep1">import java.awt.*;
			<P class="CStep1">import java.awt.event.*;
			<P class="CStep1">public class MouseWheelExample
			<P class="CStep2"><B>implements MouseWheelListener</B> {
			<P class="CStep2">private Frame f;
			<P class="CStep2">public MouseWheelExample() {
			<P class="CStep3">f = new Frame(&quot;MouseWheel Event&quot;);
			<P class="CStep2">}
			<P class="CStep2">public void launchFrame() {
			<P class="CStep3"><B>f.addMouseWheelListener(this);</B>
			<P class="CStep3">f.setSize(300, 200);
			<P class="CStep3">f.setVisible(true);
			<P class="CStep2">}
			<P class="CStep2">public static void main(String[] args) {
			<P class="CStep3">MouseWheelExample win = new MouseWheelExample();
			<P class="CStep3">win.launchFrame();
			<P class="CStep2">}
			<P class="CStep2"><B>public void mouseWheelMoved(MouseWheelEvent e) </B>{
			<P class="CStep3">System.out.println(&quot;Mouse Wheel Changed&quot;);
			<P class="CStep2">}
			<P class="CStep1">}</TD>
		</tr>
		</TABLE>
		<P>이 외에도 여러 가지 이벤트가 있지만 본 교재에서 모두 언급할 수는 없으므로 API Document를 참고하기 바란다.
		</ul></td>
    </tr>
	</table>
</body>
</html>